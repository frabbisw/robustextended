{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) return true\n    if (Math.abs(numbers[i] - numbers[i - 1]) > diff) return false\n  }\n  return true\n}\n\n/*\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS8 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const stack = []\n  const result = []\n  const stack_index = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string.charAt(paren_string_index)\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_index)\n    } else if (paren_string_char === ')') {\n      stack_index = stack.pop()\n      if (stack_index === undefined) {\n        result.push(paren_string.slice(paren_string_index, paren_string_length))\n        break\n      }\n    }\n    paren_string_index++\n    paren_string_char = paren_string.charAt(paren_string_index)\n  }\n  return result\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_2 = (paren_string) => {\n  const stack = []\n  const result = []\n  const stack_index = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string.charAt(paren_string_index)\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_index)\n    } else if (paren_string_char === ')') {\n      stack_index = stack.pop()\n      if (stack_index === undefined) {\n        result.push(paren_string.slice(paren_string_index, paren_string_length))\n        break\n      }\n    }\n    paren_string_index++\n    paren_string_char = paren_string.charAt(paren_string_index)\n  }\n  return result\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_3 = (paren_string) => {\n  const stack = []\n  const result = []\n  const stack_index = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string.charAt(paren_string_index)\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_index)\n    } else if (paren_string_char === ')') {\n      stack_index = stack.pop()\n      if (stack_index === undefined) {\n        result.push(paren_string.slice(paren_string_index, paren_string_length))\n        break\n      }\n    }\n    paren_string_index++\n    paren_string_char = paren_string.charAt(paren_string_index)\n  }\n  return result\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_4 = (paren_string) => {\n  const stack = []\n  const result = []\n  const stack_index = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string.charAt(paren_string_index)\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_index)\n    } else if (paren_string_char === ')') {\n      stack_index = stack.pop()\n      if (stack_index === undefined) {\n        result.push(paren_string.slice(paren_string_index, paren_string_length))\n        break\n      }\n    }\n    paren_string_index++\n    paren_string_char = paren_string.charAt(paren_string_index)\n  }\n  return result\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_5 = (paren_string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPAlinDrome(string.slice(i, j + 1))) {\n      i++;\n    }\n    while (i < j &&!isPAlinDrome(string.slice(j, i + 1))) {\n      j--;\n    }\n    if (i < j) {\n      prefix += string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.slice(i, j + 1))) {\n      i++;\n    }\n    while (i < j &&!isPalindrome(string.slice(j, i + 1))) {\n      j--;\n    }\n    if (i < j) {\n      prefix += string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.slice(i, j + 1))) {\n      i++;\n    }\n    while (i < j &&!isPalindrome(string.slice(j, i + 1))) {\n      j--;\n    }\n    if (i < j) {\n      prefix += string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.slice(i, j + 1))) {\n      i++;\n    }\n    while (i < j &&!isPalindrome(string.slice(j, i + 1))) {\n      j--;\n    }\n    if (i < j) {\n      prefix += string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe3 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe4 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe5 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe6 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe7 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe8 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe9 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe10 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe11 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe12 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe13 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe14 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe15 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe16 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe17 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe18 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe19 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe20 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe21 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe22 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe23 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe24 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe25 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe26 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing2 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing3 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing4 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing5 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing6 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing7 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing8 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing9 = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing10 = (s) => {\n  let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst main = () => {\n  const x = choOseNUm(12, 15);\n  console.log(x);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  const nbits = Math.floor(Math.log(n) / Math.log(2));\n  const mbits = Math.floor(Math.log(m) / Math.log(2));\n  const nbits_m = nbits - mbits;\n  const nbits_m_1 = nbits_m - 1;\n  const nbits_m_1_1 = nbits_m_1 - 1;\n  const nbits_m_1_1_1 = nbits_m_1_1 - 1;\n  const nbits_m_1_1_1_1 = nbits_m_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1 = nbits_m_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1 = nbits_m_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 - 1;\n  const nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 = nbits_m_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1 -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let numStr = num.toString();\n    let numDigits = numStr.length;\n    let numDigitsStr = numStr.split('');\n    let evenDigits = numDigitsStr.filter(x => x % 2 === 0);\n    if (evenDigits.length === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniQueDIgits([15, 33, 1422, 1]));\nconsole.log(uniQueDIgits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byLenght = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.length, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byName = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a.name - b.name)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.name, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byNameLenght = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a.name.length - b.name.length)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.name.length, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byNameLength = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a.name.length - b.name.length)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.name.length, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byNameLengthReverse = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => b.name.length - a.name.length)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.name.length, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byNameLengthReverseLenght = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => b.name.length - a.name.length)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.name.length, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byNameLengthReverseLenghtLenght = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a.name.length - b.name.length)\n  const reversed = sorted.reverse()\n  const names = [...reversed,...sorted]\n  return names.map((n) => {\n    const num = parseInt(n.name.length, 10)\n    if (num < 1 || num > 9) {\n      return n\n    }\n    return names[num - 1]\n  })\n}\n\nconst byNameLengthReverseLenghtLenghtLenght = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = arr.slice().sort((a, b) => a.name.length - b.name.length)\n  const reversed = sorted.reverse()\n  const names = [...", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = f(5);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport default eveNOddpalinDroMe;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const len = arr.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += arr[i]\n  }\n  return sum > 0? len : 0\n}\n\nconsole.log(couNtNuMs([-1, 11, -11]))\nconsole.log(couNtNuMs([1, 1, 2]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\nconsole.log(couNtNuMs([-1, 11, -11, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst movEOneballTest = () => {\n  let arr = [3, 4, 5, 1, 2];\n  console.log(movEOneball(arr));\n};\n\nmovEOneballTest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr2 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr3 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr4 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr5 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr6 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr7 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr8 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr9 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr10 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr11 = (a,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Even = lst1.filter(x => x % 2 === 0);\n  const lst2Even = lst2.filter(x => x % 2 === 0);\n  if (lst1Len === 0 || lst2Len === 0) {\n    return \"NO\";\n  }\n  if (lst1Len === 1 && lst2Len === 1) {\n    return \"YES\";\n  }\n  if (lst1Len === 1 && lst2Len === 2) {\n    return \"NO\";\n  }\n  if (lst1Len === 2 && lst2Len === 1) {\n    return \"NO\";\n  }\n  if (lst1Len === 2 && lst2Len === 2) {\n    return \"YES\";\n  }\n  if (lst1Len === 2 && lst2Len === 3) {\n    return \"NO\";\n  }\n  if (lst1Len === 3 && lst2Len === 2) {\n    return \"NO\";\n  }\n  if (lst1Len === 3 && lst2Len === 3) {\n    return \"YES\";\n  }\n  if (lst1Len === 3 && lst2Len === 4) {\n    return \"NO\";\n  }\n  if (lst1Len === 4 && lst2Len === 3) {\n    return \"NO\";\n  }\n  if (lst1Len === 4 && lst2Len === 4) {\n    return \"YES\";\n  }\n  if (lst1Len === 4 && lst2Len === 5) {\n    return \"NO\";\n  }\n  if (lst1Len === 5 && lst2Len === 4) {\n    return \"NO\";\n  }\n  if (lst1Len === 5 && lst2Len === 5) {\n    return \"YES\";\n  }\n  if (lst1Len === 5 && lst2Len === 6) {\n    return \"NO\";\n  }\n  if (lst1Len === 6 && lst2Len === 5) {\n    return \"NO\";\n  }\n  if (lst1Len === 6 && lst2Len === 6) {\n    return \"YES\";\n  }\n  if (lst1Len === 6 && lst2Len === 7) {\n    return \"NO\";\n  }\n  if (lst1Len === 7 && lst2Len === 6) {\n    return \"NO\";\n  }\n  if (lst1Len === 7 && lst2Len === 7) {\n    return \"YES\";\n  }\n  if (lst1Len === 7 && lst2Len === 8) {\n    return \"NO\";\n  }\n  if (lst1Len === 8 && lst2Len === 7) {\n    return \"NO\";\n  }\n  if (lst1Len === 8 && lst2Len === 8) {\n    return \"YES\";\n  }\n  if (lst1Len === 8 && lst2Len === 9) {\n    return \"NO\";\n  }\n  if (lst1Len === 9 && lst2Len === 8) {\n    return \"NO\";\n  }\n  if (lst1Len === 9 && lst2Len === 9) {\n    return \"YES\";\n  }\n  if (lst1Len === 9 && lst2Len === 10) {\n    return \"NO\";\n  }\n  if (lst1Len === 10 && lst2Len === 9) {\n    return \"NO\";\n  }\n  if (lst1Len === 10 && lst2Len === 10) {\n    return \"YES\";\n  }\n  if (lst1Len === 10 && lst2Len === 11) {\n    return \"NO\";\n  }\n  if (lst1Len === 11 && lst2Len === 10) {\n    return \"NO\";\n  }\n  if (lst1Len === 11 && lst2Len === 11) {\n    return \"YES\";\n  }\n  if (lst1Len === 11 && lst2Len === 12) {\n    return \"NO\";\n  }\n  if (lst1Len === 12 && lst2Len === 11) {\n    return \"NO\";\n  }\n  if (lst1Len === 12 && lst2Len === 12) {\n    return \"YES\";\n  }\n  if (lst1Len === 12 && lst2Len === 13) {\n    return \"NO\";\n  }\n  if (lst1Len === 13 && lst2Len === 12) {\n    return \"NO\";\n  }\n  if (lst1Len === 13 && lst2Len === 13) {\n    return \"YES\";\n  }\n  if (lst1Len === 13 && lst2Len === 14) {\n    return \"NO\";\n  }\n  if (lst1Len === 14 && lst2Len === 13) {\n    return \"NO\";\n  }\n  if (lst1Len === 14 && lst2Len === 14) {\n    return \"YES\";\n  }\n  if (lst1Len === 14 && lst2Len === 15) {\n    return \"NO\";\n  }\n  if (lst1Len === 15 && lst2Len === 14) {\n    return \"NO\";\n  }\n  if (lst1Len === 15 && lst2Len === 15) {\n    return \"YES\";\n  }\n  if (lst1Len === 15 && lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const test = test.toLowerCase();\n  const result = {};\n  const count = (letter) => {\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  };\n  for (let i = 0; i < test.length; i++) {\n    count(test[i]);\n  }\n  return result;\n};\n\nconsole.log(hisTogrAm('a b c'));\nconsole.log(hisTogrAm('a b b a'));\nconsole.log(hisTogrAm('a b c a b'));\nconsole.log(hisTogrAm('b b b b a'));\nconsole.log(hisTogrAm(''));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE2 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE3 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE4 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE5 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE6 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE7 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE8 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE9 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE10 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE11 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE12 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE13 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE14 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE15 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE16 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE17 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').split(c).join('').split(c).join('');\n  return [rev, check === rev];\n};\n\nconst revErsedeletE18 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const check = s.split('').join('').", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  const odd = (x) => x % 2 === 1\n  const even = (x) => x % 2 === 0\n  const count = (x) => x.split('').filter(odd).length\n  const oddCount = (x) => x.split('').filter(odd).length\n  const evenCount = (x) => x.split('').filter(even).length\n  const result = lst.map(count)\n  return result.map((x) => `the number of odd elements ${x} of the ${x}put.`)\n   .concat(lst.map(oddCount).filter(odd).map(x => `${x}n the str1ng ${x} of the ${x}put.`))\n   .concat(lst.map(evenCount).filter(even).map(x => `${x}n the str8ng ${x} of the ${x}put.`))\n}\n\nmodule.exports = oddcounT\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length) {\n    sum = 0;\n    while (j < nums.length && i <= j) {\n      sum += nums[j];\n      j++;\n    }\n    if (sum > minSum) {\n      minSum = sum;\n    }\n    i++;\n  }\n  return minSum;\n};\n\nconsole.log(minsubARraySUm([2, 3, 4, 1, 2, 4]));\nconsole.log(minsubARraySUm([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const buckets = new Array(n)\n  const visited = new Array(n)\n  const visited_row = new Array(m)\n  const visited_col = new Array(m)\n  const visited_row_col = new Array(n)\n  const visited_row_col_row = new Array(n)\n  const visited_row_col_col = new Array(n)\n\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = capacity\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    visited[i] = false\n  }\n\n  for (let i = 0; i < n; i++) {\n    visited_row[i] = false\n  }\n\n  for (let i = 0; i < m; i++) {\n    visited_col[i] = false\n  }\n\n  for (let i = 0; i < n; i++) {\n    visited_row_col[i] = false\n  }\n\n  for (let i = 0; i < n; i++) {\n    visited_row_col_row[i] = false\n  }\n\n  for (let i = 0; i < n; i++) {\n    visited_row_col_col[i] = false\n  }\n\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j] > 0) {\n        if (visited[i] === false) {\n          visited[i] = true\n          visited_row[i] = true\n          visited_col[j] = true\n          visited_row_col[i][j] = true\n          visited_row_col_row[i][j] = true\n          visited_row_col_col[i][j] = true\n          count++\n        } else {\n          if (visited_row[i] === true) {\n            visited_row[i] = false\n            visited_row_col[i][j] = false\n            visited_row_col_row[i][j] = false\n            visited_row_col_col[i][j] = false\n          }\n          if (visited_col[j] === true) {\n            visited_col[j] = false\n            visited_row_col[i][j] = false\n            visited_row_col_row[i][j] = false\n            visited_row_col_col[i][j] = false\n          }\n          if (visited_row_col[i][j] === true) {\n            visited_row_col[i][j] = false\n            visited_row_col_row[i][j] = false\n            visited_row_col_col[i][j] = false\n          }\n          if (visited_row_col_row[i][j] === true) {\n            visited_row_col_row[i][j] = false\n            visited_row_col_col[i][j] = false\n          }\n          if (visited_row_col_col[i][j] === true) {\n            visited_row_col_col[i][j] = false\n          }\n          count++\n        }\n      }\n    }\n  }\n\n  return count\n}\n\nconst grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nconst capacity = 1\n\nconsole.log(maxfill(grid, capacity))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const sortedArr = [];\n  const arrLength = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  while (i < arrLength) {\n    temp = 0;\n    while (j < arrLength) {\n      if (arr[j] === 1) {\n        temp += 1;\n      }\n      j += 1;\n    }\n    sortedArr[k] = temp;\n    k += 1;\n    i += 1;\n  }\n  return sortedArr;\n};\n\nmodule.exports = sorTArrAy;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns the nth word from the string s.\nIf the nth word does not exist, return an empty string.\nExamples:\nnthWord(\"Hello world\", 1) ==> \"world\"\nnthWord(\"Hello world\", 2) ==> \"world\"\nnthWord(\"Hello world\", 3) ==> \"\"\nnthWord(\"Hello world\", 4) ==> \"\"\nnthWord(\"Hello world\", 5) ==> \"\"\nnthWord(\"Hello world\", 6) ==> \"\"\nnthWord(\"Hello world\", 7) ==> \"\"\nnthWord(\"Hello world\", 8) ==> \"\"\nnthWord(\"Hello world\", 9) ==> \"\"\nnthWord(\"Hello world\", 10) ==> \"\"\nnthWord(\"Hello world\", 11) ==> \"\"\nnthWord(\"Hello world\", 12) ==> \"\"\nnthWord(\"Hello world\", 13) ==> \"\"\nnthWord(\"Hello world\", 14) ==> \"\"\nnthWord(\"Hello world\", 15) ==> \"\"\nnthWord(\"Hello world\", 16) ==> \"\"\nnthWord(\"Hello world\", 17) ==> \"\"\nnthWord(\"Hello world\", 18) ==> \"\"\nnthWord(\"Hello world\", 19) ==> \"\"\nnthWord(\"Hello world\", 20) ==> \"\"\nnthWord(\"Hello world\", 21) ==> \"\"\nnthWord(\"Hello world\", 22) ==> \"\"\nnthWord(\"Hello world\", 23) ==> \"\"\nnthWord(\"Hello world\", 24) ==> \"\"\nnthWord(\"Hello world\", 25) ==> \"\"\nnthWord(\"Hello world\", 26) ==> \"\"\nnthWord(\"Hello world\", 27) ==> \"\"\nnthWord(\"Hello world\", 28) ==> \"\"\nnthWord(\"Hello world\", 29) ==> \"\"\nnthWord(\"Hello world\", 30) ==> \"\"\nnthWord(\"Hello world\", 31) ==> \"\"\nnthWord(\"Hello world\", 32) ==> \"\"\nnthWord(\"Hello world\", 33) ==> \"\"\nnthWord(\"Hello world\", 34) ==> \"\"\nnthWord(\"Hello world\", 35) ==> \"\"\nnthWord(\"Hello world\", 36) ==> \"\"\nnthWord(\"Hello world\", 37) ==> \"\"\nnthWord(\"Hello world\", 38) ==> \"\"\nnthWord(\"Hello world\", 39) ==> \"\"\nnthWord(\"Hello world\", 40) ==> \"\"\nnthWord(\"Hello world\", 41) ==> \"\"\nnthWord(\"Hello world\", 42) ==> \"\"\nnthWord(\"Hello world\", 43) ==> \"\"\nnthWord(\"Hello world\", 44) ==> \"\"\nnthWord(\"Hello world\", 45) ==> \"\"\nnthWord(\"Hello world\", 46) ==> \"\"\nnthWord(\"Hello world\", 47) ==> \"\"\nnthWord(\"Hello world\", 48) ==> \"\"\nnthWord(\"Hello world\", 49) ==> \"\"\nnthWord(\"Hello world\", 50) ==> \"\"\nnthWord(\"Hello world\", 51) ==> \"\"\nnthWord(\"Hello world\", 52) ==> \"\"\nnthWord(\"Hello world\", 53) ==> \"\"\nnthWord(\"Hello world\", 54) ==> \"\"\nnthWord(\"Hello world\", 55) ==> \"\"\nnthWord(\"Hello world\", 56) ==> \"\"\nnthWord(\"Hello world\", 57) ==> \"\"\nnthWord(\"Hello world\", 58) ==> \"\"\nnthWord(\"Hello world\", 59) ==> \"\"\nnthWord(\"Hello world\", 60) ==> \"\"\nnthWord(\"Hello world\", 61) ==> \"\"\nnthWord(\"Hello world\", 62) ==> \"\"\nnthWord(\"Hello world\", 63) ==> \"\"\nnthWord(\"Hello world\", 64) ==> \"\"\nnthWord(\"Hello world\", 65) ==> \"\"\nnthWord(\"Hello world\", 66) ==> \"\"\nnthWord(\"Hello world\", 67) ==> \"\"\nnthWord(\"Hello world\", 68) ==> \"\"\nnthWord(\"Hello world\", 69) ==> \"\"\nnthWord(\"Hello world\", 70) ==> \"\"\nnthWord(\"Hello world\", 71) ==> \"\"\nnthWord(\"Hello world\", 72) ==> \"\"\nnthWord(\"Hello world\", 73) ==> \"\"\nnthWord(\"Hello world\", 74) ==> \"\"\nnthWord(\"Hello world\", 75) ==> \"\"\nnthWord(\"Hello world\", 76) ==> \"\"\nnthWord(\"Hello world\", 77) ==> \"\"\nnthWord(\"Hello world\", 78) ==> \"\"\nnthWord(\"Hello world\", 79) ==> \"\"\nnthWord(\"Hello world\", 80) ==> \"\"\nnthWord(\"Hello world\", 81) ==> \"\"\nnthWord(\"Hello world\", 82) ==> \"\"\nnthWord(\"Hello world\", 83) ==> \"\"\nnthWord(\"Hello world\", 84) ==> \"\"\nnthWord(\"Hello world\", 85) ==> \"\"\nnthWord(\"Hello world\", 86) ==> \"\"\nnthWord(\"Hello world\", 87) ==> \"\"\nnthWord(\"Hello world\", 88) ==> \"\"\nnthWord(\"Hello world\", 89) ==> \"\"\nnthWord(\"Hello world\", 90) ==> \"\"\nnthWord(\"Hello world\", 91) ==> \"\"\nnthWord(\"Hello world\", 92) ==", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const word = word.toLowerCase();\n  let start = word.length - 1;\n  let end = 0;\n  let vowel = '';\n  while (start >= 0) {\n    if (word[start] === 'a' || word[start] === 'e' || word[start] === 'i' || word[start] === 'o' || word[start] === 'u') {\n      end = start;\n      vowel = word[start];\n      break;\n    }\n    start--;\n  }\n  while (end < word.length) {\n    if (word[end] === 'a' || word[end] === 'e' || word[end] === 'i' || word[end] === 'o' || word[end] === 'u') {\n      break;\n    }\n    end++;\n  }\n  return vowel;\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  \n  Return empty string if you didn't find any.\n  \n  Example:\n  longestPalindrome(\"abcd\") ==> \"abcd\"\n  longestPalindrome(\"abcda\") ==> \"abcd\"\n  longestPalindrome(\"abcdd\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longestPalindrome(\"abcdde\") ==> \"abcd\"\n  longest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\n/*\n  Given a string S, return the number of open parentheses '(' in S.\n  The string S may contain other characters.\n  Examples:\n  countOpenParentheses('()') == 1\n  countOpenParentheses('(())') == 2\n  countOpenParentheses('()())') == 2\n  countOpenParentheses('(()())') == 3\n  countOpenParentheses('(())())') == 3\n  countOpenParentheses('(()(()))') == 3\n  countOpenParentheses('(())())') == 4\n  countOpenParentheses('(())())') == 5\n  countOpenParentheses('(())())') == 6\n  countOpenParentheses('(())())') == 7\n  countOpenParentheses('(())())') == 8\n  countOpenParentheses('(())())') == 9\n  countOpenParentheses('(())())') == 10\n  countOpenParentheses('(())())') == 11\n  countOpenParentheses('(())())') == 12\n  countOpenParentheses('(())())') == 13\n  countOpenParentheses('(())())') == 14\n  countOpenParentheses('(())())') == 15\n  countOpenParentheses('(())())') == 16\n  countOpenParentheses('(())())') == 17\n  countOpenParentheses('(())())') == 18\n  countOpenParentheses('(())())') == 19\n  countOpenParentheses('(())())') == 20\n  countOpenParentheses('(())())') == 21\n  countOpenParentheses('(())())') == 22\n  countOpenParentheses('(())())') == 23\n  countOpenParentheses('(())())') == 24\n  countOpenParentheses('(())())') == 25\n  countOpenParentheses('(())())') == 26\n  countOpenParentheses('(())())') == 27\n  countOpenParentheses('(())())') == 28\n  countOpenParentheses('(())())') == 29\n  countOpenParentheses('(())())') == 30\n  countOpenParentheses('(())())') == 31\n  countOpenParentheses('(())())') == 32\n  countOpenParentheses('(())())') == 33\n  countOpenParentheses('(())())') == 34\n  countOpenParentheses('(())())') == 35\n  countOpenParentheses('(())())') == 36\n  countOpenParentheses('(())())') == 37\n  countOpenParentheses('(())())') == 38\n  countOpenParentheses('(())())') == 39\n  countOpenParentheses('(())())') == 40\n  countOpenParentheses('(())())') == 41\n  countOpenParentheses('(())())') == 42\n  countOpenParentheses('(())())') == 43\n  countOpenParentheses('(())())') == 44\n  countOpenParentheses('(())())') == 45\n  countOpenParentheses('(())())') == 46\n  countOpenParentheses('(())())') == 47\n  countOpenParentheses('(())())') == 48\n  countOpenParentheses('(())())') == 49\n  countOpenParentheses('(())())') == 50\n  countOpenParentheses('(())())') == 51\n  countOpenParentheses('(())())') == 52\n  countOpenParentheses('(())())') == 53\n  countOpenParentheses('(())())') == 54\n  countOpenParentheses('(())())') == 55\n  countOpenParentheses('(())())') == 56\n  countOpenParentheses('(())())') == 57\n  countOpenParentheses('(())())') == 58\n  countOpenParentheses('(())())') == 59\n  countOpenParentheses('(())())') == 60\n  countOpenParentheses('(())())') == 61\n  countOpenParentheses('(())())') == 62\n  countOpenParentheses('(())())') == 63\n  countOpenParentheses('(())())') == 64\n  countOpenParentheses('(())())') == 65\n  countOpenParentheses('(())())') == 66\n  countOpenParentheses('(())())') == 67\n  countOpenParentheses('(())())') == 68\n  countOpenParentheses('(())())') == 69\n  countOpenParentheses('(())())') == 70\n  countOpenParentheses('(())())') == 71\n  countOpenParentheses('(())())') == 72\n  countOpenParentheses('(())())') == 73\n  countOpenParentheses('(())())') == 74\n  countOpenParentheses('(())())') == 75\n  countOpenParentheses('(())())') == 76\n  countOpenParentheses('(())())') == 77\n  countOpenParentheses('(())())') == 78\n  countOpenParentheses('(())())') == 79\n  countOpenParentheses('(())())') == 80\n  countOpenParentheses('(())())') == 81\n  countOpenParentheses('(())())') == 82\n  countOpenParentheses('(())())') == 83\n  countOpenParentheses('(())())') == 84\n  countOpenParentheses('(())())') == 85\n  countOpenParentheses('(())())') == 86\n  countOpenParentheses('(())())') == 87\n  countOpenParentheses('(())())') == 88\n  countOpenParentheses('(())())') == 89\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest2 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest3 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest4 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest5 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest6 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest7 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest8 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest9 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest10 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest11 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest12 = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const sortedArr = arr.slice().sort();\n  const max = sortedArr[k - 1];\n  const result = [...sortedArr.slice(0, k)];\n  result.push(max);\n  return result;\n};\n\nconst test = (arr, k) => {\n  console.log(`arr: ${arr}`);\n  console.log(`k: ${k}`);\n  console.log(`maxImum(${arr}, ${k}): ${maxImum(arr, k)}`);\n};\n\ntest([-3, -4, 5], 3);\ntest([4, -4, 4], 2);\ntest([-3, 2, 1, 2, -1, -2, 1], 1);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solUtioN([5, 8, 7, 1]));\nconsole.log(solUtioN([3, 3, 3, 3, 3]));\nconsole.log(solUtioN([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem2 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem3 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem4 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem5 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem6 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem7 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem8 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem9 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem10 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem11 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem12 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem13 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem14 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addelem15 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  for (; i < arrLen; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let odd = [];\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n  }\n  collatz.reverse();\n  for (let j = 0; j < collatz.length; j++) {\n    if (collatz[j] % 2 === 1) {\n      odd.push(collatz[j]);\n    }\n  }\n  odd.reverse();\n  return odd;\n};\n\nconsole.log(getoddCOllatZ(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = getDaysInMonth(month, year);\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n  const daysInLastMonth = getDaysInMonth(month - 1, year);\n  if (day < 1 || day > daysInLastMonth) {\n    return false;\n  }\n  const daysInNextMonth = getDaysInMonth(month + 1, year);\n  if (day < 1 || day > daysInNextMonth) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst getDaysInMonth = (month, year) => {\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      return 31;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return 30;\n    default:\n      return 29;\n  }\n};\n\nmodule.exports = valIdDaTe;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n};\n\nconst splItWoRds16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((word) => {\n    return word.split(/\\W+/).filter((word) => {\n      return word.length > 0;\n    });\n  });\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i] === sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nexport { isSOrteD };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0];\n  const end = interval1[1];\n  const length = end - start;\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0];\n  const end = interval1[1];\n  const length = end - start;\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0];\n  const end = interval1[1];\n  const length = end - start;\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0];\n  const end = interval1[1];\n  const length = end - start;\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0];\n  const end = interval1[1];\n  const length = end - start;\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0];\n  const end = interval1[1];\n  const length = end - start;\n  const isPrime = (n) => {\n    if (n === 1) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      product *= 1;\n    } else if (arr[i] < 0) {\n      product *= -1;\n    }\n  }\n  return sum * product;\n};\n\nconsole.log(proDSigNs([1, 2, 2, -4]));\nconsole.log(proDSigNs([0, 1]));\nconsole.log(proDSigNs([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const N = grid.length;\n  const [row, col] = [0, 0];\n  const visited = new Array(N * N);\n  const dp = new Array(N * N);\n  dp[row * N + col] = grid[row][col];\n  visited[row * N + col] = true;\n  let min = dp[row * N + col];\n  let i = row * N + col;\n  while (i < N * N) {\n    const [row, col] = [i / N, i % N];\n    const neighbors = [row - 1, row + 1, col - 1, col + 1];\n    for (const [r, c] of neighbors) {\n      if (r >= 0 && r < N && c >= 0 && c < N &&!visited[r * N + c]) {\n        dp[r * N + c] = Math.min(dp[i], dp[r * N + c] + grid[r][c]);\n        visited[r * N + c] = true;\n        min = Math.min(min, dp[r * N + c]);\n      }\n    }\n    i++;\n  }\n  return minpath(dp, k - 1);\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(minpath(grid, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR2(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR3 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR3(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR4 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR4(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR5 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR5(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR6 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR6(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR7 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR7(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR8 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR8(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR9 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR9(Math.abs(b), Math.abs(a) / divisor);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR10 = (a, b) => {\n  const divisor = Math.abs(a) / Math.abs(b);\n  return Math.abs(a) % Math.abs(b) === 0? divisor : greAtesTCommOnDIvisoR10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let product = 1\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      product *= i\n    }\n  }\n  return product\n}\n\nconsole.log(digIts(1))\nconsole.log(digIts(4))\nconsole.log(digIts(235))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  const brackets = [];\n  const bracketsLength = [];\n  const bracketsLengthLength = [];\n  const bracketsLengthLengthLength = [];\n  const bracketsLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const bracketsLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum * sum;\n};\n\nconsole.log(sumsqaRes([1,2,3]));\nconsole.log(sumsqaRes([1,4,9]));\nconsole.log(sumsqaRes([1,3,5,7]));\nconsole.log(sumsqaRes([1.4,4.2,0]));\nconsole.log(sumsqaRes([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt[txt.length - 1]) && /[^a-zA-Z ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeN = (txt) => {\n  return txt.length > 0 && /[0-9]/.test(txt[txt.length - 1]) && /[^0-9 ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeN = (txt) => {\n  return txt.length > 0 && /[0-9]/.test(txt[txt.length - 1]) && /[^0-9 ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeN = (txt) => {\n  return txt.length > 0 && /[0-9]/.test(txt[txt.length - 1]) && /[^0-9 ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeN = (txt) => {\n  return txt.length > 0 && /[0-9]/.test(txt[txt.length - 1]) && /[^0-9 ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeN = (txt) => {\n  return txt.length > 0 && /[0-9]/.test(txt[txt.length - 1]) && /[^0-9 ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeN = (txt) => {\n  return txt.length > 0 && /[0-9]/.test(txt[txt.length - 1]) && /[^0-9 ]/.test(txt[txt.length - 2]);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHaris", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] >= arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 2\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 4\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[j]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 4\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[j]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[j]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 4\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 4\n  canarraNge([1,2,3]) = -1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const min = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [max, min];\n};\n\n/*\n  Create a function that returns the largest of two numbers.\n  If one number is null, return the other.\n  Examples:\n  larGestLargest([2, 4, 1, 3, 5, 7]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]) == 7\n  larGestLargest([2, 4, 1, 3, 5, 7, null, null, null, null, null, null, null, null, null, null", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare2 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare3 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare4 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare5 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare6 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare7 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare8 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare9 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare10 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare11 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare12 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare13 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare14 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare15 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare16 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare17 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare18 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare19 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare20 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare21 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare22 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare23 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare24 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare25 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare26 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare27 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare28 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare29 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare30 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare31 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare32 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare33 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare34 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare35 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare36 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare37 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare38 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare39 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare40 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare41 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare42 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare43 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare44 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare45 = (a, b) => {\n  return comPareone(a, b);\n};\n\nconst compare46 = (a, b) => {\n  return comPareone(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvens = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfEvenOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumOfOddOddOddOdds = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1) * speCialfactoRiaL(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL2(n - 1) * speCialfactoRiaL2(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL3(n - 1) * speCialfactoRiaL3(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL4(n - 1) * speCialfactoRiaL4(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL5(n - 1) * speCialfactoRiaL5(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL6(n - 1) * speCialfactoRiaL6(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL7(n - 1) * speCialfactoRiaL7(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL8(n - 1) * speCialfactoRiaL8(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL9(n - 1) * speCialfactoRiaL9(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL10(n - 1) * speCialfactoRiaL10(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL11(n - 1) * speCialfactoRiaL11(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL12(n - 1) * speCialfactoRiaL12(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL13(n - 1) * speCialfactoRiaL13(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL14(n - 1) * speCialfactoRiaL14(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const allprefIxes = [];\n  const stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    const currentPrefix = string.substring(0, i + 1);\n    if (allprefIxes.indexOf(currentPrefix) === -1) {\n      allprefIxes.push(currentPrefix);\n    }\n  }\n  return allprefIxes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allsuffIxes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allsuffIxes = (string) => {\n  const allsuffIxes = [];\n  const stringLength = string.length;\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const currentSuffix = string.substring(i, stringLength);\n    if (allsuffIxes.indexOf(currentSuffix) === -1) {\n      allsuffIxes.push(currentSuffix);\n    }\n  }\n  return allsuffIxes;\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  >>> allsuffIxes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allprefIxesAndSuffixes = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes2 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes3 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes4 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes5 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes6 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes7 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes8 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes9 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffixes10 = (string) => {\n  const allprefIxes = allprefIxes(string);\n  const allsuffIxes = allsuffIxes(string);\n  return allprefIxes.concat(allsuffIxes);", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  const text = text.replace(/\\s/g, '_');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEn = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEnEs = (text) => {\n  const text = text.replace(/\\s/g, '_');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEnEsEs = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEnEsEsEs = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEsEsEsEs = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEsEsEsEs = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEsEsEsEs = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEsEsEsEs = (text) => {\n  const text = text.replace(/_/g,'');\n  const text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.dll$/;\n  return regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name);\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK2 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.dll$/;\n  return regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name);\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK3 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.dll$/;\n  return regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name);\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    let num = 1\n    while (num < word.length) {\n      let newNum = Math.pow(2, num)\n      if (newNum > word.length) {\n        break\n      }\n      newWord += word[newNum - 1]\n      num++\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(worDsInsenteNce('This is a test'))\nconsole.log(worDsInsenteNce('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const xNum = parseInt(x, 10);\n  const xDen = parseInt(n, 10);\n  return xNum === xDen && xNum > 0;\n};\n\nconsole.log(simPlifY(\"1/5\", \"5/1\"));\nconsole.log(simPlifY(\"1/6\", \"2/1\"));\nconsole.log(simPlifY(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  const arr = nums.filter(n => n > 10 && n % 2 === 1 && n % 3 === 1 && n % 5 === 1 && n % 7 === 1)\n  return arr.length\n}\n\nconsole.log(speCialfilteR([15, -73, 14, -15]))\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple2 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple3 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple4 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple5 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple6 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple7 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getmaxTRiple8 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase();\n  const planet2Name = planet2.toUpperCase();\n  const planet1Orbit = planets[planet1Name];\n  const planet2Orbit = planets[planet2Name];\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitStart = planet1Orbit.indexOf(planet1Name);\n  const planet2OrbitStart = planet2Orbit.indexOf(planet2Name);\n  const planet1OrbitEnd = planet1OrbitStart + planet1OrbitLength;\n  const planet2OrbitEnd = planet2OrbitStart + planet2OrbitLength;\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEnd);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEnd);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2Name, planet2OrbitEndIndex);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1Name, planet1OrbitEndIndex);\n  const planet2OrbitEndIndex = planet2Orbit.index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n\nconst list_sort8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    const wordLen = word.length\n    const sortedLen = sorted.length\n    if (wordLen % 2 === 1) {\n      sorted.push(word)\n    } else {\n      const index = sorted.indexOf(word)\n      if (index!== -1) {\n        sorted.splice(index, 1)\n      }\n    }\n  }\n  return sorted\n}\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe2 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe3 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe4 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe5 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe6 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe7 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe8 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe9 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe10 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe11 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe12 = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = `${s} ${n}`;\n    n--;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOryPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  odd. Ignore numbers that are negative or not integers.\n  odd([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  odd([-1, -2, 0]) == 0\n  odd([9, -2]) == 9\n  odd([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst odd = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  even. Ignore numbers that are negative or not integers.\n  even([1, 3, 2, 0]) == 2 + 4 + 0 = 6\n  even([-1, -2, 0]) == 0\n  even([9, -2]) == -2\n  even([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst even = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 3. Ignore numbers that are negative or not integers.\n  divisibleBy3([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  divisibleBy3([-1, -2, 0]) == 0\n  divisibleBy3([9, -2]) == 9\n  divisibleBy3([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst divisibleBy3 = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 5. Ignore numbers that are negative or not integers.\n  divisibleBy5([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  divisibleBy5([-1, -2, 0]) == 0\n  divisibleBy5([9, -2]) == 9\n  divisibleBy5([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst divisibleBy5 = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 7. Ignore numbers that are negative or not integers.\n  divisibleBy7([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  divisibleBy7([-1, -2, 0]) == 0\n  divisibleBy7([9, -2]) == 9\n  divisibleBy7([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst divisibleBy7 = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 11. Ignore numbers that are negative or not integers.\n  divisibleBy11([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  divisibleBy11([-1, -2, 0]) == 0\n  divisibleBy11([9, -2]) == 9\n  divisibleBy11([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst divisibleBy11 = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 13. Ignore numbers that are negative or not integers.\n  divisibleBy13([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  divisibleBy13([-1, -2, 0]) == 0\n  divisibleBy13([9, -2]) == 9", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(comPare([1,2,3,4,5,1],[1,2,3,4", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const cap = class_name.toUpperCase().match(/[A-Z]/)\n  const sm = class_name.toLowerCase().match(/[a-z]/)\n  const strength = cap.length - sm.length\n  const strongest = extensions.find((ext) => strength < ext.length)\n  return `${class_name}.${strongest}`\n}\n\nmodule.exports = strOngeStExtEnsIon\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  if (aLen!== bLen) return false;\n  const aRotation = a.split('');\n  const bRotation = b.split('');\n  const aRotationLen = aRotation.length;\n  const bRotationLen = bRotation.length;\n  for (let i = 0; i < aRotationLen; i++) {\n    const aRotationChar = aRotation[i];\n    const bRotationChar = bRotation[i];\n    if (aRotationChar!== bRotationChar) return false;\n  }\n  return true;\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given \"babad\", the longest palindromic substring is \"bab\".\n  Given \"cbbd\", the longest palindromic substring is \"bb\".\n  Given \"a\", the longest palindromic substring is \"a\".\n  Given \"abcd\", the longest palindromic substring is \"abcd\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"abcd\", the longest palindromic substring is \"abcd\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".\n  Given \"abcdefg\", the longest palindromic substring is \"fg\".\n  Given \"pwwkew\", the longest palindromic substring is \"pwkew\".", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, even];\n};\n\nmodule.exports = eveNOddcount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  const num = number;\n  let result = '';\n  let i = 1;\n  while (num > 0) {\n    if (num >= i) {\n      result += i;\n      num -= i;\n    } else {\n      result += 'i';\n      i++;\n    }\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = inttoMiNiRomAn;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle2 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle3 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle4 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle5 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle6 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle7 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle8 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle9 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(c - b))\n}\n\n/*\n Given the lengths of the", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = map.get(word) || 0;\n    map.set(word, count + 1);\n  }\n  const maxCount = words.length;\n  let maxWord = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const count = map.get(words[i]);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\nconsole.log(finDMax([\"name\", \"of\", \"string\"]));\nconsole.log(finDMax([\"name\", \"enam\", \"game\"]));\nconsole.log(finDMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const arr = string.split('')\n  const map = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    if (map.has(arr[i])) {\n      map.set(arr[i], map.get(arr[i]) + 1)\n    } else {\n      map.set(arr[i], 1)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Invalid operator')\n    }\n  }\n  return result\n}\n\nconst doALgebRa2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Invalid operator')\n    }\n  }\n  return result\n}\n\nconst doALgebRa3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Invalid operator')\n    }\n  }\n  return result\n}\n\nconst doALgebRa4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Invalid operator')\n    }\n  }\n  return result\n}\n\nconst doALgebRa5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Invalid operator')\n    }\n  }\n  return result\n}\n\nconst doALgebRa6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let str = s.split(\"\");\n  let len = str.length;\n  let result = \"\";\n  for (let i = 0; i < len; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      result += str[i].toUpperCase();\n    } else {\n      result += str[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solVe(\"1234\"));\nconsole.log(solVe(\"ab\"));\nconsole.log(solVe(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSH1('Hello world') == 'e9d7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9e7f0b7f4b8d7e7c1d7a9f9", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const aInt = a | 0;\n  const bInt = b | 0;\n  const aStr = aInt.toString();\n  const bStr = bInt.toString();\n  const aLen = aStr.length;\n  const bLen = bStr.length;\n  const aStrArr = aStr.split('');\n  const bStrArr = bStr.split('');\n  const aIntArr = aStrArr.map(x => parseInt(x));\n  const bIntArr = bStrArr.map(x => parseInt(x));\n  const aIntArrLen = aIntArr.length;\n  const bIntArrLen = bIntArr.length;\n  const aIntArrArr = aIntArr.map(x => x.toString());\n  const bIntArrArr = bIntArr.map(x => x.toString());\n  const aIntArrArrLen = aIntArrArr.length;\n  const bIntArrArrLen = bIntArrArr.length;\n  const aIntArrArrArr = aIntArrArr.map(x => x.split(''));\n  const bIntArrArrArr = bIntArrArr.map(x => x.split(''));\n  const aIntArrArrArrLen = aIntArrArrArr.length;\n  const bIntArrArrArrLen = bIntArrArrArr.length;\n  const aIntArrArrArrArr = aIntArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArr = bIntArrArrArr.map(x => x.join(''));\n  const aIntArrArrArrArrLen = aIntArrArrArrArr.length;\n  const bIntArrArrArrArrLen = bIntArrArrArrArr.length;\n  const aIntArrArrArrArrArr = aIntArrArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArrArr = bIntArrArrArrArr.map(x => x.join(''));\n  const aIntArrArrArrArrArrLen = aIntArrArrArrArrArr.length;\n  const bIntArrArrArrArrArrLen = bIntArrArrArrArrArr.length;\n  const aIntArrArrArrArrArrArr = aIntArrArrArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArrArrArr = bIntArrArrArrArrArr.map(x => x.join(''));\n  const aIntArrArrArrArrArrArrLen = aIntArrArrArrArrArrArr.length;\n  const bIntArrArrArrArrArrArrLen = bIntArrArrArrArrArrArr.length;\n  const aIntArrArrArrArrArrArrArr = aIntArrArrArrArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArrArrArrArr = bIntArrArrArrArrArrArr.map(x => x.join(''));\n  const aIntArrArrArrArrArrArrArrLen = aIntArrArrArrArrArrArrArr.length;\n  const bIntArrArrArrArrArrArrArrLen = bIntArrArrArrArrArrArrArr.length;\n  const aIntArrArrArrArrArrArrArrArr = aIntArrArrArrArrArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArrArrArrArrArr = bIntArrArrArrArrArrArrArr.map(x => x.join(''));\n  const aIntArrArrArrArrArrArrArrArrLen = aIntArrArrArrArrArrArrArrArr.length;\n  const bIntArrArrArrArrArrArrArrArrLen = bIntArrArrArrArrArrArrArrArr.length;\n  const aIntArrArrArrArrArrArrArrArrArr = aIntArrArrArrArrArrArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArrArrArrArrArrArr = bIntArrArrArrArrArrArrArrArr.map(x => x.join(''));\n  const aIntArrArrArrArrArrArrArrArrArrLen = aIntArrArrArrArrArrArrArrArrArr.length;\n  const bIntArrArrArrArrArrArrArrArrArrLen = bIntArrArrArrArrArrArrArrArrArr.length;\n  const aIntArrArrArrArrArrArrArrArrArrArr = aIntArrArrArrArrArrArrArrArrArr.map(x => x.join(''));\n  const bIntArrArrArrArrArrArrArrArrAr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic2 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic3 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic4 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic5 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      count++;\n      j = 0;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that contains all the characters in the given string.\n  >>> longestSubstring('abcd', 'ab')\n  'ab'\n  >>> longestSubstring('abcd', 'abcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'ac')\n  'abcd'\n  >>> longestSubstring('abcd', 'acd')\n  'abcd'\n  >>> longestSubstring('abcd', 'ad')\n  'abcd'\n  >>> longestSubstring('abcd', 'bc')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcde')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')\n  'abcd'\n  >>> longestSubstring('abcd', 'bcd')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'three two one'\n  */\nconst sorTNumBersReverse = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(b) - parseInt(a);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse2 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'three two one'\n  */\nconst sorTNumBersReverse3 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse4 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(b) - parseInt(a);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse5 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse6 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse7 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse8 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse9 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse10 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse11 = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    return parseInt(a) - parseInt(b);\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('one two three')\n  'one two three'\n  */\nconst sorTNumBersReverse12 = (numbers) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt2 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt3 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt4 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt5 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt6 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt7 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt8 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt9 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt10 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt11 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt12 = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt13 = (number) => {\n  let integerPart = Math.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts2 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts3 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts4 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts5 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts6 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  >>> finDCloSestEL", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const step = 1 / range;\n  const res = [];\n  for (let i = min; i <= max; i += step) {\n    res.push(i);\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their logarithms\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.693147180559945, 1.0986122886681098, 1.3862943611198906, 1.6094379124341005]\n  */\nconst resCaletoUniTLog = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.log(numbers[i]));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their exponents\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 2.0, 3.0, 4.0]\n  */\nconst resCaletoUniTExp = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.exp(numbers[i]));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTSqrt = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.sqrt(numbers[i]));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTLogSqrt = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.log(Math.sqrt(numbers[i])));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTExpSqrt = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.exp(Math.sqrt(numbers[i])));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTLogExp = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.log(Math.exp(numbers[i])));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTExpLog = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.exp(Math.log(numbers[i])));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTLogExpSqrt = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.log(Math.exp(Math.sqrt(numbers[i]))));\n  }\n  return res;\n};\n\n/* Given a list of numbers, return the list of their square roots\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst resCaletoUniTExpLogSqrt = (numbers) => {\n  const res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(Math.exp(Math.log(Math.sqrt(numbers[i]))));\n  }\n  return res;\n};\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* Filter given list of any python values only for strings\n  >>> filTerStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filTerStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filTerStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filTerBools(['a', 3.14, 5])\n  [5]\n  >>> filTerBools([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerBools = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filTerDicts(['a', 3.14, 5])\n  [{}]\n  >>> filTerDicts([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filTerDicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* Filter given list of any python values only for lists\n  >>> filTerLists(['a', 3.14, 5])\n  [5]\n  >>> filTerLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerLists = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* Filter given list of any python values only for numbers\n  >>> filTerNumbers(['a', 3.14, 5])\n  [5]\n  >>> filTerNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* Filter given list of any python values only for strings\n  >>> filTerStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filTerStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filTerStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filTerBools(['a', 3.14, 5])\n  [5]\n  >>> filTerBools([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerBools = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filTerDicts(['a', 3.14, 5])\n  [{}]\n  >>> filTerDicts([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filTerDicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* Filter given list of any python values only for lists\n  >>> filTerLists(['a', 3.14, 5])\n  [5]\n  >>> filTerLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerLists = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* Filter given list of any python values only for numbers\n  >>> filTerNumbers(['a', 3.14, 5])\n  [5]\n  >>> filTerNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* Filter given list of any python values only for strings\n  >>> filTerStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filTerStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filTerStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filTerBools(['a', 3.14, 5])\n  [5]\n  >>> filTerBools([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerBools = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filTerDicts(['a', 3.14, 5])\n  [{}]\n  >>> filTerDicts([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filTerDicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length;\n};\n\n/* Return index of first occurrence of a substring in a string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c')\n  2\n  >>> strIndexOf('abc', 'd')\n  -1\n  >>> strIndexOf('abc', '', 0)\n  0\n  >>> strIndexOf('abc', '', 1)\n  -1\n  >>> strIndexOf('abc', '', 2)\n  -1\n  >>> strIndexOf('abc', '', 3)\n  -1\n  >>> strIndexOf('abc', '', 4)\n  -1\n  >>> strIndexOf('abc', '', 5)\n  -1\n  >>> strIndexOf('abc', '', 6)\n  -1\n  >>> strIndexOf('abc', '', 7)\n  -1\n  >>> strIndexOf('abc', '', 8)\n  -1\n  >>> strIndexOf('abc', '', 9)\n  -1\n  >>> strIndexOf('abc', '', 10)\n  -1\n  >>> strIndexOf('abc', '', 11)\n  -1\n  >>> strIndexOf('abc', '', 12)\n  -1\n  >>> strIndexOf('abc', '', 13)\n  -1\n  >>> strIndexOf('abc', '', 14)\n  -1\n  >>> strIndexOf('abc', '', 15)\n  -1\n  >>> strIndexOf('abc', '', 16)\n  -1\n  >>> strIndexOf('abc', '', 17)\n  -1\n  >>> strIndexOf('abc', '', 18)\n  -1\n  >>> strIndexOf('abc', '', 19)\n  -1\n  >>> strIndexOf('abc', '', 20)\n  -1\n  >>> strIndexOf('abc', '', 21)\n  -1\n  >>> strIndexOf('abc', '', 22)\n  -1\n  >>> strIndexOf('abc', '', 23)\n  -1\n  >>> strIndexOf('abc', '', 24)\n  -1\n  >>> strIndexOf('abc', '', 25)\n  -1\n  >>> strIndexOf('abc', '', 26)\n  -1\n  >>> strIndexOf('abc', '', 27)\n  -1\n  >>> strIndexOf('abc', '', 28)\n  -1\n  >>> strIndexOf('abc', '', 29)\n  -1\n  >>> strIndexOf('abc', '', 30)\n  -1\n  >>> strIndexOf('abc', '', 31)\n  -1\n  >>> strIndexOf('abc', '', 32)\n  -1\n  >>> strIndexOf('abc', '', 33)\n  -1\n  >>> strIndexOf('abc', '', 34)\n  -1\n  >>> strIndexOf('abc', '', 35)\n  -1\n  >>> strIndexOf('abc', '', 36)\n  -1\n  >>> strIndexOf('abc', '', 37)\n  -1\n  >>> strIndexOf('abc', '', 38)\n  -1\n  >>> strIndexOf('abc', '', 39)\n  -1\n  >>> strIndexOf('abc', '', 40)\n  -1\n  >>> strIndexOf('abc', '', 41)\n  -1\n  >>> strIndexOf('abc', '', 42)\n  -1\n  >>> strIndexOf('abc', '', 43)\n  -1\n  >>> strIndexOf('abc', '', 44)\n  -1\n  >>> strIndexOf('abc', '', 45)\n  -1\n  >>> strIndexOf('abc', '', 46)\n  -1\n  >>> strIndexOf('abc', '', 47)\n  -1\n  >>> strIndexOf('abc', '', 48)\n  -1\n  >>> strIndexOf('abc', '', 49)\n  -1\n  >>> strIndexOf('abc', '', 50)\n  -1\n  >>> strIndexOf('abc', '', 51)\n  -1\n  >>> strIndexOf('abc', '', 52)\n  -1\n  >>> strIndexOf('abc', '', 53)\n  -1\n  >>> strIndexOf('abc', '', 54)\n  -1\n  >>> strIndexOf('abc', '', 55)\n  -1\n  >>> strIndexOf('abc', '', 56)\n  -1\n  >>> strIndexOf('abc', '', 57)\n  -1\n  >>> strIndexOf('abc', '', 58)\n  -1\n  >>> strIndexOf('abc', '', 59)\n  -1\n  >>> strIndexOf('abc', '', 60)\n  -1\n  >>> strIndexOf('abc', '', 61)\n  -1\n  >>> strIndexOf('abc', '', 62)\n  -1\n  >>> strIndexOf('abc', '', 63)\n  -1\n  >>> strIndexOf('abc', '', 64)\n  -1\n  >>> strIndexOf('abc', '', 65)\n  -1\n  >>> strIndexOf('abc', '', 66)\n  -1\n  >>> strIndexOf('abc', '', 67)\n  -1\n  >>> strIndexOf('abc', '', 68)\n  -1\n  >>> strIndexOf('abc', '', 69)\n  -1\n  >>> strIndexOf('abc', '', 70)\n  -1\n  >>> strIndexOf('abc', '', 71)\n  -1\n  >>> strIndexOf('abc', '', 72)\n  -1\n  >>> strIndexOf('abc', '', 73)\n  -1\n  >>> strIndexOf('abc', '', 74)\n  -1\n  >>> strIndexOf('abc', '', 75)\n  -1\n  >>> strIndexOf('abc', '', 76)\n  -1\n  >>> strIndexOf('abc', '', 77)\n  -1\n  >>> strIndexOf('abc', '', 78)\n  -1\n  >>> strIndexOf('abc', '', 79)\n  -1\n  >>> strIndexOf('abc', '', 80)\n  -1\n  >>> strIndexOf('abc', '', 81)\n  -1\n  >>> strIndexOf('abc', '', 82)\n  -1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr2 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr3 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr4 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr5 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr6 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr7 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr8 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr9 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr10 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr11 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr12 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr13 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  let factors = [];\n  let factorization = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n!== 1) {\n    factorization.push(n);\n  }\n  factorization.forEach(x => {\n    factors.push(x);\n  });\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse = (n) => {\n  let factors = [];\n  let factorization = [];\n  let i = n;\n  while (i > 1) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n    i--;\n  }\n  if (n!== 1) {\n    factorization.push(n);\n  }\n  factorization.forEach(x => {\n    factors.push(x);\n  });\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse2 = (n) => {\n  let factors = [];\n  let factorization = [];\n  let i = n;\n  while (i > 1) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n    i--;\n  }\n  if (n!== 1) {\n    factorization.push(n);\n  }\n  factorization.forEach(x => {\n    factors.push(x);\n  });\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse3 = (n) => {\n  let factors = [];\n  let factorization = [];\n  let i = n;\n  while (i > 1) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n    i--;\n  }\n  if (n!== 1) {\n    factorization.push(n);\n  }\n  factorization.forEach(x => {\n    factors.push(x);\n  });\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse4 = (n) => {\n  let factors = [];\n  let factorization = [];\n  let i = n;\n  while (i > 1) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n    i--;\n  }\n  if (n!== 1) {\n    factorization.push(n);\n  }\n  factorization.forEach(x => {\n    factors.push(x);\n  });\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse5 = (n) => {\n  let factors = [];\n  let factorization = [];\n  let i = n;\n  while (i > 1) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n    i--;\n  }\n  if (n!== 1) {\n    factorization.push(n);\n  }\n  factorization.forEach(x => {\n    factors.push(x);\n  });\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]) {\n      continue;\n    }\n    seen[numbers[i]] = true;\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nmodule.exports = remOveDUplicAteS;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE2 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE3 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE4 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE5 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE6 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE7 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE8 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE9 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE10 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE11 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE12 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE13 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE14 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE15 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE16 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE17 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE18 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, curr) => acc + curr, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator + curr, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndPrefix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndPrefixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr + separator +'' + curr, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndPrefixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr + separator +'' + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndPrefixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr + separator +'' + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndPrefixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr + separator +'' + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparatorAndPrefixAndSuffixAndPrefixAndSuffix = (separator, strings) => {\n  return strings.reduce((acc, curr) => acc + separator +'' + curr + separator +'' + curr + separator +'' + curr + separator, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator\n  * @param {Array} strings", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filTerBYSubStrIx([], 'a')\n  []\n  >>> filTerBYSubStrIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYSubStrIx = (strings, substr) => {\n  return strings.filter(s => s.includes(substr));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  and only for those that start with a given prefix.\n  >>> filTerBYSubStrIxByPrefIx([], 'a')\n  []\n  >>> filTerBYSubStrIxByPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYSubStrIxByPrefIx = (strings, substr, prefix) => {\n  return strings.filter(s => s.includes(substr) && s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  and only for those that start with a given prefix, and only for those that\n  contain a given substring.\n  >>> filTerBYSubStrIxByPrefIxBySubStrIx([], 'a', 'b')\n  []\n  >>> filTerBYSubStrIxByPrefIxBySubStrIx(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'array']\n  */\nconst filTerBYSubStrIxByPrefIxBySubStrIx = (strings, substr, prefix, substr2) => {\n  return strings.filter(s => s.includes(substr) && s.includes(substr2) && s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  and only for those that start with a given prefix, and only for those that\n  contain a given substring, and only for those that start with a given prefix.\n  >>> filTerBYSubStrIxByPrefIxBySubStrIxByPrefIx([], 'a', 'b', 'c')\n  []\n  >>> filTerBYSubStrIxByPrefIxBySubStrIxByPrefIx(['abc', 'bcd', 'cde', 'array'], 'a', 'b', 'c')\n  ['abc', 'array']\n  */\nconst filTerBYSubStrIxByPrefIxBySubStrIxByPrefIx = (strings, substr, prefix, substr2, prefix2) => {\n  return strings.filter(s => s.includes(substr) && s.includes(substr2) && s.startsWith(prefix) && s.startsWith(prefix2));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  and only for ones that start with a given prefix, and only for ones that\n  contain a given substring, and only for ones that start with a given prefix,\n  and only for those that contain a given substring.\n  >>> filTerBYSubStrIxByPrefIxBySubStrIxByPrefIxBySubStrIx([], 'a', 'b', 'c', 'd')\n  []\n  >>> filTerBYSubStrIxByPrefIxBySubStrIxByPrefIxBySubStrIx(['abc', 'bcd', 'cde', 'array'], 'a', 'b', 'c', 'd')\n  ['abc', 'array']\n  */\nconst filTerBYSubStrIxByPrefIxBySubStrIxByPrefIxBySubStrIx = (strings, substr, prefix, substr2, prefix2, substr3, prefix3) => {\n  return strings.filter(s => s.includes(substr) && s.includes(substr2) && s.includes(substr3) && s.startsWith(prefix) && s.startsWith(prefix2) && s.startsWith(prefix3));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  and only for ones that start with a given prefix, and only for ones that\n  contain a given substring, and only for ones that start with a given prefix,\n  and only for ones that contain a given substring, and only for ones that start\n  with a given prefix.\n  >>> filTerBYSubStrIxByPrefIxBySubStrIxByPrefIxBySubStrIxByPrefIx([], 'a', 'b', 'c', 'd', 'e')\n  []\n  >>> filTerBYSubStrIxByPrefIxBySubStrIxByPrefIxBySubStrIxByPrefIx(['abc', 'bcd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e')\n  ['abc', 'array']\n  */\nconst filTerBYSubStrIxByPrefIxBySubStrIxByPrefIxBySubStrIxByPrefIx = (strings, substr, prefix, substr2, prefix2, substr3, prefix3, substr4, prefix4) => {\n  return strings.filter(s => s.includes(substr) && s.includes(substr2) && s.includes(substr3) && s.includes(substr4) && s.startsWith(prefix) && s.startsWith(prefix2) && s.startsWith(prefix3) && s.startsWith(prefix4));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  and only for ones that start with a given prefix, and only for ones that\n  contain a given substring, and only for ones that start with a given prefix,\n  and only for ones that contain a given substring, and only for ones that start\n  with a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\nmodule.exports = belOwZeRo\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive2 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive3 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive4 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive5 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive6 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive7 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive8 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive9 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getpos", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  return (n - 1) % n === 0\n}\n\n/*Return the sum of all the primes below a given number, inclusive.\n  >>> sumPrimes(100)\n  1229\n  >>> sumPrimes(1000)\n  1229\n  >>> sumPrimes(10000)\n  1229\n  >>> sumPrimes(1000000)\n  1229\n  >>> sumPrimes(100000000)\n  1229\n  >>> sumPrimes(1000000000)\n  1229\n  >>> sumPrimes(10000000000)\n  1229\n  >>> sumPrimes(100000000000)\n  1229\n  >>> sumPrimes(1000000000000)\n  1229\n  >>> sumPrimes(10000000000000)\n  1229\n  >>> sumPrimes(100000000000000)\n  1229\n  >>> sumPrimes(1000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(100000000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  >>> sumPrimes(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  1229\n  */\nconst sumPrimes = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPRime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*Return the sum of all the primes below a given number, inclusive.\n  >>> sumPrimes(100)\n  1229\n  >>> sumPrimes(1000)\n  1229\n  >>> sumPrimes(10000)\n  1229\n  >>> sumPrimes(1000000)\n  1229\n  >>> sumPrimes(100000000)\n  1229\n  >>> sumPrimes(1000000000)\n  1229\n  >>> sumPrimes(10000000000)\n  1229\n  >>> sumPrimes(100000000000)\n  1229\n  >>> sumPrimes(1000000000000)\n  1229\n  >>> sumPrimes(10000000000000)\n  1229\n  >>> sumPrimes(100000000000000)\n  1229\n  >>> sumPrimes(1000000000000000", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  const x = (max - min) / (n - 1);\n  const xs2 = [...xs, x];\n  const xs3 = [...xs2, x];\n  const xs4 = [...xs3, x];\n  const xs5 = [...xs4, x];\n  const xs6 = [...xs5, x];\n  const xs7 = [...xs6, x];\n  const xs8 = [...xs7, x];\n  const xs9 = [...xs8, x];\n  const xs10 = [...xs9, x];\n  const xs11 = [...xs10, x];\n  const xs12 = [...xs11, x];\n  const xs13 = [...xs12, x];\n  const xs14 = [...xs13, x];\n  const xs15 = [...xs14, x];\n  const xs16 = [...xs15, x];\n  const xs17 = [...xs16, x];\n  const xs18 = [...xs17, x];\n  const xs19 = [...xs18, x];\n  const xs20 = [...xs19, x];\n  const xs21 = [...xs20, x];\n  const xs22 = [...xs21, x];\n  const xs23 = [...xs22, x];\n  const xs24 = [...xs23, x];\n  const xs25 = [...xs24, x];\n  const xs26 = [...xs25, x];\n  const xs27 = [...xs26, x];\n  const xs28 = [...xs27, x];\n  const xs29 = [...xs28, x];\n  const xs30 = [...xs29, x];\n  const xs31 = [...xs30, x];\n  const xs32 = [...xs31, x];\n  const xs33 = [...xs32, x];\n  const xs34 = [...xs33, x];\n  const xs35 = [...xs34, x];\n  const xs36 = [...xs35, x];\n  const xs37 = [...xs36, x];\n  const xs38 = [...xs37, x];\n  const xs39 = [...xs38, x];\n  const xs40 = [...xs39, x];\n  const xs41 = [...xs40, x];\n  const xs42 = [...xs41, x];\n  const xs43 = [...xs42, x];\n  const xs44 = [...xs43, x];\n  const xs45 = [...xs44, x];\n  const xs46 = [...xs45, x];\n  const xs47 = [...xs46, x];\n  const xs48 = [...xs47, x];\n  const xs49 = [...xs48, x];\n  const xs50 = [...xs49, x];\n  const xs51 = [...xs50, x];\n  const xs52 = [...xs51, x];\n  const xs53 = [...xs52, x];\n  const xs54 = [...xs53, x];\n  const xs55 = [...xs54, x];\n  const xs56 = [...xs55, x];\n  const xs57 = [...xs56, x];\n  const xs58 = [...xs57, x];\n  const xs59 = [...xs58, x];\n  const xs60 = [...xs59, x];\n  const xs61 = [...xs60, x];\n  const xs62 = [...xs61, x];\n  const xs63 = [...xs62, x];\n  const xs64 = [...xs63, x];\n  const xs65 = [...xs64, x];\n  const xs66 = [...xs65, x];\n  const xs67 = [...xs66, x];\n  const xs68 = [...xs67, x];\n  const xs69 = [...xs68, x];\n  const xs70 = [...xs69, x];\n  const xs71 = [...xs70, x];\n  const xs72 = [...xs71, x];\n  const xs73 = [...xs72, x];\n  const xs74 = [...xs73, x];\n  const xs75 = [...xs74, x];\n  const xs76 = [...xs75, x];\n  const xs77 = [...xs76, x];\n  const xs78 = [...xs77, x];\n  const xs79 = [...xs78, x];\n  const xs80 = [...xs79, x];\n  const xs81 = [...xs80, x];\n  const xs82 = [...xs81, x];\n  const xs83 = [...xs82, x];\n  const xs84 = [...xs83, x];\n  const xs85 = [...xs84, x];\n  const xs86 = [...xs85, x];\n  const xs87 = [", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const sorted = l.slice().sort();\n  const divisors = [3, 5, 7];\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    for (let j = 0; j < divisors.length; j++) {\n      if (sorted[i] % divisors[j] === 0) {\n        result.push(sorted[i]);\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd2 = (l) => {\n  const sorted = l.slice().sort();\n  const divisors = [3, 5, 7];\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    for (let j = 0; j < divisors.length; j++) {\n      if (sorted[i] % divisors[j] === 0) {\n        result.push(sorted[i]);\n        break;\n      }\n    }\n  }\n  return result;\n};\n\nconst test = (l) => {\n  console.log(sorTThiRd(l));\n  console.log(sorTThiRd2(l));\n};\n\ntest([1, 2, 3]);\ntest([5, 6, 3, 4, 8, 9, 2]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*Return the sum of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  45\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*Return the average of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4.5\n  */\nconst avg = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode2 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode3 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode4 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode5 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode6 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode7 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode8 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mode = sorted[0];\n  const count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== mode) {\n      mode = sorted[i];\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt2 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt3 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt4 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt5 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt6 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt7 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt8 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt9 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt10 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt11 = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt12 = (l) => {\n  const max = -Infinity", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ2 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ3 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ4 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ5 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ6 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ7 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ8 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ9 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZA = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (i === 11 || i === 13)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN2 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN3 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 2];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN4 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 3];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN5 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 4];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN6 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 5];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN7 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 6];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN8 = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length / 2; i++) {\n    l2[i] = l[i * 2 + 7];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTE", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2] + group[3]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2] + group[3] + group[4]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n    let a = 1, b = 1, c = 1, d = 1;\n    while (c < n) {\n        a = b;\n        b = c;\n        c = a + b;\n        d = a + b + c;\n    }\n    return d;\n};\n\n/*\n  primeMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeMeFiB(1)\n  2\n  >>> primeMeFiB(2)\n  3\n  >>> primeMeFiB(3)\n  5\n  >>> primeMeFiB(4)\n  13\n  >>> primeMeFiB(5)\n  89\n  */\nconst primeMeFiB = (n) => {\n    let a = 1, b = 1, c = 1, d = 1;\n    while (c < n) {\n        a = b;\n        b = c;\n        c = a + b;\n        d = a + b + c;\n        if (isPrime(d)) {\n            return d;\n        }\n    }\n    return d;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  true\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  false\n  >>> isPrime(7)\n  false\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n    const lSize = l.length;\n    if (lSize < 3) {\n        return false;\n    }\n    const sum = l.reduce((a, b) => a + b);\n    if (sum === 0) {\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = triPlessumTozerO;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!= j) {\n        let x1 = Math.random() * 100;\n        let y1 = Math.random() * 100;\n        let x2 = Math.random() * 100;\n        let y2 = Math.random() * 100;\n        let x = x1 + (x2 - x1) * Math.random();\n        let y = y1 + (y2 - y1) * Math.random();\n        let dx = x2 - x1;\n        let dy = y2 - y1;\n        let d = Math.sqrt(dx * dx + dy * dy);\n        let vx = dx / d;\n        let vy = dy / d;\n        let v = Math.sqrt(vx * vx + vy * vy);\n        let a = vx / v;\n        let b = vy / v;\n        let x1p = x1 + a * d;\n        let y1p = y1 + b * d;\n        let x2p = x2 - a * d;\n        let y2p = y2 - b * d;\n        let x1m = x1 - a * d;\n        let y1m = y1 - b * d;\n        let x2m = x2 + a * d;\n        let y2m = y2 + b * d;\n        let x1p2 = x1p + a * d;\n        let y1p2 = y1p + b * d;\n        let x2p2 = x2p + a * d;\n        let y2p2 = y2p + b * d;\n        let x1m2 = x1m + a * d;\n        let y1m2 = y1m + b * d;\n        let x2m2 = x2m + a * d;\n        let y2m2 = y2m + b * d;\n        let x1p3 = x1p2 + a * d;\n        let y1p3 = y1p2 + b * d;\n        let x2p3 = x2p2 + a * d;\n        let y2p3 = y2p2 + b * d;\n        let x1m3 = x1m2 + a * d;\n        let y1m3 = y1m2 + b * d;\n        let x2m3 = x2m2 + a * d;\n        let y2m3 = y2m2 + b * d;\n        let x1p4 = x1p3 + a * d;\n        let y1p4 = y1p3 + b * d;\n        let x2p4 = x2p3 + a * d;\n        let y2p4 = y2p3 + b * d;\n        let x1m4 = x1m3 + a * d;\n        let y1m4 = y1m3 + b * d;\n        let x2m4 = x2m3 + a * d;\n        let y2m4 = y2m3 + b * d;\n        let x1p5 = x1p4 + a * d;\n        let y1p5 = y1p4 + b * d;\n        let x2p5 = x2p4 + a * d;\n        let y2p5 = y2p4 + b * d;\n        let x1m5 = x1m4 + a * d;\n        let y1m5 = y1m4 + b * d;\n        let x2m5 = x2m4 + a * d;\n        let y2m5 = y2m4 + b * d;\n        let x1p6 = x1p5 + a * d;\n        let y1p6 = y1p5 + b * d;\n        let x2p6 = x2p5 + a * d;\n        let y2p6 = y2p5 + b * d;\n        let x1m6 = x1m5 + a * d;\n        let y1m6 = y1m5 + b * d;\n        let x2m6 = x2m5 + a * d;\n        let y2m6 = y2m5 + b * d;\n        let x1p7 = x1p6 + a * d;\n        let y1p7 = y1p6 + b * d;\n        let x2p7 = x2p6 + a * d;\n        let y2p7 = y2p6 + b * d;\n        let x1m7 = x1m6 + a * d;\n        let y1m7 = y1m6 + b * d;\n        let x2m7 = x2m6 + a * d;\n        let y2m7 = y2m6 + b * d;\n        let x1p8 = x1p7 + a * d;\n        let y1p8 = y1p7 + b * d;\n        let x2p8 = x2p7 + a * d;\n        let y2p8 = y2p7 + b * d;\n        let x1m8 = x1m7 + a * d;\n        let y1m8 = y1m7 + b * d;\n        let x2m8 = x2m7 + a * d;\n        let y2m8 = y2m7 + b * d;\n        let x1p9 = x1p8 + a * d;\n        let y1p9 = y1p8 + b * d;\n        let x2p9 = x2p8 + a * d;\n        let y2p9 = y2p8 + b * d;\n        let x1m9 = x1m8", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis2 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis3 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis4 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis5 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis6 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis7 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis8 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis9 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis10 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of strings as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd'])\n  false\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e'])\n  false\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f'])\n  false\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'])\n  true\n  >>> paiRsSuMToZeRo(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Convert a number to a string.\n  >>> chaNgeToStr(8)\n  '8'\n  >>> chaNgeToStr(8.5)\n  '8.5'\n  >>> chaNgeToStr(8.5, 2)\n  '10'\n  >>> chaNgeToStr(8.5, 3)\n  '11'\n  >>> chaNgeToStr(8.5, 4)\n  '12'\n  >>> chaNgeToStr(8.5, 5)\n  '13'\n  >>> chaNgeToStr(8.5, 6)\n  '14'\n  >>> chaNgeToStr(8.5, 7)\n  '15'\n  >>> chaNgeToStr(8.5, 8)\n  '16'\n  >>> chaNgeToStr(8.5, 9)\n  '17'\n  >>> chaNgeToStr(8.5, 10)\n  '18'\n  >>> chaNgeToStr(8.5, 11)\n  '19'\n  >>> chaNgeToStr(8.5, 12)\n  '20'\n  >>> chaNgeToStr(8.5, 13)\n  '21'\n  >>> chaNgeToStr(8.5, 14)\n  '22'\n  >>> chaNgeToStr(8.5, 15)\n  '23'\n  >>> chaNgeToStr(8.5, 16)\n  '24'\n  >>> chaNgeToStr(8.5, 17)\n  '25'\n  >>> chaNgeToStr(8.5, 18)\n  '26'\n  >>> chaNgeToStr(8.5, 19)\n  '27'\n  >>> chaNgeToStr(8.5, 20)\n  '28'\n  >>> chaNgeToStr(8.5, 21)\n  '29'\n  >>> chaNgeToStr(8.5, 22)\n  '30'\n  >>> chaNgeToStr(8.5, 23)\n  '31'\n  >>> chaNgeToStr(8.5, 24)\n  '32'\n  >>> chaNgeToStr(8.5, 25)\n  '33'\n  >>> chaNgeToStr(8.5, 26)\n  '34'\n  >>> chaNgeToStr(8.5, 27)\n  '35'\n  >>> chaNgeToStr(8.5, 28)\n  '36'\n  >>> chaNgeToStr(8.5, 29)\n  '37'\n  >>> chaNgeToStr(8.5, 30)\n  '38'\n  >>> chaNgeToStr(8.5, 31)\n  '39'\n  >>> chaNgeToStr(8.5, 32)\n  '40'\n  >>> chaNgeToStr(8.5, 33)\n  '41'\n  >>> chaNgeToStr(8.5, 34)\n  '42'\n  >>> chaNgeToStr(8.5, 35)\n  '43'\n  >>> chaNgeToStr(8.5, 36)\n  '44'\n  >>> chaNgeToStr(8.5, 37)\n  '45'\n  >>> chaNgeToStr(8.5, 38)\n  '46'\n  >>> chaNgeToStr(8.5, 39)\n  '47'\n  >>> chaNgeToStr(8.5, 40)\n  '48'\n  >>> chaNgeToStr(8.5, 41)\n  '49'\n  >>> chaNgeToStr(8.5, 42)\n  '50'\n  >>> chaNgeToStr(8.5, 43)\n  '51'\n  >>> chaNgeToStr(8.5, 44)\n  '52'\n  >>> chaNgeToStr(8.5, 45)\n  '53'\n  >>> chaNgeToStr(8.5, 46)\n  '54'\n  >>> chaNgeToStr(8.5, 47)\n  '55'\n  >>> chaNgeToStr(8.5, 48)\n  '56'\n  >>> chaNgeToStr(8.5, 49)\n  '57'\n  >>> chaNgeToStr(8.5, 50)\n  '58'\n  >>> chaNgeToStr(8.5, 51)\n  '59'\n  >>> chaNgeToStr(8.5, 52)\n  '60'\n  >>> chaNgeToStr(8.5, 53)\n  '61'\n  >>> chaNgeToStr(8.5, 54)\n  '62'\n  >>> chaNgeToStr(8.5, 55)\n  '63'\n  >>> chaNgeToStr(8.5, 56)\n  '64'\n  >>> chaNgeToStr(8.5, 57)\n  '65'\n  >>> chaNgeToStr(8.5, 58)\n  '66'\n  >>> chaNgeToStr(8.5, 59)\n  '67'\n  >>> chaNgeToStr(8.5, 60)\n  '68'\n  >>> chaNgeToStr(8.5, 61)\n  '69'\n  >>> chaNgeToStr(8.5, 62)\n  '70'\n  >>> chaNgeToStr(8.5, 63)\n  '71'\n  >>> chaNgeToStr(8.5, 64)\n  '72'\n  >>> chaNgeToStr(8.5, 65)\n  '73'\n  >>> chaNgeToStr(8.5, 66)\n  '74'\n  >>> chaNgeToStr(8.5, 67)\n  '75'\n  >>> chaNgeToStr(8.5, 68)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglE", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = len / 2\n  const left = medIan(l.slice(0, half))\n  const right = medIan(l.slice(half))\n  return Math.max(left, right)\n}\n\nexport default medIan\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textChar = '';\n    let isPalindrome = true;\n\n    while (textIndex < textLength) {\n        textChar = text[textIndex];\n        textIndex++;\n\n        if (textIndex < textLength) {\n            if (textChar!== text[textIndex]) {\n                isPalindrome = false;\n                break;\n            }\n            textIndex++;\n        }\n    }\n\n    return isPalindrome;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome2 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textChar = '';\n    let isPalindrome = true;\n\n    while (textIndex < textLength) {\n        textChar = text[textIndex];\n        textIndex++;\n\n        if (textIndex < textLength) {\n            if (textChar!== text[textIndex]) {\n                isPalindrome = false;\n                break;\n            }\n            textIndex++;\n        }\n    }\n\n    return isPalindrome;\n};\n\nmodule.exports = {\n    isPAlinDrome,\n    isPAlinDrome2\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  if (n === 0) return 1\n  const d = Math.floor(Math.log(n) / Math.log(p))\n  return (n % p) * Math.pow(p, d) % p\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst bitCount = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return count\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingWeight = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return count\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance2 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance3 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance4 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance5 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance6 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance7 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n & 1) count++\n    n = n >> 1\n  }\n  return n\n}\n\n/*Return the number of 1 bits in n.\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst hammingDistance8 = (n) => {\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    if (n &", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y')\n  [1, 2, 3]\n  */\nconst intErspErse2 = (numbers, delimeter, delimiter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter);\n        i++;\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y')\n  [1, 2, 3]\n  */\nconst intErspErse3 = (numbers, delimeter, delimiter, delimiter2) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter);\n        i++;\n        if (i < numbers.length) {\n          result.push(delimiter2);\n          i++;\n        }\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y', 'z')\n  [1, 2, 3]\n  */\nconst intErspErse4 = (numbers, delimeter, delimiter, delimiter2, delimiter3) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter);\n        i++;\n        if (i < numbers.length) {\n          result.push(delimiter2);\n          i++;\n          if (i < numbers.length) {\n            result.push(delimiter3);\n            i++;\n          }\n        }\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y', 'z')\n  [1, 2, 3]\n  */\nconst intErspErse5 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter4) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter);\n        i++;\n        if (i < numbers.length) {\n          result.push(delimiter2);\n          i++;\n          if (i < numbers.length) {\n            result.push(delimiter3);\n            i++;\n            if (i < numbers.length) {\n              result.push(delimiter4);\n              i++;\n            }\n          }\n        }\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y', 'z')\n  [1, 2, 3]\n  >>> intErspErse([1, 2, 3], 'x', 'y', 'z', 'w')\n  [1, 2, 3]\n  */\nconst intErspErse6 = (numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHiftSHIFT13 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vow", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd2 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd3 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd4 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd5 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd6 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd7 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd8 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd9 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd10 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd11 = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst negate = (x) => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  2\n  >>> abs(5)\n  5\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  32988435\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.414213562373095\n  >>> sqrt(5)\n  2.23606797749978\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*\n  >>> floor(2.5)\n  2\n  >>> floor(5.5)\n  5\n  >>> floor(7.5)\n  7\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*\n  >>> ceil(2.5)\n  3\n  >>> ceil(5.5)\n  6\n  >>> ceil(7.5)\n  8\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*\n  >>> round(2.5)\n  2\n  >>> round(5.5)\n  6\n  >>> round(7.5)\n  8\n  */\nconst truncate = (x) => {\n  return Math.trunc(x);\n};\n\n/*\n  >>> truncate(2.5)\n  2\n  >>> truncate(5.5)\n  5\n  >>> truncate(7.5)\n  7\n  */\nconst min = (x, y) => {\n  return Math.min(x, y);\n};\n\n/*\n  >>> min(2, 3)\n  2\n  >>> min(5, 7)\n  5\n  */\nconst max = (x, y) => {\n  return Math.max(x, y);\n};\n\n/*\n  >>> max(2, 3)\n  3\n  >>> max(5, 7)\n  7\n  */\nconst clamp = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp(2, 1, 3)\n  2\n  >>> clamp(5, 1, 3)\n  3\n  >>> clamp(7, 1, 3)\n  3\n  */\nconst clamp_to_range = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp_to_range(2, 1, 3)\n  2\n  >>> clamp_to_range(5, 1, 3)\n  3\n  >>> clamp_to_range(7, 1, 3)\n  3\n  */\nconst clamp_to_length = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp_to_length(2, 1, 3)\n  2\n  >>> clamp_to_length(5, 1, 3)\n  3\n  >>> clamp_to_length(7, 1, 3)\n  3\n  */\nconst clamp_to_value = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp_to_value(2, 1, 3)\n  2\n  >>> clamp_to_value(5, 1, 3)\n  3\n  >>> clamp_to_value(7, 1, 3)\n  3\n  */\nconst clamp_to_value_in_range = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp_to_value_in_range(2, 1, 3)\n  2\n  >>> clamp_to_value_in_range(5, 1, 3)\n  3\n  >>> clamp_to_value_in_range(7, 1, 3)\n  3\n  */\nconst clamp_to_value_in_range_inclusive = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp_to_value_in_range_inclusive(2, 1, 3)\n  2\n  >>> clamp_to_value_in_range_inclusive(5, 1, 3)\n  3\n  >>> clamp_to_value_in_range_inclusive(7, 1, 3)\n  3\n  */\nconst clamp_to_value_in_range_exclusive = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samECha = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samECha2 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samECha3 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samECha4 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samECha5 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  */\nconst corRectbrackEtiNg2 = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  */\nconst corRectbrackEtiNg3 = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  */\nconst corRectbrackEtiNg4 = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  */\nconst corRectbrackEtiNg5 = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  */\nconst corRectbrackEtiNg6 = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  */\nconst corRectbrackEtiNg7 = (brackets) => {\n  const len = brackets.length\n  const open = brackets.slice(0, len - 1)\n  const close = brackets.slice(1, len)\n  return open.every(c => close.indexOf(c)!== -1)\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *  brackets is a string of \"<\" and \">\".\n  *  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> cor", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc2 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc3 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc4 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc5 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] <= l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc6 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] >= l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc7 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc8 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc9 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] <= l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc10 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc11 = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] >= l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = comMon;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprime", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const stack_max_length = 0;\n  const stack_string = '';\n  const stack_string_length = 0;\n  const stack_string_max_length = 0;\n  const stack_string_string = '';\n  const stack_string_string_length = 0;\n  const stack_string_string_max_length = 0;\n  const stack_string_string_string = '';\n  const stack_string_string_string_length = 0;\n  const stack_string_string_string_max_length = 0;\n  const stack_string_string_string_string = '';\n  const stack_string_string_string_string_length = 0;\n  const stack_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string_string_string_string_string_string_string_string_string_string_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_max_length = 0;\n  const stack_string_string_string_string_string_string_string_string_string_string_string_string = '';\n  const stack_string_string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \")\") {\n      stack.push(char)\n    } else if (stack.length === 0) {\n      return false\n    } else if (stack.pop()!== char) {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  *\n  * @description\n  * Brackets are a string of \"(\" and \")\".\n  *\n  * @example\n  *\n  *   corBrackEtiNg(\"()\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\"(()())\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\")(()\")\n  *   // => false\n  */\nconst corBrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \")\") {\n      stack.push(char)\n    } else if (stack.length === 0) {\n      return false\n    } else if (stack.pop()!== char) {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  *\n  * @description\n  * Brackets are a string of \"(\" and \")\".\n  *\n  * @example\n  *\n  *   corBrackEtiNg(\"()\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\"(()())\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\")(()\")\n  *   // => false\n  */\nconst corBrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \")\") {\n      stack.push(char)\n    } else if (stack.length === 0) {\n      return false\n    } else if (stack.pop()!== char) {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  *\n  * @description\n  * Brackets are a string of \"(\" and \")\".\n  *\n  * @example\n  *\n  *   corBrackEtiNg(\"()\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\"(()())\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\")(()\")\n  *   // => false\n  */\nconst corBrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \")\") {\n      stack.push(char)\n    } else if (stack.length === 0) {\n      return false\n    } else if (stack.pop()!== char) {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  *\n  * @description\n  * Brackets are a string of \"(\" and \")\".\n  *\n  * @example\n  *\n  *   corBrackEtiNg(\"()\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\"(()())\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\")(()\")\n  *   // => false\n  */\nconst corBrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \")\") {\n      stack.push(char)\n    } else if (stack.length === 0) {\n      return false\n    } else if (stack.pop()!== char) {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  *\n  * @description\n  * Brackets are a string of \"(\" and \")\".\n  *\n  * @example\n  *\n  *   corBrackEtiNg(\"()\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\"(()())\")\n  *   // => true\n  *\n  *   corBrackEtiNg(\")(()\")\n  *   // => false\n  */\nconst corBrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const stack = []\n  for", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n  * Return the derivative of this polynomial in the same form.\n  * >>> derIvatIve([3, 1, 2, 4, 5])\n  * [1, 4, 12, 20]\n  * >>> derIvatIve([1, 2, 3])\n  * [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n  * Return the derivative of this polynomial in the same form.\n  * >>> derIvatIve([3, 1, 2, 4, 5])\n  * [1, 4, 12, 20]\n  * >>> derIvatIve([1, 2, 3])\n  * [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n  * Return the derivative of this polynomial in the same form.\n  * >>> derIvatIve([3, 1, 2, 4, 5])\n  * [1, 4, 12, 20]\n  * >>> derIvatIve([1, 2, 3])\n  * [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n  * Return the derivative of this polynomial in the same form.\n  * >>> derIvatIve([3, 1, 2, 4, 5])\n  * [1, 4, 12, 20]\n  * >>> derIvatIve([1, 2, 3])\n  * [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n  * Return the derivative of this polynomial in the same form.\n  * >>> derIvatIve([3, 1, 2, 4, 5])\n  * [1, 4, 12, 20]\n  * >>> derIvatIve([1, 2, 3])\n  * [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n  * Return the derivative of this polynomial in the same form.\n  * >>> derIvatIve([3, 1, 2, 4, 5])\n  * [1, 4, 12, 20]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3)\n  }\n}\n\nconsole.log(fibFib(1))\nconsole.log(fibFib(5))\nconsole.log(fibFib(8))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nexport {\n  vowElsCOunt\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  const len = x.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(x[len - i - 1]);\n  }\n  if (shift > len) {\n    for (let i = 0; i < len; i++) {\n      result.push(x[i]);\n    }\n  } else {\n    for (let i = 0; i < len - shift; i++) {\n      result.push(x[i + shift]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zklnmptvhqrwxjycfrbkpE'\n  >>> reverse('abcdef", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuL = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower and upper\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSu = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuA = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuX = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuY = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuZ = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuW = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 0\n      digItSuM(\"helloE\") => 0\n      digItSuM(\"woArBld\") => 0\n      digItSuM(\"aAaaaXa\") => 0\n  */\nconst digItSuV", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === 'a') {\n      total += parseInt(s.slice(index + 1, index + 2));\n      count += 1;\n    } else if (s[index] === 'o') {\n      total += parseInt(s.slice(index + 1, index + 2));\n      count += 1;\n    } else if (s[index] ==='m') {\n      total += parseInt(s.slice(index + 1, index + 2));\n      count += 1;\n    }\n    index += 1;\n  }\n  return total - count - n;\n};\n\nconsole.log(fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19));\nconsole.log(fruItDiStribUtiOn(\"0 apples and 1 oranges\", 3));\nconsole.log(fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100));\nconsole.log(fruItDiStribUtiOn(\"100 apples and 1 oranges\", 120));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const even = (num) => num % 2 === 0;\n  const min = (a, b) => a < b? a : b;\n  const minIndex = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const minValue = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValue = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenIndex = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex2 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex3 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex4 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex5 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex6 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex7 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex8 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex9 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex10 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex11 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex12 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex13 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex14 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex15 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex16 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex17 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex18 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex19 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const evenValueIndex20 = (arr) => arr.reduce((acc, num, i) => acc.indexOf(num) === i? num : min(acc[i], num), [])[0];\n  const even", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x >= max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\n/*\n  Given a list of positive integers, return the largest integer that is greater than zero, and has a frequency\n  greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch2 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x >= max)\n  if (maxFreqIndex === -1) return -1\n  return max\n}\n\n/*\n  Given a list of positive integers, return the largest integer that is greater than zero, and has a frequency\n  greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch3 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x >= max)\n  if (maxFreqIndex === -1) return -1\n  return max\n}\n\n/*\n  Given a list of positive integers, return the largest integer that is greater than zero, and has a frequency\n  greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch4 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x >= max)\n  if (maxFreqIndex === -1) return -1\n  return max\n}\n\n/*\n  Given a list of positive integers, return the largest integer that is greater than zero, and has a frequency\n  greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch5 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x >= max)\n  if (maxFreqIndex === -1) return -1\n  return max\n}\n\n/*\n  Given a list of positive integers, return the largest integer that is greater than zero, and has a frequency\n  greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch6 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x >= max)\n  if (maxFreqIndex === -1) return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const str = strings[i]\n    const substr = str.substr(0, 1)\n    if (substr === substring) {\n      newStrings.push(str)\n    }\n  }\n  return newStrings\n}\n\n/* Filter an input list of strings only for ones that contain given subst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return sorted.concat(reversed);\n};\n\nmodule.exports = strAngesortLIst;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconsole.log(wilLItFLy([1, 2], 5));\nconsole.log(wilLItFLy([3, 2, 3], 1));\nconsole.log(wilLItFLy([3], 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let len = arr.length;\n  let min = 0;\n  let max = 0;\n  let min_index = 0;\n  let max_index = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp_index = 0;\n  let temp_index_2 = 0;\n  let temp_index_3 = 0;\n  let temp_index_4 = 0;\n  let temp_index_5 = 0;\n  let temp_index_6 = 0;\n  let temp_index_7 = 0;\n  let temp_index_8 = 0;\n  let temp_index_9 = 0;\n  let temp_index_10 = 0;\n  let temp_index_11 = 0;\n  let temp_index_12 = 0;\n  let temp_index_13 = 0;\n  let temp_index_14 = 0;\n  let temp_index_15 = 0;\n  let temp_index_16 = 0;\n  let temp_index_17 = 0;\n  let temp_index_18 = 0;\n  let temp_index_19 = 0;\n  let temp_index_20 = 0;\n  let temp_index_21 = 0;\n  let temp_index_22 = 0;\n  let temp_index_23 = 0;\n  let temp_index_24 = 0;\n  let temp_index_25 = 0;\n  let temp_index_26 = 0;\n  let temp_index_27 = 0;\n  let temp_index_28 = 0;\n  let temp_index_29 = 0;\n  let temp_index_30 = 0;\n  let temp_index_31 = 0;\n  let temp_index_32 = 0;\n  let temp_index_33 = 0;\n  let temp_index_34 = 0;\n  let temp_index_35 = 0;\n  let temp_index_36 = 0;\n  let temp_index_37 = 0;\n  let temp_index_38 = 0;\n  let temp_index_39 = 0;\n  let temp_index_40 = 0;\n  let temp_index_41 = 0;\n  let temp_index_42 = 0;\n  let temp_index_43 = 0;\n  let temp_index_44 = 0;\n  let temp_index_45 = 0;\n  let temp_index_46 = 0;\n  let temp_index_47 = 0;\n  let temp_index_48 = 0;\n  let temp_index_49 = 0;\n  let temp_index_50 = 0;\n  let temp_index_51 = 0;\n  let temp_index_52 = 0;\n  let temp_index_53 = 0;\n  let temp_index_54 = 0;\n  let temp_index_55 = 0;\n  let temp_index_56 = 0;\n  let temp_index_57 = 0;\n  let temp_index_58 = 0;\n  let temp_index_59 = 0;\n  let temp_index_60 = 0;\n  let temp_index_61 = 0;\n  let temp_index_62 = 0;\n  let temp_index_63 = 0;\n  let temp_index_64 = 0;\n  let temp_index_65 = 0;\n  let temp_index_66 = 0;\n  let temp_index_67 = 0;\n  let temp_index_68 = 0;\n  let temp_index_69 = 0;\n  let temp_index_70 = 0;\n  let temp_index_71 = 0;\n  let temp_index_72 = 0;\n  let temp_index_73 = 0;\n  let temp_index_74 = 0;\n  let temp_index_75 = 0;\n  let temp_index_76 = 0;\n  let temp_index_77 = 0;\n  let temp_index_78 = 0;\n  let temp_index_79 = 0;\n  let temp_index_80 = 0;\n  let temp_index_81 = 0;\n  let temp_index_82 = 0;\n  let temp_index_83 = 0;\n  let temp_index_84 = 0;\n  let temp_index_85 = 0;\n  let temp_index_86 = 0;\n  let temp_index_87 = 0;\n  let temp_index_88 = 0;\n  let temp_index_89 = 0;\n  let temp_index_90 = 0;\n  let temp_index_91 = 0;\n  let temp_index_92 = 0;\n  let temp_index_93 = 0;\n  let temp_index_94 = 0;\n  let temp_index_95 = 0;\n  let temp_index_96 = 0;\n  let temp_index_97 = 0;\n  let temp_index_98 = 0;\n  let temp_index_99 = 0;\n  let temp_index_100 = 0;\n  let temp_index_101 = 0;\n  let temp_index_102 = 0;\n  let temp_index_103 = 0;\n  let temp_index_104 = 0;\n  let temp_index_105 = 0;\n  let temp_index_106 = 0;\n  let temp_index_107 = 0;\n  let temp_index_108 = 0;\n  let temp_index_109 = 0;\n  let temp_index_110 = 0;\n  let temp_index_111 = 0;\n  let temp_index_112 = 0;\n  let temp_index_113 = 0;\n  let temp_index_114 = 0;\n  let temp_index_115 = 0;\n  let temp_index_116 = 0;\n  let temp_index_117 = 0;\n  let temp_index_118 = 0;\n  let temp_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        lst.push(lst1[i])\n        break\n      }\n    }\n  }\n  return lst\n}\n\nconsole.log(totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) === totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nconsole.log(totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) === totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi', 'admin', 'project']))\nconsole.log(totAlMaTch(['4'], ['1', '2', '3', '4', '5']) === totAlMaTch(['4'], ['1', '2', '3', '4', '5', '6']))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme2 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme3 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme4 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme5 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme6 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme7 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme8 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme9 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme10 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme11 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme12 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme13 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme14 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme15 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme16 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme17 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme18 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme19 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme20 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme21 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme22 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isMUltiPlyPrIme23 = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n};\n\nconsole.log(isSImplEPoweR(1, 4));\nconsole.log(isSImplEPoweR(2, 2));\nconsole.log(isSImplEPoweR(8, 2));\nconsole.log(isSImplEPoweR(3, 2));\nconsole.log(isSImplEPoweR(3, 1));\nconsole.log(isSImplEPoweR(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return true;\n  }\n  if (a % 5 === 0) {\n    return true;\n  }\n  if (a % 7 === 0) {\n    return true;\n  }\n  if (a % 11 === 0) {\n    return true;\n  }\n  if (a % 13 === 0) {\n    return true;\n  }\n  if (a % 17 === 0) {\n    return true;\n  }\n  if (a % 19 === 0) {\n    return true;\n  }\n  if (a % 23 === 0) {\n    return true;\n  }\n  if (a % 29 === 0) {\n    return true;\n  }\n  if (a % 31 === 0) {\n    return true;\n  }\n  if (a % 37 === 0) {\n    return true;\n  }\n  if (a % 41 === 0) {\n    return true;\n  }\n  if (a % 43 === 0) {\n    return true;\n  }\n  if (a % 47 === 0) {\n    return true;\n  }\n  if (a % 53 === 0) {\n    return true;\n  }\n  if (a % 59 === 0) {\n    return true;\n  }\n  if (a % 61 === 0) {\n    return true;\n  }\n  if (a % 67 === 0) {\n    return true;\n  }\n  if (a % 71 === 0) {\n    return true;\n  }\n  if (a % 73 === 0) {\n    return true;\n  }\n  if (a % 79 === 0) {\n    return true;\n  }\n  if (a % 83 === 0) {\n    return true;\n  }\n  if (a % 89 === 0) {\n    return true;\n  }\n  if (a % 97 === 0) {\n    return true;\n  }\n  if (a % 101 === 0) {\n    return true;\n  }\n  if (a % 103 === 0) {\n    return true;\n  }\n  if (a % 107 === 0) {\n    return true;\n  }\n  if (a % 109 === 0) {\n    return true;\n  }\n  if (a % 113 === 0) {\n    return true;\n  }\n  if (a % 127 === 0) {\n    return true;\n  }\n  if (a % 131 === 0) {\n    return true;\n  }\n  if (a % 137 === 0) {\n    return true;\n  }\n  if (a % 139 === 0) {\n    return true;\n  }\n  if (a % 143 === 0) {\n    return true;\n  }\n  if (a % 149 === 0) {\n    return true;\n  }\n  if (a % 151 === 0) {\n    return true;\n  }\n  if (a % 157 === 0) {\n    return true;\n  }\n  if (a % 163 === 0) {\n    return true;\n  }\n  if (a % 167 === 0) {\n    return true;\n  }\n  if (a % 179 === 0) {\n    return true;\n  }\n  if (a % 181 === 0) {\n    return true;\n  }\n  if (a % 187 === 0) {\n    return true;\n  }\n  if (a % 191 === 0) {\n    return true;\n  }\n  if (a % 193 === 0) {\n    return true;\n  }\n  if (a % 197 === 0) {\n    return true;\n  }\n  if (a % 199 === 0) {\n    return true;\n  }\n  if (a % 211 === 0) {\n    return true;\n  }\n  if (a % 223 === 0) {\n    return true;\n  }\n  if (a % 227 === 0) {\n    return true;\n  }\n  if (a % 229 === 0) {\n    return true;\n  }\n  if (a % 233 === 0) {\n    return true;\n  }\n  if (a % 239 === 0) {\n    return true;\n  }\n  if (a % 241 === 0) {\n    return true;\n  }\n  if (a % 247 === 0) {\n    return true;\n  }\n  if (a % 251 === 0) {\n    return true;\n  }\n  if (a % 257 === 0) {\n    return true;\n  }\n  if (a % 263 === 0) {\n    return true;\n  }\n  if (a % 269 === 0) {\n    return true;\n  }\n  if (a % 271 === 0) {\n    return true;\n  }\n  if (a % 277 === 0) {\n    return true;\n  }\n  if (a % 281 === 0) {\n    return true;\n  }\n  if (a % 283 === 0) {\n    return true;\n  }\n  if (a % 289 === 0) {\n    return true;\n  }\n  if (a % 293 === 0) {\n    return true;\n  }\n  if (a % 307 === 0) {\n    return true;\n  }\n  if (a % 311 === 0) {\n    return true;\n  }\n  if (a % 313 === 0) {\n    return true;\n  }\n  if (a % 317 === 0) {\n    return true;\n  }\n  if (a % 331 === 0) {\n    return true;\n  }\n  if (a % 337 === 0) {\n    return true;\n  }\n  if (a % 347 === 0) {\n    return true;\n  }\n  if (a % 349 === 0) {\n    return true;\n  }\n  if (a % 353 === 0) {\n    return true;\n  }\n  if (a %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  const num = num.toUpperCase();\n  const len = num.length;\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const prime_count = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i++;\n    }\n    return count;\n  };\n  const prime_count_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 10;\n    }\n    return count;\n  };\n  const prime_count_dec_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 10;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 10;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_hex_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 10;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 10;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec_dec_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec_dec_dec = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 10;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec_dec_dec_hex = (n) => {\n    let i = 2;\n    let count = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        count++;\n      }\n      i += 16;\n    }\n    return count;\n  };\n  const prime_count_hex_dec_dec_dec_dec_dec_dec = (n) => {\n    let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry2 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry3 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry4 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry5 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry6 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry7 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry8 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry9 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry10 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry11 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry12 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry13 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry14 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry15 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry16 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry17 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry18 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binImaltoDecAry19 = (binary) => {\n  let decimal = 0;\n  for (let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct2 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct3 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct4 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct5 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct6 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct7 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct8 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct9 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct10 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  [(10, 24), (15, 48), (20, 96), (25, 192)]\n  */\nconst sumprodUct11 = (numbers) => {\n  const sum = numbers.reduce((acc,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const arr = s.split('')\n  const lenArr = arr.length\n  if (lenArr < 3) return false\n  const diff = arr.filter((x, i) => i === 0? x!== arr[1] : x!== arr[i - 1] && x!== arr[i + 1])\n  return diff.length === 0\n}\n\nconsole.log(isHAppy('a'))\nconsole.log(isHAppy('aa'))\nconsole.log(isHAppy('abcd'))\nconsole.log(isHAppy('aabb'))\nconsole.log(isHAppy('adb'))\nconsole.log(isHAppy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  const len = sorted.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (sorted[i] >= 3.7) {\n      result.push('A+');\n    } else if (sorted[i] >= 3.3) {\n      result.push('A');\n    } else if (sorted[i] >= 3.0) {\n      result.push('B+');\n    } else if (sorted[i] >= 2.7) {\n      result.push('B');\n    } else if (sorted[i] >= 2.3) {\n      result.push('C-');\n    } else if (sorted[i] >= 2.0) {\n      result.push('C');\n    } else if (sorted[i] >= 1.7) {\n      result.push('D+');\n    } else if (sorted[i] >= 1.3) {\n      result.push('D');\n    } else if (sorted[i] >= 1.0) {\n      result.push('D-');\n    } else if (sorted[i] >= 0.0) {\n      result.push('E');\n    }\n  }\n  return result;\n};\n\nconsole.log(numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  const len = string.length\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (isPrime(len)) {\n    return true\n  }\n  return false\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains all the characters in the string\n  Examples\n  containsAll('Hello') == true\n  containsAll('Hello World') == true\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World') == false\n  containsAll('Hello World", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  const arr2 = arr.filter((x) => x % 10 === 1)\n  const arr3 = arr.filter((x) => x % 10 === 1)\n  const arr4 = arr.filter((x) => x % 10 === 1)\n  const arr5 = arr.filter((x) => x % 10 === 1)\n  const arr6 = arr.filter((x) => x % 10 === 1)\n  const arr7 = arr.filter((x) => x % 10 === 1)\n  const arr8 = arr.filter((x) => x % 10 === 1)\n  const arr9 = arr.filter((x) => x % 10 === 1)\n  const arr10 = arr.filter((x) => x % 10 === 1)\n  const arr11 = arr.filter((x) => x % 10 === 1)\n  const arr12 = arr.filter((x) => x % 10 === 1)\n  const arr13 = arr.filter((x) => x % 10 === 1)\n  const arr14 = arr.filter((x) => x % 10 === 1)\n  const arr15 = arr.filter((x) => x % 10 === 1)\n  const arr16 = arr.filter((x) => x % 10 === 1)\n  const arr17 = arr.filter((x) => x % 10 === 1)\n  const arr18 = arr.filter((x) => x % 10 === 1)\n  const arr19 = arr.filter((x) => x % 10 === 1)\n  const arr20 = arr.filter((x) => x % 10 === 1)\n  const arr21 = arr.filter((x) => x % 10 === 1)\n  const arr22 = arr.filter((x) => x % 10 === 1)\n  const arr23 = arr.filter((x) => x % 10 === 1)\n  const arr24 = arr.filter((x) => x % 10 === 1)\n  const arr25 = arr.filter((x) => x % 10 === 1)\n  const arr26 = arr.filter((x) => x % 10 === 1)\n  const arr27 = arr.filter((x) => x % 10 === 1)\n  const arr28 = arr.filter((x) => x % 10 === 1)\n  const arr29 = arr.filter((x) => x % 10 === 1)\n  const arr30 = arr.filter((x) => x % 10 === 1)\n  const arr31 = arr.filter((x) => x % 10 === 1)\n  const arr32 = arr.filter((x) => x % 10 === 1)\n  const arr33 = arr.filter((x) => x % 10 === 1)\n  const arr34 = arr.filter((x) => x % 10 === 1)\n  const arr35 = arr.filter((x) => x % 10 === 1)\n  const arr36 = arr.filter((x) => x % 10 === 1)\n  const arr37 = arr.filter((x) => x % 10 === 1)\n  const arr38 = arr.filter((x) => x % 10 === 1)\n  const arr39 = arr.filter((x) => x % 10 === 1)\n  const arr40 = arr.filter((x) => x % 10 === 1)\n  const arr41 = arr.filter((x) => x % 10 === 1)\n  const arr42 = arr.filter((x) => x % 10 === 1)\n  const arr43 = arr.filter((x) => x % 10 === 1)\n  const arr44 = arr.filter((x) => x % 10 === 1)\n  const arr45 = arr.filter((x) => x % 10 === 1)\n  const arr46 = arr.filter((x) => x % 10 === 1)\n  const arr47 = arr.filter((x) => x % 10 === 1)\n  const arr48 = arr.filter((x) => x % 10 === 1)\n  const arr49 = arr.filter((x) => x % 10 === 1)\n  const arr50 = arr.filter((x) => x % 10 === 1)\n  const arr51 = arr.filter((x) => x % 10 === 1)\n  const arr52 = arr.filter((x) => x % 10 === 1)\n  const arr53 = arr.filter((x) => x % 10 === 1)\n  const arr54 = arr.filter((x) => x % 10 === 1)\n  const arr55 = arr.filter((x) => x % 10 === 1)\n  const arr56 = arr.filter((x) => x % 10 === 1)\n  const arr57 = arr.filter((x) => x % 10 === 1)\n  const arr58 = arr.filter((x) => x % 10 === 1)\n  const arr59 = arr.filter((x) => x % 10 === 1)\n  const arr60 = arr.filter((x) => x % 10 === 1)\n  const arr61 = arr.filter((x) => x % 10 === 1)\n  const arr62 = arr.filter((x) => x % 10 === 1)\n  const arr63 = arr.filter((x) => x % 10 === 1)\n  const arr64 = arr.filter((x) => x % 10 === 1)\n  const arr65 = arr.filter((x) => x % 10 === 1)\n  const arr66 = arr.filter((x) => x % 10 === 1)\n  const arr67 = arr.filter((x) => x % 10 === 1)\n  const arr68 = arr.filter((x) => x % 10 === 1)\n  const arr69 = arr.filter((x) => x % 10 === 1)\n  const arr70 = arr.filter((x) => x % 10 === 1)\n  const arr71 = arr.filter((x) => x % 10 === 1)\n  const arr72 = arr.filter((x) => x % 10 === 1)\n  const arr73 = arr.filter((x) => x % 10 === 1)\n  const arr74 = arr.filter((x) => x % 10 === 1)\n  const arr75 = arr.filter((x) => x % 10 === 1)\n  const arr76 = arr.filter((x) => x % 10 === 1)\n  const arr77 = arr.filter((x) => x % 10 === 1)\n  const arr78 = arr.filter((", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe2 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe3 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe4 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe5 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe6 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe7 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe8 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe9 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe10 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe11 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe12 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe13 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe14 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe15 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe16 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe17 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe18 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe19 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe20 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe21 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe22 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe23 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe24 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe25 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe26 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe27 = (N) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\nGiven", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ')\n  const sortedWords = words.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n  return sortedWords.join(' ')\n}\n\nconsole.log(antIShuFfle('Hi'))\nconsole.log(antIShuFfle('hello'))\nconsole.log(antIShuFfle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const row = []\n  const col = []\n  const row_col = []\n  const row_col_sorted = []\n  const row_col_sorted_sorted = []\n  const row_col_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = []\n  const row_col_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const len = array.length\n  const sorted = array.slice()\n  let i = 0\n  let j = len - 1\n  let sum = 0\n  while (i < j) {\n    sum = array[i] + array[j]\n    if (sum % 2 === 1) {\n      sorted[i] = array[i]\n      sorted[j] = array[j]\n      i++\n    } else {\n      sorted[j] = array[j]\n      sorted[i] = array[i]\n      j--\n    }\n  }\n  return sorted\n}\n\nexport default sorTArrAy\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decRypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    const r = alphabet.slice(n, n + 1);\n    return r.reverse().join('');\n  };\n  return rot(alphabet.indexOf(s.charAt(0)));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + maxCount)];\n};\n\nmodule.exports = rolLingmax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (!lst || lst.length === 0) {\n    return null\n  }\n  const min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return min\n}\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5]))\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2]))\nconsole.log(nexTSmaLlest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return (x + y === z) || (x - y === z) || (x * y === z) || (x / y === z);\n};\n\nexport default anyint;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let message = message.toLowerCase();\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  let vowelsIndex = 0;\n  let consonantsIndex = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let vowel = '';\n  let consonant = '';\n  while (i < message.length) {\n    if (vowels.indexOf(message[i])!== -1) {\n      vowelsIndex = vowelsIndex + 1;\n      vowel = message[i];\n      message = message.substring(0, i) + consonants[vowelsIndex] + message.substring(i + 1);\n    } else if (consonants.indexOf(message[i])!== -1) {\n      consonantsIndex = consonantsIndex + 1;\n      consonant = message[i];\n      message = message.substring(0, i) + vowels[consonantsIndex] + message.substring(i + 1);\n    } else {\n      message = message.substring(0, i) + message[i].toUpperCase() + message.substring(i + 1);\n    }\n    i = i + 1;\n  }\n  return message;\n};\n\nconsole.log(encOde('This is a message'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  const max = Math.max(...lst);\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const primeSum = (n) => {\n    let sum = 0;\n    while (n > 0) {\n      sum += n % 10;\n      n = n / 10;\n    }\n    return sum;\n  };\n  const maxPrime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (prime(i)) {\n        return i;\n      }\n      i++;\n    }\n    return false;\n  };\n  const maxPrimeSum = (n) => {\n    let sum = 0;\n    while (n > 0) {\n      sum += primeSum(n);\n      n = n / 10;\n    }\n    return sum;\n  };\n  return maxPrimeSum(max);\n};\n\nconst test = (lst) => {\n  console.log(skjKasdKd(lst));\n};\n\ntest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]);\ntest([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([0,724,32,71,99,32,6,0,5,91,83,0,5,6]);\ntest([0,81,12,3,1,21]);\ntest([0,8,1,2,1,7]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let result = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false;\n    } else {\n      if (dict[key].toUpperCase()!== dict[key].toLowerCase()) {\n        result = false;\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = cheCkDiCtCasE;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Implement a function that takes an array of numbers and returns the sum of the numbers.\n  for example:\n  couNtUpto(1,2,3) => 6\n  couNtUpto([1,2,3]) => 6\n  couNtUpto([1,2,3,4,5]) => 15\n  couNtUpto([1,2,3,4,5,6]) => 21\n  couNtUpto([1,2,3,4,5,6,7]) => 28\n  couNtUpto([1,2,3,4,5,6,7,8]) => 36\n  couNtUpto([1,2,3,4,5,6,7,8,9]) => 45\n  couNtUpto([1,2,3,4,5,6,7,8,9,10]) => 54\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11]) => 63\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12]) => 72\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13]) => 81\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) => 90\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) => 99\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) => 108\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) => 117\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) => 126\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) => 135\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) => 144\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) => 153\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) => 162\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) => 171\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) => 180\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) => 189\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) => 198\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) => 207\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) => 216\n  couNtUpto([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) => 225\n  couNtUpto([1,2,3,4,5,6,7,8,9,10", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY2 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY3 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY4 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY5 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY6 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY7 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY8 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY9 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY10 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY11 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY12 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY13 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY14 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY15 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY16 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY17 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY18 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY19 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY20 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY21 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY22 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY23 = (a, b) => {\n  let result = 0;\n  for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 3\n  couNtUpPer('abcdefg') returns 2\n  couNtUpPer('dBBE') returns 2\n  */\nconst couNtUpAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 2\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpCons = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 2\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpAllCons = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 3\n  couNtUpPer('abcdefg') returns 2\n  couNtUpPer('dBBE') returns 2\n  */\nconst couNtUpAllVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 2\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpAllConsVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 2\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpAllVowelsCons = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 2\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpAllVowelsConsVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 2\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpAllVowelsConsVowelsVowels = (s) => {\n  let count = 0;\n  for (let i = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFrac = num - numInt;\n  const numIntPlusOne = numInt + 1;\n  const numFracPlusOne = numFrac + 1;\n  if (numIntPlusOne === numFracPlusOne) {\n    return numInt;\n  } else {\n    return numFrac;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFrac = num - numInt;\n  const numIntPlusOne = numInt + 1;\n  const numFracPlusOne = numFrac + 1;\n  if (numIntPlusOne === numFracPlusOne) {\n    return numInt;\n  } else {\n    return numFrac;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFrac = num - numInt;\n  const numIntPlusOne = numInt + 1;\n  const numFracPlusOne = numFrac + 1;\n  if (numIntPlusOne === numFracPlusOne) {\n    return numInt;\n  } else {\n    return numFrac;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFrac = num - numInt;\n  const numIntPlusOne = numInt + 1;\n  const numFracPlusOne = numFrac + 1;\n  if (numIntPlusOne === numFracPlusOne) {\n    return numInt;\n  } else {\n    return numFrac;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFrac = num - numInt;\n  const numIntPlusOne = numInt + 1;\n  const numFracPlusOne = numFrac + 1;\n  if (numIntPlusOne === numFracPlusOne) {\n    return numInt;\n  } else {\n    return numFrac;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\")", "passed": 0, "run_status": 1}
