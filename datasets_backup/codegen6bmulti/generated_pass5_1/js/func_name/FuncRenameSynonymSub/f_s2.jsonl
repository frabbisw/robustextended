{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const sortedNumbers = sorted(numbers);\n  const length = sortedNumbers.length;\n  let i = 0;\n  let j = 1;\n  let k = 0;\n  while (i < length - 1 && j < length) {\n    if (Math.abs(sortedNumbers[i] - sortedNumbers[j]) <= threshold) {\n      k++;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return k > 1;\n};\n\nmodule.exports = receiveCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const stack = []\n  const result = []\n  const stack_index = 0\n  const paren_index = 0\n  const paren_string_length = paren_string.length\n  const paren_string_char = paren_string.charAt(paren_index)\n  const paren_string_char_is_open_brace = paren_string_char === '('\n  const paren_string_char_is_close_brace = paren_string_char === ')'\n  const paren_string_char_is_space = paren_string_char ===''\n\n  while (paren_index < paren_string_length) {\n    if (paren_string_char_is_open_brace) {\n      stack.push(paren_string_char)\n      paren_index++\n    } else if (paren_string_char_is_close_brace) {\n      if (stack.length === 0) {\n        throw new Error(`Unexpected close brace at index ${paren_index}`)\n      }\n      const top_of_stack = stack.pop()\n      if (top_of_stack!== '(') {\n        throw new Error(`Unexpected close brace at index ${paren_index}`)\n      }\n      paren_index++\n    } else if (paren_string_char_is_space) {\n      paren_index++\n    } else {\n      throw new Error(`Unexpected character at index ${paren_index}`)\n    }\n  }\n\n  if (stack.length!== 0) {\n    throw new Error(`Unexpected end of string at index ${paren_index}`)\n  }\n\n  return result\n}\n\nmodule.exports = freestandingParenGroups\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').reverse().join('');\n  const longestPalindrome = prefix + suffix;\n  const longestPalindromeLength = longestPalindrome.length;\n  const postfix = longestPalindrome.split('').reverse().join('');\n  const postfixLength = postfix.length;\n  const postfixPalindrome = postfix.split('').reverse().join('');\n  const postfixPalindromeLength = postfixPalindrome.length;\n  const postfixPalindromeIsPalindrome = isPalindrome(postfixPalindrome);\n  const postfixPalindromeIsLongestPalindrome = isPalindrome(postfixPalindrome);\n  const postfixPalindromeIsLongestPalindromeLength = postfixPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindrome = postfixPalindromeIsLongestPalindrome;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindrome = postfixPalindromeIsLongestPalindromeLengthIsPalindrome;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindrome;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength = postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLength;\n  const postfixPalindromeIsLongestPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindromeLengthIsPalindrome", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconsole.log(holdAPile(3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"John, my name is Hi\"\n  bibleString(\"One, two, three, four, five, six\") == \"six, five, four, three, two, one\"\n  */\nconst reverseBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.reverse().join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter capitalized.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  bibleString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst capitalizeBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter lowercase.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is john\"\n  bibleString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst lowercaseBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.map(word => word.charAt(0).toLowerCase() + word.slice(1)).join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter capitalized and the first letter lowercase.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  bibleString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst capitalizeLowercaseBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.map(word => word.charAt(0).toUpperCase() + word.charAt(0).toLowerCase() + word.slice(1)).join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter capitalized and the first letter lowercase.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  bibleString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst capitalizeLowercaseCapitalizeBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.map(word => word.charAt(0).toUpperCase() + word.charAt(0).toLowerCase() + word.charAt(0).toUpperCase() + word.slice(1)).join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter capitalized and the first letter lowercase.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  bibleString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst capitalizeLowercaseCapitalizeLowercaseBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.map(word => word.charAt(0).toUpperCase() + word.charAt(0).toLowerCase() + word.charAt(0).toLowerCase() + word.slice(1)).join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter capitalized and the first letter lowercase.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  bibleString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst capitalizeLowercaseCapitalizeLowercaseLowercaseBibleString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.map(word => word.charAt(0).toUpperCase() + word.charAt(0).toLowerCase() + word.charAt(0).toLowerCase() + word.charAt(0).toLowerCase() + word.slice(1)).join('');\n};\n\n/*\n  Given a string of words, return a string of the words in reverse order,\n  but with the first letter capitalized and the first letter lowercase.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  bibleString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst capitalizeLowercaseCapitalizeLowercaseLowercaseLowercaseBibleString = (s) => {\n  const words = s.split(/", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.round(avg)\n  return (rounded < 0)? -1 : rounded.toString(2)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let digit = num % 10;\n    if (digit % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n// console.log(aloneDigit([15, 33, 1422, 1]));\n// console.log(aloneDigit([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration3 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration4 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration5 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration6 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration7 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration8 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration9 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  let reversedArr = sortedArr.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(names[reversedArr[i] - 1]);\n  }\n  return result;\n};\n\nconst byDuration10 = (arr) => {\n  let sortedArr = arr.sort((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return result;\n};\n\nconst f_13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    for (let j = 1; j <= i; j += 2) {\n      result.push(j * result[j - 1]);\n    }\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return arr.filter(x => x > 0).length;\n};\n\nconsole.log(considerNums([-1, 11, -11]));\nconsole.log(considerNums([1, 1, 2]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) return true;\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] < arr[i + 1]) {\n      i--;\n    } else {\n      break;\n    }\n  }\n  if (i === -1) return true;\n  let j = arr.length - 1;\n  while (j >= 0) {\n    if (arr[j] > arr[i]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  if (j === -1) return true;\n  let k = arr.length - 1;\n  while (k >= 0) {\n    if (arr[k] < arr[i]) {\n      k--;\n    } else {\n      break;\n    }\n  }\n  if (k === -1) return true;\n  return false;\n};\n\nconst affectOneTestis2 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] < arr[i + 1]) {\n      i--;\n    } else {\n      break;\n    }\n  }\n  if (i === -1) return true;\n  let j = arr.length - 1;\n  while (j >= 0) {\n    if (arr[j] > arr[i]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  if (j === -1) return true;\n  let k = arr.length - 1;\n  while (k >= 0) {\n    if (arr[k] < arr[i]) {\n      k--;\n    } else {\n      break;\n    }\n  }\n  if (k === -1) return true;\n  return false;\n};\n\nconst affectOneTestis3 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] < arr[i + 1]) {\n      i--;\n    } else {\n      break;\n    }\n  }\n  if (i === -1) return true;\n  let j = arr.length - 1;\n  while (j >= 0) {\n    if (arr[j] > arr[i]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  if (j === -1) return true;\n  let k = arr.length - 1;\n  while (k >= 0) {\n    if (arr[k] < arr[i]) {\n      k--;\n    } else {\n      break;\n    }\n  }\n  if (k === -1) return true;\n  return false;\n};\n\nconst affectOneTestis4 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] < arr[i + 1]) {\n      i--;\n    } else {\n      break;\n    }\n  }\n  if (i === -1) return true;\n  let j = arr.length - 1;\n  while (j >= 0) {\n    if (arr[j] > arr[i]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  if (j === -1) return true;\n  let k = arr.length - 1;\n  while (k >= 0) {\n    if (arr[k] < arr[i]) {\n      k--;\n    } else {\n      break;\n    }\n  }\n  if (k === -1) return true;\n  return false;\n};\n\nconst affectOneTestis5 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] < arr[i + 1]) {\n      i--;\n    } else {\n      break;\n    }\n  }\n  if (i === -1) return true;\n  let j = arr.length - 1;\n  while (j >= 0) {\n    if (arr[j] > arr[i]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  if (j === -1) return true;\n  let k = arr.length - 1;\n  while (k >= 0) {\n    if (arr[k] < arr[i]) {\n      k--;\n    } else {\n      break;\n    }\n  }\n  if (k === -1) return true;\n  return false;\n};\n\nconst affectOneTestis6 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] < arr[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor2 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor3 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor4 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor5 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor6 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor7 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    const xor = aChar ^ bChar;\n    result.push(xor.toString(2));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst xor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const lst1_even = lst1.filter(x => x % 2 === 0);\n  const lst2_even = lst2.filter(x => x % 2 === 0);\n  const len_lst1_even = lst1_even.length;\n  const len_lst2_even = lst2_even.length;\n  const len_lst1_odd = len_lst1_even + len_lst2_even;\n  const len_lst2_odd = len_lst1_odd + len_lst2_even;\n  const len_lst1_odd_even = len_lst1_odd + len_lst2_even;\n  const len_lst2_odd_even = len_lst1_odd_even + len_lst2_even;\n  const len_lst1_odd_odd = len_lst1_odd + len_lst2_odd;\n  const len_lst2_odd_odd = len_lst1_odd_odd + len_lst2_odd;\n  const len_lst1_even_odd = len_lst1_even + len_lst2_odd;\n  const len_lst2_even_odd = len_lst1_even_odd + len_lst2_odd;\n  const len_lst1_odd_even_odd = len_lst1_odd_even + len_lst2_odd_even;\n  const len_lst2_odd_even_odd = len_lst1_odd_even_odd + len_lst2_odd_even;\n  const len_lst1_odd_odd_odd = len_lst1_odd_even + len_lst2_odd_odd;\n  const len_lst2_odd_odd_odd = len_lst1_odd_even_odd + len_lst2_odd_odd;\n  const len_lst1_even_odd_odd = len_lst1_even_odd + len_lst2_odd_odd;\n  const len_lst2_even_odd_odd = len_lst1_even_odd_odd + len_lst2_odd_odd;\n  const len_lst1_odd_odd_even = len_lst1_odd_even + len_lst2_odd_even;\n  const len_lst2_odd_odd_even = len_lst1_odd_even_odd + len_lst2_odd_even;\n  const len_lst1_even_odd_even = len_lst1_even_odd + len_lst2_odd_even;\n  const len_lst2_even_odd_even = len_lst1_even_odd_even + len_lst2_odd_even;\n  const len_lst1_odd_odd_even = len_lst1_odd_even + len_lst2_odd_even;\n  const len_lst2_odd_odd_even = len_lst1_odd_even_odd + len_lst2_odd_even;\n  const len_lst1_even_odd_even = len_lst1_even_odd + len_lst2_odd_even;\n  const len_lst2_even_odd_even = len_lst1_even_odd_even + len_lst2_odd_even;\n  const len_lst1_odd_odd_odd = len_lst1_odd_even + len_lst2_odd_odd;\n  const len_lst2_odd_odd_odd = len_lst1_odd_even_odd + len_lst2_odd_odd;\n  const len_lst1_even_odd_odd = len_lst1_even_odd + len_lst2_odd_odd;\n  const len_lst2_even_odd_odd = len_lst1_even_odd_odd + len_lst2_odd_odd;\n  const len_lst1_odd_odd_even = len_lst1_odd_even + len_lst2_odd_even;\n  const len_lst2_odd_odd_even = len_lst1_odd_even_odd + len_lst2_odd_even;\n  const len_lst1_even_odd_odd = len_lst1_even_odd + len_lst2_odd_odd;\n  const len_lst2_even_odd_odd = len_lst1_even_odd_odd + len_lst2_odd_odd;\n  const len_lst1_odd_odd_even = len_lst1_odd_even + len_lst2_odd_even;\n  const len_lst2_odd_odd_even = len_lst1_odd_even_odd + len_lst2_odd_even;\n  const len_lst1_even_odd_even = len_lst1_even_odd + len_lst2_odd_even;\n  const len_lst2_even_odd_even = len_lst1_even_odd_even + len_lst2_odd_even;\n  const len_lst1_odd_odd_odd = len_lst1_odd_even + len_lst2_odd_odd;\n  const len_lst2_odd_odd_odd = len_lst1_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst test = histogram('a b c a b');\nconsole.log(test);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let result = []\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  if (j >= 0) {\n    result.push(s[i])\n  }\n  return [result.join(''), s === result.join('')]\n}\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const odd = (n) => n % 2 === 1;\n  const count = (n) => {\n    const oddDigits = lst.filter(odd);\n    return oddDigits.length;\n  };\n  return odd(count(lst));\n};\n\nmodule.exports = curiousCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let sum = 0\n  let minSum = Infinity\n  let minStart = 0\n  let minEnd = 0\n  let i = 0\n  let j = 0\n  let len = nums.length\n\n  while (i < len) {\n    sum = 0\n    minStart = i\n    minEnd = i\n    while (j < len) {\n      sum += nums[j]\n      if (sum > 0) {\n        minEnd = j\n      }\n      j++\n    }\n    if (sum > 0) {\n      minSum = Math.min(minSum, sum)\n    }\n    i = minEnd + 1\n  }\n\n  return minSum\n}\n\nconsole.log(minuteSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minuteSubArraySum([-1, -2, -3]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = new Array(rows)\n  const bucketsCapacity = capacity\n  const bucketsUsed = 0\n  const bucketsToLower = 0\n  const bucketsToLowerCapacity = 0\n  const bucketsToLowerUsed = 0\n  const bucketsToLowerCapacityUsed = 0\n  const bucketsToLowerUsedCapacity = 0\n\n  for (let i = 0; i < rows; i++) {\n    buckets[i] = new Array(cols)\n    for (let j = 0; j < cols; j++) {\n      buckets[i][j] = 0\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1\n        bucketsUsed++\n      }\n    }\n  }\n\n  while (bucketsUsed > 0) {\n    let row = 0\n    let col = 0\n    let bucket = 0\n    let bucketUsed = 0\n    let bucketCapacity = 0\n    let bucketUsedCapacity = 0\n    let bucketUsedCapacityUsed = 0\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (buckets[i][j] === 1) {\n          row = i\n          col = j\n          bucket = j\n          bucketUsed = 1\n          bucketCapacity = bucketsCapacity\n          bucketUsedCapacity = bucketsUsed\n          bucketUsedCapacityUsed = bucketsUsedCapacity\n          bucketsUsed--\n          bucketsUsedCapacityUsed--\n          bucketsUsedCapacity--\n        }\n      }\n    }\n\n    if (bucketUsed === 0) {\n      break\n    }\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (buckets[i][j] === 1) {\n          if (buckets[i][j] === bucket) {\n            buckets[i][j] = 0\n            bucketUsed--\n            bucketUsedCapacity--\n            bucketsUsedCapacity--\n          } else if (buckets[i][j] === 0) {\n            buckets[i][j] = bucket\n            bucketUsed++\n            bucketUsedCapacity++\n            bucketsUsedCapacity++\n          }\n        }\n      }\n    }\n  }\n\n  return bucketsUsedCapacityUsed\n}\n\nconst test = [\n  [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  [\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n  ],\n  [\n    [0, 0, 0],\n    [0, 0, 0]\n  ],\n  [\n    [0, 0, 1, 1],\n    [0, 0, 0, 0]\n  ]\n]\n\ntest.forEach(t => {\n  console.log(soapFill(t[0], t[1]))\n})\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    const aDec = parseInt(aInt, 2);\n    const bDec = parseInt(bInt, 2);\n    return aDec - bDec;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const consonantCount = consonants.reduce((acc, c) => {\n    return acc + (s.indexOf(c) > -1? 1 : 0)\n  }, 0)\n  if (consonantCount === n) {\n    return [s]\n  } else if (consonantCount > n) {\n    return []\n  } else {\n    const words = s.split(' ')\n    const result = []\n    words.forEach(word => {\n      const wordLength = word.length\n      const wordConsonantCount = consonants.reduce((acc, c) => {\n        return acc + (word.indexOf(c) > -1? 1 : 0)\n      }, 0)\n      if (wordConsonantCount === n) {\n        result.push(word)\n      }\n    })\n    return result\n  }\n}\n\n/*\n  Given a string s and a non-negative integer n, you have been tasked to implement \n  a function that returns the nth word from the string s.\n  If the string s is empty then the function should return an empty string.\n  Examples:\n  nthWord(\"Hello world\", 1) ==> \"world\"\n  nthWord(\"Hello world\", 2) ==> \"world\"\n  nthWord(\"Hello world\", 3) ==> \"world\"\n  nthWord(\"Hello world\", 4) ==> \"world\"\n  nthWord(\"Hello world\", 5) ==> \"world\"\n  nthWord(\"Hello world\", 6) ==> \"world\"\n  nthWord(\"Hello world\", 7) ==> \"world\"\n  nthWord(\"Hello world\", 8) ==> \"world\"\n  nthWord(\"Hello world\", 9) ==> \"world\"\n  nthWord(\"Hello world\", 10) ==> \"world\"\n  nthWord(\"Hello world\", 11) ==> \"world\"\n  nthWord(\"Hello world\", 12) ==> \"world\"\n  nthWord(\"Hello world\", 13) ==> \"world\"\n  nthWord(\"Hello world\", 14) ==> \"world\"\n  nthWord(\"Hello world\", 15) ==> \"world\"\n  nthWord(\"Hello world\", 16) ==> \"world\"\n  nthWord(\"Hello world\", 17) ==> \"world\"\n  nthWord(\"Hello world\", 18) ==> \"world\"\n  nthWord(\"Hello world\", 19) ==> \"world\"\n  nthWord(\"Hello world\", 20) ==> \"world\"\n  nthWord(\"Hello world\", 21) ==> \"world\"\n  nthWord(\"Hello world\", 22) ==> \"world\"\n  nthWord(\"Hello world\", 23) ==> \"world\"\n  nthWord(\"Hello world\", 24) ==> \"world\"\n  nthWord(\"Hello world\", 25) ==> \"world\"\n  nthWord(\"Hello world\", 26) ==> \"world\"\n  nthWord(\"Hello world\", 27) ==> \"world\"\n  nthWord(\"Hello world\", 28) ==> \"world\"\n  nthWord(\"Hello world\", 29) ==> \"world\"\n  nthWord(\"Hello world\", 30) ==> \"world\"\n  nthWord(\"Hello world\", 31) ==> \"world\"\n  nthWord(\"Hello world\", 32) ==> \"world\"\n  nthWord(\"Hello world\", 33) ==> \"world\"\n  nthWord(\"Hello world\", 34) ==> \"world\"\n  nthWord(\"Hello world\", 35) ==> \"world\"\n  nthWord(\"Hello world\", 36) ==> \"world\"\n  nthWord(\"Hello world\", 37) ==> \"world\"\n  nthWord(\"Hello world\", 38) ==> \"world\"\n  nthWord(\"Hello world\", 39) ==> \"world\"\n  nthWord(\"Hello world\", 40) ==> \"world\"\n  nthWord(\"Hello world\", 41) ==> \"world\"\n  nthWord(\"Hello world\", 42) ==> \"world\"\n  nthWord(\"Hello world\", 43) ==> \"world\"\n  nthWord(\"Hello world\", 44) ==> \"world\"\n  nthWord(\"Hello world\", 45) ==> \"world\"\n  nthWord(\"Hello world\", 46) ==> \"world\"\n  nthWord(\"Hello world\", 47) ==> \"world\"\n  nthWord(\"Hello world\", 48) ==> \"world\"\n  nthWord(\"Hello world\", 49) ==> \"world\"\n  nthWord(\"Hello world\", 50) ==> \"world\"\n  nthWord(\"Hello world\", 51) ==> \"world\"\n  nthWord(\"Hello world\", 52) ==> \"world\"\n  nthWord(\"Hello world\", 53) ==> \"world\"\n  nthWord(\"Hello world\", 54) ==> \"world\"\n  nthWord(\"Hello world\", 55) ==> \"world\"\n  nthWord(\"Hello world\", 56) ==> \"world\"\n  nthWord(\"Hello world\", 57) ==> \"world\"\n  nthWord(\"Hello world\", 58) ==> \"world\"\n  nthWord(\"Hello world\", 59) ==> \"world\"\n  nthWord(\"Hello world\", 60) ==> \"world\"\n  nthWord(\"Hello world\", 61) ==> \"world\"\n  nthWord(\"Hello world\", 62) ==> \"world\"\n  nthWord(\"Hello world\", 63) ==> \"world\"\n  nthWord(\"Hello world\", 64) ==> \"world\"\n  nthWord(\"Hello world\", 65) ==> \"world\"\n  n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const closestVowel = (word, index) => {\n    const closestVowel = vowels.find((v) => {\n      const distance = Math.abs(v - word[index]);\n      const isVowel = v === word[index];\n      return distance < Math.abs(v - word[index + 1]) && isVowel;\n    });\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = consonants.find((c) => {\n      const distance = Math.abs(c - word[index]);\n      const isConsonant = c === word[index];\n      return distance < Math.abs(c - word[index + 1]) && isConsonant;\n    });\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };\n  const closestVowelAndConsonant = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    const closestConsonant = closestConsonant(word, index);\n    return closestVowel && closestConsonant;\n  };\n  const closestVowel = (word, index) => {\n    const closestVowel = closestVowel(word, index);\n    return closestVowel;\n  };\n  const closestConsonant = (word, index) => {\n    const closestConsonant = closestConsonant(word, index);\n    return closestConsonant;\n  };", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(catchParens(['()(', ')'])); // 'Yes'\nconsole.log(catchParens(['())', ')'])); // 'No'\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = 0;\n  let longestIndex = 0;\n  strings.forEach((str, index) => {\n    if (str.length > longest) {\n      longest = str.length;\n      longestIndex = index;\n    }\n  });\n  return strings[longestIndex];\n};\n\n/*\n  Given a list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = 0;\n  strings.forEach((str, index) => {\n    if (str.length > longest) {\n      longest = str.length;\n    }\n  });\n  return strings[0];\n};\n\n/*\n  Given a list of strings, return the shortest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let shortest = strings[0];\n  strings.forEach((str, index) => {\n    if (str.length < shortest.length) {\n      shortest = str;\n    }\n  });\n  return shortest;\n};\n\n/*\n  Given a list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = 0;\n  strings.forEach((str, index) => {\n    if (str.length > longest) {\n      longest = str.length;\n    }\n  });\n  return strings[0];\n};\n\n/*\n  Given a list of strings, return the shortest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let shortest = strings[0];\n  strings.forEach((str, index) => {\n    if (str.length < shortest.length) {\n      shortest = str;\n    }\n  });\n  return shortest;\n};\n\n/*\n  Given a list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = 0;\n  strings.forEach((str, index) => {\n    if (str.length > longest) {\n      longest = str.length;\n    }\n  });\n  return strings[0];\n};\n\n/*\n  Given a list of strings, return the shortest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let shortest = strings[0];\n  strings.forEach((str, index) => {\n    if (str.length < shortest.length) {\n      shortest = str;\n    }\n  });\n  return shortest;\n};\n\n/*\n  Given a list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = 0;\n  strings.forEach((str, index) => {\n    if (str.length > longest) {\n      longest = str.length;\n    }\n  });\n  return strings[0];\n};\n\n/*\n  Given a list of strings, return the shortest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const arrLength = arr.length\n  const maxLength = Math.min(k, arrLength)\n  const result = arr.slice(0, maxLength)\n  return result\n}\n\nconst test = (actual, expected) => {\n  const message = (actual, expected) => `Expected: ${expected} but got: ${actual}`\n  const assert = (actual, expected) => {\n    if (actual!== expected) {\n      throw new Error(message(actual, expected))\n    }\n  }\n  assert(actual, expected)\n}\n\ndescribe('maximal', () => {\n  it('should return the maximal k numbers in an array', () => {\n    const arr = [-3, -4, 5]\n    const k = 3\n    const result = maximal(arr, k)\n    const expected = [-4, -3, 5]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = 0', () => {\n    const arr = [-3, -4, 5]\n    const k = 0\n    const result = maximal(arr, k)\n    const expected = [-3, -4, 5]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = len(arr)', () => {\n    const arr = [-3, -4, 5]\n    const k = arr.length\n    const result = maximal(arr, k)\n    const expected = [-3, -4, 5]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = 1', () => {\n    const arr = [-3, 2, 1, 2, -1, -2, 1]\n    const k = 1\n    const result = maximal(arr, k)\n    const expected = [2]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = 2', () => {\n    const arr = [-3, 2, 1, 2, -1, -2, 1]\n    const k = 2\n    const result = maximal(arr, k)\n    const expected = [2, 1]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = 3', () => {\n    const arr = [-3, 2, 1, 2, -1, -2, 1]\n    const k = 3\n    const result = maximal(arr, k)\n    const expected = [2, 1, -2]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = 4', () => {\n    const arr = [-3, 2, 1, 2, -1, -2, 1]\n    const k = 4\n    const result = maximal(arr, k)\n    const expected = [2, 1, -2, -1]\n    test(result, expected)\n  })\n\n  it('should return the maximal k numbers in an array with k = 5', () => {\n    const arr = [-3, 2, 1, 2, -1, -2, 1]\n    const k = 5\n    const result = maximal(arr, k)\n    const expected = [2, 1, -2, -1, 1]\n    test(result, expected)\n  })\n})\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length\n  const sum = 0\n  const i = 0\n  const j = k - 1\n\n  while (i <= j) {\n    sum += arr[i]\n    i++\n    if (i === len) break\n    sum += arr[j]\n    j--\n  }\n\n  return sum\n}\n\nexport default lendElement\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let list = [];\n  let current = n;\n  while (current > 1) {\n    if (current % 2 === 1) {\n      list.push(current);\n    }\n    current = current / 2;\n  }\n  return list;\n};\n\nconsole.log(catchOddCollatz(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 2 && day > 29) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 3 && day > 31) {\n    return false;\n  }\n\n  if (month === 5 && day > 31) {\n    return false;\n  }\n\n  if (month === 7 && day > 31) {\n    return false;\n  }\n\n  if (month === 8 && day > 31) {\n    return false;\n  }\n\n  if (month === 10 && day > 31) {\n    return false;\n  }\n\n  if (month === 12 && day > 31) {\n    return false;\n  }\n\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const isWord = word.length > 0;\n    if (isWord) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const isWord = word.length > 0;\n    if (isWord) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const isWord = word.length > 0;\n    if (isWord) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const isWord = word.length > 0;\n    if (isWord) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const isWord = word.length > 0;\n    if (isWord) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const isWord = word.length > 0;\n    if (isWord) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  const isSorted = sorted.every(x => x === last);\n  return isSorted;\n};\n\nexport default isScreen;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 >", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns2 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns3 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns4 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns5 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns6 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns7 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns8 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns9 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns10 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns11 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns12 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns13 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns14 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns15 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns16 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns17 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst goadSigns18 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  const visited = new Array(n).fill(0)\n  const dp_min = new Array(n).fill(0)\n  const dp_max = new Array(n).fill(0)\n  const dp_min_max = new Array(n).fill(0)\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = grid[i][j]\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j] === 0) {\n        continue\n      }\n\n      dp_min[i][j] = dp[i][j]\n      dp_max[i][j] = dp[i][j]\n      dp_min_max[i][j] = dp[i][j]\n\n      for (let k = 1; k < k; k++) {\n        if (dp[i][j] + k < dp_min[i][j]) {\n          dp_min[i][j] = dp[i][j] + k\n        }\n\n        if (dp[i][j] + k > dp_max[i][j]) {\n          dp_max[i][j] = dp[i][j] + k\n        }\n\n        if (dp[i][j] + k < dp_min_max[i][j]) {\n          dp_min_max[i][j] = dp[i][j] + k\n        }\n      }\n    }\n  }\n\n  let min_index = 0\n  let min_value = dp_min[0][0]\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp_min[i][j] === dp_min_max[i][j]) {\n        dp_min[i][j] = dp_min_max[i][j]\n      }\n\n      if (dp_min[i][j] < min_value) {\n        min_value = dp_min[i][j]\n        min_index = i\n      }\n    }\n  }\n\n  return dp_min[min_index]\n}\n\nconsole.log(minutePath([[1,2,3], [4,5,6], [7,8,9]], 3))\nconsole.log(minutePath([[5,9,3], [4,1,6], [7,8,2]], 1))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  const gcd = (a > b)? gcd(b, a % b) : gcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseDivisor(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseGcd(3, 5)\n  1\n  >>> capitalCoarseGcd(25, 15)\n  5\n  */\nconst capitalCoarseGcd = (a, b) => {\n  const gcd = (a > b)? capitalCoarseGcd(b, a % b) : capitalCoarseGcd(a, b);\n  return gcd;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseLcm(3, 5)\n  15\n  >>> capitalCoarseLcm(25, 15)\n  25\n  */\nconst capitalCoarseLcm = (a, b) => {\n  return a * b / capitalCoarseGcd(a, b);\n};\n\n/* Return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + (i / 2));\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let result = 1;\n  for (let i = 1; i < n; i++) {\n    result *= (n - i) % 2;\n  }\n  return result;\n};\n\nconst product = (n) => {\n  let result = 1;\n  for (let i = 1; i < n; i++) {\n    result *= (n - i) % 2;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow2 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow3 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow4 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow5 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow6 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow7 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow8 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow9 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow10 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow11 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow12 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow13 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow14 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow15 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow16 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow17 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow18 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow19 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow20 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let index = 0;\n  let brackets = 0;\n  let openBrackets = 0;\n  let openBracketsCount = 0;\n  let openBracketsCount2 = 0;\n  let openBracketsCount3 = 0;\n  let openBracketsCount4 = 0;\n  let openBracketsCount5 = 0;\n  let openBracketsCount6 = 0;\n  let openBracketsCount7 = 0;\n  let openBracketsCount8 = 0;\n  let openBracketsCount9 = 0;\n  let openBracketsCount10 = 0;\n  let openBracketsCount11 = 0;\n  let openBracketsCount12 = 0;\n  let openBracketsCount13 = 0;\n  let openBracketsCount14 = 0;\n  let openBracketsCount15 = 0;\n  let openBracketsCount16 = 0;\n  let openBracketsCount17 = 0;\n  let openBracketsCount18 = 0;\n  let openBracketsCount19 = 0;\n  let openBracketsCount20 = 0;\n  let openBracketsCount21 = 0;\n  let openBracketsCount22 = 0;\n  let openBracketsCount23 = 0;\n  let openBracketsCount24 = 0;\n  let openBracketsCount25 = 0;\n  let openBracketsCount26 = 0;\n  let openBracketsCount27 = 0;\n  let openBracketsCount28 = 0;\n  let openBracketsCount29 = 0;\n  let openBracketsCount30 = 0;\n  let openBracketsCount31 = 0;\n  let openBracketsCount32 = 0;\n  let openBracketsCount33 = 0;\n  let openBracketsCount34 = 0;\n  let openBracketsCount35 = 0;\n  let openBracketsCount36 = 0;\n  let openBracketsCount37 = 0;\n  let openBracketsCount38 = 0;\n  let openBracketsCount39 = 0;\n  let openBracketsCount40 = 0;\n  let openBracketsCount41 = 0;\n  let openBracketsCount42 = 0;\n  let openBracketsCount43 = 0;\n  let openBracketsCount44 = 0;\n  let openBracketsCount45 = 0;\n  let openBracketsCount46 = 0;\n  let openBracketsCount47 = 0;\n  let openBracketsCount48 = 0;\n  let openBracketsCount49 = 0;\n  let openBracketsCount50 = 0;\n  let openBracketsCount51 = 0;\n  let openBracketsCount52 = 0;\n  let openBracketsCount53 = 0;\n  let openBracketsCount54 = 0;\n  let openBracketsCount55 = 0;\n  let openBracketsCount56 = 0;\n  let openBracketsCount57 = 0;\n  let openBracketsCount58 = 0;\n  let openBracketsCount59 = 0;\n  let openBracketsCount60 = 0;\n  let openBracketsCount61 = 0;\n  let openBracketsCount62 = 0;\n  let openBracketsCount63 = 0;\n  let openBracketsCount64 = 0;\n  let openBracketsCount65 = 0;\n  let openBracketsCount66 = 0;\n  let openBracketsCount67 = 0;\n  let openBracketsCount68 = 0;\n  let openBracketsCount69 = 0;\n  let openBracketsCount70 = 0;\n  let openBracketsCount71 = 0;\n  let openBracketsCount72 = 0;\n  let openBracketsCount73 = 0;\n  let openBracketsCount74 = 0;\n  let openBracketsCount75 = 0;\n  let openBracketsCount76 = 0;\n  let openBracketsCount77 = 0;\n  let openBracketsCount78 = 0;\n  let openBracketsCount79 = 0;\n  let openBracketsCount80 = 0;\n  let openBracketsCount81 = 0;\n  let openBracketsCount82 = 0;\n  let openBracketsCount83 = 0;\n  let openBracketsCount84 = 0;\n  let openBracketsCount85 = 0;\n  let openBracketsCount86 = 0;\n  let openBracketsCount87 = 0;\n  let openBracketsCount88 = 0;\n  let openBracketsCount89 = 0;\n  let openBracketsCount90 = 0;\n  let openBracketsCount91 = 0;\n  let openBracketsCount92 = 0;\n  let openBracketsCount93 = 0;\n  let openBracketsCount94 = 0;\n  let openBracketsCount95 = 0;\n  let openBracketsCount96 = 0;\n  let openBracketsCount97 = 0;\n  let openBracketsCount98 = 0;\n  let openBracketsCount99 = 0;\n  let openBracketsCount100 = 0;\n  let openBracketsCount101 = 0;\n  let openBracketsCount102 = 0;\n  let openBracketsCount103 = 0;\n  let openBracketsCount104 = 0;\n  let openBracketsCount105 = 0;\n  let openBracketsCount106 = 0;\n  let openBracketsCount107 = 0;\n  let openBracketsCount108 = 0;\n  let openBracketsCount109 = 0;\n  let openBracketsCount110 = 0;\n  let openBracketsCount111 = 0;\n  let openBracketsCount112 = 0;\n  let openBracketsCount113 = 0;\n  let openBracketsCount114 = 0;\n  let openBracketsCount115 = 0;\n  let openBracketsCount116 = 0;\n  let openBracketsCount117 = 0;\n  let openBracketsCount118 = 0;\n  let openBracketsCount119 = 0;\n  let openBracketsCount120 = 0;\n  let openBracketsCount121 = 0;\n  let openBracketsCount122 = 0;\n  let openBracketsCount123 = 0;\n  let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return Math.round(sum);\n};\n\nconst testSummarizeSquare = () => {\n  const lst = [1,2,3];\n  console.log(summarizeSquare(lst));\n  const lst2 = [1,4,9];\n  console.log(summarizeSquare(lst2));\n  const lst3 = [1,3,5,7];\n  console.log(summarizeSquare(lst3));\n  const lst4 = [1.4,4.2,0];\n  console.log(summarizeSquare(lst4));\n  const lst5 = [-2.4,1,1];\n  console.log(summarizeSquare(lst5));\n};\n\ntestSummarizeSquare();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const txtLength = txt.length;\n  const lastChar = txt[txtLength - 1];\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotAWord =!isALetter || txt.match(/\\s/);\n  return isNotAWord && isNotALetter;\n};\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfLastTwoCharsAreALetterAndNotAWord(\"apple pie\") ➞ false\n  determineIfLastTwoCharsAreALetterAndNotAWord(\"apple pi e\") ➞ true\n  determineIfLastTwoCharsAreALetterAndNotAWord(\"apple pi e \") ➞ false\n  determineIfLastTwoCharsAreALetterAndNotAWord(\"\") ➞ false\n  */\nconst determineIfLastTwoCharsAreALetterAndNotAWord = (txt) => {\n  const txtLength = txt.length;\n  const lastTwoChars = txt.substr(txtLength - 2, 2);\n  const isALetter = lastTwoChars.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotAWord =!isALetter || txt.match(/\\s/);\n  return isNotAWord && isNotALetter;\n};\n\n/*\n  Create a function that returns true if the last three characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfLastThreeCharsAreALetterAndNotAWord(\"apple pie\") ➞ false\n  determineIfLastThreeCharsAreALetterAndNotAWord(\"apple pi e\") ➞ true\n  determineIfLastThreeCharsAreALetterAndNotAWord(\"apple pi e \") ➞ false\n  determineIfLastThreeCharsAreALetterAndNotAWord(\"\") ➞ false\n  */\nconst determineIfLastThreeCharsAreALetterAndNotAWord = (txt) => {\n  const txtLength = txt.length;\n  const lastThreeChars = txt.substr(txtLength - 3, 3);\n  const isALetter = lastThreeChars.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotAWord =!isALetter || txt.match(/\\s/);\n  return isNotAWord && isNotALetter;\n};\n\n/*\n  Create a function that returns true if the last four characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfLastFourCharsAreALetterAndNotAWord(\"apple pie\") ➞ false\n  determineIfLastFourCharsAreALetterAndNotAWord(\"apple pi e\") ➞ true\n  determineIfLastFourCharsAreALetterAndNotAWord(\"apple pi e \") ➞ false\n  determineIfLastFourCharsAreALetterAndNotAWord(\"\") ➞ false\n  */\nconst determineIfLastFourCharsAreALetterAndNotAWord = (txt) => {\n  const txtLength = txt.length;\n  const lastFourChars = txt.substr(txtLength - 4, 4);\n  const isALetter = lastFourChars.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotAWord =!isALetter || txt.match(/\\s/);\n  return isNotAWord && isNotALetter;\n};\n\n/*\n  Create a function that returns true if the last five characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfLastFiveCharsAreALetterAndNotAWord(\"apple pie\") ➞ false\n  determineIfLastFiveCharsAreALetterAndNotAWord(\"apple pi e\") ➞ true\n  determineIfLastFiveCharsAreALetterAndNotAWord(\"apple pi e \") ➞ false\n  determineIfLastFiveCharsAreALetterAndNotAWord(\"\") ➞ false\n  */\nconst determineIfLastFiveCharsAreALetterAndNotAWord = (txt) => {\n  const txtLength = txt.length;\n  const lastFiveChars = txt.substr(txtLength - 5, 5);\n  const isALetter = lastFiveChars.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotAWord =!isALetter || txt.match(/\\s/);\n  return isNotAWord && isNotALetter;\n};\n\n/*\n  Create a function that returns true if the last six characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfLastSixCharsAreALetterAndNotAWord(\"apple pie\") ➞ false\n  d", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2);\n    if (arr[mid] < arr[i]) {\n      i = mid + 1;\n    } else if (arr[mid] > arr[j]) {\n      j = mid;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nmodule.exports = canStage;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max === 0 && min === 0) {\n    return (null, null);\n  }\n  return (max < 0? null : max, min > 0? null : min);\n};\n\nexport default bigSmallIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a <= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a <= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a <= b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a <= b? a : b;\n  }\n  return null;\n};\n\nconst compareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a >= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a >= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a >= b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a >= b? a : b;\n  }\n  return null;\n};\n\nconst compareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a === b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a === b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a === b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a === b? a : b;\n  }\n  return null;\n};\n\nconst compareSix = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a!== b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a!== b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a!== b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a!== b? a : b;\n  }\n  return null;\n};\n\nconst compareSeven = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a === b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a === b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a === b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a === b? a : b;\n  }\n  return null;\n};\n\nconst compareEight = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a!== b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a!== b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a!== b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a!== b? a : b;\n  }\n  return null;\n};\n\nconst compareNine = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a === b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a === b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a === b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a === b? a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOdd(4) == false\n  isAdequateToSumOdd(6) == true\n  isAdequateToSumOdd(8) == false\n  */\nconst isAdequateToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == false\n  */\nconst isAdequateToSumEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i;\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == true\n  */\nconst isAdequateToSumEvenOrOdd2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i;\n      sum += i;\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == true\n  */\nconst isAdequateToSumEvenOrOdd3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i;\n      sum += i;\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == true\n  */\nconst isAdequateToSumEvenOrOdd4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i;\n      sum += i;\n      sum += i;\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == true\n  */\nconst isAdequateToSumEvenOrOdd5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i;\n      sum += i;\n      sum += i;\n      sum += i;\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == true\n  */\nconst isAdequateToSumEvenOrOdd6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i;\n      sum += i;\n      sum += i;\n      sum += i;\n      sum += i;\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or 4 positive odd numbers\n  Example\n  isAdequateToSumEvenOrOdd(4) == true\n  isAdequateToSumEvenOrOdd(6) == true\n  isAdequateToSumEvenOrOdd(8) == true\n  */\nconst isAdequateToSumEvenOrO", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci2 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci3 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci4 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci5 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci6 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci7 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci8 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci9 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci10 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci11 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci12 = (n) => {\n  let a = 0;\n  let b = 1;\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += a;\n    a = b;\n    b = result;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst fibonacci13 = (n) => {\n  let a =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const prefixes = []\n  let i = 0\n  while (i < string.length) {\n    const prefix = string.substr(0, i + 1)\n    prefixes.push(prefix)\n    i++\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffix = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substr(string.length - i - 1)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffix", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  repairUnderscore(\"Example\") == \"Example\"\n  repairUnderscore(\"Example 1\") == \"Example 1\"\n  repairUnderscore(\" Example 2\") == \"Example 2\"\n  repairUnderscore(\" Example   3\") == \"Example 3\"\n  */\nconst repairUnderscore = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairAll = (text) => {\n  return repairSpace(repairUnderscore(text))\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  repairUnderscore(\"Example\") == \"Example\"\n  repairUnderscore(\"Example 1\") == \"Example 1\"\n  repairUnderscore(\" Example 2\") == \"Example 2\"\n  repairUnderscore(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllUnderscore = (text) => {\n  return repairUnderscore(repairSpace(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAll = (text) => {\n  return repairAllUnderscore(repairAll(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAllUnderscore = (text) => {\n  return repairAll(repairAllUnderscore(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAllAll = (text) => {\n  return repairAllAllUnderscore(repairAllAll(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAllAllUnderscore = (text) => {\n  return repairAllAll(repairAllAllAll(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAllAllAll = (text) => {\n  return repairAllAllAllUnderscore(repairAllAllAll(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAllAllAllUnderscore = (text) => {\n  return repairAllAllAll(repairAllAllAllAll(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3\"\n  */\nconst repairAllAllAllAllAll = (text) => {\n  return repairAllAllAllAllUnderscore(repairAllAllAllAll(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairAll(\"Example\") == \"Example\"\n  repairAll(\"Example 1\") == \"Example 1\"\n  repairAll(\" Example 2\") == \"Example 2\"\n  repairAll(\" Example   3\") == \"Example 3", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const file_name_length = file_name.length;\n  const file_name_first_char = file_name.charAt(0);\n  const file_name_second_char = file_name.charAt(1);\n  const file_name_third_char = file_name.charAt(2);\n  const file_name_fourth_char = file_name.charAt(3);\n  const file_name_fifth_char = file_name.charAt(4);\n  const file_name_sixth_char = file_name.charAt(5);\n  const file_name_seventh_char = file_name.charAt(6);\n  const file_name_eighth_char = file_name.charAt(7);\n  const file_name_ninth_char = file_name.charAt(8);\n  const file_name_tenth_char = file_name.charAt(9);\n  const file_name_eleventh_char = file_name.charAt(10);\n  const file_name_twelfth_char = file_name.charAt(11);\n  const file_name_thirteenth_char = file_name.charAt(12);\n  const file_name_fourteenth_char = file_name.charAt(13);\n  const file_name_fifteenth_char = file_name.charAt(14);\n  const file_name_sixteenth_char = file_name.charAt(15);\n  const file_name_seventeenth_char = file_name.charAt(16);\n  const file_name_eighteenth_char = file_name.charAt(17);\n  const file_name_nineteenth_char = file_name.charAt(18);\n  const file_name_twentieth_char = file_name.charAt(19);\n  const file_name_twenty_first_char = file_name.charAt(20);\n  const file_name_twenty_second_char = file_name.charAt(21);\n  const file_name_twenty_third_char = file_name.charAt(22);\n  const file_name_twenty_fourth_char = file_name.charAt(23);\n  const file_name_twenty_fifth_char = file_name.charAt(24);\n  const file_name_twenty_sixth_char = file_name.charAt(25);\n  const file_name_twenty_seventh_char = file_name.charAt(26);\n  const file_name_twenty_eighth_char = file_name.charAt(27);\n  const file_name_twenty_ninth_char = file_name.charAt(28);\n  const file_name_twenty_tenth_char = file_name.charAt(29);\n  const file_name_twenty_eleventh_char = file_name.charAt(30);\n  const file_name_twenty_twelfth_char = file_name.charAt(31);\n  const file_name_twenty_thirteenth_char = file_name.charAt(32);\n  const file_name_twenty_fourteenth_char = file_name.charAt(33);\n  const file_name_twenty_fifteenth_char = file_name.charAt(34);\n  const file_name_twenty_sixteenth_char = file_name.charAt(35);\n  const file_name_twenty_seventeenth_char = file_name.charAt(36);\n  const file_name_twenty_eighteenth_char = file_name.charAt(37);\n  const file_name_twenty_nineteenth_char = file_name.charAt(38);\n  const file_name_twenty_tenth_char = file_name.charAt(39);\n  const file_name_twenty_eleventh_char = file_name.charAt(40);\n  const file_name_twenty_twelfth_char = file_name.charAt(41);\n  const file_name_twenty_thirteenth_char = file_name.charAt(42);\n  const file_name_twenty_fourteenth_char = file_name.charAt(43);\n  const file_name_twenty_fifteenth_char = file_name.charAt(44);\n  const file_name_twenty_sixteenth_char = file_name.charAt(45);\n  const file_name_twenty_seventeenth_char = file_name.charAt(46);\n  const file_name_twenty_eighteenth_char = file_name.charAt(47);\n  const file_name_twenty_nineteenth_char = file_name.charAt(48);\n  const file_name_twenty_tenth_char = file_name.charAt(49);\n  const file_name_twenty_eleventh_char = file_name.charAt(50);\n  const file_name_twenty_twelfth_char = file_name.charAt(51);\n  const file_name_twenty_thirteenth_char = file_name.charAt(52);\n  const file_name_twenty_fourteenth_char = file_name.charAt(53);\n  const file_name_twenty_fifteenth", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = getPrimeNumber(word.length)\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst getPrimeNumber = (number) => {\n  let primeNumber = 2\n  while (primeNumber < number) {\n    primeNumber += 1\n  }\n  return primeNumber\n}\n\nconsole.log(bibleInPrisonTerm('This is a test'))\nconsole.log(bibleInPrisonTerm('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = x.split('/')[0]\n  const x_den = x.split('/')[1]\n  const n_num = n.split('/')[0]\n  const n_den = n.split('/')[1]\n\n  if (x_num === n_num) {\n    return true\n  }\n\n  if (x_num === n_den) {\n    return false\n  }\n\n  if (x_den === n_den) {\n    return true\n  }\n\n  return false\n}\n\nconsole.log(simplify('1/5', '5/1'))\nconsole.log(simplify('1/6', '2/1'))\nconsole.log(simplify('7/10', '10/2'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst holyOrderByPoint = (nums)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === 3 || nums[i] % 2 === 5 || nums[i] % 2 === 7 || nums[i] % 2 === 9)) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(extraFilter([15, -73, 14, -15]));\nconsole.log(extraFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(catchMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i] || planet2 === planets[i]) {\n      result.push(planets[i]);\n    }\n  }\n  return result;\n};\n\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const len = lst.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  return lst.filter((x, i) => i % 2 === 0)\n   .sort((a, b) => a.length - b.length)\n   .map((x, i) => x.length)\n   .reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(screenTiltSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(screenTiltSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowStringedInstrumentSuccession(0)\n  '0'\n  >>> bowStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowStringedInstrumentSuccession = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession2 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession3 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession4 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession5 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession6 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession7 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession8 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession9 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst stringInstrumentSuccession10 = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringInstrumentSuccession(0)\n  '0'\n  >>> stringInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYttrium", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  const dev = lst.reduce((acc, x) => {\n    if (x > 0) {\n      acc += x * x;\n    }\n    return acc;\n  }, 0);\n  return dev;\n};\n\nexport default doubleTheDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const gameScore = game.reduce((acc, val, i) => {\n    if (guess[i] === val) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  const guessScore = guess.reduce((acc, val, i) => {\n    if (game[i] === val) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  const diff = Math.abs(guessScore - gameScore)\n  return [diff, gameScore, guessScore]\n}\n\nmodule.exports = compare\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  const cap = class_name.toUpperCase().split('').reduce((a, b) => {\n    return a + b.toUpperCase()\n  }, '')\n  const strength = cap.length - class_name.length\n  const sorted = extensions.sort((a, b) => {\n    return strength - (a.length - b.length)\n  })\n  return sorted[0]\n}\n\nmodule.exports = hardExtension\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  if (a_length!== b_length) return false;\n  for (let i = 0; i < a_length; i++) {\n    if (a[i]!== b[i]) {\n      for (let j = i + 1; j < a_length; j++) {\n        if (a[j] === b[i] || a[i] === b[j]) return true;\n      }\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return a string where all the consecutive characters are in lowercase.\n  Example:\n  input: \"aA\"\n  output: \"aa\"\n  input: \"aB\"\n  output: \"ab\"\n  input: \"aBb\"\n  output: \"abb\"\n  input: \"aBbC\"\n  output: \"abcb\"\n  input: \"aBbCd\"\n  output: \"abcbcd\"\n  input: \"aBbCdE\"\n  output: \"abcbcdE\"\n  input: \"aBbCdEf\"\n  output: \"abcbcdEf\"\n  input: \"aBbCdEfG\"\n  output: \"abcbcdEfG\"\n  input: \"aBbCdEfGh\"\n  output: \"abcbcdEfGh\"\n  input: \"aBbCdEfGhI\"\n  output: \"abcbcdEfGhI\"\n  input: \"aBbCdEfGhIj\"\n  output: \"abcbcdEfGhIj\"\n  input: \"aBbCdEfGhIjK\"\n  output: \"abcbcdEfGhIjK\"\n  input: \"aBbCdEfGhIjKl\"\n  output: \"abcbcdEfGhIjKl\"\n  input: \"aBbCdEfGhIjKlM\"\n  output: \"abcbcdEfGhIjKlM\"\n  input: \"aBbCdEfGhIjKlMn\"\n  output: \"abcbcdEfGhIjKlMn\"\n  input: \"aBbCdEfGhIjKlMnO\"\n  output: \"abcbcdEfGhIjKlMnO\"\n  input: \"aBbCdEfGhIjKlMnOp\"\n  output: \"abcbcdEfGhIjKlMnOp\"\n  input: \"aBbCdEfGhIjKlMnOpQ\"\n  output: \"abcbcdEfGhIjKlMnOpQ\"\n  input: \"aBbCdEfGhIjKlMnOpQr\"\n  output: \"abcbcdEfGhIjKlMnOpQr\"\n  input: \"aBbCdEfGhIjKlMnOpQrS\"\n  output: \"abcbcdEfGhIjKlMnOpQrS\"\n  input: \"aBbCdEfGhIjKlMnOpQrSs\"\n  output: \"abcbcdEfGhIjKlMnOpQrSs\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsT\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsT\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTt\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTt\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtU\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtU\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUv\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUv\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUvW\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUvW\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUvWx\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUvWx\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUvWxY\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUvWxY\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUvWxYz\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUvWxYz\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUvWxYzZ\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUvWxYzZ\"\n  input: \"aBbCdEfGhIjKlMnOpQrSsTtUvWxYzZp\"\n  output: \"abcbcdEfGhIjKlMnOpQrSsTtUvWxYzZp\"\n  input:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount2 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount3 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount4 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount5 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount6 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount7 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount8 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount9 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount10 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount11 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount12 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount13 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount14 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount15 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount16 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount17", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n  const result = [];\n  let num = number;\n  let i = 0;\n  while (num > 0) {\n    result.push(roman[num % roman.M]);\n    num = Math.floor(num / roman.M);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return false;\n  }\n  return (a * b > c * c && a * c > b * b && b * c > a * a) ||\n    (a * b < c * c && a * c < b * b && b * c < a * a);\n};\n\nconst goodSlantTriangleTest = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest2 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest3 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest4 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest5 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest6 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest7 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest8 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest9 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest10 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest11 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest12 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest13 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest14 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest15 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest16 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest17 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest18 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest19 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest20 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && goodSlantTriangle(b, c, a) &&\n    goodSlantTriangle(c, a, b);\n};\n\nconst goodSlantTriangleTest21 = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && good", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  const max = words[0];\n  const count = 1;\n  for (let i = 1; i < words.length; i++) {\n    const current = words[i];\n    if (current.length > max.length) {\n      max = current;\n      count = 1;\n    } else if (current.length === max.length) {\n      if (current > max) {\n        max = current;\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(receiveMax([\"name\", \"of\", \"string\"]));\nconsole.log(receiveMax([\"name\", \"enam\", \"game\"]));\nconsole.log(receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining];\n  }\n  \n  const left = remaining - number;\n  const result = [number + left, remaining];\n  \n  return result;\n};\n\nconst test = [\n  feed(5, 6, 10),\n  feed(4, 8, 9),\n  feed(1, 10, 10),\n  feed(2, 11, 5)\n];\n\nconsole.log(test);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters2 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters3 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters4 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters5 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters6 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters7 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters8 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters9 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters10 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters11 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters12 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('JERRY')\n  4\n  */\nconst considerClearcutCharacters13 = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return uniqueChars.size\n}\n\n/*\n  Given a string,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    result += operator[operatorIndex] * operand[operandIndex];\n    operatorIndex++;\n    operandIndex++;\n  }\n\n  return result;\n};\n\nconst main = () => {\n  let operator = ['+', '-', '*', '//', '**'];\n  let operand = [2, 3, 4, 5];\n  let result = sufficeAlgebra(operator, operand);\n  console.log(result);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let len = s.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      res += s[i].toLowerCase();\n    } else {\n      res += s[i].toUpperCase();\n    }\n  }\n  return res;\n};\n\nconsole.log(resolve('1234'));\nconsole.log(resolve('ab'));\nconsole.log(resolve('#a@C'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha1('Hello world') == 'a9d3b8a0a9f9d7e8f9f4d4c8c8c8c4d4c8c4d4c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const remainder = num % 10;\n    if (remainder === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst render17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    } else {\n      beats.push(4);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing a number of beats.\n  Your task is to convert this number of beats to a string in a special ASCII format.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convertToString(4)\n  'o o| o o| o o| o o'\n  >>> convertToString(2)\n  'o| o| o| o'\n  >>> convertToString(1)\n  '.'\n  >>> convertToString(0)\n  ''\n  */\nconst convertToString = (beats) => {\n  let string = '';\n  if (beats === 0) {\n    return '';\n  }\n  if (beats === 1) {\n    return '.';\n  }\n  if (beats === 2) {\n    return 'o|';\n  }\n  if (beats === 3) {\n    return 'o o| o o';\n  }\n  if (beats === 4) {\n    return 'o o o| o o';\n  }\n};\n\n/*\n  Input to this function is a string representing a number of beats.\n  Your task is to convert this number of beats to a string in a special ASCII format.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convertToString(4)\n  'o o| o o| o o| o o'\n  >>> convertToString(2)\n  'o| o| o| o'\n  >>> convertToString(1)\n  '.'\n  >>> convertToString(0)\n  ''\n  */\nconst convertToString2 = (beats) => {\n  let string = '';\n  if (beats === 0) {\n    return '';\n  }\n  if (beats === 1) {\n    return 'o|';\n  }\n  if (beats === 2) {\n    return 'o o| o o';\n  }\n  if (beats === 3) {\n    return 'o o o| o o';\n  }\n  if (beats === 4) {\n    return 'o o o o| o o';\n  }\n};\n\n/*\n  Input to this function is a string representing a number of beats.\n  Your task is to convert this number of beats to a string in a special ASCII format.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convertToString(4)\n  'o o| o o| o o| o o'\n  >>> convertToString(2)\n  'o| o| o| o'\n  >>> convertToString(1)\n  '.'\n  >>> convertToString(0)\n  ''\n  */\nconst convertToString3 = (beats) => {\n  let string = '';\n  if (beats === 0) {\n    return '';\n  }\n  if (beats === 1) {\n    return 'o|';\n  }\n  if (beats === 2) {\n    return 'o o| o o';\n  }\n  if (beats === 3) {\n    return 'o o o| o o';\n  }\n  if (beats === 4) {\n    return 'o o o o| o o';\n  }\n};\n\n/*\n  Input to this function is a string representing a number of beats.\n  Your task is to convert this number of beats to a string in a special ASCII format.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convertToString(4)\n  'o o| o o| o o| o o'\n  >>> convertToString(2)\n  'o| o| o| o'\n  >>> convertToString(1)\n  '.'\n  >>> convertToString(0)\n  ''\n  */\nconst convertToString4 = (beats) => {\n  let string = '';\n  if (beats === 0) {\n    return '';\n  }\n  if (beats === 1) {\n    return 'o|';\n  }\n  if (beats === 2) {\n    return 'o o| o o';\n  }\n  if (beats === 3) {\n    return 'o o o| o o';\n  }\n  if (beats === 4) {\n    return 'o o o o| o o';\n  }\n};\n\n/*\n  Input to this function is a string representing a number of beats.\n  Your task is to convert this number of beats to a string in a special ASCII format.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that can be made from the original string.\n  >>> longestSubstring('abc')\n  'abc'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals = (number) => {\n  let decPart = truncateNumber(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntIntIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntIntIntIntIntIntInt = (number) => {\n  let decPart = truncateInt(number);\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimalsIntIntIntIntIntIntIntInt", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nmodule.exports = receiveClosestChemicalElement;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min)\n  ]\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of the number.\n  >>> logList([1, 2, 3, 4, 5])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst logList = (numbers) => {\n  return numbers.map(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNone = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmpty = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNone = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStrings = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrBooleans = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrNumbers = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrNumbersOrBooleans = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrNumbersOrFloats = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrNumbersOrFloatsOrBooleans = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrNumbersOrFloatsOrBooleansOrDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNoneOrStringsOrNumbersOrFloatsOrBooleansOrDictsOrLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null &&", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return index of first occurrence of a character in a string\n  >>> strindex('')\n  -1\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, char) => {\n  let index = -1\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === char) {\n      index = i\n      break\n    }\n    i++\n  }\n  return index\n}\n\n/* Return index of last occurrence of a character in a string\n  >>> strlastindex('')\n  -1\n  >>> strlastindex('abc', 'a')\n  2\n  >>> strlastindex('abc', 'b')\n  1\n  >>> strlastindex('abc', 'c')\n  2\n  >>> strlastindex('abc', 'd')\n  -1\n  */\nconst strlastindex = (string, char) => {\n  let index = -1\n  let i = string.length - 1\n  while (i >= 0) {\n    if (string[i] === char) {\n      index = i\n      break\n    }\n    i--\n  }\n  return index\n}\n\n/* Return a copy of a string with all occurrences of a character removed\n  >>> strremove('')\n  ''\n  >>> strremove('abc', 'a')\n  'bc'\n  >>> strremove('abc', 'b')\n  'ac'\n  >>> strremove('abc', 'c')\n  'ab'\n  >>> strremove('abc', 'd')\n  'abc'\n  */\nconst strremove = (string, char) => {\n  let newString = string\n  let i = 0\n  while (i < string.length) {\n    if (string[i]!== char) {\n      newString = newString.substring(0, i) + newString.substring(i + 1)\n    }\n    i++\n  }\n  return newString\n}\n\n/* Return a copy of a string with all occurrences of a character replaced with another\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', 'b')\n  'bc'\n  >>> strreplace('abc', 'b', 'c')\n  'ac'\n  >>> strreplace('abc', 'c', 'd')\n  'abd'\n  */\nconst strreplace = (string, char, replacement) => {\n  let newString = string\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === char) {\n      newString = newString.substring(0, i) + replacement + newString.substring(i + 1)\n    }\n    i++\n  }\n  return newString\n}\n\n/* Return a copy of a string with all occurrences of a character replaced with a string\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', 'b')\n  'bc'\n  >>> strreplace('abc', 'b', 'c')\n  'ac'\n  >>> strreplace('abc', 'c', 'd')\n  'abd'\n  */\nconst strreplace = (string, char, replacement) => {\n  let newString = string\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === char) {\n      newString = newString.substring(0, i) + replacement + newString.substring(i + 1)\n    }\n    i++\n  }\n  return newString\n}\n\n/* Return a copy of a string with all occurrences of a character replaced with a character\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', 'b')\n  'bc'\n  >>> strreplace('abc', 'b', 'c')\n  'ac'\n  >>> strreplace('abc', 'c', 'd')\n  'abd'\n  */\nconst strreplace = (string, char, replacement) => {\n  let newString = string\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === char) {\n      newString = newString.substring(0, i) + replacement + newString.substring(i + 1)\n    }\n    i++\n  }\n  return newString\n}\n\n/* Return a copy of a string with all occurrences of a character replaced with a string\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', 'b')\n  'bc'\n  >>> strreplace('abc', 'b', 'c')\n  'ac'\n  >>> strreplace('abc', 'c', 'd')\n  'abd'\n  */\nconst strreplace = (string, char, replacement) => {\n  let newString = string\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === char) {\n      newString = newString.substring(0, i) + replacement + newString.substring(i + 1)\n    }\n    i++\n  }\n  return newString\n}\n\n/* Return a copy of a string with all occurrences of a character replaced with a character\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', 'b')\n  'bc'\n  >>> strreplace('abc', 'b', 'c')\n  'ac'\n  >>> strreplace('abc', 'c', 'd')\n  'abd'\n  */\nconst strreplace = (string, char, replacement) => {\n  let newString = string\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === char) {\n      newString = newString.substring(0, i) + replacement + newString.substring(i + 1)\n    }\n    i++\n  }\n  return newString\n}\n\n/* Return a copy of a string with all occurrences of a character replaced with a string\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', 'b')\n  'bc", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor(15)\n  15\n  */\nconst bigDivisor2 = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor2(15)\n  15\n  */\nconst bigDivisor3 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor3(15)\n  15\n  */\nconst bigDivisor4 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor4(15)\n  15\n  */\nconst bigDivisor5 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor5(15)\n  15\n  */\nconst bigDivisor6 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor6(15)\n  15\n  */\nconst bigDivisor7 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor7(15)\n  15\n  */\nconst bigDivisor8 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor8(15)\n  15\n  */\nconst bigDivisor9 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor9(15)\n  15\n  */\nconst bigDivisor10 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor10(15)\n  15\n  */\nconst bigDivisor11 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor11(15)\n  15\n  */\nconst bigDivisor12 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor12(15)\n  15\n  */\nconst bigDivisor13 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor13(15)\n  15\n  */\nconst bigDivisor14 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor14(15)\n  15\n  */\nconst bigDivisor15 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor15(15)\n  15\n  */\nconst bigDivisor16 = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> bigDivisor16(15)\n  15\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_by_count = []\n  const factors_by_count_by_factor = []\n  const factors_by_count_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor = []\n  const factors_by_count_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by_factor_by", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [...unique,...duplicates];\n};\n\nexport default getRidOfDuplicate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toLowerCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase2 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toLowerCase();\n    } else {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase3 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase4 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase5 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase6 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toLowerCase();\n    } else {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase7 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase8 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toLowerCase();\n    } else {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase9 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase10 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toLowerCase();\n    } else {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase11 = (string) => {\n  const stringLength = string.length;\n  let newString = string;\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      newString = newString.toUpperCase();\n    } else {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase12 = (string) => {\n  const stringLength = string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate2 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate3 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate4 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate5 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate6 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate7 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate8 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate9 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate10 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate11 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate12 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate13 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate14 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate15 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate16 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate17 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate18 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate19 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate20 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate21 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  */\nconst filterOut = (strings, excluded) => {\n  return strings.filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> filterIn(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterInOut = (strings, included, excluded) => {\n  return filterIn(strings, included).filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterInOut = (strings, included, excluded) => {\n  return filterIn(strings, included).filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterInOut = (strings, included, excluded) => {\n  return filterIn(strings, included).filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterInOut = (strings, included, excluded) => {\n  return filterIn(strings, included).filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterInOut = (strings, included, excluded) => {\n  return filterIn(strings, included).filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst filterInOut = (strings, included, excluded) => {\n  return filterIn(strings, included).filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list, but not in the excluded list.\n  >>> filterInOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, -2, -3, -9, 0, 123, 1]\n  */\nconst catchNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> catchZero([-1, 2, -4, 5, 6])\n  []\n  >>> catchZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [0, 123, 1]\n  */\nconst catchZero = (l) => {\n  const zero = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      zero.push(l[i]);\n    }\n  }\n  return zero;\n};\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  []\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]\n  */\nconst catchNaN = (l) => {\n  const nan = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNaN(l[i])) {\n      nan.push(l[i]);\n    }\n  }\n  return nan;\n};\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  []\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]\n  */\nconst catchInfinity = (l) => {\n  const infinity = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isInfinite(l[i])) {\n      infinity.push(l[i]);\n    }\n  }\n  return infinity;\n};\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]\n  */\nconst catchNegativeInfinity = (l) => {\n  const negativeInfinity = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isInfinite(l[i]) && l[i] < 0) {\n      negativeInfinity.push(l[i]);\n    }\n  }\n  return negativeInfinity;\n};\n\n/*\n  >>> catchNaNInfinity([-1, 2, -4, 5, 6])\n  []\n  >>> catchNaNInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]\n  */\nconst catchNaNInfinity = (l) => {\n  const nanInfinity = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNaN(l[i]) && isInfinite(l[i])) {\n      nanInfinity.push(l[i]);\n    }\n  }\n  return nanInfinity;\n};\n\n/*\n  >>> catchNegativeInfinityNaN([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegativeInfinityNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]\n  */\nconst catchNegativeInfinityNaN = (l) => {\n  const nanInfinity = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNaN(l[i]) && isInfinite(l[i]) && l[i] < 0) {\n      nanInfinity.push(l[i]);\n    }\n  }\n  return nanInfinity;\n};\n\n/*\n  >>> catchNegativeInfinityNaNInfinity([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegativeInfinityNaNInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]\n  */\nconst catchNegativeInfinityNaNInfinity = (l) => {\n  const nanInfinity = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNaN(l[i]) && isInfinite(l[i]) && l[i] < 0) {\n      nanInfinity.push(l[i]);\n    }\n  }\n  return nanInfinity;\n};\n\n/*\n  >>> catchNegativeInfinityNaNInfinityInfinity([-1, 2, -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> countPrimes(110)\n  109\n  >>> countPrimes(111)\n  110\n  >>> countPrimes(112)\n  111\n  >>> countPrimes(113)\n  112", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2!== 0) {\n    throw new Error('findZero expects list having even number of coefficients');\n  }\n  const max = xs[len - 1];\n  for (let i = 0; i < len; i += 2) {\n    if (xs[i] === 0) {\n      return xs[i + 1];\n    }\n    if (xs[i] > 0 && xs[i + 1] > 0) {\n      if (max < 0) {\n        return xs[i + 1];\n      }\n      if (max * xs[i + 1] < 0) {\n        return xs[i + 1];\n      }\n    }\n  }\n  throw new Error('findZero failed to find zero point');\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  const sortedIndices = [];\n  const sortedValues = [];\n  const sortedLength = l.length;\n  for (let i = 0; i < sortedLength; i++) {\n    sortedIndices.push(i);\n    sortedValues.push(l[i]);\n  }\n  sorted.push(...sortedValues);\n  sortedLength = sortedLength - 3;\n  for (let i = 0; i < sortedLength; i++) {\n    const index = sortedIndices[i];\n    const value = sorted[index];\n    const indexToAdd = i + 3;\n    sortedIndices.splice(indexToAdd, 0, index);\n    sorted.splice(indexToAdd, 0, value);\n  }\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse_sorted = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse_sorted_reverse = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse_sorted_reverse_sorted = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_reverse = (l) => {\n  let result = [];\n  for (let i = l.length - 1; i >= 0; i--) {\n    let item = l[i];\n    if (l.indexOf(item) === i) {\n      result.push(item);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_reverse_reverse = (l) => {\n  let result = [];\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> fizzBuzz(100)\n  3\n  >>> fizzBuzz(101)\n  4\n  >>> fizzBuzz(102)\n  5\n  >>> fizzBuzz(103)\n  6\n  >>> fizzBuzz(104)\n  7\n  >>> fizzBuzz(105)\n  8\n  >>> fizzBuzz(106)\n  9\n  >>> fizzBuzz(107)\n  10\n  >>> fizzBuzz(108)\n  11\n  >>> fizzBuzz(109)\n  12\n  >>> fizzBuzz(110)\n  13\n  >>> fizzBuzz(111)\n  14\n  >>> fizzBuzz(112)\n  15\n  >>> fizzBuzz(113)\n  16\n  >>> fizzBuzz(114)\n  17\n  >>> fizzBuzz(115)\n  18\n  >>> fizzBuzz(116)\n  19\n  >>> fizzBuzz(117)\n  20\n  >>> fizzBuzz(118)\n  21\n  >>> fizzBuzz(119)\n  22\n  >>> fizzBuzz(120)\n  23\n  >>> fizzBuzz(121)\n  24\n  >>> fizzBuzz(122)\n  25\n  >>> fizzBuzz(123)\n  26\n  >>> fizzBuzz(124)\n  27\n  >>> fizzBuzz(125)\n  28\n  >>> fizzBuzz(126)\n  29\n  >>> fizzBuzz(127)\n  30\n  >>> fizzBuzz(128)\n  31\n  >>> fizzBuzz(129)\n  32\n  >>> fizzBuzz(130)\n  33\n  >>> fizzBuzz(131)\n  34\n  >>> fizzBuzz(132)\n  35\n  >>> fizzBuzz(133)\n  36\n  >>> fizzBuzz(134)\n  37\n  >>> fizzBuzz(135)\n  38\n  >>> fizzBuzz(136)\n  39\n  >>> fizzBuzz(137)\n  40\n  >>> fizzBuzz(138)\n  41\n  >>> fizzBuzz(139)\n  42\n  >>> fizzBuzz(140)\n  43\n  >>> fizzBuzz(141)\n  44\n  >>> fizzBuzz(142)\n  45\n  >>> fizzBuzz(143)\n  46\n  >>> fizzBuzz(144)\n  47\n  >>> fizzBuzz(145)\n  48\n  >>> fizzBuzz(146)\n  49\n  >>> fizzBuzz(147)\n  50\n  >>> fizzBuzz(148)\n  51\n  >>> fizzBuzz(149)\n  52\n  >>> fizzBuzz(150)\n  53\n  >>> fizzBuzz(151)\n  54\n  >>> fizzBuzz(152)\n  55\n  >>> fizzBuzz(153)\n  56\n  >>> fizzBuzz(154)\n  57\n  >>> fizzBuzz(155)\n  58\n  >>> fizzBuzz(156)\n  59\n  >>> fizzBuzz(157)\n  60\n  >>> fizzBuzz(158)\n  61\n  >>> fizzBuzz(159)\n  62\n  >>> fizzBuzz(160)\n  63\n  >>> fizzBuzz(161)\n  64\n  >>> fizzBuzz(162)\n  65\n  >>> fizzBuzz(163)\n  66\n  >>> fizzBuzz(164)\n  67\n  >>> fizzBuzz(165)\n  68\n  >>> fizzBuzz(166)\n  69\n  >>> fizzBuzz(167)\n  70\n  >>> fizzBuzz(168)\n  71\n  >>> fizzBuzz(169)\n  72\n  >>> fizzBuzz(170)\n  73\n  >>> fizzBuzz(171)\n  74\n  >>> fizzBuzz(172)\n  75\n  >>> fizzBuzz(173)\n  76\n  >>> fizzBuzz(174)\n  77\n  >>> fizzBuzz(175)\n  78\n  >>> fizzBuzz(176)\n  79\n  >>> fizzBuzz(177)\n  80\n  >>> fizzBuzz(178)\n  81\n  >>> fizzBuzz(179)\n  82\n  >>> fizzBuzz(180)\n  83\n  >>> fizzBuzz(181)\n  84\n  >>> fizzBuzz(182)\n  85\n  >>> fizzBuzz(183)\n  86\n  >>> fizzBuzz(184)\n  87\n  >>> fizzBuzz(185)\n  88\n  >>> fizzBuzz(186)\n  89\n  >>> fizzBuzz(187)\n  90\n  >>> fizzBuzz(188)\n  91\n  >>> fizzBuzz(189)\n  92\n  >>> fizzBuzz(190)\n  93\n  >>> fizzBuzz(191)\n  94\n  >>> fizzBuzz(192)\n  95\n  >>> fizzBuzz(193)\n  96\n  >>> fizzBuzz(194)\n  97\n  >>> fizzBuzz(195)\n  98\n  >>> fizzBuzz(196)\n  99\n  >>> fizzBuzz(197)\n  100\n  >>> fizzBuzz(198)\n  101\n  >>> fizzBuzz(199)\n  102\n  >>> fizzBuzz(200)\n  103\n  >>> fizzBuzz(201)\n  104\n  >>> fizzBuzz(202)\n  105\n  >>> fizzBuzz(203)\n  106\n  >>> fizzBuzz(204)\n  107\n  >>> fizzBuzz(205)\n  108\n  >>> fizzBuzz(206)\n  109\n  >>> fizzBuzz(207)\n  110\n  >>> fizzBuzz(208)\n  111\n  >>> fizzBuzz(209)\n  112\n  >>> fizzBuzz(210)\n  113\n  >>> fizzBuzz(211)\n  114\n  >>> fizzBuzz(212)\n  115\n  >>> fizzBuzz(213)\n  116\n  >>> fizzBuzz(214)\n  117\n  >>> fizzBuzz(215)\n  118\n  >>> fizzBuzz(216)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns dec", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(premierFib(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> entailSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailSquaredDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the mean squared deviation\n  around the mean of this dataset:\n  SD = sqrt(mean(x - x_mean)^2)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the variance\n  around the mean of this dataset.\n  Variance is the average squared difference between each element\n  and a centerpoint (mean in this case):\n  VAR = average | x - x_mean |^2\n  >>> entailVariance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailVariance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the skewness\n  around the mean of this dataset.\n  Skewness is the average of the absolute deviations of each element\n  from the mean divided by the standard deviation of the mean:\n  SKEW = average | x - x_mean | / SD\n  >>> entailSkewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailSkewness = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const standardDeviation = entailStandardDeviation(numbers);\n  return mean(deviations) / standardDeviation;\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis\n  around the mean of this dataset.\n  Kurtosis is the average of the squared deviations of each element\n  from the mean divided by the variance of the mean:\n  KURT = average | x - x_mean |^2 / VAR\n  >>> entailKurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailKurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const variance = entailVariance(numbers);\n  return mean(deviations) / variance;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis\n  around the mean of this dataset.\n  Excess Kurtosis is the average of the squared deviations of each element\n  from the mean divided by the variance of the mean:\n  EXK = average | x - x_mean |^2 / VAR\n  >>> entailExcessKurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailExcessKurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const variance = entailVariance(numbers);\n  return mean(deviations) / variance;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis\n  around the mean of this dataset.\n  Excess Kurtosis is the average of the squared deviations of each element\n  from the mean divided by the variance of the mean:\n  EXK = average | x - x_mean |^2 / VAR\n  >>> entailExcessKurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailExcessKurtosis2 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const variance = entailVariance(numbers);\n  return mean(deviations) / variance;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis\n  around the mean of this dataset.\n  Excess Kurtosis is the average of the squared deviations of each element\n  from the mean divided by the variance of the mean:\n  EXK = average | x - x_mean |^2 / VAR\n  >>> entailExcessKurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailExcessKurtosis3 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const variance = entailVariance(numbers);\n  return mean(deviations) / variance;\n};\n\n/*\n  For a given list of input", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero2 = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero3 = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero4 = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero5 = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero6 = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  let leftCar = 0;\n  let rightCar = 0;\n  let leftCarSpeed = 0;\n  let rightCarSpeed = 0;\n  let leftCarPosition = 0;\n  let rightCarPosition = 0;\n  let leftCarVelocity = 0;\n  let rightCarVelocity = 0;\n  let leftCarAcceleration = 0;\n  let rightCarAcceleration = 0;\n  let leftCarVelocityChange = 0;\n  let rightCarVelocityChange = 0;\n  let leftCarPositionChange = 0;\n  let rightCarPositionChange = 0;\n  let leftCarSpeedChange = 0;\n  let rightCarSpeedChange = 0;\n  let leftCarAccelerationChange = 0;\n  let rightCarAccelerationChange = 0;\n\n  for (let i = 0; i < n; i++) {\n    leftCar = i;\n    rightCar = n - 1 - i;\n    leftCarSpeed = Math.random() * 10;\n    rightCarSpeed = Math.random() * 10;\n    leftCarPosition = Math.random() * 100;\n    rightCarPosition = Math.random() * 100;\n    leftCarVelocity = leftCarSpeed;\n    rightCarVelocity = rightCarSpeed;\n    leftCarAcceleration = Math.random() * 10;\n    rightCarAcceleration = Math.random() * 10;\n    leftCarVelocityChange = Math.random() * 10;\n    rightCarVelocityChange = Math.random() * 10;\n    leftCarPositionChange = Math.random() * 10;\n    rightCarPositionChange = Math.random() * 10;\n    leftCarSpeedChange = Math.random() * 10;\n    rightCarSpeedChange = Math.random() * 10;\n    leftCarAccelerationChange = Math.random() * 10;\n    rightCarAccelerationChange = Math.random() * 10;\n\n    while (leftCarPosition + leftCarVelocityChange < rightCarPosition - rightCarVelocityChange) {\n      leftCarVelocity += leftCarAccelerationChange;\n      leftCarAcceleration += leftCarAccelerationChange;\n      leftCarVelocityChange += leftCarSpeedChange;\n      leftCarAccelerationChange += leftCarAccelerationChange;\n      leftCarSpeedChange += leftCarSpeedChange;\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\nconsole.log(cableCarRaceCollision(10));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1)\n  }\n  return newList\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1)\n  }\n  return newList\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1)\n  }\n  return newList\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1)\n  }\n  return newList\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1)\n  }\n  return newList\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  const lCopy = l.slice();\n  lCopy.sort((a, b) => a - b);\n  for (let i = 0; i < lCopy.length - 1; i++) {\n    if (lCopy[i] === 0 && lCopy[i + 1] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = copulateUnionToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Return the number of digits in the number x.\n  >>> varietyDigits(8)\n  3\n  >>> varietyDigits(8, 2)\n  1\n  >>> varietyDigits(7, 2)\n  2\n  >>> varietyDigits(7, 3)\n  2\n  >>> varietyDigits(7, 4)\n  2\n  >>> varietyDigits(7, 5)\n  2\n  >>> varietyDigits(7, 6)\n  2\n  >>> varietyDigits(7, 7)\n  2\n  >>> varietyDigits(7, 8)\n  2\n  >>> varietyDigits(7, 9)\n  2\n  >>> varietyDigits(7, 10)\n  2\n  >>> varietyDigits(7, 11)\n  2\n  >>> varietyDigits(7, 12)\n  2\n  >>> varietyDigits(7, 13)\n  2\n  >>> varietyDigits(7, 14)\n  2\n  >>> varietyDigits(7, 15)\n  2\n  >>> varietyDigits(7, 16)\n  2\n  >>> varietyDigits(7, 17)\n  2\n  >>> varietyDigits(7, 18)\n  2\n  >>> varietyDigits(7, 19)\n  2\n  >>> varietyDigits(7, 20)\n  2\n  >>> varietyDigits(7, 21)\n  2\n  >>> varietyDigits(7, 22)\n  2\n  >>> varietyDigits(7, 23)\n  2\n  >>> varietyDigits(7, 24)\n  2\n  >>> varietyDigits(7, 25)\n  2\n  >>> varietyDigits(7, 26)\n  2\n  >>> varietyDigits(7, 27)\n  2\n  >>> varietyDigits(7, 28)\n  2\n  >>> varietyDigits(7, 29)\n  2\n  >>> varietyDigits(7, 30)\n  2\n  >>> varietyDigits(7, 31)\n  2\n  >>> varietyDigits(7, 32)\n  2\n  >>> varietyDigits(7, 33)\n  2\n  >>> varietyDigits(7, 34)\n  2\n  >>> varietyDigits(7, 35)\n  2\n  >>> varietyDigits(7, 36)\n  2\n  >>> varietyDigits(7, 37)\n  2\n  >>> varietyDigits(7, 38)\n  2\n  >>> varietyDigits(7, 39)\n  2\n  >>> varietyDigits(7, 40)\n  2\n  >>> varietyDigits(7, 41)\n  2\n  >>> varietyDigits(7, 42)\n  2\n  >>> varietyDigits(7, 43)\n  2\n  >>> varietyDigits(7, 44)\n  2\n  >>> varietyDigits(7, 45)\n  2\n  >>> varietyDigits(7, 46)\n  2\n  >>> varietyDigits(7, 47)\n  2\n  >>> varietyDigits(7, 48)\n  2\n  >>> varietyDigits(7, 49)\n  2\n  >>> varietyDigits(7, 50)\n  2\n  >>> varietyDigits(7, 51)\n  2\n  >>> varietyDigits(7, 52)\n  2\n  >>> varietyDigits(7, 53)\n  2\n  >>> varietyDigits(7, 54)\n  2\n  >>> varietyDigits(7, 55)\n  2\n  >>> varietyDigits(7, 56)\n  2\n  >>> varietyDigits(7, 57)\n  2\n  >>> varietyDigits(7, 58)\n  2\n  >>> varietyDigits(7, 59)\n  2\n  >>> varietyDigits(7, 60)\n  2\n  >>> varietyDigits(7, 61)\n  2\n  >>> varietyDigits(7, 62)\n  2\n  >>> varietyDigits(7, 63)\n  2\n  >>> varietyDigits(7, 64)\n  2\n  >>> varietyDigits(7, 65)\n  2\n  >>> varietyDigits(7, 66)\n  2\n  >>> varietyDigits(7, 67)\n  2\n  >>> varietyDigits(7, 68)\n  2\n  >>> varietyDigits(7, 69)\n  2\n  >>> varietyDigits(7, 70)\n  2\n  >>> varietyDigits(7, 71)\n  2\n  >>> varietyDigits(7, 72)\n  2\n  >>> varietyDigits(7, 73)\n  2\n  >>> varietyDigits(7, 74)\n  2\n  >>> varietyDigits(7, 75)\n  2\n  >>> varietyDigits(7, 76)\n  2\n  >>> varietyDigits(7, 77)\n  2\n  >>> varietyDigits(7, 78)\n  2\n  >>> varietyDigits(7, 79)\n  2\n  >>> varietyDigits(7, 80)\n  2\n  >>> varietyDigits(7, 81)\n  2\n  >>> varietyDigits(7, 82)\n  2\n  >>> varietyDigits(7, 83)\n  2\n  >>> varietyDigits(7, 84)\n  2\n  >>> varietyDigits(7, 85)\n  2\n  >>> varietyDigits(7, 86)\n  2\n  >>> varietyDigits(7, 87)\n  2\n  >>> varietyDigits(7, 88)\n  2\n  >>> varietyDigits(7, 89)\n  2\n  >>> varietyDigits(7, 90)\n  2\n  >>> varietyDigits(7, 91)\n  2\n  >>> varietyDigits(7, 92)\n  2\n  >>> varietyDigits(7, 93)\n  2\n  >>> varietyDigits(7, 94)\n  2\n  >>> varietyDigits(7, 95)\n  2\n  >>> varietyDigits(7, 96)\n  2\n  >>> varietyDigits(7, 97)\n  2\n  >>> varietyDigits(7, 98)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Returns the number of palindromes in given string\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  >>> countPalindromes('abcd')\n  2\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p) + p;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1)) + 1;\n};\n\n/*Return the number of 1 bits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_bit_bit_bit_bit_bit_bit_bit = (n, p) => {\n  return (n & (p - 1))", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  if (len === 0) {\n    return []\n  }\n  const result = []\n  let i = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let textWithoutVowels = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      textWithoutVowels += text[i];\n      i++;\n    } else {\n      textWithoutVowels += text[i];\n      i++;\n      j++;\n    }\n  }\n  return textWithoutVowels;\n};\n\n/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let textWithoutVowels = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      textWithoutVowels += text[i];\n      i++;\n    } else {\n      textWithoutVowels += text[i];\n      i++;\n      j++;\n    }\n  }\n  return textWithoutVowels;\n};\n\n/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let textWithoutVowels = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      textWithoutVowels += text[i];\n      i++;\n    } else {\n      textWithoutVowels += text[i];\n      i++;\n      j++;\n    }\n  }\n  return textWithoutVowels;\n};\n\n/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let textWithoutVowels = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      textWithoutVowels += text[i];\n      i++;\n    } else {\n      textWithoutVowels += text[i];\n      i++;\n      j++;\n    }\n  }\n  return textWithoutVowels;\n};\n\n/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway10 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway11 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway12 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway13 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoor", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars2 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars3 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars4 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars5 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars6 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars7 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars8 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars9 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars10 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars11 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars12 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nconst likeChars13", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength === 0) {\n    return false\n  }\n  const bracketsLengthMinusOne = bracketsLength - 1\n  for (let i = 0; i < bracketsLengthMinusOne; i++) {\n    if (brackets[i]!== brackets[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string, returns a list of the indices of the opening brackets\n  (<) and the closing brackets (>) in the string.\n\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets(\"<>\")\n  [0, 1]\n  >>> brackets", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let last = 0\n  let next = 0\n  while (i < len) {\n    last = l[i]\n    if (i + 1 < len) {\n      next = l[i + 1]\n      if (last < next) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([1, 2, 3, 4])\n  false\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  */\nconst sorted = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] > l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in ascending order.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([1, 2, 3, 4])\n  false\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  */\nconst sortedAsc = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] > l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in descending order.\n  >>> sorted([1, 2, 3])\n  false\n  >>> sorted([1, 2, 3, 4])\n  true\n  >>> sorted([1, 2, 3, 4, 5])\n  false\n  */\nconst sortedDesc = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] < l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in ascending order.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([1, 2, 3, 4])\n  false\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  */\nconst sortedAsc2 = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] > l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in descending order.\n  >>> sorted([1, 2, 3])\n  false\n  >>> sorted([1, 2, 3, 4])\n  true\n  >>> sorted([1, 2, 3, 4, 5])\n  false\n  */\nconst sortedDesc2 = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] < l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in ascending order.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([1, 2, 3, 4])\n  false\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  */\nconst sortedAsc3 = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] > l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in descending order.\n  >>> sorted([1, 2, 3])\n  false\n  >>> sorted([1, 2, 3, 4])\n  true\n  >>> sorted([1, 2, 3, 4, 5])\n  false\n  */\nconst sortedDesc3 = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] < l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in ascending order.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([1, 2, 3, 4])\n  false\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  */\nconst sortedAsc4 = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] > l[i + 1]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if list is sorted in descending order.\n  >>> sorted([1, 2, 3])\n  false\n  >>> sorted([1, 2, 3, 4])\n  true\n  >>> sorted([1, 2, 3, 4, 5])\n  false\n  */\nconst sortedDesc4 = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (i + 1 < len) {\n      if (l[i] < l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const sorted = [...l1,...l2].sort();\n  const unique = [...new Set(sorted)];\n  return unique;\n};\n\n/*\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  29\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor7 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(stack_length);\n      stack_length++;\n    } else if (current_char === ')') {\n      stack_length--;\n      if (stack_length === -1) {\n        return [stack_length, stack];\n      }\n    }\n    i++;\n  }\n  return [stack_length, stack];\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(stack_length);\n      stack_length++;\n    } else if (current_char === ')') {\n      stack_length--;\n      if (stack_length === -1) {\n        return [stack_length, stack];\n      }\n    }\n    i++;\n  }\n  return [stack_length, stack];\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(stack_length);\n      stack_length++;\n    } else if (current_char === ')') {\n      stack_length--;\n      if (stack_length === -1) {\n        return [stack_length, stack];\n      }\n    }\n    i++;\n  }\n  return [stack_length, stack];\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(stack_length);\n      stack_length++;\n    } else if (current_char === ')') {\n      stack_length--;\n      if (stack_length === -1) {\n        return [stack_length, stack];\n      }\n    }\n    i++;\n  }\n  return [stack_length, stack];\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(stack_length);\n      stack_length++;\n    } else if (current_char === ')') {\n      stack_length--;\n      if (stack_length === -1) {\n        return [stack_length, stack];\n      }\n    }\n    i++;\n  }\n  return [stack_length, stack];\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      const top = stack.pop()\n      if (top!== '(') {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, returns a string with all the characters in the string\n  replaced by the corresponding character in the replacement string.\n\n  >>> replace(\"abc\", \"xyz\", \"\")\n  'xyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"abc\")\n  'xyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"abcxyz\")\n  'xyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyz\")\n  'xyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyz\")\n  'xyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyz\")\n  'xyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz'\n  >>> replace(\"abc\", \"xyz\", \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\")\n  'xyzxyzxyzxyzxyzxyzxyzxyzxy", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6])\n  [-1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7])\n  [-1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8])\n  [-1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n    if (i === s.length - 1 && s[i] === 'y') {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = vowelReckon\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  const digits = x.toString().split('');\n  const result = digits.map((digit, index) => {\n    if (index + shift < digits.length) {\n      return digits[index + shift];\n    } else {\n      return digits[index - digits.length];\n    }\n  });\n  return result.join('');\n};\n\n/*\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  >>> roundShift(12, 3)\n  \"12\"\n  >>> roundShift(12, 4)\n  \"12\"\n  >>> roundShift(12, 5)\n  \"12\"\n  >>> roundShift(12, 6)\n  \"12\"\n  >>> roundShift(12, 7)\n  \"12\"\n  >>> roundShift(12, 8)\n  \"12\"\n  >>> roundShift(12, 9)\n  \"12\"\n  >>> roundShift(12, 10)\n  \"12\"\n  >>> roundShift(12, 11)\n  \"12\"\n  >>> roundShift(12, 12)\n  \"12\"\n  >>> roundShift(12, 13)\n  \"12\"\n  >>> roundShift(12, 14)\n  \"12\"\n  >>> roundShift(12, 15)\n  \"12\"\n  >>> roundShift(12, 16)\n  \"12\"\n  >>> roundShift(12, 17)\n  \"12\"\n  >>> roundShift(12, 18)\n  \"12\"\n  >>> roundShift(12, 19)\n  \"12\"\n  >>> roundShift(12, 20)\n  \"12\"\n  >>> roundShift(12, 21)\n  \"12\"\n  >>> roundShift(12, 22)\n  \"12\"\n  >>> roundShift(12, 23)\n  \"12\"\n  >>> roundShift(12, 24)\n  \"12\"\n  >>> roundShift(12, 25)\n  \"12\"\n  >>> roundShift(12, 26)\n  \"12\"\n  >>> roundShift(12, 27)\n  \"12\"\n  >>> roundShift(12, 28)\n  \"12\"\n  >>> roundShift(12, 29)\n  \"12\"\n  >>> roundShift(12, 30)\n  \"12\"\n  >>> roundShift(12, 31)\n  \"12\"\n  >>> roundShift(12, 32)\n  \"12\"\n  >>> roundShift(12, 33)\n  \"12\"\n  >>> roundShift(12, 34)\n  \"12\"\n  >>> roundShift(12, 35)\n  \"12\"\n  >>> roundShift(12, 36)\n  \"12\"\n  >>> roundShift(12, 37)\n  \"12\"\n  >>> roundShift(12, 38)\n  \"12\"\n  >>> roundShift(12, 39)\n  \"12\"\n  >>> roundShift(12, 40)\n  \"12\"\n  >>> roundShift(12, 41)\n  \"12\"\n  >>> roundShift(12, 42)\n  \"12\"\n  >>> roundShift(12, 43)\n  \"12\"\n  >>> roundShift(12, 44)\n  \"12\"\n  >>> roundShift(12, 45)\n  \"12\"\n  >>> roundShift(12, 46)\n  \"12\"\n  >>> roundShift(12, 47)\n  \"12\"\n  >>> roundShift(12, 48)\n  \"12\"\n  >>> roundShift(12, 49)\n  \"12\"\n  >>> roundShift(12, 50)\n  \"12\"\n  >>> roundShift(12, 51)\n  \"12\"\n  >>> roundShift(12, 52)\n  \"12\"\n  >>> roundShift(12, 53)\n  \"12\"\n  >>> roundShift(12, 54)\n  \"12\"\n  >>> roundShift(12, 55)\n  \"12\"\n  >>> roundShift(12, 56)\n  \"12\"\n  >>> roundShift(12, 57)\n  \"12\"\n  >>> roundShift(12, 58)\n  \"12\"\n  >>> roundShift(12, 59)\n  \"12\"\n  >>> roundShift(12, 60)\n  \"12\"\n  >>> roundShift(12, 61)\n  \"12\"\n  >>> roundShift(12, 62)\n  \"12\"\n  >>> roundShift(12, 63)\n  \"12\"\n  >>> roundShift(12, 64)\n  \"12\"\n  >>> roundShift(12, 65)\n  \"12\"\n  >>> roundShift(12, 66)\n  \"12\"\n  >>> roundShift(12, 67)\n  \"12\"\n  >>> roundShift(12, 68)\n  \"12\"\n  >>> roundShift(12, 69)\n  \"12\"\n  >>> roundShift(12, 70)\n  \"12\"\n  >>> roundShift(12, 71)\n  \"12\"\n  >>> roundShift(12, 72)\n  \"12\"\n  >>> roundShift(12, 73)\n  \"12\"\n  >>> roundShift(12, 74)\n  \"12\"\n  >>> roundShift(12, 75)\n  \"12\"\n  >>> roundShift(12, 76)\n  \"12\"\n  >>> roundShift(12, 77)\n  \"12\"\n  >>> roundShift(12, 78)\n  \"12\"\n  >>> roundShift(12, 79)\n  \"12\"\n  >>> roundShift(12, 80)\n  \"12\"\n  >>> roundShift(12, 81)\n  \"12\"\n  >>> roundShift(12, 82)\n  \"12\"\n  >>> roundShift(12, 83)\n  \"12\"\n  >>> roundShift(12, 84)\n  \"12\"\n  >>> roundShift(12, 85)\n  \"12\"\n  >>> roundShift(12, 86)\n  \"12\"\n  >>> roundShift(12, 87)\n  \"12\"\n  >>> roundShift(12, 88)\n  \"12\"\n  >>> roundShift(12, 89)\n  \"12\"\n  >>> roundShift(12, 90)\n  \"12\"\n  >>> roundShift(12, 91)\n  \"12", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(fingerSum(\"\"));\nconsole.log(fingerSum(\"abAB\"));\nconsole.log(fingerSum(\"abcCd\"));\nconsole.log(fingerSum(\"helloE\"));\nconsole.log(fingerSum(\"woArBld\"));\nconsole.log(fingerSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const apple = /apple/i\n  const orange = /orange/i\n  const mango = /mango/i\n  const appleOrOrange = /apple|orange/i\n  const appleOrOrangeOrMango = /apple|orange|mango/i\n  const appleOrOrangeOrMangoOrMango = /apple|orange|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMango = /apple|orange|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango|mango/i\n  const appleOrOrangeOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOrMangoOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const minIndex = arr.findIndex((a) => a === min);\n  const [smallestValue, smallestIndex] = arr.filter((a, i) => a === min && i === minIndex);\n  return [smallestValue, smallestIndex];\n};\n\nexport default hustle;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research2 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research3 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research4 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research5 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research6 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research7 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research8 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research9 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research10 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research11 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research12 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research13 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research14 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research15 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst research16 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return sorted.concat(reversed);\n};\n\nexport default foreignSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) / 2)\n  } else {\n    return -1\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconsole.log(willItFlee([1, 2], 5));\nconsole.log(willItFlee([3, 2, 3], 1));\nconsole.log(willItFlee([3], 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n    }\n    i++;\n    j--;\n  }\n  return min;\n};\n\nconsole.log(smallChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallChange([1, 2, 3, 2, 1]));\nconsole.log(smallChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  if (lst1Len === lst2Len) {\n    return lst1;\n  }\n  const lst1Larger = lst1Len > lst2Len;\n  const lst2Larger = lst2Len > lst1Len;\n  const lst1LargerLen = lst1Larger? lst1Len : lst2Len;\n  const lst2LargerLen = lst2Larger? lst2Len : lst1Len;\n  const lst1LargerLst = lst1Larger? lst1 : lst2;\n  const lst2LargerLst = lst2Larger? lst2 : lst1;\n  const lst1LargerLstLen = lst1LargerLst.length;\n  const lst2LargerLstLen = lst2LargerLst.length;\n  const lst1LargerLstLarger = lst1LargerLstLen > lst2LargerLstLen;\n  const lst2LargerLstLarger = lst2LargerLstLen > lst1LargerLstLen;\n  const lst1LargerLstLargerLen = lst1LargerLstLarger? lst1LargerLstLen : lst2LargerLstLen;\n  const lst2LargerLstLargerLen = lst2LargerLstLarger? lst2LargerLstLen : lst1LargerLstLen;\n  const lst1LargerLstLargerLst = lst1LargerLstLarger? lst1LargerLst : lst2LargerLst;\n  const lst2LargerLstLargerLst = lst2LargerLstLarger? lst2LargerLst : lst1LargerLst;\n  const lst1LargerLstLargerLstLen = lst1LargerLstLargerLst.length;\n  const lst2LargerLstLargerLstLen = lst2LargerLstLargerLst.length;\n  const lst1LargerLstLargerLstLarger = lst1LargerLstLargerLstLen > lst2LargerLstLargerLstLen;\n  const lst2LargerLstLargerLstLarger = lst2LargerLstLargerLstLen > lst1LargerLstLargerLstLen;\n  const lst1LargerLstLargerLstLargerLen = lst1LargerLstLargerLstLarger? lst1LargerLstLargerLen : lst2LargerLstLargerLstLargerLen;\n  const lst2LargerLstLargerLstLargerLen = lst2LargerLstLargerLstLarger? lst2LargerLstLargerLen : lst1LargerLstLargerLstLargerLen;\n  const lst1LargerLstLargerLstLargerLst = lst1LargerLstLargerLstLarger? lst1LargerLstLarger : lst2LargerLstLargerLstLarger;\n  const lst2LargerLstLargerLstLargerLst = lst2LargerLstLargerLstLarger? lst2LargerLstLarger : lst1LargerLstLargerLstLarger;\n  const lst1LargerLstLargerLstLargerLstLen = lst1LargerLstLargerLstLargerLst.length;\n  const lst2LargerLstLargerLstLargerLstLen = lst2LargerLstLargerLstLargerLst.length;\n  const lst1LargerLstLargerLstLargerLstLarger = lst1LargerLstLargerLstLargerLstLen > lst2LargerLstLargerLstLargerLstLen;\n  const lst2LargerLstLargerLstLargerLstLarger = lst2LargerLstLargerLstLargerLstLen > lst1LargerLstLargerLstLargerLstLen;\n  const lst1LargerLstLargerLstLargerLstLargerLen = lst1LargerLstLargerLstLargerLstLarger? lst1LargerLstLargerLstLargerLen : lst2LargerLstLargerLstLargerLstLargerLen;\n  const lst2LargerLstLargerLstLargerLstLargerLen = lst2LargerLstLargerLstLargerLstLarger? lst2LargerLstLargerLstLargerLen : lst1LargerLstLargerLstLargerLstLargerLen;\n  const lst1LargerLstLargerLstLargerLstLargerLst = lst1LargerLstLargerLstLargerLstLargerLstLen > lst2LargerLstLargerLstLargerLstLargerLstLen;\n  const lst2LargerLstLargerLstLargerLstLargerLst = lst2LargerLstLargerLstLargerLstLargerLstLen > lst1LargerLstLargerLstLargerLstLargerLstLen;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\nconsole.log(isMultiplyPrime(30))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return (x * x) % n === x;\n};\n\nconsole.log(isElementaryWorldPower(1, 4));\nconsole.log(isElementaryWorldPower(2, 2));\nconsole.log(isElementaryWorldPower(8, 2));\nconsole.log(isElementaryWorldPower(3, 2));\nconsole.log(isElementaryWorldPower(3, 1));\nconsole.log(isElementaryWorldPower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 3 === 0) return true\n  return iscube(a / 3)\n}\n\nconsole.log(iscube(1))\nconsole.log(iscube(2))\nconsole.log(iscube(3))\nconsole.log(iscube(4))\nconsole.log(iscube(5))\nconsole.log(iscube(6))\nconsole.log(iscube(7))\nconsole.log(iscube(8))\nconsole.log(iscube(9))\nconsole.log(iscube(10))\nconsole.log(iscube(11))\nconsole.log(iscube(12))\nconsole.log(iscube(13))\nconsole.log(iscube(14))\nconsole.log(iscube(15))\nconsole.log(iscube(16))\nconsole.log(iscube(17))\nconsole.log(iscube(18))\nconsole.log(iscube(19))\nconsole.log(iscube(20))\nconsole.log(iscube(21))\nconsole.log(iscube(22))\nconsole.log(iscube(23))\nconsole.log(iscube(24))\nconsole.log(iscube(25))\nconsole.log(iscube(26))\nconsole.log(iscube(27))\nconsole.log(iscube(28))\nconsole.log(iscube(29))\nconsole.log(iscube(30))\nconsole.log(iscube(31))\nconsole.log(iscube(32))\nconsole.log(iscube(33))\nconsole.log(iscube(34))\nconsole.log(iscube(35))\nconsole.log(iscube(36))\nconsole.log(iscube(37))\nconsole.log(iscube(38))\nconsole.log(iscube(39))\nconsole.log(iscube(40))\nconsole.log(iscube(41))\nconsole.log(iscube(42))\nconsole.log(iscube(43))\nconsole.log(iscube(44))\nconsole.log(iscube(45))\nconsole.log(iscube(46))\nconsole.log(iscube(47))\nconsole.log(iscube(48))\nconsole.log(iscube(49))\nconsole.log(iscube(50))\nconsole.log(iscube(51))\nconsole.log(iscube(52))\nconsole.log(iscube(53))\nconsole.log(iscube(54))\nconsole.log(iscube(55))\nconsole.log(iscube(56))\nconsole.log(iscube(57))\nconsole.log(iscube(58))\nconsole.log(iscube(59))\nconsole.log(iscube(60))\nconsole.log(iscube(61))\nconsole.log(iscube(62))\nconsole.log(iscube(63))\nconsole.log(iscube(64))\nconsole.log(iscube(65))\nconsole.log(iscube(66))\nconsole.log(iscube(67))\nconsole.log(iscube(68))\nconsole.log(iscube(69))\nconsole.log(iscube(70))\nconsole.log(iscube(71))\nconsole.log(iscube(72))\nconsole.log(iscube(73))\nconsole.log(iscube(74))\nconsole.log(iscube(75))\nconsole.log(iscube(76))\nconsole.log(iscube(77))\nconsole.log(iscube(78))\nconsole.log(iscube(79))\nconsole.log(iscube(80))\nconsole.log(iscube(81))\nconsole.log(iscube(82))\nconsole.log(iscube(83))\nconsole.log(iscube(84))\nconsole.log(iscube(85))\nconsole.log(iscube(86))\nconsole.log(iscube(87))\nconsole.log(iscube(88))\nconsole.log(iscube(89))\nconsole.log(iscube(90))\nconsole.log(iscube(91))\nconsole.log(iscube(92))\nconsole.log(iscube(93))\nconsole.log(iscube(94))\nconsole.log(iscube(95))\nconsole.log(iscube(96))\nconsole.log(iscube(97))\nconsole.log(iscube(98))\nconsole.log(iscube(99))\nconsole.log(iscube(100))\nconsole.log(iscube(101))\nconsole.log(iscube(102))\nconsole.log(iscube(103))\nconsole.log(iscube(104))\nconsole.log(iscube(105))\nconsole.log(iscube(106))\nconsole.log(iscube(107))\nconsole.log(iscube(108))\nconsole.log(iscube(109))\nconsole.log(iscube(110))\nconsole.log(iscube(111))\nconsole.log(iscube(112))\nconsole.log(iscube(113))\nconsole.log(iscube(114))\nconsole.log(iscube(115))\nconsole.log(iscube(116))\nconsole.log(iscube(117))\nconsole.log(iscube(118))\nconsole.log(iscube(119))\nconsole.log(iscube(120))\nconsole.log(iscube(121))\nconsole.log(iscube(122))\nconsole.log(iscube(123))\nconsole.log(iscube(124))\nconsole.log(iscube(125))\nconsole.log(iscube(126))\nconsole.log(iscube(127))\nconsole.log(iscube(128))\nconsole.log(iscube(129))\nconsole.log(iscube(130))\nconsole.log(iscube(131))\nconsole.log(iscube(132))\nconsole.log(iscube(133))\nconsole.log(iscube(134))\nconsole.log(iscube(135))\nconsole.log(iscube(136))\nconsole.log(iscube(137))\nconsole.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime5 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime7 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime8 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime9 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime10 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime11 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime12 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime13 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime14 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime15 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime16 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime17 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime18 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime19 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  let i = 0\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0'\n    decimal = Math.floor(decimal / 2)\n    i++\n  }\n  return 'db' + binary + 'db' + i\n}\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal form. The\n  function should return a number, with each character representing a decimal number.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal form. The\n  function should return a number, with each character representing a decimal number.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in decimal form and your task is to convert it to binary form. The\n  function should return a string, with each character representing a binary number.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0'\n    decimal = Math.floor(decimal / 2)\n  }\n  return binary\n}\n\n/*\n  You will be given a number in decimal form and your task is to convert it to binary form. The\n  function should return a string, with each character representing a binary number.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0'\n    decimal = Math.floor(decimal / 2)\n  }\n  return binary\n}\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal form. The\n  function should return a number, with each character representing a decimal number.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal form. The\n  function should return a number, with each character representing a decimal number.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in decimal form and your task is to convert it to binary form. The\n  function should return a string, with each character representing a binary number.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0'\n    decimal = Math.floor(decimal / 2)\n  }\n  return binary\n}\n\n/*\n  You will be given a number in decimal form and your task is to convert it to binary form. The\n  function should return a string, with each character representing a binary number.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0'\n    decimal = Math.floor(decimal / 2)\n  }\n  return binary\n}\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal form. The\n  function should return a number, with each character representing a decimal number.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  >>> kernelIntersection([1, 2, 3, 4])\n  [(10, 24), (20, 48)]\n  >>> kernelIntersection([1, 2, 3, 4, 5])\n  [(10, 24), (20, 48), (30, 72), (40, 96), (50, 120)]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(10, 24), (20, 48), (30, 72), (40, 96), (50, 120), (60, 144), (70, 168), (80, 192), (90, 216)]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(10, 24), (20, 48), (30, 72), (40, 96), (50, 120), (60, 144), (70, 168), (80, 192), (90, 216), (100, 240)]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [(10, 24), (20, 48), (30, 72), (40, 96), (50, 120), (60, 144), (70, 168), (80, 192), (90, 216), (100, 240), (110, 264), (120, 288), (130, 312), (140, 336), (150, 360), (160, 384), (170, 408), (180, 432), (190, 456), (200, 480), (210, 504), (220, 528)]\n  >>> kernelIntersectionpassed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  let prev = s[0]\n  let i = 1\n  while (i < len) {\n    if (s[i] === prev) {\n      i++\n      continue\n    }\n    if (i - 1 === len - 1) {\n      return false\n    }\n    prev = s[i]\n    i++\n  }\n  return true\n}\n\nconsole.log(isFelicitous('a'))\nconsole.log(isFelicitous('aa'))\nconsole.log(isFelicitous('abcd'))\nconsole.log(isFelicitous('aabb'))\nconsole.log(isFelicitous('adb'))\nconsole.log(isFelicitous('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const sortedArray = gradesArray.sort((a, b) => a - b);\n  const sortedArrayLength = sortedArray.length;\n  const sortedArrayLengthMinusOne = sortedArrayLength - 1;\n  const sortedArrayLengthMinusTwo = sortedArrayLength - 2;\n  const sortedArrayLengthMinusThree = sortedArrayLength - 3;\n  const sortedArrayLengthMinusFour = sortedArrayLength - 4;\n  const sortedArrayLengthMinusFive = sortedArrayLength - 5;\n  const sortedArrayLengthMinusSix = sortedArrayLength - 6;\n  const sortedArrayLengthMinusSeven = sortedArrayLength - 7;\n  const sortedArrayLengthMinusEight = sortedArrayLength - 8;\n  const sortedArrayLengthMinusNine = sortedArrayLength - 9;\n  const sortedArrayLengthMinusTen = sortedArrayLength - 10;\n  const sortedArrayLengthMinusEleven = sortedArrayLength - 11;\n  const sortedArrayLengthMinusTwelve = sortedArrayLength - 12;\n  const sortedArrayLengthMinusThirteen = sortedArrayLength - 13;\n  const sortedArrayLengthMinusFourteen = sortedArrayLength - 14;\n  const sortedArrayLengthMinusFifteen = sortedArrayLength - 15;\n  const sortedArrayLengthMinusSixteen = sortedArrayLength - 16;\n  const sortedArrayLengthMinusSeventeen = sortedArrayLength - 17;\n  const sortedArrayLengthMinusEighteen = sortedArrayLength - 18;\n  const sortedArrayLengthMinusNineteen = sortedArrayLength - 19;\n  const sortedArrayLengthMinusTwenty = sortedArrayLength - 20;\n  const sortedArrayLengthMinusTwentyOne = sortedArrayLength - 21;\n  const sortedArrayLengthMinusTwentyTwo = sortedArrayLength - 22;\n  const sortedArrayLengthMinusTwentyThree = sortedArrayLength - 23;\n  const sortedArrayLengthMinusTwentyFour = sortedArrayLength - 24;\n  const sortedArrayLengthMinusTwentyFive = sortedArrayLength - 25;\n  const sortedArrayLengthMinusTwentySix = sortedArrayLength - 26;\n  const sortedArrayLengthMinusTwentySeven = sortedArrayLength - 27;\n  const sortedArrayLengthMinusTwentyEight = sortedArrayLength - 28;\n  const sortedArrayLengthMinusTwentyNine = sortedArrayLength - 29;\n  const sortedArrayLengthMinusThirty = sortedArrayLength - 30;\n  const sortedArrayLengthMinusThirtyOne = sortedArrayLength - 31;\n  const sortedArrayLengthMinusThirtyTwo = sortedArrayLength - 32;\n  const sortedArrayLengthMinusThirtyThree = sortedArrayLength - 33;\n  const sortedArrayLengthMinusThirtyFour = sortedArrayLength - 34;\n  const sortedArrayLengthMinusThirtyFive = sortedArrayLength - 35;\n  const sortedArrayLengthMinusThirtySix = sortedArrayLength - 36;\n  const sortedArrayLengthMinusThirtySeven = sortedArrayLength - 37;\n  const sortedArrayLengthMinusThirtyEight = sortedArrayLength - 38;\n  const sortedArrayLengthMinusThirtyNine = sortedArrayLength - 39;\n  const sortedArrayLengthMinusForty = sortedArrayLength - 40;\n  const sortedArrayLengthMinusFortyOne = sortedArrayLength - 41;\n  const sortedArrayLengthMinusFortyTwo = sortedArrayLength - 42;\n  const sortedArrayLengthMinusFortyThree = sortedArrayLength - 43;\n  const sortedArrayLengthMinusFortyFour = sortedArrayLength - 44;\n  const sortedArrayLengthMinusFortyFive = sortedArrayLength - 45;\n  const sortedArrayLengthMinusFortySix = sortedArrayLength - 46;\n  const sortedArrayLengthMinusFortySeven = sortedArrayLength - 47;\n  const sortedArrayLengthMinusFortyEight = sortedArrayLength - 48;\n  const sortedArrayLengthMinusFortyNine = sortedArrayLength - 49;\n  const sortedArrayLengthMinusFifty = sortedArrayLength - 50;\n  const sortedArrayLengthMinusFiftyOne = sortedArrayLength - 51;\n  const sortedArrayLengthMinusFiftyTwo = sortedArrayLength - 52;\n  const sortedArrayLengthMinusFiftyThree = sortedArrayLength - 53;\n  const sortedArrayLengthMinusFiftyFour = sortedArrayLength - 54;\n  const sortedArrayLengthMinusFiftyFive = sortedArrayLength - 55;\n  const sortedArrayLengthMinusFiftySix = sortedArrayLength - 56;\n  const sortedArrayLengthMinusFiftySeven = sortedArrayLength - 57;\n  const sortedArrayLengthMinusFiftyEight = sortedArrayLength - 58;\n  const sortedArrayLengthMinusFiftyNine = sortedArrayLength - 59;\n  const sortedArrayLengthMinusSixty = sortedArrayLength - 60;\n  const sortedArrayLengthMinusSixtyOne = sortedArrayLength - 61;\n  const sortedArrayLengthMinusSixtyTwo = sortedArrayLength - 62;\n  const sortedArrayLengthMinusSixtyThree = sortedArrayLength - 63;\n  const sortedArrayLengthMinusSixtyFour = sortedArrayLength - 64;\n  const sortedArrayLengthMinusSixtyFive = sortedArrayLength - 65;\n  const sortedArrayLengthMinusSixtySix = sortedArrayLength - 66;\n  const sortedArrayLengthMinusSixtySeven = sortedArrayLength - 67;\n  const sortedArrayLengthMinusSixtyEight = sortedArrayLength - 68;\n  const sortedArrayLengthMinusSixtyNine = sortedArrayLength - 69;\n  const sortedArrayLengthMinusSeventy = sortedArrayLength - 70;\n  const sortedArrayLengthMinusSeventyOne = sortedArrayLength - 71", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  let i = 0;\n  let prime = false;\n  while (i < string.length) {\n    if (string[i] === string[i + 1]) {\n      i++;\n    } else {\n      prime = true;\n      break;\n    }\n  }\n  return prime;\n};\n\nconsole.log(premierDistance('Hello'));\nconsole.log(premierDistance('abcdcba'));\nconsole.log(premierDistance('kittens'));\nconsole.log(premierDistance('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst endOneBegin = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst oneEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst oneBegin = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst one = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst test = () => {\n  let count = 0;\n  for (let i = 1; i <= 100; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  console.log(count);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  const result = [];\n  for (let i = 0; i < N; i++) {\n    result.push(parseInt(N % 2));\n    N = N / 2;\n  }\n  return result.join(\"\");\n};\n\nconst test = () => {\n  const N = 1000;\n  console.log(resolve(N));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let i = 0\n  let j = 0\n  let even = []\n  while (i < lst.length) {\n    if (lst[i] % 2 === 1) {\n      even.push(lst[i])\n    }\n    i++\n  }\n  return even\n}\n\nconsole.log(lend([4, 2, 6, 7]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char\n      if (char >= 'a' && char <= 'z') {\n        newChar = char.toUpperCase()\n      }\n      newWord += newChar\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const cols = rows.map(row => row.slice())\n  const rows = rows.sort((a, b) => a[0] - b[0])\n  const cols = cols.sort((a, b) => b[0] - a[0])\n  const rows = rows.map((row, i) => row.sort((a, b) => a[1] - b[1]))\n  const cols = cols.map((col, i) => col.sort((a, b) => b[1] - a[1]))\n  const result = []\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      if (rows[i][0] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  return result\n}\n\nconst catchRow2 = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const cols = rows.map(row => row.slice())\n  const rows = rows.sort((a, b) => a[0] - b[0])\n  const cols = cols.sort((a, b) => b[0] - a[0])\n  const rows = rows.map((row, i) => row.sort((a, b) => a[1] - b[1]))\n  const cols = cols.map((col, i) => col.sort((a, b) => b[1] - a[1]))\n  const result = []\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      if (rows[i][0] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  return result\n}\n\nconst catchRow3 = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const cols = rows.map(row => row.slice())\n  const rows = rows.sort((a, b) => a[0] - b[0])\n  const cols = cols.sort((a, b) => b[0] - a[0])\n  const rows = rows.map((row, i) => row.sort((a, b) => a[1] - b[1]))\n  const cols = cols.map((col, i) => col.sort((a, b) => b[1] - a[1]))\n  const result = []\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      if (rows[i][0] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  return result\n}\n\nconst catchRow4 = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const cols = rows.map(row => row.slice())\n  const rows = rows.sort((a, b) => a[0] - b[0])\n  const cols = cols.sort((a, b) => b[0] - a[0])\n  const rows = rows.map((row, i) => row.sort((a, b) => a[1] - b[1]))\n  const cols = cols.map((col, i) => col.sort((a, b) => b[1] - a[1]))\n  const result = []\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      if (rows[i][0] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  return result\n}\n\nconst catchRow5 = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const cols = rows.map(row => row.slice())\n  const rows = rows.sort((a, b) => a[0] - b[0])\n  const cols = cols.sort((a, b) => b[0] - a[0])\n  const rows = rows.map((row, i) => row.sort((a, b) => a[1] - b[1]))\n  const cols = cols.map((col, i) => col.sort((a, b) => b[1] - a[1]))\n  const result = []\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      if (rows[i][0] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  return result\n}\n\nconst catchRow6 = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const cols = rows.map(row => row.slice())\n  const rows = rows.sort((a,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 0) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot2 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot3 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot4 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot5 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot6 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot7 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot8 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot9 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot10 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot11 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot12 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot13 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot14 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot15 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot16 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot17 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot18 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot19 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot20 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot21 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot22 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot23 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot24 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot25 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot26 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot27 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot28 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot29 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot30 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot31 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot32 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot33 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot34 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot35 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot36 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot37 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot38 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot39 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot40 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot41 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot42 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot43 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot44 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length];\n  };\n  const rot45 = (x) => {\n    return alphabet[(x + alphabet.length) % alphabet.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxRolled = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n    maxRolled.push(max);\n  }\n  return maxRolled;\n};\n\nmodule.exports = rolledMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0) {\n        count++;\n      }\n      else {\n        count = 0;\n      }\n    }\n    else if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0) {\n        count++;\n      }\n      else {\n        count = 0;\n      }\n    }\n    else if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0) {\n        count++;\n      }\n      else {\n        count = 0;\n      }\n    }\n    else if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0) {\n        count++;\n      }\n      else {\n        count = 0;\n      }\n    }\n    else if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored3 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0) {\n        count++;\n      }\n      else {\n        count = 0;\n      }\n    }\n    else if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored4 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0) {\n        count++;\n      }\n      else {\n        count = 0;\n      }\n    }\n    else if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored5 = (S) => {\n  let count = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === -z + y && x === -y + z && x === -y - z && x === z - y && x === y + z && x === z - y && x === y - z && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -y - z && x === y - z && x === z - y && x === -z - y && x === -y - z && x === -y + z && x === y - z && x === z + y && x === -y + z && x === -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter;\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      encoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      decoded += letter.toLowerCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      decoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return decoded;\n};\n\nconst encode2 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      encoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return encoded;\n};\n\nconst decode2 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      decoded += letter.toUpperCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      decoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return decoded;\n};\n\nconst encode3 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      encoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return encoded;\n};\n\nconst decode3 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      decoded += letter.toUpperCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      decoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return decoded;\n};\n\nconst encode4 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      encoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return encoded;\n};\n\nconst decode4 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      decoded += letter.toUpperCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      decoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return decoded;\n};\n\nconst encode5 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      encoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return encoded;\n};\n\nconst decode5 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      decoded += letter.toUpperCase();\n    } else {\n      let index = letter.toUpperCase().indexOf(letter.toLowerCase());\n      decoded += letter.toUpperCase().charAt(index + 2);\n    }\n  }\n  return decoded;\n};\n\nconst encode6 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else {\n      let index = letter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const max = (a, b) => {\n    return a > b? a : b;\n  };\n  const sum = (a, b) => {\n    return a + b;\n  };\n  const maxPrime = (lst) => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (prime(lst[i])) {\n        max = maxPrime(lst.slice(0, i + 1));\n        break;\n      }\n    }\n    return max;\n  };\n  return maxPrime(lst);\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const lowerCaseKeys = keys.map(key => key.toLowerCase())\n  const upperCaseKeys = keys.map(key => key.toUpperCase())\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key])\n}\n\n/*\n  Given a string, return true if the string is a palindrome, else return false.\n  Examples:\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return true.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(considerUpTo(5))\nconsole.log(considerUpTo(11))\nconsole.log(considerUpTo(0))\nconsole.log(considerUpTo(20))\nconsole.log(considerUpTo(1))\nconsole.log(considerUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  const aDigits = a.toString().split('').reverse().join('');\n  const bDigits = b.toString().split('').reverse().join('');\n  const product = aDigits.length * bDigits.length;\n  const productDigits = product.toString().split('').reverse().join('');\n  return productDigits;\n};\n\nbreed(148, 412);\nbreed(19, 28);\nbreed(2020, 1851);\nbreed(14, -15);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  const len = s.length\n  const upper = s.toUpperCase()\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (upper[i] === upper[i + 1]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n  const len = s.length\n  const lower = s.toLowerCase()\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (lower[i] === lower[i + 1]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerVowels('aBCdEf') returns 1\n  considerVowels('abcdefg') returns 0\n  considerVowels('dBBE') returns 0\n  */\nconst considerVowels = (s) => {\n  const len = s.length\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants = (s) => {\n  const len = s.length\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants2 = (s) => {\n  const len = s.length\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants3 = (s) => {\n  const len = s.length\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants4 = (s) => {\n  const len = s.length\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants5 = (s) => {\n  const len = s.length\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const count = 0\n  for (let i = 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const num = parseFloat(value);\n  const intValue = Math.floor(num);\n  const decimalValue = num - intValue;\n  const absDecimalValue = Math.abs(decimalValue);\n  const absIntValue = Math.abs(intValue);\n  if (absDecimalValue < absIntValue) {\n    return intValue;\n  } else {\n    return intValue + (decimalValue > 0? 1 : -1);\n  }\n};\n\nmodule.exports = closeInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
