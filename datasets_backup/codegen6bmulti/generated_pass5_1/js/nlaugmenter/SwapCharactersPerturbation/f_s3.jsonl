{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, aer any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in given list of numbers, aer any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((a, b) => a - b)\n  return diff < threshold\n}\n\n/*\n  Given a list of numbers, find the closest number to the given number.\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0])\n  1.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0])\n  2.0\n  >>> closestNumber(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0])\n  2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to thsi function is a string containing multiple groups of sneted parentheses. Your ogal is to\n  sepaarte thsoe group into separate strings and return the list of those.\n  Separate groups rea balanecd (each open brace is properly closed) and not nested withni each other\n  Ingore any spaces in the niput string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to thsi function is a string containing multiple groups of sneted parentheses. Your ogal is to\n  sepaarte thsoe group into separate strings and return the list of those.\n  Separate groups rea balanecd (each open brace is properly closed) and not nested withni each other\n  Ingore any spaces in the niput string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split('');\n  const paren_groups_length = paren_groups.length;\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups_length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group === '(') {\n      paren_groups_array.push(paren_group);\n    } else if (paren_group === ')') {\n      paren_groups_array.push(paren_group);\n      paren_groups_array.push(paren_groups[i - 1]);\n    } else {\n      paren_groups_array.push(paren_group);\n      paren_groups_array.push(paren_groups[i - 1]);\n      paren_groups_array.push(paren_groups[i + 1]);\n    }\n  }\n  return paren_groups_array;\n};\n\nconst paren_groups = separateParenGroups('( ) (( )) (( )( ))');\nconsole.log(paren_groups);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palidnroem */\ncosnt isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gniven strig is a palidnroem */\ncosnt isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix = string.slice(0, i + 1);\n      postfix = string.slice(i, j + 1);\n      longestPalindrome = prefix + postfix;\n      longestPalindromeLength = longestPalindrome.length;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix = string.slice(0, i + 1);\n      postfix = string.slice(i, j + 1);\n      longestPalindrome = prefix + postfix;\n      longestPalindromeLength = longestPalindrome.length;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix = string.slice(0, i + 1);\n      postfix = string.slice(i, j + 1);\n      longestPalindrome = prefix + postfix;\n      longestPalindromeLength = longestPalindrome.length;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix = string.slice(0, i + 1);\n      postfix = string.slice(i, j + 1);\n      longestPalindrome = prefix + postfix;\n      longestPalindromeLength = longestPalindrome.length;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile16 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile17 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile18 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile19 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile20 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile21 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile22 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile23 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile24 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile25 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile26 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile27 = (n) => {\n  const pile = []\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of wrods separated by comm", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes tow opsitive numbers x and y and returns teh\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This function takes tow opsitive numbers x and y and returns teh\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return chooseNum2(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return chooseNum3(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return chooseNum4(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return chooseNum5(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return chooseNum6(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return chooseNum7(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return chooseNum8(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return chooseNum9(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return chooseNum10(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return chooseNum11(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return chooseNum12(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return chooseNum13(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return chooseNum14(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x < y) {\n    return chooseNum15(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x < y) {\n    return chooseNum16(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x < y) {\n    return chooseNum17(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x < y) {\n    return chooseNum18(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x < y) {\n    return chooseNum19(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x < y) {\n    return chooseNum20(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum21 = (x, y) => {\n  if (x < y) {\n    return chooseNum21(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum22 = (x, y) => {\n  if (x < y) {\n    return chooseNum22(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum23 = (x, y) => {\n  if (x < y) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n_m -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const unique = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i);\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(15));\nconsole", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const one = 'One'\n  const two = 'Two'\n  const three = 'Three'\n  const four = 'Four'\n  const five = 'Five'\n  const six = 'Six'\n  const seven = 'Seven'\n  const eight = 'Eight'\n  const nine = 'Nine'\n  const arrLengthDiff = sortedArrLength - reversedArrLength\n  const arrLengthDiff2 = sortedArrLength - reversedArrLength\n  const arrLengthDiff3 = sortedArrLength - reversedArrLength\n  const arrLengthDiff4 = sortedArrLength - reversedArrLength\n  const arrLengthDiff5 = sortedArrLength - reversedArrLength\n  const arrLengthDiff6 = sortedArrLength - reversedArrLength\n  const arrLengthDiff7 = sortedArrLength - reversedArrLength\n  const arrLengthDiff8 = sortedArrLength - reversedArrLength\n  const arrLengthDiff9 = sortedArrLength - reversedArrLength\n  const arrLengthDiff10 = sortedArrLength - reversedArrLength\n  const arrLengthDiff11 = sortedArrLength - reversedArrLength\n  const arrLengthDiff12 = sortedArrLength - reversedArrLength\n  const arrLengthDiff13 = sortedArrLength - reversedArrLength\n  const arrLengthDiff14 = sortedArrLength - reversedArrLength\n  const arrLengthDiff15 = sortedArrLength - reversedArrLength\n  const arrLengthDiff16 = sortedArrLength - reversedArrLength\n  const arrLengthDiff17 = sortedArrLength - reversedArrLength\n  const arrLengthDiff18 = sortedArrLength - reversedArrLength\n  const arrLengthDiff19 = sortedArrLength - reversedArrLength\n  const arrLengthDiff20 = sortedArrLength - reversedArrLength\n  const arrLengthDiff21 = sortedArrLength - reversedArrLength\n  const arrLengthDiff22 = sortedArrLength - reversedArrLength\n  const arrLengthDiff23 = sortedArrLength - reversedArrLength\n  const arrLengthDiff24 = sortedArrLength - reversedArrLength\n  const arrLengthDiff25 = sortedArrLength - reversedArrLength\n  const arrLengthDiff26 = sortedArrLength - reversedArrLength\n  const arrLengthDiff27 = sortedArrLength - reversedArrLength\n  const arrLengthDiff28 = sortedArrLength - reversedArrLength\n  const arrLengthDiff29 = sortedArrLength - reversedArrLength\n  const arrLengthDiff30 = sortedArrLength - reversedArrLength\n  const arrLengthDiff31 = sortedArrLength - reversedArrLength\n  const arrLengthDiff32 = sortedArrLength - reversedArrLength\n  const arrLengthDiff33 = sortedArrLength - reversedArrLength\n  const arrLengthDiff34 = sortedArrLength - reversedArrLength\n  const arrLengthDiff35 = sortedArrLength - reversedArrLength\n  const arrLengthDiff36 = sortedArrLength - reversedArrLength\n  const arrLengthDiff37 = sortedArrLength - reversedArrLength\n  const arrLengthDiff38 = sortedArrLength - reversedArrLength\n  const arrLengthDiff39 = sortedArrLength - reversedArrLength\n  const arrLengthDiff40 = sortedArrLength - reversedArrLength\n  const arrLengthDiff41 = sortedArrLength - reversedArrLength\n  const arrLengthDiff42 = sortedArrLength - reversedArrLength\n  const arrLengthDiff43 = sortedArrLength - reversedArrLength\n  const arrLengthDiff44 = sortedArrLength - reversedArrLength\n  const arrLengthDiff45 = sortedArrLength - reversedArrLength\n  const arrLengthDiff46 = sortedArrLength - reversedArrLength\n  const arrLengthDiff47 = sortedArrLength - reversedArrLength\n  const arrLengthDiff48 = sortedArrLength - reversedArrLength\n  const arrLengthDiff49 = sortedArrLength - reversedArrLength\n  const arrLengthDiff50 = sortedArrLength - reversedArrLength\n  const arrLengthDiff51 = sortedArrLength - reversedArrLength\n  const arrLengthDiff52 = sortedArrLength - reversedArrLength\n  const arrLengthDiff53 = sortedArrLength - reversedArrLength\n  const arrLengthDiff54 = sortedArrLength - reversedArrLength\n  const arrLengthDiff55 = sortedArrLength - reversedArrLength\n  const arrLengthDiff56 = sortedArrLength - reversedArrLength\n  const arrLengthDiff57 = sortedArrLength - reversedArrLength\n  const arrLengthDiff58 = sortedArrLength - reversedArrLength\n  const arrLengthDiff59 = sortedArrLength - reversedArrLength\n  const arrLengthDiff60 = sortedArrLength - reversedArrLength\n  const arrLengthDiff61 = sortedArrLength - reversedArrLength\n  const arrLengthDiff62 = sortedArrLength - reversedArrLength\n  const arrLengthDiff63 = sortedArrLength - reversedArrLength\n  const arrLengthDiff64 = sortedArrLength - reversedArrLength\n  const arrLengthDiff65 = sorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the factorial of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is hte multilpiaction of the nmubesr from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the factorial of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is hte multilpiaction of the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(Math.pow(i, i));\n    } else {\n      result.push(i * (Math.pow(i, i - 1)));\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = f(5);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), niclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), niclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integesr arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordeedr. Your task is to determine if\n  it is possilbe to get an array sorted in non-cdereasing order by prefomring \n  the following operation on hte given array:\n      You are allowed to perform rigth shift operatino any number of times.\n  \n  One right shift operation means hsfiting all eleemnts of the arrya by one\n  position in the irght direction. The last eelment of the arary will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the soretd array by performing the above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an array 'arr' of N integesr arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordeedr. Your task is to determine if\n  it is possilbe to get an array sorted in non-cdereasing order by prefomring \n  the following operation on hte given array:\n      You are allowed to perform rigth shift operatino any number of times.\n  \n  One right shift operation means hsfiting all eleemnts of the arrya by one\n  position in the irght direction. The last eelment of the arary will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the soretd array by performing the above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are tow strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are tow strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? '0' : '1');\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? '0' : '1');\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? b[i] : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? a[i] : '0');\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? a[i] : b[i]);\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? b[i] : a[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? b[i] : a[i]);\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? a[i] : b[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? a[i] : b[i]);\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? b[i] : a[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? b[i] : a[i]);\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? a[i] : b[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? a[i] : b[i]);\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? b[i] : a[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? b[i] : a[i]);\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? a[i] : b[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? a[i] : b[i]);\n  }\n  for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_even = [];\n  let lst2_even = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      lst1_even.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      lst2_even.push(lst2[i]);\n    }\n  }\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strnigs s and c, you have to deleted all the chaarcters in s that are equal to any character in c\n  then check if hte result stirng is palindrome.\n  A string is called palidnrome if it reads the same backward as forwrad.\n  You sholud return a tuple containing the result string nad true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task\n  We are given two strnigs s and c, you have to deleted all the chaarcters in s that are equal to any character in c\n  then check if hte result stirng is palindrome.\n  A string is called palidnrome if it reads the same backward as forwrad.\n  You sholud return a tuple containing the result string nad true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete2 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete3 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete4 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete5 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete6 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete7 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete8 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete9 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete10 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete11 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete12 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete13 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete14 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  let reversed = result.join('');\n  return [reversed, reversed === s];\n};\n\nconst reverseDelete", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const oddCount = (str) => {\n      const oddCount = (str) => {\n        const oddCount = (str) => {\n          const oddCount = (str) => {\n            const oddCount = (str) => {\n              const oddCount = (str) => {\n                const oddCount = (str) => {\n                  const oddCount = (str) => {\n                    const oddCount = (str) => {\n                      const oddCount = (str) => {\n                        const oddCount = (str) => {\n                          const oddCount = (str) => {\n                            const oddCount = (str) => {\n                              const oddCount = (str) => {\n                                const oddCount = (str) => {\n                                  const oddCount = (str) => {\n                                    const oddCount = (str) => {\n                                      const oddCount = (str) => {\n                                        const oddCount = (str) => {\n                                          const oddCount = (str) => {\n                                            const oddCount = (str) => {\n                                              const oddCount = (str) => {\n                                                const oddCount = (str) => {\n                                                  const oddCount = (str) => {\n                                                    const oddCount = (str) => {\n                                                      const oddCount = (str) => {\n                                                        const oddCount = (str) => {\n                                                          const oddCount = (str) => {\n                                                           const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given na array of integers nums, nfid the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given na array of integers nums, nfid the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = Math.min(sum, 0);\n  const nfid = nums.reduce((acc, num, i) => {\n    if (i === 0) {\n      return acc;\n    }\n    if (acc + num < minSum) {\n      return acc;\n    }\n    return acc + num;\n  }, 0);\n  return nfid;\n};\n\nconst test = [\n  [2, 3, 4, 1, 2, 4],\n  [-1, -2, -3],\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407, -408, -409, -410, -411, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -428, -429, -430, -431, -432", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah rwo represents a signle well,\n  and each 1 in a row represetns a single unit of water.\n  Each well has a corresponding bucket that acn be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to emtpy the wells.\n  Outptu the number fo times you need ot lwore the bukcets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Ecah rwo represents a signle well,\n  and each 1 in a row represetns a single unit of water.\n  Each well has a corresponding bucket that acn be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to emtpy the wells.\n  Outptu the number fo times you need ot lwore the bukcets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  let capacity = 1;\n  let count = 0;\n  while (count < grid.length) {\n    count += maxFill(grid, capacity);\n    capacity += 1;\n  }\n  console.log(count);\n};\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary represnetation in ascending order.\n  For similar unmber of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary represnetation in ascending order.\n  For similar unmber of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.substring(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\n  Ginve a string s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.substring(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\n  Ginve a string s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.substring(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\n  Ginve a string s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.substring(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\n  Ginve a string s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.substring(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\n  Ginve a string s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You rae given a word. Your task is to find the closets vowel that stands between \n  two consonanst from the right side of the word (csae sensitive).\n  \n  Vowlse in the beginning and ending odesn't count. Rteurn empty string if you iddn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contanis English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You rae given a word. Your task is to find the closets vowel that stands between \n  two consonanst from the right side of the word (csae sensitive).\n  \n  Vowlse in the beginning and ending odesn't count. Rteurn empty string if you iddn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contanis English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordLength - i);\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel;\n        closestVowelDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordLength - i);\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel;\n        closestVowelDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordLength - i);\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel;\n        closestVowelDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordLength - i);\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel;\n        closestVowelDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordLength - i);\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel;\n        closestVowelDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordLength - i);\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel;\n        closestVowelDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel7 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens2 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens3 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens4 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens5 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens6 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens7 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens8 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens9 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens10 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens11 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens12 = (lst) => {\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest noe. Return the fisrt one in case of multpile\n  strings of the smae lnegth. Return null in case the niput list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest noe. Return the fisrt one in case of multpile\n  strings of the smae lnegth. Return null in case the niput list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest2 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest3 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest4 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest5 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest6 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest7 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest8 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest9 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest10 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest11 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest12 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest13 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest14 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest15 = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of itnegers and a positive integer k, return a sorted list \n  of length k with the maximum k unmbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of itnegers and a positive integer k, return a sorted list \n  of length k with the maximum k unmbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const max_k = k\n  const max_k_index = 0\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      max_k = k\n      max_k_index = i\n    }\n  }\n\n  return arr.slice(0, max_k_index + 1)\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validaets a given date string and\n  returns true if the date si valid otherwise fasle.\n  The date is valid fi all of the following rulse are astisfied:\n  1. The date string is not empty.\n  2. hTe number fo days is not elss than 1 or ihgher than 31 days for months 1,3,5,7,8,10,12. And the numbre of days is not less htan 1 or higher than 30 days for months 4,6,9,11. And, the numerb of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date shodul be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to write a function which validaets a given date string and\n  returns true if the date si valid otherwise fasle.\n  The date is valid fi all of the following rulse are astisfied:\n  1. The date string is not empty.\n  2. hTe number fo days is not elss than 1 or ihgher than 31 days for months 1,3,5,7,8,10,12. And the numbre of days is not less htan 1 or higher than 30 days for months 4,6,9,11. And, the numerb of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date shodul be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && (day < 1 || day > 29)) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/*\n  Given a string, return the number of lower-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countLetters(\"abcdef\") == 3\n  countLetters(\"Hello world!\") == 3\n  countLetters(\"Hello,world!\") == 3\n  countLetters(\"abcdef\") == 3\n  */\nconst countLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of upper-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countUpperLetters(\"abcdef\") == 3\n  countUpperLetters(\"Hello world!\") == 3\n  countUpperLetters(\"Hello,world!\") == 3\n  countUpperLetters(\"abcdef\") == 3\n  */\nconst countUpperLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toUpperCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lower-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countLowerLetters(\"abcdef\") == 3\n  countLowerLetters(\"Hello world!\") == 3\n  countLowerLetters(\"Hello,world!\") == 3\n  countLowerLetters(\"abcdef\") == 3\n  */\nconst countLowerLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of upper-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countUpperLetters(\"abcdef\") == 3\n  countUpperLetters(\"Hello world!\") == 3\n  countUpperLetters(\"Hello,world!\") == 3\n  countUpperLetters(\"abcdef\") == 3\n  */\nconst countUpperLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toUpperCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lower-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countLowerLetters(\"abcdef\") == 3\n  countLowerLetters(\"Hello world!\") == 3\n  countLowerLetters(\"Hello,world!\") == 3\n  countLowerLetters(\"abcdef\") == 3\n  */\nconst countLowerLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of upper-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countUpperLetters(\"abcdef\") == 3\n  countUpperLetters(\"Hello world!\") == 3\n  countUpperLetters(\"Hello,world!\") == 3\n  countUpperLetters(\"abcdef\") == 3\n  */\nconst countUpperLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toUpperCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lower-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  countLowerLetters(\"abcdef\") == 3\n  countLowerLetters(\"Hello world!\") == 3\n  countLowerLetters(\"Hello,world!\") == 3\n  countLowerLetters(\"abcdef\") == 3\n  */\nconst countLowerLetters = (txt) => {\n  const letters = txt.split('');\n  let count = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === letters[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of upper-case letters with odd order in the", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => x === sorted[sorted.indexOf(x) + 1]);\n};\n\n/* Given a list of numbers, return the sum of the numbers.\n  Examples\n  sum([1, 2, 3]) ➞ 6\n  sum([1, 2, 3, 4]) ➞ 10\n  sum([1, 2, 3, 4, 5]) ➞ 15\n  sum([1, 2, 3, 4, 5, 6]) ➞ 21\n  sum([1, 2, 3, 4, 5, 6, 7]) ➞ 28\n  sum([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 36\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 45\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 54\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 63\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 72\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 81\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 90\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 99\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 108\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 117\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 126\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 135\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 144\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 153\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 162\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 171\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 180\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 189\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 198\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 207\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 216\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 225\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 234\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) ➞ 243\n  sum([1, 2, 3, 4, 5, 6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  if (length === 0) {\n    return \"NO\"\n  }\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false\n    }\n    if (n === 2) {\n      return true\n    }\n    if (n === 3) {\n      return true\n    }\n    if (n % 2 === 0) {\n      return false\n    }\n    if (n % 3 === 0) {\n      return false\n    }\n    const sqrt = Math.sqrt(n)\n    for (let i = 5; i <= sqrt; i += 6) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given na array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are given na array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  const sign = (x) => x > 0? 1 : x < 0? -1 : 0;\n  const product = (x) => x * sign(x);\n  const sum = (x) => x + 0;\n  return arr.reduce((acc, x) => sum(product(acc) + sum(x)), 0);\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n).fill(0);\n  const dp_row = new Array(m).fill(0);\n  const dp_col = new Array(n).fill(0);\n  const dp_row_col = new Array(m).fill(0);\n  const dp_row_col_row = new Array(n).fill(0);\n  const dp_row_col_col = new Array(m).fill(0);\n  const dp_row_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col_col_row = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col_col_col_col_row = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col_col_col_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col_col_col_col_col_col_col_col_col_col_col_col_col_col_col_row = new Array(m).fill(0);\n  const dp_row_col_col_col_col_col_col_col", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (y === 0) {\n      return x;\n    }\n    let temp = y;\n    y = x % y;\n    x = temp;\n  }\n  return y;\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a postiive niteger n, return the product of the odd digits.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a postiive niteger n, return the product of the odd digits.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  const brackets = ['[', ']', '{', '}'];\n  let i = 0;\n  while (i < string.length) {\n    const char = string[i];\n    if (brackets.indexOf(char)!== -1) {\n      stack.push(char);\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      const top = stack[stack.length - 1];\n      if (brackets.indexOf(top)!== -1) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n    i++;\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yuo need to return the sum of squared numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yuo need to return the sum of squared numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares32 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares33", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a wodr, and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a wodr, and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.includes(\" \")\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a wodr,\n  and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/[0-9]/)\n  return isANumber &&!isANumber.includes(\" \")\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a wodr,\n  and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/)\n  return isALetterOrANumber &&!isALetterOrANumber.includes(\" \")\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a wodr,\n  and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrPunctuation = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetterOrANumberOrPunctuation = lastChar.match(/[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{}\\\\|;:'\\\",<.>\\/? ]/)\n  return isALetterOrANumberOrPunctuation &&!isALetterOrANumberOrPunctuation.includes(\" \")\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a wodr,\n  and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrPunctuationOrSpace = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetterOrANumberOrPunctuationOrSpace = lastChar.match(/[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{}\\\\|;:'\\\",<.>\\/? ]|\\s/)\n  return isALetterOrANumberOrPunctuationOrSpace &&!isALetterOrANumberOrPunctuationOrSpace.includes(\" \")\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a wodr,\n  and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrPunctuationOrSpaceOrHyphen = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetterOrANumberOrPunctuationOrSpaceOrHyphen = lastChar.match(/[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{}\\\\|;:'\\\",<.>\\/? ]|\\s-/)\n  return isALetterOrANumberOrPunctuationOrSpaceOrHyphen &&!isALetterOrANumberOrPunctuationOrSpaceOrHyphen.includes(\" \")\n}\n\n/*\n  Create a function that returns", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functoin wihch returns the largest index of an element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a functoin wihch returns the largest index of an element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let max = -1;\n  while (i <= j) {\n    if (arr[i] >= arr[j]) {\n      max = i;\n      break;\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the\n  array. If there are multiple largest elements, return the index of the\n  first one.\n\n  Examples:\n  canFindMax([1,2,3,4,5]) = 5\n  canFindMax([1,2,3,4,5,6]) = 5\n  canFindMax([1,2,3,4,5,6,7]) = 6\n  canFindMax([1,2,3,4,5,6,7,8]) = 6\n  canFindMax([1,2,3,4,5,6,7,8,9]) = 8\n  canFindMax([1,2,3,4,5,6,7,8,9,10]) = 8\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11]) = 9\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12]) = 9\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 10\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 10\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 11\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 11\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 12\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 12\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 13\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 13\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 14\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 14\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 15\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = 15\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 16\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = 16\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 17\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = 17\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 18\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = 18\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 19\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = 19\n  canFindMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const nlul = (a, b) => a === null? b : a;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns the largest of the given\n  numbers.\n  Examples:\n  largestOf([2, 4, 1, 3, 5, 7]) == 7\n  largestOf([0]) == 0\n  largestOf([]) == null\n  largestOf([0, 0]) == 0\n  largestOf([0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n  largestOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare2 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare3 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare4 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare5 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare6 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare7 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare8 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare9 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\nconst compare10 = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) > 0? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evalaute whether the given number n can be written as the sum of exactly 4 positive veen numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evalaute whether the given number n can be written as the sum of exactly 4 positive veen numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 5 positive veen numbers\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == true\n  */\nconst isEqualToSumFive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 5 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 6 positive veen numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumSix = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 6 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 7 positive veen numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == true\n  */\nconst isEqualToSumSeven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 7 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 8 positive veen numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEight = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 8 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 9 positive veen numbers\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == true\n  */\nconst isEqualToSumNine = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 9 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 10 positive veen numbers\n  Example\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumTen = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 10 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 11 positive veen numbers\n  Example\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == true\n  */\nconst isEqualToSumEleven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 11 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 12 positive veen numbers\n  Example\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumTwelve = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 12 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 13 positive veen numbers\n  Example\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(17) == true\n  */\nconst isEqualToSumThirteen = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 13 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 14 positive veen numbers\n  Example\n  isEqualToSumEven(14) == false\n  is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazliian factorail is defiend as:\n  brazilain_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Brazliian factorail is defiend as:\n  brazilain_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci2(n - 1) + fibonacci2(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci3(n - 1) + fibonacci3(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci4(n - 1) + fibonacci4(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci5 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci5(n - 1) + fibonacci5(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci6 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci6(n - 1) + fibonacci6(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci7 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci7(n - 1) + fibonacci7(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci8 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci8(n - 1) + fibonacci8(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci9 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci9(n - 1) + fibonacci9(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci10 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci10(n - 1) + fibonacci10(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci11 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci11(n - 1) + fibonacci11(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci12 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci12(n - 1) + fibonacci12(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci13 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci13(n - 1) + fib", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Retrun list of lal prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* Retrun list of lal prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes14 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consectuive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consectuive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consectuive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with dashes, \n  and if a string has more than 2 consectuive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example-1\"\n  fixUnderscores(\"_Example_2\") == \"Example--2\"\n  fixUnderscores(\"_Example-3\") == \"Example--3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/_/g, '-')\n}\n\n/*\n  Given a string text, replace all dashes in it with underscores, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example_1\"\n  fixDashes(\"Example--2\") == \"Example_2\"\n  fixDashes(\"Example--3\") == \"Example_3\"\n  */\nconst fixDashes2 = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all dashes in it with spaces, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all dashes in it with underscores, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixUnderscores2 = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all dashes in it with spaces, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all dashes in it with underscores, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixUnderscores3 = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all dashes in it with spaces, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all dashes in it with underscores, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixUnderscores4 = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all dashes in it with spaces, \n  and if a string has more than 2 consectuive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example--3\") == \"Example 3\"\n  */\nconst fixSpaces5 = (text) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/[0-9]/) || file_name.match(/[a-zA-Z]/) || file_name.match(/[^a-zA-Z0-9.]/)) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if (file_name.match(/[0-9]/) || file_name.match(/[a-zA-Z]/) || file_name.match(/[^a-zA-Z0-9.]/)) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  if (file_name.match(/[0-9]/) || file_name.match(/[a-zA-Z]/) || file_name.match(/[^a-zA-Z0-9.]/)) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  if (file_name.match(/[0-9]/) || file_name.match(/[a-zA-Z]/) || file_name.match(/[^a-zA-Z0-9.]/)) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (isPrime(char)) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(''))\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function thta will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and flase\n  otherwise. Both x and n, are string representaiton of a fraction, and have the following formta,\n  <numerator>/<denomintaro> where both numerator and denmoinator rae positive whole numbers.\n\n  You can assmue that x, and n rae valdi fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a function thta will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and flase\n  otherwise. Both x and n, are string representaiton of a fraction, and have the following formta,\n  <numerator>/<denomintaro> where both numerator and denmoinator rae positive whole numbers.\n\n  You can assmue that x, and n rae valdi fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n\n  if (x_num === 0 && n_num === 0) return false;\n  if (x_den === 0 && n_den === 0) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_den) return true;\n  if (x_den === n_num) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === x_den) return true;\n  if (x_den === x_num) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n_den) return false;\n\n  if (x_num === 1) return true;\n  if (x_den === 1) return false;\n\n  if (x_num === n_num) return true;\n  if (x_den === n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const sortedByIndex = [];\n  const sortedBySum = [];\n  const sortedBySumByIndex = [];\n  const sortedBySumByIndexByIndex = [];\n  const sortedBySumByIndexBySum = [];\n  const sortedBySumBySumByIndex = [];\n  const sortedBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumByIndex = [];\n  const sortedBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumByIndex = [];\n  const sortedBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Wirte a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Wirte a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(x => x > 10 && x % 2 === 1 && x % 3 === 1 && x % 5 === 1 && x % 7 === 1 && x % 9 === 1);\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of trilpes (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of trilpes (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  const result = a.filter((x, i) => i < a.length - 1).reduce((acc, x) => {\n    const [i, j, k] = [...acc, x];\n    return [...acc, a[i] + a[j] + a[k]].filter((x, i) => i < a.length - 1);\n  }, []);\n  return result.length;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* Tehre are eigth planets in our solar ystesm: the closerst to the Sun\n  is Mercury, the nxet one is eVnsu, then Earth, Mras, Jupiter, Saturn,\n  Uransu, Netpune.\n  Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the proximity to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* Tehre are eigth planets in our solar ystesm: the closerst to the Sun\n  is Mercury, the nxet one is eVnsu, then Earth, Mras, Jupiter, Saturn,\n  Uransu, Netpune.\n  Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the proximity to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toUpperCase()\n  let planet2_name = planet2.toUpperCase()\n  let planet1_orbit = planets[planet1_name]\n  let planet2_orbit = planets[planet2_name]\n  let planet1_distance = Math.abs(planet1_orbit - snu)\n  let planet2_distance = Math.abs(planet2_orbit - snu)\n  let planet1_index = planets.indexOf(planet1_orbit)\n  let planet2_index = planets.indexOf(planet2_orbit)\n  let planet1_in_orbit = planet1_index > -1\n  let planet2_in_orbit = planet2_index > -1\n  let planet1_in_orbit_and_planet2_in_orbit = planet1_in_orbit && planet2_in_orbit\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first = planet1_in_orbit_and_planet2_in_orbit && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit && planet2_index < planet1_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first && planet2_index < planet1_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet2_is_first_and_planet1_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet2_is_first_and_planet1_is_first && planet2_index < planet1_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first && planet1_index < planet2_index\n  let planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_and_planet2_is_first_and_planet1_is_first_and_planet2_is_first = planet1_in_orbit_and_planet2_in_orbit_and_planet1_is_first_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i]\n    let prev = lst[i - 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i]\n    let prev = lst[i - 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort_by_length = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i]\n    let prev = lst[i - 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort_by_length_reverse = (lst) => {\n  let result = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    let curr = lst[i]\n    let prev = lst[i + 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort_by_length_reverse_2 = (lst) => {\n  let result = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    let curr = lst[i]\n    let prev = lst[i + 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort_by_length_reverse_3 = (lst) => {\n  let result = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    let curr = lst[i]\n    let prev = lst[i + 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort_by_length_reverse_4 = (lst) => {\n  let result = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    let curr = lst[i]\n    let prev = lst[i + 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list_sort_by_length_reverse_5 = (lst) => {\n  let result = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    let curr = lst[i]\n    let prev = lst[i + 1]\n    if (curr.length!== prev.length) {\n      result.push(curr)\n    } else {\n      let j = 0\n      while (j < curr.length) {\n        if (curr[j]!== prev[j]) {\n          result.push(curr)\n          break\n        }\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconst list", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','')\n  '0'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${i + 1}${delimiter2}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','')\n  '0'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${i + 1}${delimiter2}${i + 2}${delimiter3}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','','')\n  '0'\n  >>> stringSequence(5, '-','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${i + 1}${delimiter2}${i + 2}${delimiter3}${i + 3}${delimiter4}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','','','')\n  '0'\n  >>> stringSequence(5, '-','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${i + 1}${delimiter2}${i + 2}${delimiter3}${i + 3}${delimiter4}${i + 4}${delimiter5}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${i + 1}${delimiter2}${i + 2}${delimiter3}${i + 3}${delimiter4}${i + 4}${delimiter5}${i + 5}${delimiter6}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6, delimiter7) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${i + 1}${delimiter2}${i + 2}${delimiter3}${i + 3}${delimiter4}${i + 4}${delimiter5}${i + 5}${delimiter6}${i + 6}${delimiter7}`;\n  }\n  return result;\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0, '-','','','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY31 = (n, x, y) => {\n  if (n % 2 === 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num < 0) continue\n    sum += num * num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  odd.\n  oddSum([1, 3, 2, 0]) == 4\n  oddSum([-1, -2, 0]) == 0\n  oddSum([9, -2]) == 9\n  oddSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts oddSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 2 === 0) continue\n    sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  even.\n  evenSum([1, 3, 2, 0]) == 4\n  evenSum([-1, -2, 0]) == 0\n  evenSum([9, -2]) == 9\n  evenSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts evenSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 2 === 1) continue\n    sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 3.\n  divisibleSum([1, 3, 2, 0]) == 6\n  divisibleSum([-1, -2, 0]) == 0\n  divisibleSum([9, -2]) == 9\n  divisibleSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts divisibleSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 3 === 0) sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 5.\n  divisibleSum([1, 3, 2, 0]) == 12\n  divisibleSum([-1, -2, 0]) == 0\n  divisibleSum([9, -2]) == 9\n  divisibleSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts divisibleSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 5 === 0) sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 7.\n  divisibleSum([1, 3, 2, 0]) == 14\n  divisibleSum([-1, -2, 0]) == 0\n  divisibleSum([9, -2]) == 9\n  divisibleSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts divisibleSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 7 === 0) sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 11.\n  divisibleSum([1, 3, 2, 0]) == 22\n  divisibleSum([-1, -2, 0]) == 0\n  divisibleSum([9, -2]) == 9\n  divisibleSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts divisibleSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 11 === 0) sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 17.\n  divisibleSum([1, 3, 2, 0]) == 34\n  divisibleSum([-1, -2, 0]) == 0\n  divisibleSum([9, -2]) == 9\n  divisibleSum([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts divisibleSum = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 17 === 0) sum += num\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that are\n  divisible by 19.\n  divisibleSum([1, 3, 2, 0]) == 38\n  divisibleSum([-1, -2, 0]) == 0\n  divisible", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feelnig when the result fo some long-awaited\n  event is finlaly known. The efelings and thoughts you haev at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine fi a person correctly geussed the results of a number of matches.\n  You are given wto arrays of scores and guesses of equal length, where each index shows a match. \n  Rteurn an array of the same length denotngi how far off each guess was. If htey haev guessed correctly,\n  the value is 0, and if not, the value is the absolute differecne between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we all remember that feelnig when the result fo some long-awaited\n  event is finlaly known. The efelings and thoughts you haev at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine fi a person correctly geussed the results of a number of matches.\n  You are given wto arrays of scores and guesses of equal length, where each index shows a match. \n  Rteurn an array of the same length denotngi how far off each guess was. If htey haev guessed correctly,\n  the value is 0, and if not, the value is the absolute differecne between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [scores, guesses] = game;\n  const [guessScores, guessGuesses] = guess;\n  const [guessLength, scoresLength] = [guessScores.length, scores.length];\n  const [guessGuessLength, guessGuessScoresLength] = [guessGuesses.length, guessScores.length];\n  const [guessGuessScores, guessScores] = [guessGuesses, scores];\n  const [guessScores, scores] = [guessScores, scores];\n  const [guessGuesses, guesses] = [guessGuesses, guesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuesses, guesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuesses, guesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores, guessScores];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessGuesses, guessGuesses] = [guessGuessGuesses, guessGuesses];\n  const [guessGuessScores, guessGuessScores] = [guessGuessScores, guessGuesses];\n  const [guessGuessScores, guessScores] = [guessGuessScores", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be igven the name of a class (a stirng) and a list of extensions.\n  The extensions are to be used to load additional classes ot the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the etxension's name, and let SM be the number of lowercaes letters\n  in the extension's name, the strenght is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there aer two or more extensions with the asme strength, oyu hsould\n  chosoe the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be igven the name of a class (a stirng) and a list of extensions.\n  The extensions are to be used to load additional classes ot the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the etxension's name, and let SM be the number of lowercaes letters\n  in the extension's name, the strenght is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there aer two or more extensions with the asme strength, oyu hsould\n  chosoe the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = class_name.match(/[A-Z]/g).length\n  const sm = class_name.match(/[a-z]/g).length\n  const strength = cap - sm\n  const strongest = extensions.find(ext => strength < ext.length)\n  return class_name + '.' + strongest\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => flase\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => flase\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_arr = a.split(\"\");\n  const b_arr = b.split(\"\");\n  const a_sub = a_arr.filter(x => b_arr.indexOf(x) > -1);\n  const b_sub = b_arr.filter(x => a_arr.indexOf(x) > -1);\n  if (a_sub.length > 0 && b_sub.length > 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a string, return a string made of the first two letters of every word in the string.\n  wordPattern(\"abcd\", \"abd\") => \"ab\"\n  wordPattern(\"abcd\", \"bcd\") => \"ab\"\n  wordPattern(\"abcd\", \"bdd\") => \"ab\"\n  wordPattern(\"abcd\", \"abdd\") => \"ab\"\n  wordPattern(\"abcd\", \"abde\") => \"ab\"\n  wordPattern(\"abcd\", \"abf\") => \"ab\"\n  wordPattern(\"abcd\", \"abg\") => \"ab\"\n  wordPattern(\"abcd\", \"abh\") => \"ab\"\n  wordPattern(\"abcd\", \"abk\") => \"ab\"\n  wordPattern(\"abcd\", \"abm\") => \"ab\"\n  wordPattern(\"abcd\", \"abn\") => \"ab\"\n  wordPattern(\"abcd\", \"abp\") => \"ab\"\n  wordPattern(\"abcd\", \"abq\") => \"ab\"\n  wordPattern(\"abcd\", \"abr\") => \"ab\"\n  wordPattern(\"abcd\", \"abt\") => \"ab\"\n  wordPattern(\"abcd\", \"abv\") => \"ab\"\n  wordPattern(\"abcd\", \"abw\") => \"ab\"\n  wordPattern(\"abcd\", \"abx\") => \"ab\"\n  wordPattern(\"abcd\", \"aby\") => \"ab\"\n  wordPattern(\"abcd\", \"abz\") => \"ab\"\n  wordPattern(\"abcd\", \"ab\") => \"ab\"\n  wordPattern(\"abcd\", \"ac\") => \"ab\"\n  wordPattern(\"abcd\", \"ad\") => \"ab\"\n  wordPattern(\"abcd\", \"ae\") => \"ab\"\n  wordPattern(\"abcd\", \"af\") => \"ab\"\n  wordPattern(\"abcd\", \"ag\") => \"ab\"\n  wordPattern(\"abcd\", \"ah\") => \"ab\"\n  wordPattern(\"abcd\", \"ak\") => \"ab\"\n  wordPattern(\"abcd\", \"am\") => \"ab\"\n  wordPattern(\"abcd\", \"an\") => \"ab\"\n  wordPattern(\"abcd\", \"ap\") => \"ab\"\n  wordPattern(\"abcd\", \"aq\") => \"ab\"\n  wordPattern(\"abcd\", \"ar\") => \"ab\"\n  wordPattern(\"abcd\", \"as\") => \"ab\"\n  wordPattern(\"abcd\", \"at\") => \"ab\"\n  wordPattern(\"abcd\", \"av\") => \"ab\"\n  wordPattern(\"abcd\", \"aw\") => \"ab\"\n  wordPattern(\"abcd\", \"ax\") => \"ab\"\n  wordPattern(\"abcd\", \"ay\") => \"ab\"\n  wordPattern(\"abcd\", \"az\") => \"ab\"\n  wordPattern(\"abcd\", \"ab\") => \"ab\"\n  wordPattern(\"abcd\", \"ac\") => \"ab\"\n  wordPattern(\"abcd\", \"ad\") => \"ab\"\n  wordPattern(\"abcd\", \"ae\") => \"ab\"\n  wordPattern(\"abcd\", \"af\") => \"ab\"\n  wordPattern(\"abcd\", \"ag\") => \"ab\"\n  wordPattern(\"abcd\", \"ah\") => \"ab\"\n  wordPattern(\"abcd\", \"ak\") => \"ab\"\n  wordPattern(\"abcd\", \"am\") => \"ab\"\n  wordPattern(\"abcd\", \"an\") => \"ab\"\n  wordPattern(\"abcd\", \"ap\") => \"ab\"\n  wordPattern(\"abcd\", \"aq\") => \"ab\"\n  wordPattern(\"abcd\", \"ar\") => \"ab\"\n  wordPattern(\"abcd\", \"as\") => \"ab\"\n  wordPattern(\"abcd\", \"at\") => \"ab\"\n  wordPattern(\"abcd\", \"av\") => \"ab\"\n  wordPattern(\"abcd\", \"aw\") => \"ab\"\n  wordPattern(\"abcd\", \"ax\") => \"ab\"\n  wordPattern(\"abcd\", \"ay\") => \"ab\"\n  wordPattern(\"abcd\", \"az\") => \"ab\"\n  wordPattern(\"abcd\", \"ab\") => \"ab\"\n  wordPattern(\"abcd\", \"ac\") => \"ab\"\n  wordPattern(\"abcd\", \"ad\") => \"ab\"\n  wordPattern(\"abcd\", \"ae\") => \"ab\"\n  wordPattern(\"abcd\", \"af\") => \"ab\"\n  wordPattern(\"abcd\", \"ag\") => \"ab\"\n  wordPattern(\"abcd\", \"ah\") => \"ab\"\n  wordPattern(\"abcd\", \"ak\") => \"ab\"\n  wordPattern(\"abcd\", \"am\") => \"ab\"\n  wordPattern(\"abcd\", \"an\") => \"ab\"\n  wordPattern(\"abcd\", \"ap\") => \"ab\"\n  wordPattern(\"abcd\", \"aq\") => \"ab\"\n  wordPattern(\"abcd\", \"ar\") => \"ab\"\n  wordPattern(\"abcd\", \"as\") => \"ab\"\n  wordPattern(\"abcd\", \"at\") => \"ab\"\n  wordPattern(\"abcd\", \"av\") => \"ab\"\n  wordPattern(\"abcd\", \"aw\") => \"ab\"\n  wordPattern(\"abcd\", \"ax\") => \"ab\"\n  wordPattern(\"abcd\", \"ay\") => \"ab\"\n  wordPattern(\"abcd\", \"az\") => \"ab\"\n  wordPattern(\"abcd\", \"ab\") => \"ab\"\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the unmber of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the unmber of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n    if (count > 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\nconsole.log(evenOddCount(12345));\nconsole.log(evenOddCount(123456));\nconsole.log(evenOddCount(1234567));\nconsole.log(evenOddCount(12345678));\nconsole.log(evenOddCount(123456789));\nconsole.log(evenOddCount(1234567890));\nconsole.log(evenOddCount(12345678901));\nconsole.log(evenOddCount(123456789012));\nconsole.log(evenOddCount(1234567890123));\nconsole.log(evenOddCount(12345678901234));\nconsole.log(evenOddCount(123456789012345));\nconsole.log(evenOddCount(1234567890123456));\nconsole.log(evenOddCount(12345678901234567));\nconsole.log(evenOddCount(123456789012345678));\nconsole.log(evenOddCount(1234567890123456789));\nconsole.log(evenOddCount(12345678901234567890));\nconsole.log(evenOddCount(123456789012345678901));\nconsole.log(evenOddCount(1234567890123456789012));\nconsole.log(evenOddCount(12345678901234567890123));\nconsole.log(evenOddCount(123456789012345678901234));\nconsole.log(evenOddCount(1234567890123456789012345));\nconsole.log(evenOddCount(12345678901234567890123456));\nconsole.log(evenOddCount(123456789012345678901234567));\nconsole.log(evenOddCount(1234567890123456789012345678));\nconsole.log(evenOddCount(12345678901234567890123456789));\nconsole.log(evenOddCount(123456789012345678901234567890));\nconsole.log(evenOddCount(1234567890123456789012345678901));\nconsole.log(evenOddCount(12345678901234567890123456789012));\nconsole.log(evenOddCount(123456789012345678901234567890123));\nconsole.log(evenOddCount(1234567890123456789012345678901234));\nconsole.log(evenOddCount(12345678901234567890123456789012345));\nconsole.log(evenOddCount(123456789012345678901234567890123456));\nconsole.log(evenOddCount(1234567890123456789012345678901234567));\nconsole.log(evenOddCount(12345678901234567890123456789012345678));\nconsole.log(evenOddCount(123456789012345678901234567890123456789));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789012));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890123));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901234));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789012345));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive niteger, obtain its roman numeral equivalent as a string,\n  adn return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive niteger, obtain its roman numeral equivalent as a string,\n  adn return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let number = parseInt(number);\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 === 0) {\n      number = number / 10;\n      result = result + 'x';\n    } else if (number % 5 === 0) {\n      number = number / 5;\n      result = result + 'v';\n    } else if (number % 4 === 0) {\n      number = number / 4;\n      result = result + 'iv';\n    } else if (number % 3 === 0) {\n      number = number / 3;\n      result = result + 'iii';\n    } else if (number % 2 === 0) {\n      number = number / 2;\n      result = result + 'ii';\n    } else {\n      number = number;\n      result = result + 'i';\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled tirangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled tirangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a funtcion that accepst a list of strigns.\n  The list contains idfferent words. Rteurn the word wiht maximum numebr\n  of uniuqe charatcers. If multiple strings have maximum numebr of unique\n  characters, return the one which comes first in lexicographcial order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strign\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a funtcion that accepst a list of strigns.\n  The list contains idfferent words. Rteurn the word wiht maximum numebr\n  of uniuqe charatcers. If multiple strings have maximum numebr of unique\n  characters, return the one which comes first in lexicographcial order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strign\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining]\n  }\n  const remainingCarrots = remaining\n  const remainingNeed = need - number\n  const remainingCarrotsNeed = remainingCarrots - remainingNeed\n  if (remainingCarrotsNeed < 0) {\n    return [number, remainingCarrots]\n  }\n  return [number + remainingNeed, remainingCarrotsNeed]\n}\n\nconst test = (t) => {\n  const number = t.number\n  const need = t.need\n  const remaining = t.remaining\n  const [result, remaining] = eat(number, need, remaining)\n  console.log(`eat(${number}, ${need}, ${remaining}) = ${result}`)\n}\n\ntest({\n  number: 5,\n  need: 6,\n  remaining: 10\n})\n\ntest({\n  number: 4,\n  need: 8,\n  remaining: 9\n})\n\ntest({\n  number: 1,\n  need: 10,\n  remaining: 10\n})\n\ntest({\n  number: 2,\n  need: 11,\n  remaining: 5\n})\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/16", "prompt": "/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toUpperCase()] === undefined) {\n      map[chars[i].toUpperCase()] = 1\n    } else {\n      map[chars[i].toUpperCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toUpperCase()] === undefined) {\n      map[chars[i].toUpperCase()] = 1\n    } else {\n      map[chars[i].toUpperCase()]++\n    }\n  }\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toUpperCase()] === undefined) {\n      map[chars[i].toUpperCase()] = 1\n    } else {\n      map[chars[i].toUpperCase()]++\n    }\n  }\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toUpperCase()] === undefined) {\n      map[chars[i].toUpperCase()] = 1\n    } else {\n      map[chars[i].toUpperCase()]++\n    }\n  }\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorValue = operator[operatorLength - 1]\n  const operandValue = operand[operandLength - 1]\n\n  if (operatorValue === '+') {\n    return operandList.reduce((a, b) => a + b, operandValue)\n  } else if (operatorValue === '-') {\n    return operandList.reduce((a, b) => a - b, operandValue)\n  } else if (operatorValue === '*') {\n    return operandList.reduce((a, b) => a * b, operandValue)\n  } else if (operatorValue === '/') {\n    return operandList.reduce((a, b) => a / b, operandValue)\n  } else if (operatorValue === '**') {\n    return operandList.reduce((a, b) => Math.pow(a, b), operandValue)\n  } else {\n    throw new Error(`Operator ${operatorValue} is not supported`)\n  }\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorValue = operator[operatorLength - 1]\n  const operandValue = operand[operandLength - 1]\n\n  if (operatorValue === '+') {\n    return operandList.reduce((a, b) => a + b, operandValue)\n  } else if (operatorValue === '-') {\n    return operandList.reduce((a, b) => a - b, operandValue)\n  } else if (operatorValue === '*') {\n    return operandList.reduce((a, b) => a * b, operandValue)\n  } else if (operatorValue === '/') {\n    return operandList.reduce((a, b) => a / b, operandValue)\n  } else if (operatorValue === '**') {\n    return operandList.reduce((a, b) => Math.pow(a, b), operandValue)\n  } else {\n    throw new Error(`Operator ${operatorValue} is not supported`)\n  }\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorValue = operator[operatorLength - 1]\n  const operandValue = operand[operandLength - 1]\n\n  if (operatorValue === '+') {\n    return operandList.reduce((a, b) => a + b, operandValue)\n  } else if (operatorValue === '-') {\n    return operandList.reduce((a, b) => a - b, operandValue)\n  } else if (operatorValue === '*') {\n    return operandList.reduce((a, b) => a * b, operandValue)\n  } else if (operatorValue === '/') {\n    return operandList.reduce((a, b) => a / b, operandValue)\n  } else if (operatorValue === '**') {\n    return operandList.reduce((a, b) => Math.pow(a, b), operandValue)\n  } else {\n    throw new Error(`Operator ${operatorValue} is not supported`)\n  }\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorValue = operator[operatorLength - 1]\n  const operandValue = operand[operandLength - 1]\n\n  if (operatorValue === '+') {\n    return operandList.reduce((a, b) => a + b, operandValue)\n  } else if (operatorValue === '-') {\n    return operandList.reduce((a, b) => a - b, operandValue)\n  } else if (operatorValue === '*') {\n    return operandList.reduce((a, b) => a * b, operandValue)\n  } else if (operatorValue === '/') {\n    return operandList.reduce((a, b) => a / b, operandValue)\n  } else if (operatorValue === '**') {\n    return operandList.reduce((a, b) => Math.pow(a, b), operandValue)\n  } else {\n    throw new Error(`Operator ${operatorValue} is not supported`)\n  }\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = oper", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwies ekep it as it is.\n  If the string cnotains no letters, reverse the string.\n  The function should return the resluted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwies ekep it as it is.\n  If the string cnotains no letters, reverse the string.\n  The function should return the resluted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7f8f9'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a9a8a9a8b4d9d4e0f4f5f6f7", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/163", "prompt": "/*\n  iGven two opsitive nitegers a and b, return the even digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  iGven two opsitive nitegers a and b, return the even digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the odd digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the sum of the even\n  digits bewteen a and b, in ascending order.\n\n  For example:\n  generateSum(2, 8) => 10\n  generateSum(8, 2) => 10\n  generateSum(10, 14) => 28\n  */\nconst generateSum = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the difference of the\n  odd digits bewteen a and b, in ascending order.\n\n  For example:\n  generateDifference(2, 8) => 6\n  generateDifference(8, 2) => 6\n  generateDifference(10, 14) => 12\n  */\nconst generateDifference = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the product of the even\n  digits bewteen a and b, in ascending order.\n\n  For example:\n  generateProduct(2, 8) => 32\n  generateProduct(8, 2) => 32\n  generateProduct(10, 14) => 1890\n  */\nconst generateProduct = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the quotient of the\n  odd digits bewteen a and b, in ascending order.\n\n  For example:\n  generateQuotient(2, 8) => 2\n  generateQuotient(8, 2) => 2\n  generateQuotient(10, 14) => 7\n  */\nconst generateQuotient = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the sum of the even\n  digits bewteen a and b, in ascending order.\n\n  For example:\n  generateSum(2, 8) => 10\n  generateSum(8, 2) => 10\n  generateSum(10, 14) => 28\n  */\nconst generateSumOfEvenDigits = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the difference of the\n  odd digits bewteen a and b, in ascending order.\n\n  For example:\n  generateDifference(2, 8) => 6\n  generateDifference(8, 2) => 6\n  generateDifference(10, 14) => 12\n  */\nconst generateDifferenceOfOddDigits = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the product of the even\n  digits bewteen a and b, in ascending order.\n\n  For example:\n  generateProduct(2, 8) => 32\n  generateProduct(8, 2) => 32\n  generateProduct(10, 14) => 1890\n  */\nconst generateProductOfEvenDigits = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  iGven two opsitive nitegers a and b, return the quotient of the odd\n  digits bewteen a and b, in ascending order.\n\n  For example:\n  generateQuotient(2, 8) => 2\n  generateQuotient(8, 2) => 2\n  generateQuotient(10, 14) => 7\n  */\nconst generateQuotientOfOddDigits = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic6 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic7 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb found in eth original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how many times a given substring can eb found in eth original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.charAt(index) === substring.charAt(0)) {\n      count++;\n      index++;\n      while (index < string.length && string.charAt(index) === substring.charAt(0)) {\n        count++;\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in a string that contains only lowercase letters.\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a psace-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a psace-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a psace-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a psace-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.reverse().join(' ')\n}\n\n/*\n  Input is a psace-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.reverse().join(' ')\n}\n\n/*\n  Input is a psace-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.reverse().reverse().join(' ')\n}\n\n/*\n  Input is a psace-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a psace-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* Form a usplpied list of numbers (of length at least two) select adn return two that are the closest to each\n  other and return them in order (smaller number, lrager number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* Form a usplpied list of numbers (of length at least two) select adn return two that are the closest to each\n  other and return them in order (smaller number, lrager number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = sort(numbers);\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const left = sorted[0];\n  const right = sorted[sorted.length - 1];\n  const leftDistance = Math.abs(middle - left);\n  const rightDistance = Math.abs(right - middle);\n  return [left, right];\n};\n\nexport default findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / max\n  ]\n}\n\n/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers, target) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / target\n  ]\n}\n\n/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0], [0.0, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers, target, target2) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / target,\n    min / target2\n  ]\n}\n\n/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers, target, target2, target3) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / target,\n    min / target2,\n    min / target3\n  ]\n}\n\n/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers, target, target2, target3, target4) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / target,\n    min / target2,\n    min / target3,\n    min / target4\n  ]\n}\n\n/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers, target, target2, target3, target4, target5) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / target,\n    min / target2,\n    min / target3,\n    min / target4,\n    min / target5\n  ]\n}\n\n/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers, target, target2, target3, target4, target5, target6) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n   ...numbers.map((number) => number / max),\n    min / target,\n    min / target2,\n    min / target3,\n    min / target4,\n    min / target5,\n    min / target6\n  ]\n}\n\n/* Gievn list of numbers (of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values noly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* Filter given list of any python values noly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values noly for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values noly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values noly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values noly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values noly for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values noly for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values noly for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values noly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values noly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values noly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values noly for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values noly for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values noly for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values noly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values noly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values noly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values noly for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values noly for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values noly for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values noly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values noly for booleans\n  * @param {Array} values\n  * @returns", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gievn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return length of gievn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceFirst = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the last character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceLast = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAll = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExcept = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptLast = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptFirst = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAll = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptLast = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptFirst = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAll = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAllExceptLast = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAllExceptFirst = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAllExceptAll = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAllExceptAllExceptLast = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAllExceptAllExceptFirst = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n  * @param {string} character\n  * @param {string} replacement\n  * @returns {string}\n  */\nconst replaceAllExceptAllExceptAllExceptAllExceptAll = (string, character, replacement) => {\n  return string.replace(character, replacement);\n};\n\n/**\n  * Return a new string with the first character replaced by the second\n  *\n  * @param {string} string\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest = 1\n  for (let i = 1; i <= max; i++) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i]\n      break\n    }\n  }\n  return largest\n}\n\n/*\n  Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15]\n  const max = Math.floor(n / 2)\n  let largest =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      while (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return the sum of all prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactors(8)\n  8\n  >>> sumOfFactors(25)\n  25\n  >>> sumOfFactors(70)\n  70\n  */\nconst sumOfFactors = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a * b)\n}\n\n/* Return the sum of all prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(25)\n  25\n  >>> sumOfFactorsReverse(70)\n  70\n  */\nconst sumOfFactorsReverse = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a * b, 1)\n}\n\n/* Return the sum of all prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(25)\n  25\n  >>> sumOfFactorsReverse(70)\n  70\n  */\nconst sumOfFactorsReverse2 = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a + b, 0)\n}\n\n/* Return the sum of all prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(25)\n  25\n  >>> sumOfFactorsReverse(70)\n  70\n  */\nconst sumOfFactorsReverse3 = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a + b, 0)\n}\n\n/* Return the sum of all prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(25)\n  25\n  >>> sumOfFactorsReverse(70)\n  70\n  */\nconst sumOfFactorsReverse4 = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a + b, 0)\n}\n\n/* Return the sum of all prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(25)\n  25\n  >>> sumOfFactorsReverse(70)\n  70\n  */\nconst sumOfFactorsReverse5 = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a - b, 0)\n}\n\n/* Return the sum of all prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(25)\n  25\n  >>> sumOfFactorsReverse(70)\n  70\n  */\nconst sumOfFactorsReverse6 = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a - b, 0)\n}\n\n/* Return the sum of all prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> sumOfFactorsReverse(8)\n  8\n  >>> sumOfFactorsReverse(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates13 = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, p1, p2) => {\n    return p1 + p2.toLowerCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, p1, p2) => {\n    return p1.toUpperCase() + p2.toLowerCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/([A-Z])([A-Z])/g, (match, p1, p2) => {\n    return p1 + p2.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, p1, p2) => {\n    return p1.toLowerCase() + p2.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, p1, p2) => {\n    return p1.toUpperCase() + p2.toLowerCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, p1, p2) => {\n    return p1.toUpperCase() + p2.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, p1, p2) => {\n    return p1 + p2.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, p1, p2) => {\n    return p1 + p2.toLowerCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, p1, p2) => {\n    return p1.toUpperCase() + p2.toLowerCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, p1, p2) => {\n    return p1.toLowerCase() + p2.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, p1, p2) => {\n    return p1.toUpperCase() + p2.toUpperCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, p1, p2) => {\n    return p1.toLowerCase() + p2.toLowerCase();\n  });\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/([A-Z])(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Cocnatenate list of strings into a isngle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Cocnatenate list of strings into a isngle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filetr an niput list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filetr an niput list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterBy", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [sum, balance] = operations.reduce((acc, op) => [acc[0] + op, acc[1]], [0, 0])\n  return balance < 0\n}\n\nexport default belowZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Retunr only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Retunr only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Rteurn true fi a given unbmre is prime, and fales otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Rteurn true fi a given unbmre is prime, and fales otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*Rteurn true if a given number is a palindrome, and false otherwise.\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(6)\n  true\n  >>> isPalindrome(7)\n  true\n  >>> isPalindrome(8)\n  true\n  >>> isPalindrome(9)\n  true\n  >>> isPalindrome(10)\n  true\n  >>> isPalindrome(11)\n  true\n  >>> isPalindrome(12)\n  true\n  >>> isPalindrome(13)\n  true\n  >>> isPalindrome(14)\n  true\n  >>> isPalindrome(15)\n  true\n  >>> isPalindrome(16)\n  true\n  >>> isPalindrome(17)\n  true\n  >>> isPalindrome(18)\n  true\n  >>> isPalindrome(19)\n  true\n  >>> isPalindrome(20)\n  true\n  >>> isPalindrome(21)\n  true\n  >>> isPalindrome(22)\n  true\n  >>> isPalindrome(23)\n  true\n  >>> isPalindrome(24)\n  true\n  >>> isPalindrome(25)\n  true\n  >>> isPalindrome(26)\n  true\n  >>> isPalindrome(27)\n  true\n  >>> isPalindrome(28)\n  true\n  >>> isPalindrome(29)\n  true\n  >>> isPalindrome(30)\n  true\n  >>> isPalindrome(31)\n  true\n  >>> isPalindrome(32)\n  true\n  >>> isPalindrome(33)\n  true\n  >>> isPalindrome(34)\n  true\n  >>> isPalindrome(35)\n  true\n  >>> isPalindrome(36)\n  true\n  >>> isPalindrome(37)\n  true\n  >>> isPalindrome(38)\n  true\n  >>> isPalindrome(39)\n  true\n  >>> isPalindrome(40)\n  true\n  >>> isPalindrome(41)\n  true\n  >>> isPalindrome(42)\n  true\n  >>> isPalindrome(43)\n  true\n  >>> isPalindrome(44)\n  true\n  >>> isPalindrome(45)\n  true\n  >>> isPalindrome(46)\n  true\n  >>> isPalindrome(47)\n  true\n  >>> isPalindrome(48)\n  true\n  >>> isPalindrome(49)\n  true\n  >>> isPalindrome(50)\n  true\n  >>> isPalindrome(51)\n  true\n  >>> isPalindrome(52)\n  true\n  >>> isPalindrome(53)\n  true\n  >>> isPalindrome(54)\n  true\n  >>> isPalindrome(55)\n  true\n  >>> isPalindrome(56)\n  true\n  >>> isPalindrome(57)\n  true\n  >>> isPalindrome(58)\n  true\n  >>> isPalindrome(59)\n  true\n  >>> isPalindrome(60)\n  true\n  >>> isPalindrome(61)\n  true\n  >>> isPalindrome(62)\n  true\n  >>> isPalindrome(63)\n  true\n  >>> isPalindrome(64)\n  true\n  >>> isPalindrome(65)\n  true\n  >>> isPalindrome(66)\n  true\n  >>> isPalindrome(67)\n  true\n  >>> isPalindrome(68)\n  true\n  >>> isPalindrome(69)\n  true\n  >>> isPalindrome(70)\n  true\n  >>> isPalindrome(71)\n  true\n  >>> isPalindrome(72)\n  true\n  >>> isPalindrome(73)\n  true\n  >>> isPalindrome(74)\n  true\n  >>> isPalindrome(75)\n  true\n  >>> isPalindrome(76)\n  true\n  >>> isPalindrome(77)\n  true\n  >>> isPalindrome(78)\n  true\n  >>> isPalindrome(79)\n  true\n  >>> isPalindrome(80)\n  true\n  >>> isPalindrome(81)\n  true\n  >>> isPalindrome(82)\n  true\n  >>> isPalindrome(83)\n  true\n  >>> isPalindrome(84)\n  true\n  >>> isPalindrome(85)\n  true\n  >>> isPalindrome(86)\n  true\n  >>> isPalindrome(87)\n  true\n  >>> isPalindrome(88)\n  true\n  >>> isPalindrome(89)\n  true\n  >>> isPalindrome(90)\n  true\n  >>> isPalindrome(91)\n  true\n  >>> isPalindrome(92)\n  true\n  >>> isPalindrome(93)\n  true\n  >>> isPalindrome(94)\n  true\n  >>> isPalindrome(95)\n  true\n  >>> isPalindrome(96)\n  true\n  >>> isPalindrome(97)\n  true\n  >>> isPalindrome(98)\n  true\n  >>> isPalindrome(99)\n  true\n  >>> isPalindrome(100)\n  true\n  >>> isPalind", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evalutaes polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns onyl only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evalutaes polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns onyl only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = xs[len / 2];\n    const f = poly(xs, x);\n    if (f === 0) {\n      return x;\n    }\n  }\n  return findZero(xs.slice(1));\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird7 = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3!== b % 3);\n  const sorted2 = [...l].sort((a, b) => a % 3 === b % 3);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Rteurn osrted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Rteurn osrted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKey = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key] === value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue2 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue3 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue4 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue5 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue6 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue7 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue8 = (l, key, value) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1 && l[i][key]!== value) {\n      uniqueList.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rteurn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Rteurn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Rteurn minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Rteurn the median of the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst median = (l) => {\n  const middle = l.length / 2;\n  const median = (l[middle] + l[middle - 1]) / 2;\n  return median;\n};\n\n/*Rteurn the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const max = maxElement(l);\n  const min = minElement(l);\n  const count = l.length;\n  let mode = 0;\n  for (let i = 0; i < count; i++) {\n    if (l[i] === max) {\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Rteurn the sum of the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Rteurn the mean of the list.\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst mean = (l) => {\n  const sum = sum(l);\n  return sum / l.length;\n};\n\n/*Rteurn the standard deviation of the list.\n  >>> standardDeviation([1, 2, 3])\n  0\n  >>> standardDeviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst standardDeviation = (l) => {\n  const mean = mean(l);\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Rteurn the variance of the list.\n  >>> variance([1, 2, 3])\n  0\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.25\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n  }\n  return sum / l.length;\n};\n\n/*Rteurn the standard error of the mean of the list.\n  >>> standardError([1, 2, 3])\n  0\n  >>> standardError([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst standardError = (l) => {\n  const standardDeviation = standardDeviation(l);\n  return standardDeviation / Math.sqrt(l.length);\n};\n\n/*Rteurn the skewness of the list.\n  >>> skewness([1, 2, 3])\n  0\n  >>> skewness([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.0\n  */\nconst skewness = (l) => {\n  const mean = mean(l);\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 3);\n  }\n  return sum / l.length;\n};\n\n/*Rteurn the kurtosis of the list.\n  >>> kurtosis([1, 2, 3])\n  0\n  >>> kurtosis([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.0\n  */\nconst kurtosis = (l) => {\n  const mean = mean(l);\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 4);\n  }\n  return sum / l.length;\n};\n\n/*Rteurn the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const max = maxElement(l);\n  const min = minElement(l);\n  const count = l.length;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 0\n  while (i < n) {\n    let fizz = Math.floor(Math.random() * 3)\n    let buzz = Math.floor(Math.random() * 3)\n    if (fizz === buzz) {\n      console.log(fizz)\n    } else {\n      console.log(fizz + buzz)\n    }\n    i += 1\n  }\n}\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(200)\n  2\n  >>> fizzBuzz(300)\n  3\n  >>> fizzBuzz(400)\n  4\n  >>> fizzBuzz(500)\n  5\n  >>> fizzBuzz(600)\n  6\n  >>> fizzBuzz(700)\n  7\n  >>> fizzBuzz(800)\n  8\n  >>> fizzBuzz(900)\n  9\n  >>> fizzBuzz(1000)\n  10\n  >>> fizzBuzz(2000)\n  2\n  >>> fizzBuzz(3000)\n  3\n  >>> fizzBuzz(4000)\n  4\n  >>> fizzBuzz(5000)\n  5\n  >>> fizzBuzz(6000)\n  6\n  >>> fizzBuzz(7000)\n  7\n  >>> fizzBuzz(8000)\n  8\n  >>> fizzBuzz(9000)\n  9\n  >>> fizzBuzz(10000)\n  10\n  >>> fizzBuzz(11000)\n  11\n  >>> fizzBuzz(12000)\n  12\n  >>> fizzBuzz(13000)\n  13\n  >>> fizzBuzz(14000)\n  14\n  >>> fizzBuzz(15000)\n  15\n  >>> fizzBuzz(16000)\n  16\n  >>> fizzBuzz(17000)\n  17\n  >>> fizzBuzz(18000)\n  18\n  >>> fizzBuzz(19000)\n  19\n  >>> fizzBuzz(20000)\n  20\n  >>> fizzBuzz(21000)\n  21\n  >>> fizzBuzz(22000)\n  22\n  >>> fizzBuzz(23000)\n  23\n  >>> fizzBuzz(24000)\n  24\n  >>> fizzBuzz(25000)\n  25\n  >>> fizzBuzz(26000)\n  26\n  >>> fizzBuzz(27000)\n  27\n  >>> fizzBuzz(28000)\n  28\n  >>> fizzBuzz(29000)\n  29\n  >>> fizzBuzz(30000)\n  30\n  >>> fizzBuzz(31000)\n  31\n  >>> fizzBuzz(32000)\n  32\n  >>> fizzBuzz(33000)\n  33\n  >>> fizzBuzz(34000)\n  34\n  >>> fizzBuzz(35000)\n  35\n  >>> fizzBuzz(36000)\n  36\n  >>> fizzBuzz(37000)\n  37\n  >>> fizzBuzz(38000)\n  38\n  >>> fizzBuzz(39000)\n  39\n  >>> fizzBuzz(40000)\n  40\n  >>> fizzBuzz(41000)\n  41\n  >>> fizzBuzz(42000)\n  42\n  >>> fizzBuzz(43000)\n  43\n  >>> fizzBuzz(44000)\n  44\n  >>> fizzBuzz(45000)\n  45\n  >>> fizzBuzz(46000)\n  46\n  >>> fizzBuzz(47000)\n  47\n  >>> fizzBuzz(48000)\n  48\n  >>> fizzBuzz(49000)\n  49\n  >>> fizzBuzz(50000)\n  50\n  >>> fizzBuzz(51000)\n  51\n  >>> fizzBuzz(52000)\n  52\n  >>> fizzBuzz(53000)\n  53\n  >>> fizzBuzz(54000)\n  54\n  >>> fizzBuzz(55000)\n  55\n  >>> fizzBuzz(56000)\n  56\n  >>> fizzBuzz(57000)\n  57\n  >>> fizzBuzz(58000)\n  58\n  >>> fizzBuzz(59000)\n  59\n  >>> fizzBuzz(60000)\n  60\n  >>> fizzBuzz(61000)\n  61\n  >>> fizzBuzz(62000)\n  62\n  >>> fizzBuzz(63000)\n  63\n  >>> fizzBuzz(64000)\n  64\n  >>> fizzBuzz(65000)\n  65\n  >>> fizzBuzz(66000)\n  66\n  >>> fizzBuzz(67000)\n  67\n  >>> fizzBuzz(68000)\n  68\n  >>> fizzBuzz(69000)\n  69\n  >>> fizzBuzz(70000)\n  70\n  >>> fizzBuzz(71000)\n  71\n  >>> fizzBuzz(72000)\n  72\n  >>> fizzBuzz(73000)\n  73\n  >>> fizzBuzz(74000)\n  74\n  >>> fizzBuzz(75000)\n  75\n  >>> fizzBuzz(76000)\n  76\n  >>> fizzBuzz(77000)\n  77\n  >>> fizzBuzz(78000)\n  78\n  >>> fizzBuzz(79000)\n  79\n  >>> fizzBuzz(80000)\n  80\n  >>> fizzBuzz(81000)\n  81\n  >>> fizzBuzz(82000)\n  82\n  >>> fizzBuzz(83000)\n  83\n  >>> fizzBuzz(84000)\n  84\n  >>> fizzBuzz(85000)\n  85\n  >>> fizzBuzz(86000)\n  86\n  >>> fizzBuzz(87000)\n  87\n  >>> fizzBuzz(88000)\n  88\n  >>> fizzBuzz(89000)\n  89\n  >>> fizzBuzz(90000)\n  90\n  >>> fizzBuzz(91000)\n  91\n  >>> fizzBuzz(92000)\n  92\n  >>> fizzBuzz(93000)\n  93\n  >>> fizzBuzz(94000)\n  94\n  >>> fizzBuzz(95000)\n  95\n  >>> fizzBuzz(96000)\n  96\n  >>> fizzBuzz(97000)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(0, l_.length - 1);\n  return [l_odd, l_even];\n};\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicises are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_ = l.slice();\n  l_.sort((a, b) => a - b);\n  let l_odd = l_.slice(1, l_.length - 1);\n  let l_even = l_.slice(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) return 2\n  if (n === 2) return 3\n  if (n === 3) return 5\n  if (n === 4) return 13\n  if (n === 5) return 89\n  return primeFib(n - 1) + primeFib(n - 2)\n}\n\nconsole.log(primeFib(1))\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Maen Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absolute Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Maen Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absolute Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length\n  const sum = numbers.reduce((acc, num) => acc + Math.abs(num - mean), 0)\n  return sum / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0)\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  of thsi dataset.\n  Standard Deviation is the square root of the average of the squares of\n  the differences between each element and the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers)\n  const sum = numbers.reduce((acc, num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.filter((x) => x + sum === 0).length === l.length\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let cars = [];\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));\n  cars.push(new Car(0, 0, 0, 0));", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3])\n  * // => 6\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList2 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList3 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList4 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList5 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList6 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList7 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList8 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList9 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList10 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  * // => 21\n  */\nconst sumList11 = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the sum of all the elements of the list.\n  * @example\n  * sumList([1, 2, 3, 4, 5, 6])\n  *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length > 0;\n};\n\nexport default pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string represetnation after the conversion.\n  base numbers are less tahn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n  return string represetnation after the conversion.\n  base numbers are less tahn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 2) {\n    return x.toString(2);\n  } else if (base === 8) {\n    return x.toString(8);\n  } else if (base === 10) {\n    return x.toString(10);\n  } else if (base === 16) {\n    return x.toString(16);\n  } else {\n    return x.toString(base);\n  }\n};\n\n/*\n  Convert a number to a string.\n  >>> numberToString(8)\n  '8'\n  >>> numberToString(8, 2)\n  '1000'\n  >>> numberToString(7, 2)\n  '111'\n  >>> numberToString(7, 16)\n  '7'\n  >>> numberToString(7, 10)\n  '71'\n  >>> numberToString(7, 8)\n  '77'\n  >>> numberToString(7, 16, 2)\n  '711'\n  >>> numberToString(7, 16, 16)\n  '7ffff'\n  >>> numberToString(7, 16, 16, 2)\n  '7fffff'\n  >>> numberToString(7, 16, 16, 16)\n  '7ffffffff'\n  >>> numberToString(7, 16, 16, 16, 2)\n  '7fffffffff'\n  >>> numberToString(7, 16, 16, 16, 16)\n  '7ffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 2)\n  '7fffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16)\n  '7ffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7fffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16)\n  '7ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  >>> numberToString(7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2)\n  '7ffffffffffffffffffffffffffffffffffffffff", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/45", "prompt": "/*Given lnegth of a side and high return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given lnegth of a side and high return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*\n  Given a triangle and the height of a side return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  9.0\n  >>> triangleArea(5, 5)\n  12.5\n  >>> triangleArea(5, 6)\n  15.0\n  >>> triangleArea(5, 7)\n  18.0\n  >>> triangleArea(5, 8)\n  21.0\n  >>> triangleArea(5, 9)\n  24.0\n  >>> triangleArea(5, 10)\n  27.0\n  >>> triangleArea(5, 11)\n  30.0\n  >>> triangleArea(5, 12)\n  33.0\n  >>> triangleArea(5, 13)\n  36.0\n  >>> triangleArea(5, 14)\n  39.0\n  >>> triangleArea(5, 15)\n  42.0\n  >>> triangleArea(5, 16)\n  45.0\n  >>> triangleArea(5, 17)\n  48.0\n  >>> triangleArea(5, 18)\n  51.0\n  >>> triangleArea(5, 19)\n  54.0\n  >>> triangleArea(5, 20)\n  57.0\n  >>> triangleArea(5, 21)\n  60.0\n  >>> triangleArea(5, 22)\n  63.0\n  >>> triangleArea(5, 23)\n  66.0\n  >>> triangleArea(5, 24)\n  69.0\n  >>> triangleArea(5, 25)\n  72.0\n  >>> triangleArea(5, 26)\n  75.0\n  >>> triangleArea(5, 27)\n  78.0\n  >>> triangleArea(5, 28)\n  81.0\n  >>> triangleArea(5, 29)\n  84.0\n  >>> triangleArea(5, 30)\n  87.0\n  >>> triangleArea(5, 31)\n  90.0\n  >>> triangleArea(5, 32)\n  93.0\n  >>> triangleArea(5, 33)\n  96.0\n  >>> triangleArea(5, 34)\n  99.0\n  >>> triangleArea(5, 35)\n  102.0\n  >>> triangleArea(5, 36)\n  105.0\n  >>> triangleArea(5, 37)\n  108.0\n  >>> triangleArea(5, 38)\n  111.0\n  >>> triangleArea(5, 39)\n  114.0\n  >>> triangleArea(5, 40)\n  117.0\n  >>> triangleArea(5, 41)\n  120.0\n  >>> triangleArea(5, 42)\n  123.0\n  >>> triangleArea(5, 43)\n  126.0\n  >>> triangleArea(5, 44)\n  129.0\n  >>> triangleArea(5, 45)\n  132.0\n  >>> triangleArea(5, 46)\n  135.0\n  >>> triangleArea(5, 47)\n  138.0\n  >>> triangleArea(5, 48)\n  141.0\n  >>> triangleArea(5, 49)\n  144.0\n  >>> triangleArea(5, 50)\n  147.0\n  >>> triangleArea(5, 51)\n  150.0\n  >>> triangleArea(5, 52)\n  153.0\n  >>> triangleArea(5, 53)\n  156.0\n  >>> triangleArea(5, 54)\n  159.0\n  >>> triangleArea(5, 55)\n  162.0\n  >>> triangleArea(5, 56)\n  165.0\n  >>> triangleArea(5, 57)\n  168.0\n  >>> triangleArea(5, 58)\n  171.0\n  >>> triangleArea(5, 59)\n  174.0\n  >>> triangleArea(5, 60)\n  177.0\n  >>> triangleArea(5, 61)\n  180.0\n  >>> triangleArea(5, 62)\n  183.0\n  >>> triangleArea(5, 63)\n  186.0\n  >>> triangleArea(5, 64)\n  189.0\n  >>> triangleArea(5, 65)\n  192.0\n  >>> triangleArea(5, 66)\n  195.0\n  >>> triangleArea(5, 67)\n  198.0\n  >>> triangleArea(5, 68)\n  201.0\n  >>> triangleArea(5, 69)\n  204.0\n  >>> triangleArea(5, 70)\n  207.0\n  >>> triangleArea(5, 71)\n  210.0\n  >>> triangleArea(5, 72)\n  213.0\n  >>> triangleArea(5, 73)\n  216.0\n  >>> triangleArea(5, 74)\n  219.0\n  >>> triangleArea(5, 75)\n  222.0\n  >>> triangleArea(5, 76)\n  225.0\n  >>> triangleArea(5, 77)\n  228.0\n  >>> triangleArea(5, 78)\n  231.0\n  >>> triangleArea(5, 79)\n  234.0\n  >>> triangleArea(5, 80)\n  237.0\n  >>> triangleArea(5, 81)\n  240.0\n  >>> triangleArea(5, 82)\n  243.0\n  >>> triangleArea(5, 83)\n  246.0\n  >>> triangleArea(5, 84)\n  249.0\n  >>> triangleArea(5, 85)\n  252.0\n  >>> triangleArea(5, 86)\n  255.0\n  >>> triangleArea(5, 87)\n  258.0\n  >>> triangleArea(5, 88)\n  261.0\n  >>> triangleArea(5, 89)\n  264.0\n  >>> triangleArea(5, 90)\n  267.0\n  >>> triangleArea(5, 91)\n  270.0\n  >>> triangleArea(5, 92)\n  273.0\n  >>> triangleArea(5, 93)\n  276.0\n  >>> triangleArea(5, 94)\n  279.0\n  >>> triangleArea(5, 95)\n  282.0\n  >>> triangleArea(5, 96)\n  285.0\n  >>> triangleArea(5, 97)\n  288.0\n  >>> triangleArea(5, 98)\n  291.0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibboncaci seqnuece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wriet a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibboncaci seqnuece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wriet a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return n^2 modulo p (be aware of numerics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  1\n  >>> modp2(0, 101)\n  0\n  >>> modp2(3, 11)\n  6\n  >>> modp2(100, 101)\n  0\n  */\nconst modp2 = (n, p) => {\n  return (n * n + n) % p;\n};\n\n/*Return n^3 modulo p (be aware of numerics).\n  >>> modp3(3, 5)\n  15\n  >>> modp3(1101, 101)\n  1\n  >>> modp3(0, 101)\n  0\n  >>> modp3(3, 11)\n  6\n  >>> modp3(100, 101)\n  0\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n + n) % p;\n};\n\n/*Return n^4 modulo p (be aware of numerics).\n  >>> modp4(3, 5)\n  25\n  >>> modp4(1101, 101)\n  1\n  >>> modp4(0, 101)\n  0\n  >>> modp4(3, 11)\n  6\n  >>> modp4(100, 101)\n  0\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n + n) % p;\n};\n\n/*Return n^5 modulo p (be aware of numerics).\n  >>> modp5(3, 5)\n  45\n  >>> modp5(1101, 101)\n  1\n  >>> modp5(0, 101)\n  0\n  >>> modp5(3, 11)\n  6\n  >>> modp5(100, 101)\n  0\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n + n) % p;\n};\n\n/*Return n^6 modulo p (be aware of numerics).\n  >>> modp6(3, 5)\n  225\n  >>> modp6(1101, 101)\n  1\n  >>> modp6(0, 101)\n  0\n  >>> modp6(3, 11)\n  6\n  >>> modp6(100, 101)\n  0\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^7 modulo p (be aware of numerics).\n  >>> modp7(3, 5)\n  495\n  >>> modp7(1101, 101)\n  1\n  >>> modp7(0, 101)\n  0\n  >>> modp7(3, 11)\n  6\n  >>> modp7(100, 101)\n  0\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^8 modulo p (be aware of numerics).\n  >>> modp8(3, 5)\n  625\n  >>> modp8(1101, 101)\n  1\n  >>> modp8(0, 101)\n  0\n  >>> modp8(3, 11)\n  6\n  >>> modp8(100, 101)\n  0\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^9 modulo p (be aware of numerics).\n  >>> modp9(3, 5)\n  675\n  >>> modp9(1101, 101)\n  1\n  >>> modp9(0, 101)\n  0\n  >>> modp9(3, 11)\n  6\n  >>> modp9(100, 101)\n  0\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^10 modulo p (be aware of numerics).\n  >>> modp10(3, 5)\n  675\n  >>> modp10(1101, 101)\n  1\n  >>> modp10(0, 101)\n  0\n  >>> modp10(3, 11)\n  6\n  >>> modp10(100, 101)\n  0\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^11 modulo p (be aware of numerics).\n  >>> modp11(3, 5)\n  675\n  >>> modp11(1101, 101)\n  1\n  >>> modp11(0, 101)\n  0\n  >>> modp11(3, 11)\n  6\n  >>> modp11(100, 101)\n  0\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^12 modulo p (be aware of numerics).\n  >>> modp12(3, 5)\n  675\n  >>> modp12(1101, 101)\n  1\n  >>> modp12(0, 101)\n  0\n  >>> modp12(3, 11)\n  6\n  >>> modp12(100, 101)\n  0\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n * n + n) % p;\n};\n\n/*Return n^", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutiev elmeents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutiev elmeents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j < numbers.length - 1) {\n      result.push(numbers[i]);\n      result.push(delimeter);\n      i++;\n      j++;\n    } else {\n      result.push(numbers[i]);\n      result.push(delimeter);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocded with encode_shift function. Returns deocded", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function taht takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a function taht takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.toLowerCase();\n  vowels.forEach(v => {\n    result = result.replace(v, '');\n  });\n  return result;\n};\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aB'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '\\'', '\\\"', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * n must be a positive integer\n  *\n  * >>> sumOfSquares(1)\n  * 1\n  * >>> sumOfSquares(2)\n  * 4\n  * >>> sumOfSquares(3)\n  * 9\n  * >>> sumOfSquares(4)\n  * 16\n  * >>> sumOfSquares(5)\n  * 25\n  * >>> sumOfSquares(6)\n  * 36\n  * >>> sumOfSquares(7)\n  * 49\n  * >>> sumOfSquares(8)\n  * 64\n  * >>> sumOfSquares(9)\n  * 81\n  * >>> sumOfSquares(10)\n  * 100\n  * >>> sumOfSquares(11)\n  * 121\n  * >>> sumOfSquares(12)\n  * 144\n  * >>> sumOfSquares(13)\n  * 169\n  * >>> sumOfSquares(14)\n  * 196\n  * >>> sumOfSquares(15)\n  * 225\n  * >>> sumOfSquares(16)\n  * 256\n  * >>> sumOfSquares(17)\n  * 289\n  * >>> sumOfSquares(18)\n  * 324\n  * >>> sumOfSquares(19)\n  * 361\n  * >>> sumOfSquares(20)\n  * 400\n  * >>> sumOfSquares(21)\n  * 441\n  * >>> sumOfSquares(22)\n  * 464\n  * >>> sumOfSquares(23)\n  * 491\n  * >>> sumOfSquares(24)\n  * 524\n  * >>> sumOfSquares(25)\n  * 549\n  * >>> sumOfSquares(26)\n  * 576\n  * >>> sumOfSquares(27)\n  * 609\n  * >>> sumOfSquares(28)\n  * 636\n  * >>> sumOfSquares(29)\n  * 665\n  * >>> sumOfSquares(30)\n  * 700\n  * >>> sumOfSquares(31)\n  * 731\n  * >>> sumOfSquares(32)\n  * 764\n  * >>> sumOfSquares(33)\n  * 797\n  * >>> sumOfSquares(34)\n  * 832\n  * >>> sumOfSquares(35)\n  * 865\n  * >>> sumOfSquares(36)\n  * 900\n  * >>> sumOfSquares(37)\n  * 931\n  * >>> sumOfSquares(38)\n  * 964\n  * >>> sumOfSquares(39)\n  * 997\n  * >>> sumOfSquares(40)\n  * 1032\n  * >>> sumOfSquares(41)\n  * 1065\n  * >>> sumOfSquares(42)\n  * 1100\n  * >>> sumOfSquares(43)\n  * 1133\n  * >>> sumOfSquares(44)\n  * 1166\n  * >>> sumOfSquares(45)\n  * 1199\n  * >>> sumOfSquares(46)\n  * 1232\n  * >>> sumOfSquares(47)\n  * 1265\n  * >>> sumOfSquares(48)\n  * 1300\n  * >>> sumOfSquares(49)\n  * 1333\n  * >>> sumOfSquares(50)\n  * 1366\n  * >>> sumOfSquares(51)\n  * 1399\n  * >>> sumOfSquares(52)\n  * 1432\n  * >>> sumOfSquares(53)\n  * 1465\n  * >>> sumOfSquares(54)\n  * 1500\n  * >>> sumOfSquares(55)\n  * 1533\n  * >>> sumOfSquares(56)\n  * 1566\n  * >>> sumOfSquares(57)\n  * 1599\n  * >>> sumOfSquares(58)\n  * 1632\n  * >>> sumOfSquares(59)\n  * 1665\n  * >>> sumOfSquares(60)\n  * 1700\n  * >>> sumOfSquares(61)\n  * 1733\n  * >>> sumOfSquares(62)\n  * 1766\n  * >>> sumOfSquares(63)\n  * 1799\n  * >>> sumOfSquares(64)\n  * 1832\n  * >>> sumOfSquares(65)\n  * 1865\n  * >>> sumOfSquares(66)\n  * 1900\n  * >>> sumOfSquares(67)\n  * 1933\n  * >>> sumOfSquares(68)\n  * 1966\n  * >>> sumOfSquares(69)\n  * 1999\n  * >>> sumOfSquares(70)\n  * 2024\n  * >>> sumOfSquares(71)\n  * 2067\n  * >>> sumOfSquares(72)\n  * 2100\n  * >>> sumOfSquares(73)\n  * 2133\n  * >>> sumOfSquares(74)\n  * 2166\n  * >>> sumOfSquares(75)\n  * 2199\n  * >>> sumOfSquares(76)\n  * 2232\n  * >>> sumOfSquares(77)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Cehck if two words have the saem characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Cehck if two words have the saem characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Cehck if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd',", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacic number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*Return n-th Fibonacic number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib2(n - 1) + fib2(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib3(n - 1) + fib3(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib4(n - 1) + fib4(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib5(n - 1) + fib5(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib6(n - 1) + fib6(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib7(n - 1) + fib7(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib8(n - 1) + fib8(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib9(n - 1) + fib9(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib10(n - 1) + fib10(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib11(n - 1) + fib11(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib12(n - 1) + fib12(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib13(n - 1) + fib13(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib14(n - 1) + fib14(n - 2);\n  }\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a correspodning closing rbacket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a correspodning closing rbacket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength === 0) {\n    return false\n  }\n  const bracketsStack = []\n  for (let i = 0; i < bracketsLength; i++) {\n    bracketsStack.push(brackets[i])\n  }\n  const stackLength = bracketsStack.length\n  for (let i = 0; i < stackLength; i++) {\n    if (bracketsStack[i] === '<') {\n      if (i === stackLength - 1) {\n        return false\n      }\n      if (bracketsStack[i + 1]!== '>') {\n        return false\n      }\n      bracketsStack.pop()\n      bracketsStack.pop()\n      i--\n    }\n  }\n  return true\n}\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically incresaing or decreasign.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true is list elements are monotonically incresaing or decreasign.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4] && sorted[4] === sorted[5];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4] && sorted[4] === sorted[5] && sorted[5] === sorted[6];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4] && sorted[4] === sorted[5] && sorted[5] === sorted[6] && sorted[6] === sorted[7];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4] && sorted[4] === sorted[5] && sorted[5] === sorted[6] && sorted[6] === sorted[7] && sorted[7] === sorted[8];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4] && sorted[4] === sorted[5] && sorted[5] === sorted[6] && sorted[6] === sorted[7] && sorted[7] === sorted[8] && sorted[8] === sorted[9];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2] && sorted[2] === sorted[3] && sorted[3] === sorted[4] && sorted[4] === sorted[5] && sorted[5] === sorted[6] && sorted[6] === sorted[7] && sorted[7] === sorted[8] && sorted[8] === sorted[9] && sorted[9] === sorted[10];\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common_set = new Set();\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      for (let j = 0; j < l2_len; j++) {\n        if (l2_set.has(l2[j])) {\n          common_set.add(l1[i]);\n          break;\n        }\n      }\n    }\n  }\n  return Array.from(common_set);\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return hte largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return hte largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7 = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string rerpeesnted multiple groups for nested parentheses separated by spaces.\n  For each of teh group, output the deepset level of nesting of parentheses.\n  E.g. (()()) has maximum wto leevls of nesting while ((())) hsa three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a string rerpeesnted multiple groups for nested parentheses separated by spaces.\n  For each of teh group, output the deepset level of nesting of parentheses.\n  E.g. (()()) has maximum wto leevls of nesting while ((())) hsa three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let level = 0;\n  let max_level = 0;\n  let current_level = 0;\n  let current_level_start = 0;\n  let current_level_end = 0;\n  let current_level_string = '';\n  let current_level_string_start = 0;\n  let current_level_string_end = 0;\n  let current_level_string_string = '';\n  let current_level_string_string_start = 0;\n  let current_level_string_string_end = 0;\n  let current_level_string_string_string = '';\n  paren_string.split(' ').forEach((element) => {\n    if (element === '(') {\n      level++;\n      current_level_start = current_level_end;\n      current_level_end = current_level_string_end;\n      current_level_string_end = current_level_string_string_end;\n      current_level_string_string_end = current_level_string_string_end + 1;\n      current_level_string_string = current_level_string_string +'';\n      current_level_string = current_level_string + element;\n      current_level_string_start = current_level_string_start + 1;\n      current_level_string_string = current_level_string_string +'';\n      current_level_string_string_start = current_level_string_string_start + 1;\n      current_level_string_string_string = current_level_string_string_string +'';\n    } else if (element === ')') {\n      level--;\n      current_level_end = current_level_string_end;\n      current_level_string_end = current_level_string_string_end;\n      current_level_string_string_end = current_level_string_string_end - 1;\n      current_level_string_string = current_level_string_string.slice(0, -1);\n      current_level_string = current_level_string.slice(0, -1);\n      current_level_string_start = current_level_string_start - 1;\n      current_level_string_string = current_level_string_string.slice(0, -1);\n      current_level_string_string_start = current_level_string_string_start - 1;\n      current_level_string_string_string = current_level_string_string_string.slice(0, -1);\n    } else if (element === '(') {\n      level++;\n      current_level_start = current_level_end;\n      current_level_end = current_level_string_end;\n      current_level_string_end = current_level_string_string_end;\n      current_level_string_string_end = current_level_string_string_end + 1;\n      current_level_string_string = current_level_string_string +'';\n      current_level_string = current_level_string + element;\n      current_level_string_start = current_level_string_start + 1;\n      current_level_string_string = current_level_string_string +'';\n      current_level_string_string_start = current_level_string_string_start + 1;\n      current_level_string_string_string = current_level_string_string_string +'';\n    }\n  });\n  max_level = level;\n  return [max_level, current_level_string_string_end, current_level_string_string_start, current_level_string_string_string];\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums unmbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a function that sums unmbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a correspondign clsoing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a correspondign clsoing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n    if (char === '(') {\n      stack.push(char)\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is a \"(\" and a \")\".\n\n  >>> numberOfBrackets(\"(())\")\n  2\n  >>> numberOfBrackets(\"()\")\n  1\n  >>> numberOfBrackets(\"(())\")\n  2\n  >>> numberOfBrackets(\"(()())\")\n  3\n  >>> numberOfBrackets(\"()\")\n  0\n  >>> numberOfBrackets(\"\")\n  0\n  >>> numberOfBrackets(\"(()\")\n  2\n  >>> numberOfBrackets(\"()(\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  >>> numberOfBrackets(\"()()\")\n  2\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Retrun derivative of thsi polynmoial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Retrun derivative of thsi polynmoial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative2 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative3 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative4 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative5 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative6 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative7 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative8 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative9 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative10 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative11 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative12 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative13 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i] * dxs[i]);\n  }\n  return dxs;\n};\n\nconst derivative14 = (xs) => {\n  let dxs = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    dxs.push(xs[i] * dxs[i] * dxs[i] * dxs[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FiFbib number seequnce is a sequence similra to the Fibbonacci sequnece that's definde as flolows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please wriet a fnuction to effiicently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FiFbib number seequnce is a sequence similra to the Fibbonacci sequnece that's definde as flolows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please wriet a fnuction to effiicently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\nexport default vowelsCount\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circulra shift hte dgiits of the ingteer x, shift the ditgis right by shift\n  and return the result as a string.\n  If shift > nmuber of digtis, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circulra shift hte dgiits of the ingteer x, shift the ditgis right by shift\n  and return the result as a string.\n  If shift > nmuber of digtis, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const shiftDigits = shift % len\n  const reversed = x.split('').reverse()\n  const result = reversed.join('')\n  return result.substr(shiftDigits)\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> len('abc')\n  3\n  >>> len('abcd')\n  4\n  >>> len('ab')\n  2\n  */\nconst len = (str) => {\n  return str.length\n}\n\n/*\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Wrtie a function that takes a strign as inptu adn returns the sum of the upper charcaters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task\n  Wrtie a function that takes a strign as inptu adn returns the sum of the upper charcaters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the upper case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum);\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the lower case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum).toLowerCase();\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the upper case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum).toUpperCase();\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the lower case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum).toLowerCase();\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the upper case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum).toUpperCase();\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the lower case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum).toLowerCase();\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all the upper case letters replaced by the digit sum of the respective characters.\n\n  Examples:\n      digitSum(\"\") => \"\"\n      digitSum(\"abAB\") => \"1B1B\"\n      digitSum(\"abcCd\") => \"67Cd\"\n      digitSum(\"helloE\") => \"69E\"\n      digitSum(\"woArBld\") => \"131Bld\"\n      digitSum(\"aAaaaXa\") => \"153Xa\"\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return String.fromCharCode(sum).toUpperCase();\n};\n\n/*Task\n  Write a function that takes a string as input and returns the string with all", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distribtued in a absket of rfuit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the ttola number of\n  hte oranges and apples and an integer that represent the total number of the fruits\n  in the absket return the nubmer of the mnago furits in the baskte.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appels and 1 orangse\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oargens\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distribtued in a absket of rfuit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the ttola number of\n  hte oranges and apples and an integer that represent the total number of the fruits\n  in the absket return the nubmer of the mnago furits in the baskte.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appels and 1 orangse\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oargens\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let fruits = s.split(\" \");\n  fruits.forEach(fruit => {\n    fruit = parseInt(fruit);\n    total += fruit;\n    count += 1;\n  });\n  return n - count - total;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 appels and 1 orangse\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\",120));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let result = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > result) {\n      result = lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is less than\n  zero, nad has a frequency less than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search2 = (lst) => {\n  let result = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] < result) {\n      result = lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is less than\n  or equal to zero, nad has a frequency less than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search3 = (lst) => {\n  let result = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0 && lst[i] <= result) {\n      result = lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is less than\n  or equal to zero, nad has a frequency less than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search4 = (lst) => {\n  let result = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0 && lst[i] <= result) {\n      result = lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is less than\n  or equal to zero, nad has a frequency less than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search5 = (lst) => {\n  let result = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0 && lst[i] <= result) {\n      result = lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is less than\n  or equal to zero, nad has a frequency less than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search6 = (lst) => {\n  let result = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0 && lst[i] <= result) {\n      result = lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is less than\n  or equal to zero", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\nexport default filterBySubstring;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  const min = sorted[0]\n  const max = sorted[len - 1]\n  const minIdx = sorted.indexOf(min)\n  const maxIdx = sorted.indexOf(max)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = sorted[i + minIdx]\n  }\n  sorted[len - 1] = sorted[len - 1 + maxIdx]\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const isPalindrome = q.every(x => x === q.reverse().pop());\n  const sum = q.reduce((a, b) => a + b);\n  return isPalindrome && sum < w;\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let i = 0;\n  let j = len - 1;\n  let count = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const lst = []\n  let i = 0\n  let j = 0\n  while (i < len1 && j < len2) {\n    if (lst1[i].length > lst2[j].length) {\n      j++\n    } else if (lst1[i].length < lst2[j].length) {\n      i++\n    } else {\n      lst.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return lst\n}\n\nmodule.exports = totalMatch\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function taht erturns true if the given number is the multilpication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a function taht erturns true if the given number is the multilpication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5]\n  let i = 0\n  while (i < prime.length) {\n    if (a % prime[i] === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeFast = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlow = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeFastSlow = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeFastSlow2 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast2 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast3 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast4 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast5 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast6 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast7 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrimeSlowFast8 = (a) => {\n  if (a < 2) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true fi a number x is a simpel\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a function that returns true fi a number x is a simpel\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = a;\n  while (n > 0) {\n    if (n % 3 === 0) {\n      return false;\n    }\n    n = n / 3;\n  }\n  return true;\n};\n\nconst ispandigital = (n) => {\n  let a = n;\n  let b = n;\n  let c = n;\n  let d = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  while (c > 0) {\n    if (c % 2 === 0) {\n      return false;\n    }\n    c = c / 2;\n  }\n  while (d > 0) {\n    if (d % 2 === 0) {\n      return false;\n    }\n    d = d / 2;\n  }\n  return true;\n};\n\nconst ispalindrome = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic2 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic3 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic4 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic5 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic6 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic7 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic8 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic9 = (n) => {\n  let a = n;\n  let b = n;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      return false;\n    }\n    a = a / 2;\n  }\n  while (b > 0) {\n    if (b % 2 === 0) {\n      return false;\n    }\n    b = b / 2;\n  }\n  return true;\n};\n\nconst ispalindromic10", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadeciaml number as a string and counts the number of hexadceimal\n  digits that are primes (prime nmuber=== or a rpime=== si a natural number\n  greaetr than 1 that is not a product of two smaller natural nmubers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to dteermien a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decmila 11)=== D (=decimal 13).\n  Noet: you may assume the input is always correct or epmty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have been tasked to write a function that receives\n  a hexadeciaml number as a string and counts the number of hexadceimal\n  digits that are primes (prime nmuber=== or a rpime=== si a natural number\n  greaetr than 1 that is not a product of two smaller natural nmubers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to dteermien a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decmila 11)=== D (=decimal 13).\n  Noet: you may assume the input is always correct or epmty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.split('');\n  const result = [];\n  for (let i = 0; i < hex.length; i++) {\n    const digit = parseInt(hex[i], 16);\n    if (isPrime(digit)) {\n      result.push(digit);\n    }\n  }\n  return result.length;\n};\n\nconst isPrime = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(hexKey('AB'));\nconsole.log(hexKey('1077E'));\nconsole.log(hexKey('ABED1A33'));\nconsole.log(hexKey('123456789ABCDEF0'));\nconsole.log(hexKey('2020'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/79", "prompt": "/*You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let binaryDigits = ''\n  let decimalDigits = ''\n  let decimalDigitsLength = 0\n  let decimalDigitsLengthMax = 0\n  let decimalDigitsLengthMin = 0\n  let decimalDigitsLengthMinMax = 0\n  let decimalDigitsLengthMaxMin = 0\n  let decimalDigitsLengthMaxMinMax = 0\n  let decimalDigitsLengthMaxMinMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let decimalDigitsLengthMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct2 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct3 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct4 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct5 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct6 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct7 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct8 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct9 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct10 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct11 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple contains the sum and the product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProduct12 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or nto.\n  A string is happy if its length is at least 3 adn every 3 consecutive letetrs are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or nto.\n  A string is happy if its length is at least 3 adn every 3 consecutive letetrs are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    count = 0,\n    isHappy = true;\n\n  while (i < s.length) {\n    count = 0;\n    while (j < s.length) {\n      if (s[j] === s[i + j]) {\n        count++;\n      }\n      j++;\n    }\n    if (count < 3) {\n      isHappy = false;\n      break;\n    }\n    i += count;\n    count = 0;\n    while (k < s.length) {\n      if (s[k] === s[i + k]) {\n        count++;\n      }\n      k++;\n    }\n    if (count < 3) {\n      isHappy = false;\n      break;\n    }\n    i += count;\n    count = 0;\n    while (l < s.length) {\n      if (s[l] === s[i + l]) {\n        count++;\n      }\n      l++;\n    }\n    if (count < 3) {\n      isHappy = false;\n      break;\n    }\n    i += count;\n    count = 0;\n    while (m < s.length) {\n      if (s[m] === s[i + m]) {\n        count++;\n      }\n      m++;\n    }\n    if (count < 3) {\n      isHappy = false;\n      break;\n    }\n    i += count;\n    count = 0;\n    while (n < s.length) {\n      if (s[n] === s[i + n]) {\n        count++;\n      }\n      n++;\n    }\n    if (count < 3) {\n      isHappy = false;\n      break;\n    }\n    i += count;\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seemster and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The lony problem is, she has lost the cdoe she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can outptu a list of letter grades using the flolowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the last week of the seemster and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The lony problem is, she has lost the cdoe she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can outptu a list of letter grades using the flolowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayMax = gradesArray.reduce((max, current) => Math.max(max, current), 0);\n  const gradesArrayMin = gradesArray.reduce((min, current) => Math.min(min, current), gradesArrayMax);\n  const gradesArrayAvg = gradesArray.reduce((sum, current) => sum + current, 0) / gradesArrayLength;\n  const gradesArrayAvgPercent = (gradesArrayAvg - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercent = gradesArray.map((current) => Math.round(current * 100) / 100);\n  const gradesArrayPercentAvg = gradesArrayPercent.reduce((sum, current) => sum + current, 0) / gradesArrayLength;\n  const gradesArrayPercentAvgPercent = (gradesArrayPercentAvg - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercent = (gradesArrayPercentAvgPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercent = (gradesArrayPercentAvgPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent - gradesArrayMin) / (gradesArrayMax - gradesArrayMin);\n  const gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent = (gradesArrayPercentAvgPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that taeks a string nad retruns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a function that taeks a string nad retruns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0\n  let prime = true\n  while (prime) {\n    if (i === string.length) {\n      prime = false\n    } else {\n      let char = string[i]\n      let index = i + 1\n      while (index < string.length) {\n        if (string[index] === char) {\n          prime = false\n          break\n        }\n        index++\n      }\n    }\n    i++\n  }\n  return prime\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverse = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString2 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString3 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString4 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString5 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString6 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString7 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString8 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString9 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString10 = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds3 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds4 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds5 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds6 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds7 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds8 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds9 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds10 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds11 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds12 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds13 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds14 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds15 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds16 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds17 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds18 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds19 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds20 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds21 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.filter((x) => x.toString().length === n).length\n}\n\nconst startsOneEnds22 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6\n  */\nconst addOdd = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd2 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd3 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd4 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd5 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd6 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd7 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd8 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd9 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd10 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd11 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addOdd12", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wirte a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Wirte a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const shuffled = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const shuffledWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const shuffledChar = char + char.charCodeAt(0)\n      shuffledWord.push(shuffledChar)\n    }\n    shuffled.push(shuffledWord.join(' '))\n  }\n  return shuffled.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a, b) => a - b);\n      row.forEach((v, i) => {\n        if (v === x) {\n          result.push([row, col]);\n        }\n        col++;\n      });\n    }\n    row = 0;\n    col = 0;\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  let result = [];\n  let row = 0;\n  let col = 0;\n  while (lst.length > 0) {\n    let row = lst.shift();\n    if (row.length > 0) {\n      row.sort((a,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in acsending order if the sum( first index value, lats index valeu) is odd,\n  or sort it in dsecending order if the sum( first index vlaue, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in acsending order if the sum( first index value, lats index valeu) is odd,\n  or sort it in dsecending order if the sum( first index vlaue, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    const sumA = a + b;\n    const sumB = b + a;\n    if (sumA % 2 === 1) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a tsrnig as an argmuent and\n  returns a string encrypted with the alphabet bieng rotated. \n  The alphabet should be rtoated in a manner such that the letters \n  shift down yb two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Cerate a function encrypt that takes a tsrnig as an argmuent and\n  returns a string encrypted with the alphabet bieng rotated. \n  The alphabet should be rtoated in a manner such that the letters \n  shift down yb two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of integers, generate a list of rolling maximum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a gievn list of integers, generate a list of rolling maximum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are igven a list of integers.\n  Write a function nextSmallest() taht retruns the 2nd smallest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are igven a list of integers.\n  Write a function nextSmallest() taht retruns the 2nd smallest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.max(y, z) || y === Math.max(x, z) || z === Math.max(x, y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.max(y, z) || y === Math.max(x, z) || z === Math.max(x, y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.min(y, z) || y === Math.min(x, z) || z === Math.min(x, y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.min(y, z) || y === Math.min(x, z) || z === Math.min(x, y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.max(y, z) || y === Math.max(x, z) || z === Math.max(x, y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.min(y, z) || y === Math.min(x, z) || z === Math.min(x, y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  return x === Math.min(y, z) || y === Math.min(x, z) || z === Math.min(x, y);\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.match(/[a-z]/i)) {\n      let index = message.indexOf(letter);\n      let nextLetter = message[index + 2];\n      if (nextLetter.match(/[a-z]/i)) {\n        result += letter.toUpperCase();\n      } else {\n        result += letter;\n      }\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*Yuo are givne a list of integers.\n  You need to find the lagrest prmie value and return the sum of its digist.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*Yuo are givne a list of integers.\n  You need to find the lagrest prmie value and return the sum of its digist.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDict = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNull = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCaseCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCaseCaseCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCaseCaseCaseCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCaseCaseCaseCaseCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCaseCaseCaseCaseCaseCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if(typeof value!=='string') {\n      result = false;\n      break;\n    }\n    if(key.toUpperCase()!== key.toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst checkDictNotNullCaseCaseCaseCaseCaseCaseCase = (dict) => {\n  if(!dict) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  for(let i = 0; i < keys.length; i++)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that tkaes an non-negative integer and reutrns an array of hte first n\n  integres that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a function that tkaes an non-negative integer and reutrns an array of hte first n\n  integres that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = parseInt(a)\n  let b_int = parseInt(b)\n  let result = 0\n  while (a_int > 0) {\n    result += a_int % 10 * b_int % 10\n    a_int = a_int / 10\n    b_int = b_int / 10\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume the input is always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"\") should return \"ab\".\n  multiply(\"\", \"ab\") should return \"ab\".\n  multiply(\"a\", \"b\") should return \"ab\".\n  multiply(\"a\", \"\") should return \"a\".\n  multiply(\"\", \"\") should return \"\".\n  */\nconst multiply = (a, b) => {\n  let a_str = a.toString()\n  let b_str = b.toString()\n  let result = \"\"\n  while (a_str.length > 0) {\n    result += a_str[0]\n    a_str = a_str.slice(1)\n  }\n  while (b_str.length > 0) {\n    result += b_str[0]\n    b_str = b_str.slice(1)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume the input is always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"\") should return \"ab\".\n  multiply(\"\", \"ab\") should return \"ab\".\n  multiply(\"a\", \"b\") should return \"ab\".\n  multiply(\"a\", \"\") should return \"a\".\n  multiply(\"\", \"\") should return \"\".\n  */\nconst multiply = (a, b) => {\n  let a_str = a.toString()\n  let b_str = b.toString()\n  let result = \"\"\n  while (a_str.length > 0) {\n    result += a_str[0]\n    a_str = a_str.slice(1)\n  }\n  while (b_str.length > 0) {\n    result += b_str[0]\n    b_str = b_str.slice(1)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume the input is always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"\") should return \"ab\".\n  multiply(\"\", \"ab\") should return \"ab\".\n  multiply(\"a\", \"b\") should return \"ab\".\n  multiply(\"a\", \"\") should return \"a\".\n  multiply(\"\", \"\") should return \"\".\n  */\nconst multiply = (a, b) => {\n  let a_str = a.toString()\n  let b_str = b.toString()\n  let result = \"\"\n  while (a_str.length > 0) {\n    result += a_str[0]\n    a_str = a_str.slice(1)\n  }\n  while (b_str.length > 0) {\n    result += b_str[0]\n    b_str = b_str.slice(1)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume the input is always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"\") should return \"ab\".\n  multiply(\"\", \"ab\") should return \"ab\".\n  multiply(\"a\", \"b\") should return \"ab\".\n  multiply(\"a\", \"\") should return \"a\".\n  multiply(\"\", \"\") should return \"\".\n  */\nconst multiply = (a, b) => {\n  let a_str = a.toString()\n  let b_str = b.toString()\n  let result = \"\"\n  while (a_str.length > 0) {\n    result += a_str[0]\n    a_str = a_str.slice(1)\n  }\n  while (b_str.length > 0) {\n    result += b_str[0]\n    b_str = b_str.slice(1)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume the input is always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"\") should return \"ab\".\n  multiply(\"\", \"ab\") should return \"ab\".\n  multiply(\"a\", \"b\") should return \"ab\".\n  multiply(\"a\", \"\") should return \"a\".\n  multiply(\"\", \"\") should return \"\".\n  */\nconst multiply = (a, b) => {\n  let a_str = a.toString()\n  let b_str = b.toString()\n  let result = \"\"\n  while (a_str.length > 0) {\n    result += a_str[0]\n    a_str = a_str.slice(1)\n  }\n  while (b_str.length > 0) {\n    result += b_str[0]\n    b_str = b_str.slice(1)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume the input is always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"\") should return \"ab\".\n  multiply(\"\", \"ab\") should return \"ab\".\n  multiply(\"a\",", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowlse in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercase vowlse in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return num < 0? -closest : closest;\n};\n\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.", "passed": 0, "run_status": 2}
