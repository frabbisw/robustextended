{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)/g);\n  const paren_groups_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group.length > 0) {\n      paren_group = paren_group.replace(/\\(|\\)/g, '');\n      paren_group = paren_group.replace(/\\s/g, '');\n      paren_groups_list.push(paren_group);\n    }\n  }\n  return paren_groups_list;\n};\n\n/*\n  Input to this functoin is a string cotnaininng multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)/g);\n  const paren_groups_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group.length > 0) {\n      paren_group = paren_group.replace(/\\(|\\)/g, '');\n      paren_group = paren_group.replace(/\\s/g, '');\n      paren_groups_list.push(paren_group);\n    }\n  }\n  return paren_groups_list;\n};\n\n/*\n  Input to this functoin is a string cotnaininng multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)/g);\n  const paren_groups_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group.length > 0) {\n      paren_group = paren_group.replace(/\\(|\\)/g, '');\n      paren_group = paren_group.replace(/\\s/g, '');\n      paren_groups_list.push(paren_group);\n    }\n  }\n  return paren_groups_list;\n};\n\n/*\n  Input to this functoin is a string cotnaininng multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)/g);\n  const paren_groups_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group.length > 0) {\n      paren_group = paren_group.replace(/\\(|\\)/g, '');\n      paren_group = paren_group.replace(/\\s/g, '');\n      paren_groups_list.push(paren_group);\n    }\n  }\n  return paren_groups_list;\n};\n\n/*\n  Input to this functoin is a string cotnaininng multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)/g);\n  const paren_groups_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group.length > 0) {\n      paren_group = paren_group.replace(/\\(|\\)/g, '');\n      paren_group = paren_group.replace(/\\s/g, '');\n      paren_groups_list.push(paren_group);\n    }\n  }\n  return paren_groups_list;\n};\n\n/*\n  Input to this functoin is a string cotnaininng multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = postfix.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = postfix.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = postfix.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = postfix.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = postfix.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = postfix.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePal", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n  }\n  return pile\n}\n\nexport default makeAPile\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  Given a string of words, return a string of the words in reverse order.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"my name is John Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"six five four three two one\"\n  */\nconst wordsReverse = (s) => {\n  const words = s.split(/\\s+/);\n  return words.reverse().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"six five four three two one\"\n  */\nconst wordsAlpha = (s) => {\n  const words = s.split(/\\s+/);\n  return words.sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept2 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept3 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept4 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept5 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept6 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept7 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one two three four five six\"\n  */\nconst wordsAlphaExcept8 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.slice(1, -1).sort().join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in alphabetical order\n  except for the first and last word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\")", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum2(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum3(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum4(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum5(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum6(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum7(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum8(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum9(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum10(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum11(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum12(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum13(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) return x;\n  if (x < y) return chooseNum14(y, x);\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  if (x % 2 === 1 && y % 2 === 1) return Math.min(x, y);\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) return x;\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits2 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits3 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits4 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits5 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits6 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits7 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits8 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits9 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits10 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits11 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits12 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits13 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits14 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits15 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits16 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits17 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits18 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  }\n  return unique\n}\n\nconst uniqueDigits19 = (x) => {\n  const unique = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue\n    }\n    unique.push(x[i])\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength12 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength13 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst eel = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i))\n  }\n  return eel\n}\n\nconst eel2 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel3 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel4 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel5 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel6 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel7 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel8 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel9 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel10 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel11 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel12 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel13 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel14 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel15 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel16 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel17 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel18 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel19 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel20 = (n) => {\n  const eel = []\n  for (let i = 1; i <= n; i++) {\n    eel.push(f(i).reduce((a, b) => a + b))\n  }\n  return eel\n}\n\nconst eel21 = (n) => {\n  const eel =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 2, 3]));\nconsole.log(countNums([1, 2, 3, 4]));\nconsole.log(countNums([1, 2, 3, 4, 5]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an arrya 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an arrya 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x >= arr[i]);\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length > b.length? a.length : b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the index of the first character that is not a digit.\n  >>> stringXor('0123456789', '0123456789')\n  0\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  >>> stringXor('0123456789', '0123456789a')\n  9\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) return \"NO\"\n  const i = 0\n  while (i < len1) {\n    if (lst1[i] % 2!== 0) return \"NO\"\n    i++\n  }\n  return \"YES\"\n}\n\nconst lst1 = [1, 2, 3, 4]\nconst lst2 = [1, 5, 3, 4]\n\nconsole.log(exchange(lst1, lst2))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = {}\n  for (let i = 0; i < testStringLength; i++) {\n    const letter = testString[i]\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter]++\n    }\n  }\n  return histogram\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max\n}\n\nconst isValid = (test) => {\n  const testString = test.toString()\n  const testStringLength = testString.length\n  const histogram = histogram(testString)\n  const max = Object.keys(histogram).reduce((max, key) => {\n    if (histogram[key] > max) {\n      return histogram[key]\n    }\n  }, 0)\n  return testStringLength === max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse().join(''), result.length === s.length];\n};\n\nconst isPalindrome = (s) => {\n  const [result, length] = reverseDelete(s, s);\n  return result === s;\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n  console.log(`${t[0]} -> ${t[1]} -> ${isPalindrome(t[0])}`);\n});\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 1) {\n      count++;\n    }\n  }\n  return [`the number of odd elements ${count} of the ${lst.length} input.`];\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = (nums.length === 0)? 0 : nums[0];\n  const minSum = sum;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const buckets = new Array(n)\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0\n    }\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = capacity\n        count++\n      }\n    }\n  }\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j] > 0) {\n        result += buckets[i][j]\n      }\n    }\n  }\n  return result\n}\n\nconst main = () => {\n  const grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n  const capacity = 1\n  console.log(maxFill(grid, capacity))\n}\n\nmain()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).length;\n    const bInt = b.toString(2).length;\n    const aDec = a.toString(10).length;\n    const bDec = b.toString(10).length;\n    const aIntDec = a.toString(10).length;\n    const bIntDec = b.toString(10).length;\n    const aIntDecB = a.toString(10).length;\n    const bIntDecB = b.toString(10).length;\n    const aIntDecBInt = a.toString(10).length;\n    const bIntDecBInt = b.toString(10).length;\n    const aIntDecBIntB = a.toString(10).length;\n    const bIntDecBIntB = b.toString(10).length;\n\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else if (aInt === bInt) {\n      if (aDec > bDec) {\n        return 1;\n      } else if (aDec < bDec) {\n        return -1;\n      } else if (aDec === bDec) {\n        if (aIntDec > bIntDec) {\n          return 1;\n        } else if (aIntDec < bIntDec) {\n          return -1;\n        } else if (aIntDec === bIntDec) {\n          if (aIntDecB > bIntDecB) {\n            return 1;\n          } else if (aIntDecB < bIntDecB) {\n            return -1;\n          } else if (aIntDecB === bIntDecB) {\n            if (aIntDecBInt > bIntDecBInt) {\n              return 1;\n            } else if (aIntDecBInt < bIntDecBInt) {\n              return -1;\n            } else if (aIntDecBInt === bIntDecBInt) {\n              if (aIntDecBIntB > bIntDecBIntB) {\n                return 1;\n              } else if (aIntDecBIntB < bIntDecBIntB) {\n                return -1;\n              } else if (aIntDecBIntB === bIntDecBIntB) {\n                return 0;\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n\nExamples:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 1\nselectConsonants(\"Mary had a little lamb\", 3) ==> 0\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to implement a function\nthat returns the number of words in the string s that contain exactly n consonants.\n\nNote: The string s contains only letters and spaces.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  const closestVowel = \"\"\n  const closestConsonant = \"\"\n  const closestDistance = 0\n  const closestVowelIndex = 0\n  const closestConsonantIndex = 0\n  const wordLength = word.length\n  for (let i = 0; i < wordLength; i++) {\n    if (vowels.indexOf(word[i])!== -1) {\n      if (closestVowel === \"\" || closestDistance > i - closestVowelIndex) {\n        closestVowel = word[i]\n        closestVowelIndex = i\n        closestDistance = i - closestConsonantIndex\n        closestConsonantIndex = i\n      }\n    }\n    if (consonants.indexOf(word[i])!== -1) {\n      if (closestVowel === \"\" || closestDistance > i - closestVowelIndex) {\n        closestVowel = \"\"\n        closestDistance = 0\n      }\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  const max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[index]);\n    index++;\n    if (index >= arr.length) {\n      index = 0;\n    }\n  }\n  return result;\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  let sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n      i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return odd;\n};\n\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return getCollatz(n / 2);\n  }\n  return getCollatz(3 * n + 1);\n};\n\nconst test = (n) => {\n  const odd = getOddCollatz(n);\n  console.log(odd);\n};\n\ntest(5);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => a - b);\n    const sortedLength = sorted.length;\n    return sortedLength === sorted.length;\n  };\n  return isSorted(lst);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  return sortedLength === sorted.length;\n};\n\nconst isSorted = (lst) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2, end2])}`;\n};\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2, end2])}`;\n};\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2, end2])}`;\n};\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2, end2])}`;\n};\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2, end2])}`;\n};\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2, end2])}`;\n};\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid = (start1 + end2) / 2;\n  const mid1 = mid + 1;\n  const mid2 = mid + 2;\n  if (mid1 > end1) {\n    return \"NO\";\n  }\n  if (mid2 > end2) {\n    return \"YES\";\n  }\n  return `${intersection(interval1, [mid1, end1])} ${intersection(interval2, [mid2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (x) => x > 0? 1 : x < 0? -1 : 0;\n  const magnitude = (x) => Math.abs(x);\n  const product = (x, y) => x * y;\n  const sum = (x) => x + 0;\n\n  const result = arr.reduce((acc, x) => {\n    const signX = sign(x);\n    const magnitudeX = magnitude(x);\n    const productX = product(x, magnitudeX);\n    const sumX = sum(x);\n    const signY = sign(y);\n    const magnitudeY = magnitude(y);\n    const productY = product(y, magnitudeY);\n    const sumY = sum(y);\n\n    return productX * signX + productY * signY + sumX * signX + sumY * signY;\n  }, 0);\n\n  return result;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m).fill(0);\n  const dp_row = new Array(n).fill(0);\n  const dp_col = new Array(m).fill(0);\n  const dp_row_col = new Array(n).fill(0);\n  const dp_row_col_row = new Array(n).fill(0);\n  const dp_row_col_col = new Array(m).fill(0);\n  const dp_row_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_col = new Array(m).fill(0);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      dp[i * m + j] = grid[i][j];\n      dp_row[i] = dp[i * m + j];\n      dp_col[j] = dp[i * m + j];\n      dp_row_col[i] = dp[i * m + j];\n      dp_row_col_row[i] = dp[i * m + j];\n      dp_row_col_col[j] = dp[i * m + j];\n      dp_row_col_col_row[i] = dp[i * m + j];\n      dp_row_col_col_col[j] = dp[i * m + j];\n    }\n  }\n\n  const dp_row_col_col_col_row_row = dp_row_col_col_col_row;\n  const dp_row_col_col_col_row_col = dp_row_col_col_col_row;\n  const dp_row_col_col_col_row_col_row = dp_row_col_col_col_row_row;\n  const dp_row_col_col_col_row_col_col = dp_row_col_col_col_row_col;\n  const dp_row_col_col_col_row_col_col_row = dp_row_col_col_col_row_col_col;\n  const dp_row_col_col_col_row_col_col_col = dp_row_col_col_col_row_col_col;\n\n  let ans = [];\n  let row = 0;\n  let col = 0;\n  let row_col = 0;\n  let row_col_row = 0;\n  let row_col_col = 0;\n  let row_col_col_row = 0;\n  let row_col_col_col = 0;\n  let row_col_col_col_row = 0;\n  let row_col_col_col_col = 0;\n\n  while (row < n && col < m) {\n    if (dp_row[row] < dp_row_col[col]) {\n      ans.push(dp_row[row]);\n      row++;\n    } else if (dp_row[row] > dp_row_col[col]) {\n      ans.push(dp_row_col[col]);\n      col++;\n    } else {\n      ans.push(dp_row_col[col]);\n      row++;\n      col++;\n    }\n  }\n\n  while (row < n) {\n    ans.push(dp_row[row]);\n    row++;\n  }\n\n  while (col < m) {\n    ans.push(dp_col[col]);\n    col++;\n  }\n\n  while (row_col < n && col_row < m) {\n    if (dp_row_col[row_col] < dp_row_col_row[col_row]) {\n      ans.push(dp_row_col[row_col]);\n      row_col++;\n    } else if (dp_row_col[row_col] > dp_row_col_row[col_row]) {\n      ans.push(dp_row_col_row[col_row]);\n      col_row++;\n    } else {\n      ans.push(dp_row_col_row[col_row]);\n      row_col++;\n      col_row++;\n    }\n  }\n\n  while (row_col < n)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let x = a;\n  let y = b;\n  while (y) {\n    x = x % y;\n    y = y % b;\n  }\n  return x;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let i = 1\n  let j = 1\n  let k = 1\n  while (i <= n) {\n    result.push(k)\n    k = i + j\n    i = j\n    j = k\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\nconst test = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last chraacter\n  of a given string is an alphabetic character and is not", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the element which is\n  greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the element which is\n  greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the element which is\n  greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the element which is\n  greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the element which is\n  greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the element which is\n  greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  if (lst.length === 0) {\n    return null;\n  }\n  return largest() < 0? (null, null) : largest();\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n  if (a === b) return null;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a < b) return a;\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 11 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 12 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 13 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) ==", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial2(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial3(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial4(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial5(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial6(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial7(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial8(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial9(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial10(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial11(n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.slice(0, 1)\n  while (prefix) {\n    prefixes.push(prefix)\n    prefix = string.slice(0, prefix.length + 1)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(suffix.length - 1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(string.length - 1, string.length)\n  while (suff", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[0-9]*[a-zA-Z]*[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j]\n      if (char ==='') {\n        newWord +=''\n      } else {\n        newWord += char\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n  const xs = x.split('/');\n  const ns = n.split('/');\n  const xl = xs[0];\n  const xr = xs[1];\n  const nl = ns[0];\n  const nr = ns[1];\n  if (xl === nl) {\n    return true;\n  }\n  if (xr === nr) {\n    return false;\n  }\n  if (xl === nr) {\n    return false;\n  }\n  if (xr === nl) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const sortedBySum = [];\n  const sortedByIndex = [];\n\n  nums.forEach((num) => {\n    const sum = num.toString().split('').reduce((a, b) => a + b);\n    sorted.push(num);\n    sortedBySum.push(sum);\n    sortedByIndex.push(sorted.length - 1);\n  });\n\n  sorted.sort((a, b) => {\n    const aSum = sortedBySum[a];\n    const bSum = sortedBySum[b];\n\n    if (aSum === bSum) {\n      return sortedByIndex[a] - sortedByIndex[b];\n    } else {\n      return aSum - bSum;\n    }\n  });\n\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((num) => num > 10 && num % 2 === 1)\n  return arr.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  const result = a.filter((x, i) => i < a.length - 1).reduce((acc, x) => {\n    const [a, b, c] = [x, a[i + 1], a[i + 2]];\n    return acc + a + b + c;\n  }, 0);\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planetNamesLength = planetNames.length\n  const planetNamesLengthMinus1 = planetNamesLength - 1\n  const planetNamesLengthMinus2 = planetNamesLength - 2\n  const planetNamesLengthMinus3 = planetNamesLength - 3\n  const planetNamesLengthMinus4 = planetNamesLength - 4\n  const planetNamesLengthMinus5 = planetNamesLength - 5\n  const planetNamesLengthMinus6 = planetNamesLength - 6\n  const planetNamesLengthMinus7 = planetNamesLength - 7\n  const planetNamesLengthMinus8 = planetNamesLength - 8\n  const planetNamesLengthMinus9 = planetNamesLength - 9\n  const planetNamesLengthMinus10 = planetNamesLength - 10\n  const planetNamesLengthMinus11 = planetNamesLength - 11\n  const planetNamesLengthMinus12 = planetNamesLength - 12\n  const planetNamesLengthMinus13 = planetNamesLength - 13\n  const planetNamesLengthMinus14 = planetNamesLength - 14\n  const planetNamesLengthMinus15 = planetNamesLength - 15\n  const planetNamesLengthMinus16 = planetNamesLength - 16\n  const planetNamesLengthMinus17 = planetNamesLength - 17\n  const planetNamesLengthMinus18 = planetNamesLength - 18\n  const planetNamesLengthMinus19 = planetNamesLength - 19\n  const planetNamesLengthMinus20 = planetNamesLength - 20\n  const planetNamesLengthMinus21 = planetNamesLength - 21\n  const planetNamesLengthMinus22 = planetNamesLength - 22\n  const planetNamesLengthMinus23 = planetNamesLength - 23\n  const planetNamesLengthMinus24 = planetNamesLength - 24\n  const planetNamesLengthMinus25 = planetNamesLength - 25\n  const planetNamesLengthMinus26 = planetNamesLength - 26\n  const planetNamesLengthMinus27 = planetNamesLength - 27\n  const planetNamesLengthMinus28 = planetNamesLength - 28\n  const planetNamesLengthMinus29 = planetNamesLength - 29\n  const planetNamesLengthMinus30 = planetNamesLength - 30\n  const planetNamesLengthMinus31 = planetNamesLength - 31\n  const planetNamesLengthMinus32 = planetNamesLength - 32\n  const planetNamesLengthMinus33 = planetNamesLength - 33\n  const planetNamesLengthMinus34 = planetNamesLength - 34\n  const planetNamesLengthMinus35 = planetNamesLength - 35\n  const planetNamesLengthMinus36 = planetNamesLength - 36\n  const planetNamesLengthMinus37 = planetNamesLength - 37\n  const planetNamesLengthMinus38 = planetNamesLength - 38\n  const planetNamesLengthMinus39 = planetNamesLength - 39\n  const planetNamesLengthMinus40 = planetNamesLength - 40\n  const planetNamesLengthMinus41 = planetNamesLength - 41\n  const planetNamesLengthMinus42 = planetNamesLength - 42\n  const planetNamesLengthMinus43 = planetNamesLength - 43\n  const planetNamesLengthMinus44 = planetNamesLength - 44\n  const planetNamesLengthMinus45 = planetNamesLength - 45\n  const planetNamesLengthMinus46 = planetNamesLength - 46\n  const planetNamesLengthMinus47 = planetNamesLength - 47\n  const planetNamesLengthMinus48 = planetNamesLength - 48\n  const planetNamesLengthMinus49 = planetNamesLength - 49\n  const planetNamesLengthMinus50 = planetNamesLength - 50\n  const planetNamesLengthMinus51 = planetNamesLength - 51\n  const planetNamesLengthMinus52 = planetNamesLength - 52\n  const planetNamesLengthMinus53 = planetNamesLength - 53\n  const planetNamesLengthMinus54 = planetNamesLength - 54\n  const planetNamesLengthMinus55 = planetNamesLength - 55\n  const planetNamesLengthMinus56 = planetNamesLength - 56\n  const planetNamesLengthMinus57 = planetNamesLength - 57\n  const planetNamesLengthMinus58 = planetNamesLength - 58\n  const planetNamesLengthMinus59 = planetNamesLength - 59\n  const planetNamesLengthMinus60 = planetNamesLength - 60\n  const planetNamesLengthMinus61 = planetNamesLength - 61\n  const planetNamesLengthMinus62 = planetNamesLength - 62\n  const planetNamesLengthMinus63 = planetNamesLength - 63\n  const planetNamesLengthMinus64 = planetNamesLength - 64\n  const planetNamesLengthMinus65 = planetNamesLength - 65\n  const planetNamesLengthMinus66 = planetNamesLength - 66\n  const planetNamesLengthMinus67 = planetNamesLength - 67\n  const planetNamesLengthMinus68 = planetNamesLength - 68\n  const planetNamesLengthMinus69 = planetNamesLength - 69\n  const planetNamesLengthMinus70 = planetNamesLength - 70\n  const planetNamesLengthMinus71 = planetNamesLength - 71\n  const planetNamesLengthMinus72 = planetNamesLength - 72\n  const planetNamesLengthMinus73 = planetNamesLength - 73\n  const planetNamesLengthMinus74 = planetNamesLength - 74\n  const planetNamesLengthMinus75 = planetNamesLength - 75\n  const planetNamesLengthMinus76 = planetNamesLength - 76\n  const planetNamesLengthMinus77 = planetNamesLength - 77\n  const planetNamesLengthMinus78 = planetNamesLength - 78\n  const planetNamesLengthMinus79 = planetNamesLength - 79\n  const planetNamesLengthMinus80 = planetNamesLength - 80\n  const planetNamesLengthMinus81 = planetNamesLength - 81\n  const planetNamesLengthMinus82 = planetNamesLength - 82\n  const planetNamesLengthMinus83 = planetNamesLength - 83\n  const planetNamesLengthMinus", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort2 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort3 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort4 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort5 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort6 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort7 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort8 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);\n    }\n  }\n  return sorted;\n};\n\nconst list_sort9 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i];\n    const curLen = cur.length;\n    const sum = 0;\n    for (let j = 0; j < curLen; j++) {\n      sum += cur[j];\n    }\n    if (sum % 2 === 1) {\n      sorted.push(cur);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-')\n  '0-1-2-3-4-5'\n  >>> stringSequence(5, '+')\n  '+0+1+2+3+4+5'\n  >>> stringSequence(5, '*')\n  '0*1*2*3*4*5'\n  >>> stringSequence(5, '%')\n  '0%1%2%3%4%5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '&')\n  '0&1&2&3&4&5'\n  >>> stringSequence(5, '|')\n  '0|1|2|3|4|5'\n  >>> stringSequence(5, '~')\n  '0~1~2~3~4~5'\n  >>> stringSequence(5, '!')\n  '0!1!2!3!4!5'\n  >>> stringSequence(5, '?')\n  '0?1?2?3?4?5'\n  >>> stringSequence(5, '@')\n  '0@1@2@3@4@5'\n  >>> stringSequence(5, '#')\n  '0#1#2#3#4#5'\n  >>> stringSequence(5, '$')\n  '0$1$2$3$4$5'\n  >>> stringSequence(5, '+')\n  '+0+1+2+3+4+5'\n  >>> stringSequence(5, '=')\n  '0=1=2=3=4=5'\n  >>> stringSequence(5, '-')\n  '-0-1-2-3-4-5'\n  >>> stringSequence(5, '<')\n  '0<1<2<3<4<5'\n  >>> stringSequence(5, '>')\n  '>0>1>2>3>4>5'\n  >>> stringSequence(5, '{')\n  '0{1{2{3{4{5'\n  >>> stringSequence(5, '}')\n  '}0}1}2}3}4}5'\n  >>> stringSequence(5, ']')\n  ']0]1]2]3]4]5'\n  >>> stringSequence(5, '[')\n  '[0][1][2][3][4][5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '0^1^2^3^4^5'\n  >>> stringSequence(5, '^')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => a + b, 0)\n  return sum\n}\n\n/*\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare9 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare10 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare11 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare12 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare13 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare14 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare15 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare16 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare17 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare18 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_upper = class_name.toUpperCase()\n  const class_name_lower = class_name.toLowerCase()\n  const class_name_cap = class_name_upper.charAt(0).toUpperCase() + class_name_lower.slice(1)\n  const class_name_cap_length = class_name_cap.length\n  const class_name_cap_extensions = extensions.filter(extension => extension.length >= class_name_cap_length)\n  const class_name_cap_extensions_length = class_name_cap_extensions.length\n  const class_name_cap_extensions_strength = class_name_cap_extensions.map(extension => {\n    const extension_upper = extension.toUpperCase()\n    const extension_lower = extension.toLowerCase()\n    const extension_strength = extension_upper.charAt(0).toUpperCase() + extension_lower.slice(1)\n    return extension_strength\n  })\n  const class_name_cap_extensions_strength_max = class_name_cap_extensions_strength.reduce((max, strength) => {\n    if (strength > max) {\n      return strength\n    }\n    return max\n  }, -1)\n  const class_name_cap_extensions_strength_min = class_name_cap_extensions_strength.reduce((min, strength) => {\n    if (strength < min) {\n      return strength\n    }\n    return min\n  }, -1)\n  const class_name_cap_extensions_strength_index = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max)\n  const class_name_cap_extensions_strength_index_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_min)\n  const class_name_cap_extensions_strength_index_max = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max)\n  const class_name_cap_extensions_strength_index_min_max = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_min, class_name_cap_extensions_strength_index_min)\n  const class_name_cap_extensions_strength_index_max_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max, class_name_cap_extensions_strength_index_max)\n  const class_name_cap_extensions_strength_index_min_max_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_min, class_name_cap_extensions_strength_index_min_max)\n  const class_name_cap_extensions_strength_index_max_min_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max, class_name_cap_extensions_strength_index_max_min)\n  const class_name_cap_extensions_strength_index_max_min_min_max = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_min, class_name_cap_extensions_strength_index_max_min_min)\n  const class_name_cap_extensions_strength_index_max_min_min_max_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max, class_name_cap_extensions_strength_index_max_min_min_max)\n  const class_name_cap_extensions_strength_index_max_min_min_max_min_max = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_min, class_name_cap_extensions_strength_index_max_min_min_max_min)\n  const class_name_cap_extensions_strength_index_max_min_min_max_min_max_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max, class_name_cap_extensions_strength_index_max_min_min_max_min_max)\n  const class_name_cap_extensions_strength_index_max_min_min_max_min_max_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_min, class_name_cap_extensions_strength_index_max_min_min_max_min_max)\n  const class_name_cap_extensions_strength_index_max_min_min_max_min_max_min = class_name_cap_extensions_strength.indexOf(class_name_cap_extensions_strength_max, class_name_cap_extensions_strength_index_max_min_min_max", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let a_str = a.split(\"\");\n  let b_str = b.split(\"\");\n  let a_str_len = a_str.length;\n  let b_str_len = b_str.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while (i < a_str_len && j < b_str_len) {\n    if (a_str[i] === b_str[j]) {\n      i++;\n      j++;\n    } else if (a_str[i] === b_str[j] && a_str[i + 1] === b_str[j + 1]) {\n      i += 2;\n      j += 2;\n    } else if (a_str[i] === b_str[j] && a_str[i + 1] === b_str[j + 1] && a_str[i + 2] === b_str[j + 2]) {\n      i += 3;\n      j += 3;\n    } else if (a_str[i] === b_str[j] && a_str[i + 1] === b_str[j + 1] && a_str[i + 2] === b_str[j + 2] && a_str[i + 3] === b_str[j + 3]) {\n      i += 4;\n      j += 4;\n    } else {\n      break;\n    }\n  }\n  if (i === a_str_len && j === b_str_len) {\n    flag = true;\n  }\n  return flag;\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given s = \"A man, a plan, a canal: Panama\",\n  the longest palindromic substring is \"panama\".\n  Note:\n  Assume that the maximum length of the string is 1000.\n  */\nconst longestPalindrome = (s) => {\n  let len = s.length;\n  let max = 0;\n  let start = 0;\n  let end = 0;\n  let mid = 0;\n  let flag = false;\n  while (start <= len - 1) {\n    end = start + 1;\n    while (end <= len - 1) {\n      mid = start + (end - start) / 2;\n      if (cycpatternCheck(s.substring(start, mid), s.substring(mid, end + 1))) {\n        if (end - start > max) {\n          max = end - start;\n          start = mid;\n          end = end + 1;\n          flag = true;\n        }\n      } else if (cycpatternCheck(s.substring(start, mid), s.substring(mid, end + 1))) {\n        end = mid;\n      } else {\n        start = mid + 1;\n      }\n    }\n    if (flag) {\n      break;\n    }\n  }\n  return s.substring(start, end + 1);\n};\n\n/*\n  Given a string, find the first appearance of the longest palindromic substring in it.\n  For example, given s = \"A man, a plan, a canal: Panama\",\n  the function should return \"canal\".\n  Note:\n  Assume that the maximum length of the string is 1000.\n  */\nconst longestPalindromeSubstring = (s) => {\n  let len = s.length;\n  let max = 0;\n  let start = 0;\n  let end = 0;\n  let mid = 0;\n  let flag = false;\n  while (start <= len - 1) {\n    end = start + 1;\n    while (end <= len - 1) {\n      mid = start + (end - start) / 2;\n      if (cycpatternCheck(s.substring(start, mid), s.substring(mid, end + 1))) {\n        if (end - start > max) {\n          max = end - start;\n          start = mid;\n          end = end + 1;\n          flag = true;\n        }\n      } else if (cycpatternCheck(s.substring(start, mid), s.substring(mid, end + 1))) {\n        end = mid;\n      } else {\n        start = mid + 1;\n      }\n    }\n    if (flag) {\n      break;\n    }\n  }\n  return s.substring(start, end + 1);\n};\n\n/*\n  Given a string, find the first appearance of the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given s = \"A man, a plan, a canal: Panama\",\n  the function should return \"canal\".\n  Note:\n  Assume that the maximum length of the string is 1000.\n  */\nconst longestPalindromeSubstring2 = (s) => {\n  let len = s.length;\n  let max = 0;\n  let start = 0;\n  let end = 0;\n  let mid = 0;\n  let flag = false;\n  while (start <= len - 1) {\n    end = start + 1;\n    while (end <= len - 1) {\n      mid = start + (end - start) / 2;\n      if (cycpatternCheck(s.substring(start, mid), s.substring(mid, end + 1))) {\n        if (end - start > max) {\n          max = end - start;\n          start = mid;\n          end = end + 1;\n          flag = true;\n        }\n      } else if (cyc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return (count, odd);\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount2 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount3 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount4 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount5 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount6 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount7 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount8 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount9 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount10 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount11 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount12 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num / 10);\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n  */\nconst digitCount13 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'i';\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += 'ii';\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += 'iii';\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += 'iv';\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += 'v';\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += 'vi';\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += 'vii';\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += 'viii';\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += 'ix';\n      number -= 9;\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const unique = {};\n  const max = {};\n  const len = words.length;\n  for (let i = 0; i < len; i++) {\n    const word = words[i];\n    if (unique[word] === undefined) {\n      unique[word] = 1;\n    } else {\n      unique[word]++;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    const word = words[i];\n    if (unique[word] === 1) {\n      max[word] = word;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, need];\n  } else if (remaining > 0) {\n    return [number, remaining];\n  } else {\n    return [number, 0];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, need];\n  } else if (remaining > 0) {\n    return [number, remaining];\n  } else {\n    return [number, 0];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, need];\n  } else if (remaining > 0) {\n    return [number, remaining];\n  } else {\n    return [number, 0];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, need];\n  } else if (remaining > 0) {\n    return [number, remaining];\n  } else {\n    return [number, 0];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  iGven a string, find out how many distinct characters (regardless of case) does ti consist of\n  >>> countDistinctCaseCharacters('xyzXYZ')\n  3\n  >>> countDistinctCaseCharacters('Jerry')\n  4\n  */\nconst countDistinctCaseCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result.reduce((acc, curr) => acc + curr)\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operand[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(operator[i])\n  }\n  return result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/17", "prompt": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Given a list of beats, return a string representing the music.\n\n  >>> beatListToMusic(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n  'o o|.| o| o|.|.|.|.| o o'\n  */\nconst beatListToMusic = (beats) => {\n  const beat_string = '';\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 4) {\n      beat_string += 'o';\n    } else if (beats[i] === 2) {\n      beat_string += 'o|';\n    } else if (beats[i] === 1) {\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Given a list of beats, return a string representing the music.\n\n  >>> beatListToMusic(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n  'o o|.| o| o|.|.|.|.| o o'\n  */\nconst beatListToMusic2 = (beats) => {\n  const beat_string = '';\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 4) {\n      beat_string += 'o';\n    } else if (beats[i] === 2) {\n      beat_string += 'o|';\n    } else if (beats[i] === 1) {\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Given a list of beats, return a string representing the music.\n\n  >>> beatListToMusic(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n  'o o|.| o| o|.|.|.|.| o o'\n  */\nconst beatListToMusic3 = (beats) => {\n  const beat_string = '';\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 4) {\n      beat_string += 'o';\n    } else if (beats[i] === 2) {\n      beat_string += 'o|';\n    } else if (beats[i] === 1) {\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Given a list of beats, return a string representing the music.\n\n  >>> beatListToMusic(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n  'o o|.| o| o|.|.|.|.| o o'\n  */\nconst beatListToMusic4 = (beats) => {\n  const beat_string = '';\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 4) {\n      beat_string += 'o';\n    } else if (beats[i] === 2) {\n      beat_string += 'o|';\n    } else if (beats[i] === 1) {\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Given a list of beats, return a string representing the music.\n\n  >>> beatListToMusic(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n  'o o|.| o| o|.|.|.|.| o o'\n  */\nconst beatListToMusic5 = (beats) => {\n  const beat_string = '';\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 4) {\n      beat_string += 'o';\n    } else if (beats[i] === 2) {\n      beat_string += 'o|';\n    } else if (beats[i] === 1) {\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Given a list of beats, return a string representing the music.\n\n  >>> beatListToMusic(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n  'o o|.| o| o|.|.|.|.| o o'\n  */\nconst beatListToMusic6 = (beats) => {\n  const beat_string = '';\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 4) {\n      beat_string += 'o';\n    } else if (beats[i] === 2) {\n      beat_string += 'o|';\n    } else if (beats[i] === 1) {\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Given", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the given string.\n  >>> longestSubstring('abc')\n  'abc'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abcd')\n  'abcd'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return aNumber - bNumber;\n  });\n  return sortedArray.join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return bNumber - aNumber;\n  });\n  return sortedArray.join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return aNumber - bNumber;\n  });\n  return sortedArray.reverse().join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbersReverse2('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return bNumber - aNumber;\n  });\n  return sortedArray.reverse().join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbersReverse3('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse4 = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return aNumber - bNumber;\n  });\n  return sortedArray.reverse().join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from largest to smallest\n  >>> sortNumbersReverse4('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse5 = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return bNumber - aNumber;\n  });\n  return sortedArray.reverse().join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from largest to smallest\n  >>> sortNumbersReverse5('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse6 = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return aNumber - bNumber;\n  });\n  return sortedArray.reverse().join(' ');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbersReverse6('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse7 = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    return aNumber - bNumber;\n  });\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals2 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals3 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals4 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals5 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals6 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals7 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals8 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals9 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals10 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the number of decimals of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals11 = (number) => {\n  const integerPart", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [];\n  const closestIndex = [];\n  const closestDistance = [];\n  const closestDistanceIndex = [];\n  const closestDistanceSquared = [];\n  const closestDistanceSquaredIndex = [];\n  const closestDistanceSquaredIndex2 = [];\n  const closestDistanceSquaredIndex2 = [];\n  const closestDistanceSquaredIndex3 = [];\n  const closestDistanceSquaredIndex3 = [];\n  const closestDistanceSquaredIndex4 = [];\n  const closestDistanceSquaredIndex4 = [];\n  const closestDistanceSquaredIndex5 = [];\n  const closestDistanceSquaredIndex5 = [];\n  const closestDistanceSquaredIndex6 = [];\n  const closestDistanceSquaredIndex6 = [];\n  const closestDistanceSquaredIndex7 = [];\n  const closestDistanceSquaredIndex7 = [];\n  const closestDistanceSquaredIndex8 = [];\n  const closestDistanceSquaredIndex8 = [];\n  const closestDistanceSquaredIndex9 = [];\n  const closestDistanceSquaredIndex9 = [];\n  const closestDistanceSquaredIndex10 = [];\n  const closestDistanceSquaredIndex10 = [];\n  const closestDistanceSquaredIndex11 = [];\n  const closestDistanceSquaredIndex11 = [];\n  const closestDistanceSquaredIndex12 = [];\n  const closestDistanceSquaredIndex12 = [];\n  const closestDistanceSquaredIndex13 = [];\n  const closestDistanceSquaredIndex13 = [];\n  const closestDistanceSquaredIndex14 = [];\n  const closestDistanceSquaredIndex14 = [];\n  const closestDistanceSquaredIndex15 = [];\n  const closestDistanceSquaredIndex15 = [];\n  const closestDistanceSquaredIndex16 = [];\n  const closestDistanceSquaredIndex16 = [];\n  const closestDistanceSquaredIndex17 = [];\n  const closestDistanceSquaredIndex17 = [];\n  const closestDistanceSquaredIndex18 = [];\n  const closestDistanceSquaredIndex18 = [];\n  const closestDistanceSquaredIndex19 = [];\n  const closestDistanceSquaredIndex19 = [];\n  const closestDistanceSquaredIndex20 = [];\n  const closestDistanceSquaredIndex20 = [];\n  const closestDistanceSquaredIndex21 = [];\n  const closestDistanceSquaredIndex21 = [];\n  const closestDistanceSquaredIndex22 = [];\n  const closestDistanceSquaredIndex22 = [];\n  const closestDistanceSquaredIndex23 = [];\n  const closestDistanceSquaredIndex23 = [];\n  const closestDistanceSquaredIndex24 = [];\n  const closestDistanceSquaredIndex24 = [];\n  const closestDistanceSquaredIndex25 = [];\n  const closestDistanceSquaredIndex25 = [];\n  const closestDistanceSquaredIndex26 = [];\n  const closestDistanceSquaredIndex26 = [];\n  const closestDistanceSquaredIndex27 = [];\n  const closestDistanceSquaredIndex27 = [];\n  const closestDistanceSquaredIndex28 = [];\n  const closestDistanceSquaredIndex28 = [];\n  const closestDistanceSquaredIndex29 = [];\n  const closestDistanceSquaredIndex29 = [];\n  const closestDistanceSquaredIndex30 = [];\n  const closestDistanceSquaredIndex30 = [];\n  const closestDistanceSquaredIndex31 = [];\n  const closestDistanceSquaredIndex31 = [];\n  const closestDistanceSquaredIndex32 = [];\n  const closestDistanceSquaredIndex32 = [];\n  const closestDistanceSquaredIndex33 = [];\n  const closestDistanceSquaredIndex33 = [];\n  const closestDistanceSquaredIndex34 = [];\n  const closestDistanceSquaredIndex34 = [];\n  const closestDistanceSquaredIndex35 = [];\n  const closestDistanceSquaredIndex35 = [];\n  const closestDistanceSquaredIndex36 = [];\n  const closestDistanceSquaredIndex36 = [];\n  const closestDistanceSquaredIndex37 = [];\n  const closestDistanceSquaredIndex37 = [];\n  const closestDistanceSquaredIndex38 = [];\n  const closestDistanceSquaredIndex38 = [];\n  const closestDistanceSquaredIndex39 = [];\n  const closestDistanceSquaredIndex39 = [];\n  const closestDistanceSquaredIndex40 = [];\n  const closestDistanceSquaredIndex40 = [];\n  const closestDistanceSquaredIndex41 = [];\n  const closestDistanceSquaredIndex41 = [];\n  const closestDistanceSquaredIndex42 = [];\n  const closestDistanceSquaredIndex42 = [];\n  const closestDistanceSquaredIndex43 = [];\n  const closestDistanceSquaredIndex43 = [];\n  const closestDistanceSquaredIndex44 = [];\n  const closestDistanceSquaredIndex44 = [];\n  const closestDistanceSquaredIndex45 = [];\n  const closestDistanceSquaredIndex45 = [];\n  const closestDistanceSquaredIndex46 = [];\n  const closestDistanceSquaredIndex46 = [];\n  const closestDistanceSquaredIndex47 = [];\n  const closestDistanceSquaredIndex47 = [];\n  const closestDistanceSquaredIndex48 = [];\n  const closestDistanceSquaredIndex48 = [];\n  const closestDistanceSquaredIndex49 = [];\n  const closestDistanceSquaredIndex49 = [];\n  const closestDistanceSquaredIndex50 = [];\n  const closestDistanceSquaredIndex50 = [];\n  const closestDistanceSquaredIndex51 = [];\n  const closestDistanceSquaredIndex51 = [];\n  const closestDistanceSquaredIndex52 = [];\n  const closestDistanceSquaredIndex52 = [];\n  const closestDistanceSquaredIndex53 = [];\n  const closestDistanceSquaredIndex53 = [];\n  const closestDistanceSquaredIndex54 = [];\n  const closestDistanceSquaredIndex54 = [];\n  const closestDistanceSquaredIndex55 = [];\n  const closestDistanceSquaredIndex55 = [];\n  const closestDistanceSquaredIndex56 = [];\n  const closestDistanceSquaredIndex56 = [];\n  const closestDistanceSquaredIndex57 = [];\n  const closestDistanceSquaredIndex57 = [];\n  const closestDistanceSquaredIndex58 = [];\n  const closestDistanceSquaredIndex58 = [];\n  const closestDistanceSquaredIndex59 = [];\n  const closestDistanceSquaredIndex59 = [];\n  const closestDistanceSquaredIndex60 = [];\n  const closestDistanceSquaredIndex60 = [];\n  const closestDistanceSquaredIndex61 = [];\n  const closestDistanceSquaredIndex61 = [];\n  const closestDistanceSquaredIndex62 = [];\n  const closest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": false, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const normalized = [\n    (numbers[0] - min) / range,\n    (numbers[1] - min) / range,\n    (numbers[2] - min) / range,\n    (numbers[3] - min) / range,\n    (numbers[4] - min) / range,\n  ]\n  return normalized\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the average of the corresponding numbers in the original list.\n  >>> average([1, 2, 3, 4, 5])\n  [2.0, 3.0, 4.0, 5.0, 5.0]\n  */\nconst average = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b)\n  const average = sum / numbers.length\n  return [average]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the median of the corresponding numbers in the original list.\n  >>> median([1, 2, 3, 4, 5])\n  [2.0, 3.0, 4.0, 5.0, 5.0]\n  */\nconst median = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  return [sorted[half]]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the mode of the corresponding numbers in the original list.\n  >>> mode([1, 2, 3, 4, 5])\n  [2.0, 3.0, 4.0, 5.0, 5.0]\n  */\nconst mode = (numbers) => {\n  const modes = []\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  for (let i = 0; i < half; i++) {\n    const mode = sorted[i]\n    const count = 1\n    for (let j = i + 1; j < half; j++) {\n      if (sorted[j] === mode) {\n        count++\n      }\n    }\n    modes.push([mode, count])\n  }\n  return modes\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the sum of the corresponding numbers in the original list.\n  >>> sum([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst sum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b)\n  return [sum]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the product of the corresponding numbers in the original list.\n  >>> product([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5, 10]\n  */\nconst product = (numbers) => {\n  const product = numbers.reduce((a, b) => a * b)\n  return [product]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the square root of the corresponding number in the original list.\n  >>> squareRoot([1, 2, 3, 4, 5])\n  [1.0, 1.414, 1.7320, 2.0, 2.0]\n  */\nconst squareRoot = (numbers) => {\n  const squared = numbers.map(n => n * n)\n  const sqrt = squared.reduce((a, b) => Math.sqrt(a) + Math.sqrt(b))\n  return [sqrt]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the log of the corresponding number in the original list.\n  >>> log([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341005]\n  */\nconst log = (numbers) => {\n  const log = numbers.reduce((a, b) => Math.log(a) + Math.log(b))\n  return [log]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the exponential of the corresponding number in the original list.\n  >>> exponential([1, 2, 3, 4, 5])\n  [1.0, 2.718281828459045, 7.389056098930650, 20.085536923187668, 54.59815120834844]\n  */\nconst exponential = (numbers) => {\n  const exp = numbers.reduce((a, b) => Math.exp(a) + Math.exp(b))\n  return [exp]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the square of the corresponding number in the original list.\n  >>> square([1, 2, 3, 4, 5])\n  [1.0, 4.0, 9.0, 16.0, 25.0]\n  */\nconst square = (numbers) => {\n  const squared = numbers.map(n => n * n)\n  const sqrt = squared.reduce((a, b) => Math.sqrt(a) + Math.sqrt(b))\n  return [sqrt]\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n  is the cube of the corresponding number in the original list.\n  >>> cube([1, 2, 3, 4, 5])\n  [1.0, 8.0, 27.0, 64.0, 125.0]\n  */\nconst cube = (numbers) =>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of nay python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of nay python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object' && value!== null &&!Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrDicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean' || typeof value === 'object' && value!== null &&!Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrDictsOrLists = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean' || typeof value === 'object' && value!== null && Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrDictsOrListsOrIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean' || typeof value === 'object' && value!== null && Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrDictsOrListsOrIntegersOrFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean' || typeof value === 'object' && value!== null && Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrDictsOrListsOrIntegersOrFloatsOrStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean' || typeof value === 'object' && value!== null && Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of nay python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrDictsOrListsOrIntegersOrFloatsOrStringsOrBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean' || typeof value === 'object' && value!== null", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/23", "prompt": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen2 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen3 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen4 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen5 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen6 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen7 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen8 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen9 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  >>> strlen('abcdefg')\n  4\n  */\nconst strlen10 = (string) => {\n  let length = 0;\n  let index = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[index]) {\n      length++;\n      index++;\n    } else {\n      index = 0;\n    }\n    i++;\n  }\n  return length;\n};\n\n/* Return the length of the longest substring of a string\n  >>> strlen('abcdefg')\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor17 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_length = 0\n  const factors_length_max = 0\n  const factors_length_min = 0\n  const factors_length_sum = 0\n  const factors_length_sum_max = 0\n  const factors_length_sum_min = 0\n  const factors_length_sum_sum = 0\n  const factors_length_sum_sum_max = 0\n  const factors_length_sum_sum_min = 0\n  const factors_length_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates2(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates3(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates4(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates5(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates6(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order of elenmets left the same as in the input.\n  >>> removeDuplicates7(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  From a list of strings, remove all strings that are not in the input.\n  Keep order", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all lowercase letters replaced with uppercase.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all lowercase letters replaced with uppercase.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toSentenceCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toKebabCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseKebabCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseSnakeCaseKebabCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseSnakeCaseKebabCaseSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseSnakeCaseKebabCaseSnakeCaseSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseSnakeCaseKebabCaseSnakeCaseSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseSnakeCaseKebabCaseSnakeCaseSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase letters replaced with lowercase.\n  >>> toLowerCase('HELLO')\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  []\n  >>> filterOut(['a', 'b', 'c', 'd'], ['a', 'b', 'c'])\n  ['d']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 11]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n < 2) {\n    return false\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  30\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of perfect numbers below a given number.\n  >>> perfectNumbers(6)\n  3\n  >>> perfectNumbers(101)\n  30\n  >>> perfectNumbers(11)\n  2\n  >>> perfectNumbers(13441)\n  44\n  >>> perfectNumbers(61)\n  2\n  >>> perfectNumbers(4)\n  1\n  >>> perfectNumbers(1)\n  1\n  */\nconst perfectNumbers = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of abundant numbers below a given number.\n  >>> abundantNumbers(6)\n  3\n  >>> abundantNumbers(101)\n  30\n  >>> abundantNumbers(11)\n  2\n  >>> abundantNumbers(13441)\n  44\n  >>> abundantNumbers(61)\n  2\n  >>> abundantNumbers(4)\n  1\n  >>> abundantNumbers(1)\n  1\n  */\nconst abundantNumbers = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of abundant numbers below a given number.\n  >>> abundantNumbers(6)\n  3\n  >>> abundantNumbers(101)\n  30\n  >>> abundantNumbers(11)\n  2\n  >>> abundantNumbers(13441)\n  44\n  >>> abundantNumbers(61)\n  2\n  >>> abundantNumbers(4)\n  1\n  >>> abundantNumbers(1)\n  1\n  */\nconst abundantNumbers2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of abundant numbers below a given number.\n  >>> abundantNumbers(6)\n  3\n  >>> abundantNumbers(101)\n  30\n  >>> abundantNumbers(11)\n  2\n  >>> abundantNumbers(13441)\n  44\n  >>> abundantNumbers(61)\n  2\n  >>> abundantNumbers(4)\n  1\n  >>> abundantNumbers(1)\n  1\n  */\nconst abundantNumbers3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of abundant numbers below a given number.\n  >>> abundantNumbers(6)\n  3\n  >>> abundantNumbers(101)\n  30\n  >>> abundantNumbers(11)\n  2\n  >>> abundantNumbers(13441)\n  44\n  >>> abundantNumbers(61)\n  2\n  >>> abundantNumbers(4)\n  1\n  >>> abundantNumbers(1)\n  1\n  */\nconst abundantNumbers4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of abundant numbers below a given number.\n  >>> abundantNumbers(6)\n  3\n  >>> abundantNumbers(101)\n  30\n  >>> abundantNumbers(11)\n  2\n  >>> abundantNumbers(13441)\n  44\n  >>> abundantNumbers(61)\n  2\n  >>> abundantNumbers(4)\n  1\n  >>> abundantNumbers(1)\n  1\n  */\nconst abundantNumbers5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of abundant numbers below a given number.\n  >>> abundantNumbers(6)\n  3\n  >>> abundantNumbers", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len - 1];\n    const min = xs[0];\n    const mid = (max + min) / 2;\n    const midVal = poly(mid);\n    if (midVal === 0) {\n      return mid;\n    }\n    for (let i = 1; i < len; i += 2) {\n      const next = xs[i];\n      if (next > mid) {\n        min = mid;\n        mid = next;\n      } else {\n        max = next;\n      }\n      midVal = poly(mid);\n      if (midVal === 0) {\n        return mid;\n      }\n    }\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  const sortedIdx = [];\n  const sortedIdx2 = [];\n  const sortedIdx3 = [];\n  const sortedIdx4 = [];\n  const sortedIdx5 = [];\n  const sortedIdx6 = [];\n  const sortedIdx7 = [];\n  const sortedIdx8 = [];\n  const sortedIdx9 = [];\n  const sortedIdx10 = [];\n  const sortedIdx11 = [];\n  const sortedIdx12 = [];\n  const sortedIdx13 = [];\n  const sortedIdx14 = [];\n  const sortedIdx15 = [];\n  const sortedIdx16 = [];\n  const sortedIdx17 = [];\n  const sortedIdx18 = [];\n  const sortedIdx19 = [];\n  const sortedIdx20 = [];\n  const sortedIdx21 = [];\n  const sortedIdx22 = [];\n  const sortedIdx23 = [];\n  const sortedIdx24 = [];\n  const sortedIdx25 = [];\n  const sortedIdx26 = [];\n  const sortedIdx27 = [];\n  const sortedIdx28 = [];\n  const sortedIdx29 = [];\n  const sortedIdx30 = [];\n  const sortedIdx31 = [];\n  const sortedIdx32 = [];\n  const sortedIdx33 = [];\n  const sortedIdx34 = [];\n  const sortedIdx35 = [];\n  const sortedIdx36 = [];\n  const sortedIdx37 = [];\n  const sortedIdx38 = [];\n  const sortedIdx39 = [];\n  const sortedIdx40 = [];\n  const sortedIdx41 = [];\n  const sortedIdx42 = [];\n  const sortedIdx43 = [];\n  const sortedIdx44 = [];\n  const sortedIdx45 = [];\n  const sortedIdx46 = [];\n  const sortedIdx47 = [];\n  const sortedIdx48 = [];\n  const sortedIdx49 = [];\n  const sortedIdx50 = [];\n  const sortedIdx51 = [];\n  const sortedIdx52 = [];\n  const sortedIdx53 = [];\n  const sortedIdx54 = [];\n  const sortedIdx55 = [];\n  const sortedIdx56 = [];\n  const sortedIdx57 = [];\n  const sortedIdx58 = [];\n  const sortedIdx59 = [];\n  const sortedIdx60 = [];\n  const sortedIdx61 = [];\n  const sortedIdx62 = [];\n  const sortedIdx63 = [];\n  const sortedIdx64 = [];\n  const sortedIdx65 = [];\n  const sortedIdx66 = [];\n  const sortedIdx67 = [];\n  const sortedIdx68 = [];\n  const sortedIdx69 = [];\n  const sortedIdx70 = [];\n  const sortedIdx71 = [];\n  const sortedIdx72 = [];\n  const sortedIdx73 = [];\n  const sortedIdx74 = [];\n  const sortedIdx75 = [];\n  const sortedIdx76 = [];\n  const sortedIdx77 = [];\n  const sortedIdx78 = [];\n  const sortedIdx79 = [];\n  const sortedIdx80 = [];\n  const sortedIdx81 = [];\n  const sortedIdx82 = [];\n  const sortedIdx83 = [];\n  const sortedIdx84 = [];\n  const sortedIdx85 = [];\n  const sortedIdx86 = [];\n  const sortedIdx87 = [];\n  const sortedIdx88 = [];\n  const sortedIdx89 = [];\n  const sortedIdx90 = [];\n  const sortedIdx91 = [];\n  const sortedIdx92 = [];\n  const sortedIdx93 = [];\n  const sortedIdx94 = [];\n  const sortedIdx95 = [];\n  const sortedIdx96 = [];\n  const sortedIdx97 = [];\n  const sortedIdx98 = [];\n  const sortedIdx99 = [];\n  const sortedIdx100 = [];\n  const sortedIdx101 = [];\n  const sortedIdx102 = [];\n  const sortedIdx103 = [];\n  const sortedIdx104 = [];\n  const sortedIdx105 = [];\n  const sortedIdx106 = [];\n  const sortedIdx107 = [];\n  const sortedIdx108 = [];\n  const sortedIdx109 = [];\n  const sortedIdx110 = [];\n  const sortedIdx111 = [];\n  const sortedIdx112 = [];\n  const sortedIdx113 = [];\n  const sortedIdx114 = [];\n  const sortedIdx115 = [];\n  const sortedIdx116 = [];\n  const sortedIdx117 = [];\n  const sortedIdx118 = [];\n  const sortedIdx119 = [];\n  const sortedIdx120 = [];\n  const sortedIdx121 = [];\n  const sortedIdx122 = [];\n  const sortedIdx123 = [];\n  const sortedIdx124 = [];\n  const sortedIdx125 = [];\n  const sortedIdx126 = [];\n  const sortedIdx127 = [];\n  const sortedIdx128 = [];\n  const sortedIdx129 = [];\n  const sortedIdx130 = [];\n  const sortedIdx131 = [];\n  const sortedIdx132 = [];\n  const sortedIdx133 = [];\n  const sortedIdx134 = [];\n  const sortedIdx135 = [];\n  const sortedIdx136 = [];\n  const sortedIdx137 = [];\n  const sortedIdx138 = [];\n  const sortedIdx139 = [];\n  const sortedIdx140 = [];\n  const sortedIdx141 = [];\n  const sortedIdx142 = [];\n  const sortedIdx143 = [];\n  const sortedIdx144 = [];\n  const sortedIdx145 = [];\n  const sortedIdx146 = [];\n  const sortedIdx147 = [];\n  const sortedIdx148 = [];\n  const sortedIdx149 = [];\n  const sortedIdx150 = [];\n  const sortedIdx151 = [];\n  const sortedIdx152 = [];\n  const sortedIdx153 = [];\n  const sortedIdx154 = [];\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  const isUnique = (e) => {\n    return uniqueList.indexOf(e) === -1;\n  };\n  for (let i = 0; i < l.length; i++) {\n    if (isUnique(l[i])) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = Math.floor(n / divisors[0])\n  const remainder = n % divisors[0]\n  const divisorCount = divisor === 0? 0 : divisorCount(divisor)\n  const remainderCount = remainder === 0? 0 : remainderCount(remainder)\n  return divisorCount + remainderCount\n}\n\nconst divisorCount = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += n % 10 === 7\n    n = Math.floor(n / 10)\n  }\n  return count\n}\n\nconst remainderCount = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += n % 10 === 7\n    n = Math.floor(n / 10)\n  }\n  return count\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...even,...odd].sort();\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2] + group[0] + group[3]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2] + group[0] + group[3] + group[4]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2] + group[0] + group[3] + group[4] + group[5]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, caclulate Standard Deviation\n  of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, caclulate Variance\n  of this dataset.\n  Variance is the average of the squared differences:\n  variance = average(x - x_mean)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Geometric Mean of this dataset.\n  Geometric Mean is the product of the reciprocals of the\n  numbers in the dataset.\n  >>> geometricMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst geometricMean = (numbers) => {\n  const reciprocal = (x) => 1 / x;\n  return mean(reciprocal(numbers));\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Harmonic Mean of this dataset.\n  Harmonic Mean is the sum of the reciprocals of the\n  numbers in the dataset.\n  >>> harmonicMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst harmonicMean = (numbers) => {\n  const reciprocal = (x) => 1 / x;\n  return sum(reciprocal(numbers));\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Median of this dataset.\n  Median is the middle number of the dataset.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Mode of this dataset.\n  Mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Percentile of this dataset.\n  Percentile is the nth number in the dataset.\n  >>> percentile([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  >>> percentile([1.0, 2.0, 3.0, 4.0], 0.8)\n  3.0\n  */\nconst percentile = (numbers, percentile) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half + Math.floor(percentile * (numbers.length - half))];\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Quartile of this dataset.\n  Quartile is the nth number in the dataset.\n  >>> quartile([1.0, 2.0, 3.0, 4.0], 0.25)\n  2.0\n  >>> quartile([1.0, 2.0, 3.0, 4.0], 0.75)\n  3.0\n  */\nconst quartile = (numbers, quartile) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half + Math.floor(quartile * (numbers.length - half))];\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Quantile of this dataset.\n  Quantile is the nth number in the dataset.\n  >>> quantile([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  >>> quantile([1.0, 2.0, 3.0, 4.0], 0.8)\n  3.0\n  */\nconst quantile = (numbers, quantile) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half + Math.floor(quantile * (numbers.length - half))];\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Standard Deviation of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, caclulate the\n  Variance of this dataset.\n  Variance is the average of the squared differences:\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision2 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision3 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision4 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision5 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision6 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision7 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision8 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision9 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision10 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x < cars[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carRaceCollision11 = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const new", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToOne takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 1\n}\n\n/*\n  pairsSumToTwo takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 2\n}\n\n/*\n  pairsSumToThree takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 3\n}\n\n/*\n  pairsSumToFour takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 4\n}\n\n/*\n  pairsSumToFive takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 5\n}\n\n/*\n  pairsSumToSix takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 6\n}\n\n/*\n  pairsSumToSeven takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 7\n}\n\n/*\n  pairsSumToEight takes a list of nitegers as", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x\n  let result = ''\n  while (num > 0) {\n    result = (num % base).toString() + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than or equal to 10')\n  }\n  let num = x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangle", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpn = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modpn(3, 5)\n  3\n  >>> modpn(1101, 101)\n  2\n  >>> modpn(0, 101)\n  1\n  >>> modpn(3, 11)\n  8\n  >>> modpn(100, 101)\n  1\n  */\nconst modpnp = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modpnp(3, 5)\n  3\n  >>> modpnp(1101, 101)\n  2\n  >>> modpnp(0, 101)\n  1\n  >>> modpnp(3, 11)\n  8\n  >>> modpnp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2n = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp2n(3, 5)\n  3\n  >>> modp2n(1101, 101)\n  2\n  >>> modp2n(0, 101)\n  1\n  >>> modp2n(3, 11)\n  8\n  >>> modp2n(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp3n = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp3n(3, 5)\n  3\n  >>> modp3n(1101, 101)\n  2\n  >>> modp3n(0, 101)\n  1\n  >>> modp3n(3, 11)\n  8\n  >>> modp3n(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp4n = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp4n(3, 5)\n  3\n  >>> modp4n(1101, 101)\n  2\n  >>> modp4n(0, 101)\n  1\n  >>> modp4n(3, 11)\n  8\n  >>> modp4n(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp5n = (n, p) => {\n  let i = 1;\n  while (n >= p) {\n    n -= p;\n    i++;\n  }\n  return i;\n};\n\n/*Return the number of digits in n.\n  >>> modp5n(3, 5)\n  3\n  >>> modp5n(1101, 101)\n  2\n  >>> modp5n(0, 101)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let index = 0\n  let length = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  let m = 0\n  while (i < length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      j = 1\n      i++\n      continue\n    }\n    if (j === 1) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 2) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 3) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 4) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 5) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 6) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 7) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 8) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 9) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 10) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 11) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 12) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 13) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 14) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 15) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 16) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 17) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 18) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 19) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 20) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 21) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 22) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 23) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 24) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 25) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 26) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 27) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 28) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 29) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 30) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 31) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 32) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 33) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 34) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 35) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 36) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 37) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 38) {\n      result.push(numbers[i])\n      j = 0\n      i++\n      continue\n    }\n    if (j === 39) {\n      result.push(numbers[i])\n      j =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.toLowerCase();\n  const newTextArray = newText.split('');\n  const newTextArrayLength = newTextArray.length;\n  let i = 0;\n  while (i < newTextArrayLength) {\n    if (vowels.indexOf(newTextArray[i]) > -1) {\n      newTextArray.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return newTextArray.join('');\n};\n\n/*\n  removePunctuation is a function that takes string and rteurns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '!', '?', ';', ':', '-', '_', '\\'', '\\\"', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 5)\n  false\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  return l.every(x => x === t);\n};\n\n/*Return true if all numbers in the list l are not equal to threshold t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every(x => x!== t);\n};\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> lessThanThreshold([1, 2, 4, 10], 5)\n  false\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greaterThanThreshold([1, 2, 4, 10], 5)\n  false\n  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n  >>> greaterThanOrEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l are not between threshold t1 and t2.\n  >>> notBetweenThreshold([1, 2, 4, 10], 5, 100)\n  false\n  >>> notBetweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst notBetweenThreshold = (l, t1, t2) => {\n  return l.every(x => x < t1 || x > t2);\n};\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 5)\n  false\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  return l.every(x => x === t);\n};\n\n/*Return true if all numbers in the list l are not equal to threshold t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every(x => x!== t);\n};\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> lessThanThreshold([1, 2, 4, 10], 5)\n  false\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are greater than threshold", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  6\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  1157\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.4142135623730951\n  >>> sqrt(5)\n  2.2360679774997897\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(5)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*\n  >>> floor(2)\n  2\n  >>> floor(5)\n  5\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*\n  >>> ceil(2)\n  3\n  >>> ceil(5)\n  6\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*\n  >>> round(2)\n  2\n  >>> round(5)\n  5\n  */\nconst min = (x, y) => {\n  return Math.min(x, y);\n};\n\n/*\n  >>> min(2, 3)\n  2\n  >>> min(5, 7)\n  5\n  */\nconst max = (x, y) => {\n  return Math.max(x, y);\n};\n\n/*\n  >>> max(2, 3)\n  3\n  >>> max(5, 7)\n  7\n  */\nconst sin = (x) => {\n  return Math.sin(x);\n};\n\n/*\n  >>> sin(2)\n  0.9092974268265856\n  >>> sin(5)\n  0.8726646259971647\n  */\nconst cos = (x) => {\n  return Math.cos(x);\n};\n\n/*\n  >>> cos(2)\n  0.5403023058681397\n  >>> cos(5)\n  0.38268343236508978\n  */\nconst tan = (x) => {\n  return Math.tan(x);\n};\n\n/*\n  >>> tan(2)\n  1.5574077246549022\n  >>> tan(5)\n  1.4142135623730950\n  */\nconst asin = (x) => {\n  return Math.asin(x);\n};\n\n/*\n  >>> asin(2)\n  0.5235987755982989\n  >>> asin(5)\n  1.5707963267948966\n  */\nconst acos = (x) => {\n  return Math.acos(x);\n};\n\n/*\n  >>> acos(2)\n  0.5235987755982989\n  >>> acos(5)\n  1.5707963267948966\n  */\nconst atan = (x) => {\n  return Math.atan(x);\n};\n\n/*\n  >>> atan(2)\n  0.78539816339744828\n  >>> atan(5)\n  1.10714871779409050\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*\n  >>> exp(2)\n  7.3890560989306502\n  >>> exp(5)\n  2.718281828459045\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  >>> log(2)\n  0.6931471805599453\n  >>> log(5)\n  1.6094379124341003\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*\n  >>> log10(2)\n  0.3010299956639812\n  >>> log10(5)\n  1.0986122886681098\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.4142135623730950\n  >>> sqrt(5)\n  2.2360679774997897\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  1157\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.4142135623730950\n  >>> sqrt(5)\n  2.2360679774997897\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  1157\n  */\nconst sqrt = (x) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce')\n  false\n  >>> same('abcd', 'abce', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce', 'abce', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return catalan(n - 1) + catalan(n - 2)\n}\n\n/*Return n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return harmonic(n - 1) + harmonic(n - 2)\n}\n\n/*Return n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return euler(n - 1) + euler(n - 2)\n}\n\n/*Return n-th Golden ratio.\n  >>> golden(10)\n  55\n  >>> golden(1)\n  1\n  >>> golden(8)\n  21\n  */\nconst golden = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return golden(n - 1) + golden(n - 2)\n}\n\n/*Return n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return catalan2(n - 1) + catalan2(n - 2)\n}\n\n/*Return n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return harmonic2(n - 1) + harmonic2(n - 2)\n}\n\n/*Return n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return euler2(n - 1) + euler2(n - 2)\n}\n\n/*Return n-th Golden ratio.\n  >>> golden(10)\n  55\n  >>> golden(1)\n  1\n  >>> golden(8)\n  21\n  */\nconst golden2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return golden2(n - 1) + golden2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci2(n - 1) + fibonacci2(n - 2)\n}\n\n/*Return n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return catalan3(n - 1) + catalan3(n - 2)\n}\n\n/*Return n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return harmonic3(n - 1) + harmonic3(n - 2)\n}\n\n/*Return n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return euler3(n - 1) + euler3(n - 2)\n}\n\n/*Return n-th Golden ratio.\n  >>> golden(10)\n  55\n  >>> golden(1)\n  1\n  >>> golden(8)\n  21\n  */\nconst golden3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return golden3(n - 1) + golden3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    if (char === \"<\") {\n      stack.push(char);\n    } else if (char === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== \">\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the number of brackets in the string.\n  The brackets must be \"<\" and \">\".\n\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<\")\n  1\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] < sorted[1] || sorted[0] > sorted[2] || sorted[1] < sorted[2];\n};\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = set1.intersection(set2);\n  const union = set1.union(set2);\n  return intersection.size === union.size? intersection.values() : [];\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if (current_char === ')') {\n      paren_level -= 1\n      if (paren_level === 0) {\n        paren_stack.pop()\n      }\n    }\n    i += 1\n  }\n  return paren_stack\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if (current_char === ')') {\n      paren_level -= 1\n      if (paren_level === 0) {\n        paren_stack.pop()\n      }\n    }\n    i += 1\n  }\n  return paren_stack\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if (current_char === ')') {\n      paren_level -= 1\n      if (paren_level === 0) {\n        paren_stack.pop()\n      }\n    }\n    i += 1\n  }\n  return paren_stack\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if (current_char === ')') {\n      paren_level -= 1\n      if (paren_level === 0) {\n        paren_stack.pop()\n      }\n    }\n    i += 1\n  }\n  return paren_stack\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if (current_char === ')') {\n      paren_level -= 1\n      if (paren_level === 0) {\n        paren_stack.pop()\n      }\n    }\n    i += 1\n  }\n  return paren_stack\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if (current_char === ')') {\n      paren_level -= 1\n      if (paren_level === 0) {\n        paren_stack.pop()\n      }\n    }\n    i += 1\n  }\n  return paren_stack\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens7 = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_string_length = paren_string.length\n  let i = 0\n  while (i < paren_string_length) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_stack.push(paren_level)\n      paren_level += 1\n    } else if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(brackets[i])\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the number of brackets in the string.\n\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"(()()\")\n  2\n  >>> countBrackets(\"(()()()\")\n  2\n  >>> countBrackets(\"()()()\")\n  2\n  >>> countBrackets(\"()()()\")\n  2\n  >>> countBrackets(\"()()()()\")\n  2\n  >>> countBrackets(\"()()()()\")\n  2\n  >>> countBrackets(\"()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()()()()()\")\n  2\n  >>> countBrackets(\"()()()()", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": false, "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return []\n  }\n  const dxs = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    dxs.unshift(xs[i] * (len - i))\n  }\n  return dxs\n}\n\n/**\n  * Return the sum of two polynomials.\n  * @param {Array} xs1\n  * @param {Array} xs2\n  * @return {Array}\n  * @example\n  * sum([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  * // => [1, 5, 9, 14, 20]\n  */\nconst sum = (xs1, xs2) => {\n  const len1 = xs1.length\n  const len2 = xs2.length\n  const len = len1 + len2\n  const dxs = new Array(len)\n  for (let i = 0; i < len; i++) {\n    dxs[i] = 0\n  }\n  for (let i = 0; i < len1; i++) {\n    dxs[i] += xs1[i]\n  }\n  for (let i = 0; i < len2; i++) {\n    dxs[i + len1] += xs2[i]\n  }\n  return dxs\n}\n\n/**\n  * Return the difference of two polynomials.\n  * @param {Array} xs1\n  * @param {Array} xs2\n  * @return {Array}\n  * @example\n  * difference([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  * // => [1, 5, 9, 14, 20]\n  */\nconst difference = (xs1, xs2) => {\n  const len1 = xs1.length\n  const len2 = xs2.length\n  const len = len1 + len2\n  const dxs = new Array(len)\n  for (let i = 0; i < len; i++) {\n    dxs[i] = 0\n  }\n  for (let i = 0; i < len1; i++) {\n    dxs[i] -= xs1[i]\n  }\n  for (let i = 0; i < len2; i++) {\n    dxs[i + len1] -= xs2[i]\n  }\n  return dxs\n}\n\n/**\n  * Return the product of two polynomials.\n  * @param {Array} xs1\n  * @param {Array} xs2\n  * @return {Array}\n  * @example\n  * product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  * // => [2, 6, 12, 20, 30]\n  */\nconst product = (xs1, xs2) => {\n  const len1 = xs1.length\n  const len2 = xs2.length\n  const len = len1 + len2\n  const dxs = new Array(len)\n  for (let i = 0; i < len; i++) {\n    dxs[i] = 0\n  }\n  for (let i = 0; i < len1; i++) {\n    dxs[i] *= xs1[i]\n  }\n  for (let i = 0; i < len2; i++) {\n    dxs[i + len1] *= xs2[i]\n  }\n  return dxs\n}\n\n/**\n  * Return the quotient of two polynomials.\n  * @param {Array} xs1\n  * @param {Array} xs2\n  * @return {Array}\n  * @example\n  * quotient([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  * // => [1, 2, 3, 4, 5]\n  */\nconst quotient = (xs1, xs2) => {\n  const len1 = xs1.length\n  const len2 = xs2.length\n  const len = len1 + len2\n  const dxs = new Array(len)\n  for (let i = 0; i < len; i++) {\n    dxs[i] = 0\n  }\n  for (let i = 0; i < len1; i++) {\n    dxs[i] /= xs1[i]\n  }\n  for (let i = 0; i < len2; i++) {\n    dxs[i + len1] /= xs2[i]\n  }\n  return dxs\n}\n\nexport {\n  add,\n  difference,\n  divide,\n  product,\n  quotient,\n  sum\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice()\n  const start = shift % len\n  const end = len - (shift % len)\n  const reverse = start < end\n  const reversed = reverse? result.reverse() : result\n  return reversed.slice(start, end)\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverse = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString2 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString3 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString4 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString5 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString6 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString7 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString8 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString9 = (str) => {\n  const len = str.length\n  const result = \"\"\n  for (let i = len - 1; i >= 0; i--) {\n    result += str[i]\n  }\n  return result\n}\n\n/*\n  Given a string, return the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \")\n  const apple = arr[0]\n  const orange = arr[1]\n  const mango = arr[2]\n  const appleCount = Number(apple)\n  const orangeCount = Number(orange)\n  const mangoCount = Number(mango)\n  const total = appleCount + orangeCount + mangoCount\n  return total - appleCount - orangeCount - mangoCount\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples adn 3 oranges\", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [smallest_value, smallest_index] = find_smallest_value(arr)\n  if (smallest_value === 0) {\n    return []\n  }\n  return [smallest_value, smallest_index]\n}\n\nconst find_smallest_value = (arr) => {\n  const [smallest_value, smallest_index] = [Infinity, -1]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallest_value > arr[i]) {\n        smallest_value = arr[i]\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nexport default search;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n  const sorted = lst.slice()\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const odd = sorted.slice(0, sorted.length / 2)\n  const even = sorted.slice(sorted.length / 2)\n  return odd.concat(even.reverse())\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b * c) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w;\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n  if (q.length === 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n  if (q.length === 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w;\n  if (q.length === 10) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n  if (q.length === 11) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w;\n  if (q.length === 12) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] <= w;\n  if (q.length === 13) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] <= w;\n  if (q.length === 14) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] <= w;\n  if (q.length === 15) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] <= w;\n  if (q.length === 16) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] <= w;\n  if (q.length === 17) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] <= w;\n  if (q.length === 18) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] <= w;\n  if (q.length === 19) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] <= w;\n  if (q.length === 20) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n        break\n      }\n    }\n  }\n  return result\n}\n\nexport default totalMatch\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime2 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime3 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime4 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime5 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime6 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime7 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime8 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime9 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime10 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime11 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime12 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime13 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime14 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime15 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime16 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime17 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime18 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime19 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime20 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime21 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime22 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime23 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst isMultiplyPrime24 = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const num = prime.reduce((acc, p) => acc * p, 1)\n  return num === a\n}\n\nconst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": false, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0;\n  for (let i = 0; i < num.length; i++) {\n    res += num[i] === 'A'? 1 : num[i] === 'B'? 2 : num[i] === 'C'? 3 : num[i] === 'D'? 4 : num[i] === 'E'? 5 : num[i] === 'F'? 6 : num[i] === '0'? 0 : num[i] === '1'? 1 : num[i] === '2'? 2 : num[i] === '3'? 3 : num[i] === '4'? 4 : num[i] === '5'? 5 : num[i] === '6'? 6 : num[i] === '7'? 7 : num[i] === '8'? 8 : num[i] === '9'? 9 : num[i] === 'a'? 10 : num[i] === 'b'? 11 : num[i] === 'c'? 12 : num[i] === 'd'? 13 : num[i] === 'e'? 14 : num[i] === 'f'? 15 : 0;\n  }\n  return res;\n};\n\nconst isPrime = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      res++;\n    }\n  }\n  return res === 0;\n};\n\nconst primeNubmer = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer2 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer3 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer4 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer5 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer6 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer7 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer8 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer9 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer10 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer11 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer12 = (num) => {\n  let res = 0;\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      res++;\n    }\n  }\n  return res;\n};\n\nconst getPrimeNubmer13 = (num) => {\n  let res = 0;\n  for (let i = 2;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  let binaryNumber = 0\n  for (let i = 0; i < decimal.length; i++) {\n    binaryNumber = binaryNumber * 2 + (decimal[i] - 48)\n  }\n  for (let i = 0; i < binaryNumber.toString(2).length; i++) {\n    binary += '1'\n  }\n  return 'db' + binary + 'db'\n}\n\n/*\n  You will be given a number in binary form nad your task is to convert it to decimal form.\n  The function should return a tsring, with each chraacter erpresenting a decimal number.\n\n  Examples:\n  binaryToDecimal(db1111db)   # returns \"15\"\n  binaryToDecimal(db100000db) # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = ''\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1\n    }\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in binary form nad your task is to convert it to hexadecimal form.\n  The function should return a tsring, with each chraacter erpresenting a hexadecimal number.\n\n  Examples:\n  binaryToHexadecimal(db1111db)   # returns \"3F\"\n  binaryToHexadecimal(db100000db) # returns \"7A\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  const hexadecimal = ''\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      hexadecimal += '1'\n    } else {\n      hexadecimal += '0'\n    }\n  }\n  return hexadecimal\n}\n\n/*\n  You will be given a number in hexadecimal form nad your task is to convert it to binary form.\n  The function should return a tsring, with each chraacter erpresenting a binary number.\n\n  Examples:\n  hexadecimalToBinary(3F)   # returns \"db1111db\"\n  hexadecimalToBinary(7A)   # returns \"db100000db\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  const binary = ''\n  for (let i = 0; i < hexadecimal.length; i++) {\n    if (hexadecimal[i] === '1') {\n      binary += '1'\n    } else {\n      binary += '0'\n    }\n  }\n  return binary\n}\n\n/*\n  You will be given a number in hexadecimal form nad your task is to convert it to decimal form.\n  The function should return a tsring, with each chraacter erpresenting a decimal number.\n\n  Examples:\n  hexadecimalToDecimal(3F)   # returns \"15\"\n  hexadecimalToDecimal(7A)   # returns \"32\"\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  const decimal = ''\n  for (let i = 0; i < hexadecimal.length; i++) {\n    if (hexadecimal[i] === '1') {\n      decimal += 1\n    }\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in decimal form nad your task is to convert it to hexadecimal form.\n  The function should return a tsring, with each chraacter erpresenting a hexadecimal number.\n\n  Examples:\n  decimalToHexadecimal(15)   # returns \"3F\"\n  decimalToHexadecimal(32)   # returns \"7A\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  const hexadecimal = ''\n  for (let i = 0; i < decimal.length; i++) {\n    hexadecimal += (decimal[i] + 48).toString(16)\n  }\n  return hexadecimal\n}\n\n/*\n  You will be given a number in decimal form nad your task is to convert it to octal form.\n  The function should return a tsring, with each chraacter erpresenting a octal number.\n\n  Examples:\n  decimalToOctal(15)   # returns \"377\"\n  decimalToOctal(32)   # returns \"740\"\n  */\nconst decimalToOctal = (decimal) => {\n  const octal = ''\n  for (let i = 0; i < decimal.length; i++) {\n    octal += (decimal[i] + 48).toString(8)\n  }\n  return octal\n}\n\n/*\n  You will be given a number in octal form nad your task is to convert it to decimal form.\n  The function should return a tsring, with each chraacter erpresenting a decimal number.\n\n  Examples:\n  octalToDecimal(377)   # returns \"15\"\n  octalToDecimal(740)   # returns \"32\"\n  */\nconst octalToDecimal = (octal) => {\n  const decimal = ''\n  for (let i = 0; i < octal.length; i++) {\n    decimal += (octal[i] - 48).toString(10)\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in octal form nad your task is to convert it to hexadecimal form.\n  The function should return a tsring, with each chraacter erpresenting a hexadecimal number.\n\n  Examples:\n  octalToH", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const prod = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, prod]\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct2 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct3 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct4 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct5 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct6 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct7 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct8 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct9 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct10 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct11 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct12 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[0] + num, acc[1] * num], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 24), (20, 24), (25, 24)]\n  */\nconst sumProduct13 = (numbers) => {\n  return numbers.reduce((acc, num) => [acc[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      count++;\n    }\n  }\n  return count >= 3;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.isArray(grades)? grades : [grades];\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayAverage = gradesArraySum / gradesArrayLength;\n  const gradesArrayMax = gradesArray.reduce((a, b) => a > b? a : b);\n  const gradesArrayMin = gradesArray.reduce((a, b) => a < b? a : b);\n  const gradesArrayMedian = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayStandardDeviation = Math.sqrt(\n    (gradesArray.reduce((a, b) => a * a + b * b) / gradesArrayLength) -\n      (gradesArraySum / gradesArrayLength) * (gradesArraySum / gradesArrayLength)\n  );\n  const gradesArrayStandardDeviationPercent =\n    gradesArrayStandardDeviation / gradesArrayAverage;\n  const gradesArrayStandardDeviationPercentMin =\n    gradesArrayStandardDeviationPercent.reduce(\n      (a, b) => a < b? a : b\n    );\n  const gradesArrayStandardDeviationPercentMax =\n    gradesArrayStandardDeviationPercent.reduce(\n      (a, b) => a > b? a : b\n    );\n  const gradesArrayStandardDeviationPercentMedian =\n    gradesArrayStandardDeviationPercent.reduce(\n      (a, b) => a + b\n    );\n  const gradesArrayStandardDeviationPercentMinMedian =\n    gradesArrayStandardDeviationPercentMin +\n    gradesArrayStandardDeviationPercentMedian;\n  const gradesArrayStandardDeviationPercentMaxMedian =\n    gradesArrayStandardDeviationPercentMax +\n    gradesArrayStandardDeviationPercentMedian;\n  const gradesArrayStandardDeviationPercentMinMaxMedian =\n    gradesArrayStandardDeviationPercentMinMedian +\n    gradesArrayStandardDeviationPercentMaxMedian;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMin =\n    gradesArrayStandardDeviationPercentMinMaxMedian -\n    gradesArrayStandardDeviationPercentMinMedian;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMax =\n    gradesArrayStandardDeviationPercentMinMaxMedian +\n    gradesArrayStandardDeviationPercentMaxMedian;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMax =\n    gradesArrayStandardDeviationPercentMinMaxMedianMin +\n    gradesArrayStandardDeviationPercentMaxMedianMax;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMax -\n    gradesArrayStandardDeviationPercentMinMaxMedianMax;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMax =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMax +\n    gradesArrayStandardDeviationPercentMaxMedianMax;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMax -\n    gradesArrayStandardDeviationPercentMinMaxMedianMaxMax;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMax =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMax +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMax;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMax -\n    gradesArrayStandardDeviationPercentMinMaxMedianMaxMaxMax;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMinMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMinMinMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMinMinMinMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMinMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMinMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMinMinMinMinMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMinMinMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMinMinMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMinMinMinMinMinMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMinMinMin =\n    gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMaxMaxMinMinMinMinMin +\n    gradesArrayStandardDeviationPercentMaxMedianMaxMaxMaxMinMinMinMinMinMin;\n  const gradesArrayStandardDeviationPercentMinMaxMedianMinMaxMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0\n  let prime = true\n  while (prime) {\n    prime = false\n    for (i = 2; i < string.length; i++) {\n      if (string.charAt(i) === string.charAt(i - 1)) {\n        prime = true\n        break\n      }\n    }\n  }\n  return prime\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string.\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 8\n  characters('kittens') == 7\n  characters('orange') == 0\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase.\n  Examples\n  lowercase('Hello') == 5\n  lowercase('abcdcba') == 8\n  lowercase('kittens') == 7\n  lowercase('orange') == 0\n  */\nconst lowercase = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).toLowerCase() === string.charAt(i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are uppercase.\n  Examples\n  uppercase('Hello') == 5\n  uppercase('abcdcba') == 8\n  uppercase('kittens') == 7\n  uppercase('orange') == 0\n  */\nconst uppercase = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).toUpperCase() === string.charAt(i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst both = (string) => {\n  return lowercase(string) + uppercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothLowerUpper = (string) => {\n  return lowercase(string) + uppercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothUpperLower = (string) => {\n  return uppercase(string) + lowercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothLowerUpperAndUpperLower = (string) => {\n  return lowercase(string) + uppercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothUpperLowerAndLowerUpper = (string) => {\n  return uppercase(string) + lowercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothLowerUpperAndLowerUpper = (string) => {\n  return lowercase(string) + uppercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothUpperLowerAndUpperLower = (string) => {\n  return uppercase(string) + lowercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothLowerUpperAndLowerLower = (string) => {\n  return lowercase(string) + lowercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are lowercase and uppercase.\n  Examples\n  both('Hello') == 5\n  both('abcdcba') == 8\n  both('kittens') == 7\n  both('orange') == 0\n  */\nconst bothUpperLowerAndUpperUpper = (string) => {\n  return uppercase(string) + uppercase(string)\n}\n\n/*\n  Write a function that takes a string and returns the number of", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(100))\nconsole.log(startsOneEnds(1000))\nconsole.log(startsOneEnds(10000))\nconsole.log(startsOneEnds(100000))\nconsole.log(startsOneEnds(1000000))\nconsole.log(startsOneEnds(10000000))\nconsole.log(startsOneEnds(100000000))\nconsole.log(startsOneEnds(1000000000))\nconsole.log(startsOneEnds(10000000000))\nconsole.log(startsOneEnds(100000000000))\nconsole.log(startsOneEnds(1000000000000))\nconsole.log(startsOneEnds(10000000000000))\nconsole.log(startsOneEnds(100000000000000))\nconsole.log(startsOneEnds(1000000000000000))\nconsole.log(startsOneEnds(1000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(st", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 2? digit : 0);\n  const sum = digits.reduce((a, b) => a + b);\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const ascii = char.charCodeAt(0)\n      const newChar = String.fromCharCode(ascii + 1)\n      newWord.push(newChar)\n    }\n    newWords.push(newWord.join(' '))\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow2 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow3 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow4 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow5 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow6 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow7 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow8 = (lst, x) => {\n  const lst = lst.slice()\n  const row = []\n  const col = []\n  const x = x || 0\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n    i++\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getRow9 = (lst,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 1) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_length = alphabet.length;\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let alphabet_shift = 2;\n  let alphabet_shift_length = alphabet_length * alphabet_shift;\n  let alphabet_shift_length_half = alphabet_shift_length / 2;\n  let alphabet_shift_half = alphabet_shift / 2;\n  let alphabet_shift_half_length = alphabet_shift_length_half;\n  let alphabet_shift_half_length_half = alphabet_shift_half_length / 2;\n  let alphabet_shift_half_length_half_half = alphabet_shift_half_length_half / 2;\n  let alphabet_shift_half_length_half_half_half = alphabet_shift_half_length_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half = alphabet_shift_half_length_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half / 2;\n  let alphabet_shift_half_length_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_shift", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const regex2 = /^[\\?\\.]/\n  const regex3 = /^[!\\.]/\n  const regex4 = /^[\\.\\?]/\n  const regex5 = /^[\\.\\!\\?]/\n  const regex6 = /^[\\.\\?\\!]/\n  const regex7 = /^[\\.\\?\\!]/\n  const regex8 = /^[\\.\\?\\!]/\n  const regex9 = /^[\\.\\?\\!]/\n  const regex10 = /^[\\.\\?\\!]/\n  const regex11 = /^[\\.\\?\\!]/\n  const regex12 = /^[\\.\\?\\!]/\n  const regex13 = /^[\\.\\?\\!]/\n  const regex14 = /^[\\.\\?\\!]/\n  const regex15 = /^[\\.\\?\\!]/\n  const regex16 = /^[\\.\\?\\!]/\n  const regex17 = /^[\\.\\?\\!]/\n  const regex18 = /^[\\.\\?\\!]/\n  const regex19 = /^[\\.\\?\\!]/\n  const regex20 = /^[\\.\\?\\!]/\n  const regex21 = /^[\\.\\?\\!]/\n  const regex22 = /^[\\.\\?\\!]/\n  const regex23 = /^[\\.\\?\\!]/\n  const regex24 = /^[\\.\\?\\!]/\n  const regex25 = /^[\\.\\?\\!]/\n  const regex26 = /^[\\.\\?\\!]/\n  const regex27 = /^[\\.\\?\\!]/\n  const regex28 = /^[\\.\\?\\!]/\n  const regex29 = /^[\\.\\?\\!]/\n  const regex30 = /^[\\.\\?\\!]/\n  const regex31 = /^[\\.\\?\\!]/\n  const regex32 = /^[\\.\\?\\!]/\n  const regex33 = /^[\\.\\?\\!]/\n  const regex34 = /^[\\.\\?\\!]/\n  const regex35 = /^[\\.\\?\\!]/\n  const regex36 = /^[\\.\\?\\!]/\n  const regex37 = /^[\\.\\?\\!]/\n  const regex38 = /^[\\.\\?\\!]/\n  const regex39 = /^[\\.\\?\\!]/\n  const regex40 = /^[\\.\\?\\!]/\n  const regex41 = /^[\\.\\?\\!]/\n  const regex42 = /^[\\.\\?\\!]/\n  const regex43 = /^[\\.\\?\\!]/\n  const regex44 = /^[\\.\\?\\!]/\n  const regex45 = /^[\\.\\?\\!]/\n  const regex46 = /^[\\.\\?\\!]/\n  const regex47 = /^[\\.\\?\\!]/\n  const regex48 = /^[\\.\\?\\!]/\n  const regex49 = /^[\\.\\?\\!]/\n  const regex50 = /^[\\.\\?\\!]/\n  const regex51 = /^[\\.\\?\\!]/\n  const regex52 = /^[\\.\\?\\!]/\n  const regex53 = /^[\\.\\?\\!]/\n  const regex54 = /^[\\.\\?\\!]/\n  const regex55 = /^[\\.\\?\\!]/\n  const regex56 = /^[\\.\\?\\!]/\n  const regex57 = /^[\\.\\?\\!]/\n  const regex58 = /^[\\.\\?\\!]/\n  const regex59 = /^[\\.\\?\\!]/\n  const regex60 = /^[\\.\\?\\!]/\n  const regex61 = /^[\\.\\?\\!]/\n  const regex62 = /^[\\.\\?\\!]/\n  const regex63 = /^[\\.\\?\\!]/\n  const regex64 = /^[\\.\\?\\!]/\n  const regex65 = /^[\\.\\?\\!]/\n  const regex66 = /^[\\.\\?\\!]/\n  const regex67 = /^[\\.\\?\\!]/\n  const regex68 = /^[\\.\\?\\!]/\n  const regex69 = /^[\\.\\?\\!]/\n  const regex70 = /^[\\.\\?\\!]/\n  const regex71 = /^[\\.\\?\\!]/\n  const regex72 = /^[\\.\\?\\!]/\n  const regex73 = /^[\\.\\?\\!]/\n  const regex74 = /^[\\.\\?\\!]/\n  const regex75 = /^[\\.\\?\\!]/\n  const regex76 = /^[\\.\\?\\!]/\n  const regex77 = /^[\\.\\?\\!]/\n  const regex78 = /^[\\.\\?\\!]/\n  const regex79 = /^[\\.\\?\\!]/\n  const regex80 = /^[\\.\\?\\!]/\n  const regex81 = /^[\\.\\?\\!]/\n  const regex82 = /^[\\.\\?\\!]/\n  const regex83 = /^[\\.\\?\\!]/\n  const regex84 = /^[\\.\\?\\!]/\n  const regex85 = /^[\\.\\?\\!]/\n  const regex86 = /^[\\.\\?\\!]/\n  const regex87 = /^[\\.\\?\\!]/\n  const regex88 = /^[\\.\\?\\!]/\n  const regex89 = /^[\\.\\?\\!]/\n  const regex90 = /^[\\.\\?\\!]/\n  const regex91 = /^[\\.\\?\\!]/\n  const regex92 = /^[\\.\\?\\!]/\n  const regex93 = /^[\\.\\?\\!]/\n  const regex94 = /^[\\.\\?\\!]/\n  const regex95 = /^[\\.\\?\\!]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true;\n  }\n  if (x === y - z) {\n    return true;\n  }\n  if (x === z + y) {\n    return true;\n  }\n  if (x === z - y) {\n    return true;\n  }\n  if (x === y * z) {\n    return true;\n  }\n  if (x === y / z) {\n    return true;\n  }\n  if (x === z * y) {\n    return true;\n  }\n  if (x === z / y) {\n    return true;\n  }\n  if (x === y % z) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const encoded = message.replace(/[aeiou]/g, (letter) => {\n    const index = letter.charCodeAt(0) - 97;\n    const nextLetter = message[index + 2];\n    return nextLetter.toUpperCase();\n  });\n  return encoded;\n};\n\nconst decode = (message) => {\n  const message = message.toUpperCase();\n  const decoded = message.replace(/[A-Z]/g, (letter) => {\n    const index = letter.charCodeAt(0) - 65;\n    const nextLetter = message[index + 1];\n    return nextLetter.toLowerCase();\n  });\n  return decoded;\n};\n\nconst encodeMessage = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage2 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage2 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage3 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage3 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage4 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage4 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage5 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage5 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage6 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage6 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage7 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage7 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage8 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage8 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage9 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage9 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage10 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage10 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage11 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage11 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage12 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage12 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage13 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage13 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage14 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage14 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage15 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage15 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage16 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage16 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage17 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage17 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage18 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage18 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage19 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage19 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage20 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage20 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage21 = (message) => {\n  const encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage21 = (message) => {\n  const decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage22 = (message) => {\n  const encoded", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const largestPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (prime(i)) {\n        return i;\n      }\n      i++;\n    }\n    return n;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    while (n > 0) {\n      sum += n % 10;\n      n = n / 10;\n    }\n    return sum;\n  };\n  const largestPrimeSum = (lst) => {\n    let largestPrime = largestPrime(lst[0]);\n    let sum = sum(largestPrime);\n    for (let i = 1; i < lst.length; i++) {\n      largestPrime = largestPrime(lst[i]);\n      sum += largestPrime;\n    }\n    return sum;\n  };\n  return largestPrimeSum(lst);\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let result = true;\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (typeof dict[key]!=='string') {\n      result = false;\n      break;\n    }\n    if (typeof dict[key.toUpperCase()]!=='string') {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\n/*\n  Given a string, return true if the string is a valid number, else return false.\n  Examples:\n  isNumber(\"1\") should return true.\n  isNumber(\"1a\") should return false.\n  isNumber(\"1.2\") should return true.\n  isNumber(\"1.2a\") should return false.\n  isNumber(\"1.2.3\") should return true.\n  isNumber(\"1.2.3a\") should return false.\n  isNumber(\"1.2.3.4\") should return true.\n  isNumber(\"1.2.3.4a\") should return false.\n  isNumber(\"1.2.3.4.5\") should return true.\n  isNumber(\"1.2.3.4.5a\") should return false.\n  isNumber(\"1.2.3.4.5.6\") should return true.\n  isNumber(\"1.2.3.4.5.6a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7\") should return true.\n  isNumber(\"1.2.3.4.5.6.7a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19\") should return true.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19a\") should return false.\n  isNumber(\"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20\") should return true.\n  isNumber(\"1.2.3.4.5.6", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_2 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_3 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_4 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_5 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_6 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_7 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_8 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_9 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_10 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_11 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_12 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_13 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_14 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_15 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_16 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_17 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_18 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_19 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b.toString().length;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_20 = (a, b) => {\n  let a_unit = a / a.toString().length;\n  let b_unit = b / b", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in the string.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 2\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBC", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const absNum = Math.abs(num);\n  const absNumInt = Math.floor(absNum);\n  const absNumFrac = absNum - absNumInt;\n  const absNumFracInt = Math.floor(absNumFrac);\n  const absNumFracFrac = absNumFrac - absNumFracInt;\n  const closestInt = absNumInt;\n  if (absNumFracInt!== 0) {\n    if (absNumFracFrac > 0) {\n      closestInt = absNumInt + 1;\n    }\n    if (absNumFracFrac < 0) {\n      closestInt = absNumInt - 1;\n    }\n  }\n  return closestInt;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
