{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((prev, curr) => {\n    return prev + Math.abs(curr - prev)\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements10 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack_length = paren_list.length\n  const paren_stack_index_max = paren_stack_length - 1\n  const paren_stack_index_min = 0\n  const paren_stack_index_next = 0\n  const paren_stack_index_prev = 0\n  const paren_stack_index_open = 0\n  const paren_stack_index_close = 0\n  const paren_stack_index_open_prev = 0\n  const paren_stack_index_open_next = 0\n  const paren_stack_index_close_prev = 0\n  const paren_stack_index_close_next = 0\n  const paren_stack_index_open_next_close = 0\n  const paren_stack_index_open_next_open = 0\n  const paren_stack_index_open_prev_close = 0\n  const paren_stack_index_open_prev_open = 0\n  const paren_stack_index_close_prev_open = 0\n  const paren_stack_index_close_prev_close = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack_index_open_prev_open_open = 0\n  const paren_stack_index_open_prev_close_open = 0\n  const paren_stack_index_open_prev_close_close = 0\n  const paren_stack_index_open_prev_open_close = 0\n  const paren_stack", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join('');\n  }\n  const isPalindrome = (string) = > {\n    return string = = string.split('').reverse().join", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n    if (i % 4 === 0) {\n      pile.push(i + 3)\n    }\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n    if (i % 4 === 0) {\n      pile.push(i + 3)\n    }\n    if (i % 5 === 0) {\n      pile.push(i + 4)\n    }\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n    if (i % 4 === 0) {\n      pile.push(i + 3)\n    }\n    if (i % 5 === 0) {\n      pile.push(i + 4)\n    }\n    if (i % 6 === 0) {\n      pile.push(i + 5)\n    }\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n    if (i % 4 === 0) {\n      pile.push(i + 3)\n    }\n    if (i % 5 === 0) {\n      pile.push(i + 4)\n    }\n    if (i % 6 === 0) {\n      pile.push(i + 5)\n    }\n    if (i % 7 === 0) {\n      pile.push(i + 6)\n    }\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n    if (i % 4 === 0) {\n      pile.push(i + 3)\n    }\n    if (i % 5 === 0) {\n      pile.push(i + 4)\n    }\n    if (i % 6 === 0) {\n      pile.push(i + 5)\n    }\n    if (i % 7 === 0) {\n      pile.push(i + 6)\n    }\n    if (i % 8 === 0) {\n      pile.push(i + 7)\n    }\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n    if (i % 3 === 0) {\n      pile.push(i + 2)\n    }\n    if (i % 4 === 0) {\n      pile.push(i + 3)\n    }\n    if (i % 5 === 0) {\n      pile.push(i + 4)\n    }\n    if (i % 6 === 0) {\n      pile.push(i + 5)\n    }\n    if (i % 7 === 0) {\n      pile.push(i + 6)\n    }\n    if (i % 8 === 0) {\n      pile.push(i + 7)\n    }\n    if (i % 9 === 0) {\n      pile.push(i + 8)\n    }\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  } else if (x % 2 === 0) {\n    return x;\n  } else if (y % 2 === 0) {\n    return y;\n  } else {\n    return -1;\n  }\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.min(x, y);\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  return Math.round(avg / (m - n + 1))\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let sorted = x.sort();\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < sorted.length) {\n    if (sorted[i]!== sorted[j]) {\n      result.push(sorted[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let i = 0\n  let j = arr.length - 1\n  while (i <= j) {\n    while (arr[i] < 1 || arr[i] > 9) {\n      i++\n    }\n    while (arr[j] < 1 || arr[j] > 9) {\n      j--\n    }\n    if (arr[i] === arr[j]) {\n      i++\n      j--\n    }\n    result.push(names[arr[i] - 1])\n    i++\n    j--\n  }\n  return result\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorials[i - 1] + i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = [1]\n  for (let i = 1; i <= n; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result[arr[i]] = result[arr[i]] || 0;\n      result[arr[i]]++;\n    }\n  }\n  return Object.keys(result).length;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      i++\n    } else {\n      j--\n    }\n  }\n  return flag\n}\n\nconst moveOneBall10 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let flag = false\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor14 = (a, b) => {\n  let aLength = a.length;\n  let bLength = b.length;\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor15 = (a, b) => {\n  let aLength = a.length;\n  let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_len = lst1.length\n  let lst2_len = lst2.length\n  if (lst1_len === 0 || lst2_len === 0) {\n    return 'NO'\n  }\n  let lst1_even = lst1.filter(x => x % 2 === 0)\n  let lst2_even = lst2.filter(x => x % 2 === 0)\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return 'NO'\n  }\n  let lst1_odd = lst1.filter(x => x % 2!== 0)\n  let lst2_odd = lst2.filter(x => x % 2!== 0)\n  let lst1_len_odd = lst1_odd.length\n  let lst2_len_odd = lst2_odd.length\n  if (lst1_len_odd === 0 || lst2_len_odd === 0) {\n    return 'NO'\n  }\n  let lst1_len_even = lst1_even.length\n  let lst2_len_even = lst2_even.length\n  if (lst1_len_even === 0 || lst2_len_even === 0) {\n    return 'NO'\n  }\n  if (lst1_len_even!== lst2_len_even) {\n    return 'NO'\n  }\n  let lst1_len_odd_even = lst1_len_odd + lst1_len_even\n  let lst2_len_odd_even = lst2_len_odd + lst2_len_even\n  if (lst1_len_odd_even!== lst2_len_odd_even) {\n    return 'NO'\n  }\n  return 'YES'\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nconsole.log(exchange([1, 2, 3, 4, 5], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = test.split(' ').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letter.length; i++) {\n    if (histogram[letter[i]] === undefined) {\n      histogram[letter[i]] = 1;\n    } else {\n      histogram[letter[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a outer space separated small letter letter, return a dictionary \n  of the letter with the most repeat and incorporate the correspond count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = test.split(' ').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letter.length; i++) {\n    if (histogram[letter[i]] === undefined) {\n      histogram[letter[i]] = 1;\n    } else {\n      histogram[letter[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a outer space separated small letter letter, return a dictionary \n  of the letter with the most repeat and incorporate the correspond count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = test.split(' ').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letter.length; i++) {\n    if (histogram[letter[i]] === undefined) {\n      histogram[letter[i]] = 1;\n    } else {\n      histogram[letter[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a outer space separated small letter letter, return a dictionary \n  of the letter with the most repeat and incorporate the correspond count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = test.split(' ').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letter.length; i++) {\n    if (histogram[letter[i]] === undefined) {\n      histogram[letter[i]] = 1;\n    } else {\n      histogram[letter[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a outer space separated small letter letter, return a dictionary \n  of the letter with the most repeat and incorporate the correspond count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = test.split(' ').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letter.length; i++) {\n    if (histogram[letter[i]] === undefined) {\n      histogram[letter[i]] = 1;\n    } else {\n      histogram[letter[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a outer space separated small letter letter, return a dictionary \n  of the letter with the most repeat and incorporate the correspond count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = test.split(' ').", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  const len = s.length;\n  for (let i = 0; i < len; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      result.push(s.slice(0, i) + s.slice(i + 1));\n    }\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome2 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome3 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome4 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome5 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome6 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome7 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome8 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome9 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome10 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome11 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome12 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome13 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome14 = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome15", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const chain = lst[i];\n    const chainLength = chain.length;\n    const oddCount = 0;\n    for (let j = 0; j < chainLength; j++) {\n      if (chain[j].match(/\\d/)) {\n        oddCount++;\n      }\n    }\n    result.push(`the number of odd elements ${oddCount} of the ${chainLength}th chain of the ${i}th input.`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0);\n  const minSum = sum;\n  const minSubArray = [];\n  const minSubArraySum = [];\n  const minSubArraySumLength = [];\n  const minSubArraySumLengthLength = [];\n  const minSubArraySumLengthLengthLength = [];\n  const minSubArraySumLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const minSubArraySumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength Length\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  let capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const sortedDecimal = sorted.map(n => Math.abs(n));\n  return sortedDecimal;\n};\n\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4];\n  console.log(sortArray(arr));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a lifelike number n, you have been tasked to implement \na affair that return a list of all bible from chain s that contain precisely \nn consonant, in order these quarrel look in the string s.\nIf the bowed stringed instrument s is empty then the function should return an empty list.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonantIndex = consonants.indexOf(word.charAt(0));\n  const vowelIndex = vowels.indexOf(word.charAt(word.length - 1));\n  const consonantLength = consonantIndex + 1;\n  const vowelLength = vowelIndex + 1;\n  const closestVowel = '';\n  if (consonantIndex >= 0 && consonantLength <= word.length && vowelIndex >= 0 && vowelLength <= word.length) {\n    const consonant = word.substring(0, consonantIndex);\n    const vowel = word.substring(consonantLength, word.length - vowelLength);\n    const closestVowel = vowel;\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i];\n    if (cur === '(') {\n      stack.push(cur);\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens(['())', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((acc, elem, i) => {\n    if (i < k) {\n      return Math.max(acc, elem)\n    }\n    return elem\n  }, -1000)\n  return arr.slice(0, k).concat(arr.slice(k, arr.length).sort((a, b) => a - b))\n}\n\nconst test = (arr, k) => {\n  console.log(`Maximum of ${arr.join(', ')} with k = ${k} is ${maximum(arr, k)}`)\n}\n\ntest([-3, -4, 5], 3)\ntest([4, -4, 4], 2)\ntest([-3, 2, 1, 2, -1, -2, 1], 1)\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur % 2 === 0) {\n      sum += cur;\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements2 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements3 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements4 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements5 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements6 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements7 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements8 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements9 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements10 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements11 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements12 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements13 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements14 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements15 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements16 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements17 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements18 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements19 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements20 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements21 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements22 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements23 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements24 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements25 = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nconst addElements26 = (arr, k) => {\n  let result = 0;\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz11 = (n) => {\n  const oddCollatz = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    const half = n / 2;\n    const odd = collatz(half);\n    odd.push(half);\n    return odd;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > monthLength[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (month == 1 && year % 4!= 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 3 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 5 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 7 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 8 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 10 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 12 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDateChain = (dateChain) => {\n  const dateChainArray = dateChain.split('-');\n  const dateArray = dateChainArray[0].split('/');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateChainArray[1], 10);\n  const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > monthLength[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (month == 1 && year % 4!= 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 3 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 5 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 7 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 8 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 10 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 12 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDateChainRecurrence = (dateChain) => {\n  const dateChainArray = dateChain.split('-');\n  const dateArray = dateChainArray[0].split('/');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateChainArray[1], 10);\n  const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > monthLength[month - 1]) {\n    return false;\n  }\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/[,\\s]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/[\\s,]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/[\\s,\\s]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/[\\s,\\s]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/[\\s,\\s\\s]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords7 = (txt) => {\n  const words = txt.split(/[\\s,\\s\\s]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords8 = (txt) => {\n  const words = txt.split(/[\\s,\\s\\s\\s]+/);\n  return words;\n}\n\n/* Given a string of lyric, return a list of words separated on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether or not they are screen \n   in descending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (sorted[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  return sum;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m).fill(0);\n  const visited = new Array(n * m).fill(false);\n  const visited2 = new Array(n * m).fill(false);\n  const visited3 = new Array(n * m).fill(false);\n  const visited4 = new Array(n * m).fill(false);\n  const visited5 = new Array(n * m).fill(false);\n  const visited6 = new Array(n * m).fill(false);\n  const visited7 = new Array(n * m).fill(false);\n  const visited8 = new Array(n * m).fill(false);\n  const visited9 = new Array(n * m).fill(false);\n  const visited10 = new Array(n * m).fill(false);\n  const visited11 = new Array(n * m).fill(false);\n  const visited12 = new Array(n * m).fill(false);\n  const visited13 = new Array(n * m).fill(false);\n  const visited14 = new Array(n * m).fill(false);\n  const visited15 = new Array(n * m).fill(false);\n  const visited16 = new Array(n * m).fill(false);\n  const visited17 = new Array(n * m).fill(false);\n  const visited18 = new Array(n * m).fill(false);\n  const visited19 = new Array(n * m).fill(false);\n  const visited20 = new Array(n * m).fill(false);\n  const visited21 = new Array(n * m).fill(false);\n  const visited22 = new Array(n * m).fill(false);\n  const visited23 = new Array(n * m).fill(false);\n  const visited24 = new Array(n * m).fill(false);\n  const visited25 = new Array(n * m).fill(false);\n  const visited26 = new Array(n * m).fill(false);\n  const visited27 = new Array(n * m).fill(false);\n  const visited28 = new Array(n * m).fill(false);\n  const visited29 = new Array(n * m).fill(false);\n  const visited30 = new Array(n * m).fill(false);\n  const visited31 = new Array(n * m).fill(false);\n  const visited32 = new Array(n * m).fill(false);\n  const visited33 = new Array(n * m).fill(false);\n  const visited34 = new Array(n * m).fill(false);\n  const visited35 = new Array(n * m).fill(false);\n  const visited36 = new Array(n * m).fill(false);\n  const visited37 = new Array(n * m).fill(false);\n  const visited38 = new Array(n * m).fill(false);\n  const visited39 = new Array(n * m).fill(false);\n  const visited40 = new Array(n * m).fill(false);\n  const visited41 = new Array(n * m).fill(false);\n  const visited42 = new Array(n * m).fill(false);\n  const visited43 = new Array(n * m).fill(false);\n  const visited44 = new Array(n * m).fill(false);\n  const visited45 = new Array(n * m).fill(false);\n  const visited46 = new Array(n * m).fill(false);\n  const visited47 = new Array(n * m).fill(false);\n  const visited48 = new Array(n * m).fill(false);\n  const visited49 = new Array(n * m).fill(false);\n  const visited50 = new Array(n * m).fill(false);\n  const visited51 = new Array(n * m).fill(false);\n  const visited52 = new Array(n * m).fill(false);\n  const visited53 = new Array(n * m).fill(false);\n  const visited54 = new Array(n * m).fill(false);\n  const visited55 = new Array(n * m).fill(false);\n  const visited56 = new Array(n * m).fill(false);\n  const visited57 = new Array(n * m).fill(false);\n  const visited58 = new Array(n * m).fill(false);\n  const visited59 = new Array(n * m).fill(false);\n  const visited60 = new Array(n * m).fill(false);\n  const visited61 = new Array(n * m).fill(false);\n  const visited62 = new Array(n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return Math.max(a, b);\n};\n\n/**\n  * Return a least common multiple of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common divisor of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonDivisorOfTwoIntegers = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisorOfTwoIntegers(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return Math.max(a, b);\n};\n\n/**\n  * Return a least common multiple of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultipleOfTwoIntegers = (a, b) => {\n  return a * b / greatestCommonDivisorOfTwoIntegers(a, b);\n};\n\n/**\n  * Return a greatest common divisor of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonDivisorOfTwoIntegers = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisorOfTwoIntegers(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return Math.max(a, b);\n};\n\n/**\n  * Return a least common multiple of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultipleOfTwoIntegers = (a, b) => {\n  return a * b / greatestCommonDivisorOfTwoIntegers(a, b);\n};\n\n/**\n  * Return a greatest common divisor of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonDivisorOfTwoIntegers = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisorOfTwoIntegers(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return Math.max(a, b);\n};\n\n/**\n  * Return a least common multiple of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultipleOfTwoIntegers = (a, b) => {\n  return a * b / greatestCommonDivisorOfTwoIntegers(a, b);\n};\n\n/**\n  * Return a greatest common divisor of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonDivisorOfTwoIntegers = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisorOfTwoIntegers(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return Math.max(a, b);\n};\n\n/**\n  * Return a least common multiple of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultipleOfTwoIntegers = (a, b) => {\n  return a * b / greatestCommonDivisorOfTwoIntegers(a, b);\n};\n\nmodule.exports = {\n  greatestCommonDivisor,\n  greatestCommonDivisorOfTwoIntegers,\n  leastCommonMultiple,\n  leastCommonMultipleOfTwoIntegers,\n  greatestCommonDivisorOfTwoIntegers,\n  leastCommonMultipleOfTwoIntegers,\n  greatestCommonDivisorOfTwoIntegers\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n  }\n  return result;\n};\n\nconst tri2 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n  }\n  return result;\n};\n\nconst tri3 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n  }\n  return result;\n};\n\nconst tri4 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n  }\n  return result;\n};\n\nconst tri5 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n    result.push(1 + (i + 4) / 2);\n  }\n  return result;\n};\n\nconst tri6 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n    result.push(1 + (i + 4) / 2);\n    result.push(1 + (i + 5) / 2);\n  }\n  return result;\n};\n\nconst tri7 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n    result.push(1 + (i + 4) / 2);\n    result.push(1 + (i + 5) / 2);\n    result.push(1 + (i + 6) / 2);\n  }\n  return result;\n};\n\nconst tri8 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n    result.push(1 + (i + 4) / 2);\n    result.push(1 + (i + 5) / 2);\n    result.push(1 + (i + 6) / 2);\n    result.push(1 + (i + 7) / 2);\n  }\n  return result;\n};\n\nconst tri9 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n    result.push(1 + (i + 4) / 2);\n    result.push(1 + (i + 5) / 2);\n    result.push(1 + (i + 6) / 2);\n    result.push(1 + (i + 7) / 2);\n    result.push(1 + (i + 8) / 2);\n  }\n  return result;\n};\n\nconst tri10 = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n    result.push(1 + (i + 1) / 2);\n    result.push(1 + (i + 2) / 2);\n    result.push(1 + (i + 3) / 2);\n    result.push(1 + (i + 4) / 2);\n    result.push(1 + (i + 5) / 2);\n    result.push(1 + (i + 6) / 2);", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconst test = (n) => {\n  let result = digits(n);\n  console.log(`The product of the odd digits of ${n} is ${result}`);\n};\n\ntest(1);\ntest(4);\ntest(235);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n  const stack = []\n  const stackLength = 0\n  const stackMax = 0\n  const stackMin = 0\n  const stackMaxLength = 0\n  const stackMinLength = 0\n  const stackMaxMinLength = 0\n  const stackMinMaxLength = 0\n  const stackMaxMinMaxLength = 0\n  const stackMinMaxMaxLength = 0\n  const stackMinMaxMinLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  const stackMinMaxMinMaxLength = 0\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotALetterOrShare = isNotALetter || lastChar.match(/[a-zA-Z0-9]/);\n  return isNotALetterOrShare;\n};\n\n/*\n  Create a function that return true if the final quality \n  of a give string embody an alphabetic character and is not \n  a share of a word, and fake differently. \n  Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotALetterOrShare = isNotALetter || lastChar.match(/[a-zA-Z0-9]/);\n  return isNotALetterOrShare;\n};\n\n/*\n  Create a function that return true if the final quality \n  of a give string embody an alphabetic character and is not \n  a share of a word, and fake differently. \n  Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotALetterOrShare = isNotALetter || lastChar.match(/[a-zA-Z0-9]/);\n  return isNotALetterOrShare;\n};\n\n/*\n  Create a function that return true if the final quality \n  of a give string embody an alphabetic character and is not \n  a share of a word, and fake differently. \n  Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotALetterOrShare = isNotALetter || lastChar.match(/[a-zA-Z0-9]/);\n  return isNotALetterOrShare;\n};\n\n/*\n  Create a function that return true if the final quality \n  of a give string embody an alphabetic character and is not \n  a share of a word, and fake differently. \n  Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotALetterOrShare = isNotALetter || lastChar.match(/[a-zA-Z0-9]/);\n  return isNotALetterOrShare;\n};\n\n/*\n  Create a function that return true if the final quality \n  of a give string embody an alphabetic character and is not \n  a share of a word, and fake differently. \n  Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  const isNotALetterOrShare = isNotALetter || lastChar.match(/[a-zA-Z0-9]/);\n  return isNotALetterOrShare;\n};\n\n/*\n  Create a function that return true if the final quality \n  of a give string embody an alphabetic character", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  \n  Examples:\n  largest([1,2,3,4,5]) = 5\n  largest([1,2,3,4]) = 4\n  largest([1,2,3]) = 3\n  largest([1,2]) = 1\n  largest([1]) = 1\n  largest([]) = -1\n  */\nconst largest = (arr) => {\n  let largest = -1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  \n  Examples:\n  smallest([1,2,3,4,5]) = 1\n  smallest([1,2,3,4]) = 1\n  smallest([1,2,3]) = 1\n  smallest([1,2]) = 1\n  smallest([1]) = 1\n  smallest([]) = -1\n  */\nconst smallest = (arr) => {\n  let smallest = arr[0]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i]\n    }\n  }\n  return smallest\n}\n\n/*\n  Given a list of numbers, return the sum of the list.\n  \n  Examples:\n  sum([1,2,3,4,5]) = 15\n  sum([1,2,3,4]) = 9\n  sum([1,2,3]) = 6\n  sum([1,2]) = 3\n  sum([1]) = 1\n  sum([]) = 0\n  */\nconst sum = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the product of the list.\n  \n  Examples:\n  product([1,2,3,4,5]) = 120\n  product([1,2,3,4]) = 24\n  product([1,2,3]) = 6\n  product([1,2]) = 2\n  product([1]) = 1\n  product([]) = 1\n  */\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return the product of the list.\n  \n  Examples:\n  product([1,2,3,4,5]) = 120\n  product([1,2,3,4]) = 24\n  product([1,2,3]) = 6\n  product([1,2]) = 2\n  product([1]) = 1\n  product([]) = 1\n  */\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return the product of the list.\n  \n  Examples:\n  product([1,2,3,4,5]) = 120\n  product([1,2,3,4]) = 24\n  product([1,2,3]) = 6\n  product([1,2]) = 2\n  product([1]) = 1\n  product([]) = 1\n  */\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return the product of the list.\n  \n  Examples:\n  product([1,2,3,4,5]) = 120\n  product([1,2,3,4]) = 24\n  product([1,2,3]) = 6\n  product([1,2]) = 2\n  product([1]) = 1\n  product([]) = 1\n  */\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return the product of the list.\n  \n  Examples:\n  product([1,2,3,4,5]) = 120\n  product([1,2,3,4]) = 24\n  product([1,2,3]) = 6\n  product([1,2]) = 2\n  product([1]) = 1\n  product([]) = 1\n  */\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return the product of the list.\n  \n  Examples:\n  product([1,2,3,4,5]) = 120\n  product([1,2,3,4]) = 24\n  product([1,2,3]) = 6\n  product([1,2]) = 2\n  product([1]) = 1\n  product([]) = 1\n  */\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  Given a list", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  }\n  if (b === null) {\n    return [a, lst[0]];\n  }\n  return [a, b];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b;\n }\n\nconst compareTwo = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b;\n }\n\nconst compareThree = (a, b, c) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c;\n }\n\nconst compareFour = (a, b, c, d) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d;\n }\n\nconst compareFive = (a, b, c, d, e) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e;\n }\n\nconst compareSix = (a, b, c, d, e, f) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f;\n }\n\nconst compareSeven = (a, b, c, d, e, f, g) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g;\n }\n\nconst compareEight = (a, b, c, d, e, f, g, h) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h;\n }\n\nconst compareNine = (a, b, c, d, e, f, g, h, i) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i;\n }\n\nconst compareTen = (a, b, c, d, e, f, g, h, i, j) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j;\n }\n\nconst compareEleven = (a, b, c, d, e, f, g, h, i, j, k) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j + k;\n }\n\nconst compareTwelve = (a, b, c, d, e, f, g, h, i, j, k, l) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j + k + l;\n }\n\nconst compareThirteen = (a, b, c, d, e, f, g, h, i, j, k, l, m) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j + k + l + m;\n }\n\nconst compareFourteen = (a, b, c, d, e, f, g, h, i, j, k, l, m, n) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j + k + l + m + n;\n }\n\nconst compareFifteen = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j + k + l + m + n + o;\n }\n\nconst compareSixteen = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   if (b < a) return b;\n   return a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p;\n }\n\nconst compareSeventeen = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) = > {\n   if (a === b) return null;\n   if (a <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 3) {\n    return false\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 5) {\n    return false\n  }\n  if (n === 6) {\n    return true\n  }\n  if (n === 7) {\n    return false\n  }\n  if (n === 8) {\n    return true\n  }\n  if (n === 9) {\n    return false\n  }\n  if (n === 10) {\n    return true\n  }\n  if (n === 11) {\n    return false\n  }\n  if (n === 12) {\n    return true\n  }\n  if (n === 13) {\n    return false\n  }\n  if (n === 14) {\n    return true\n  }\n  if (n === 15) {\n    return false\n  }\n  if (n === 16) {\n    return true\n  }\n  if (n === 17) {\n    return false\n  }\n  if (n === 18) {\n    return true\n  }\n  if (n === 19) {\n    return false\n  }\n  if (n === 20) {\n    return true\n  }\n  if (n === 21) {\n    return false\n  }\n  if (n === 22) {\n    return true\n  }\n  if (n === 23) {\n    return false\n  }\n  if (n === 24) {\n    return true\n  }\n  if (n === 25) {\n    return false\n  }\n  if (n === 26) {\n    return true\n  }\n  if (n === 27) {\n    return false\n  }\n  if (n === 28) {\n    return true\n  }\n  if (n === 29) {\n    return false\n  }\n  if (n === 30) {\n    return true\n  }\n  if (n === 31) {\n    return false\n  }\n  if (n === 32) {\n    return true\n  }\n  if (n === 33) {\n    return false\n  }\n  if (n === 34) {\n    return true\n  }\n  if (n === 35) {\n    return false\n  }\n  if (n === 36) {\n    return true\n  }\n  if (n === 37) {\n    return false\n  }\n  if (n === 38) {\n    return true\n  }\n  if (n === 39) {\n    return false\n  }\n  if (n === 40) {\n    return true\n  }\n  if (n === 41) {\n    return false\n  }\n  if (n === 42) {\n    return true\n  }\n  if (n === 43) {\n    return false\n  }\n  if (n === 44) {\n    return true\n  }\n  if (n === 45) {\n    return false\n  }\n  if (n === 46) {\n    return true\n  }\n  if (n === 47) {\n    return false\n  }\n  if (n === 48) {\n    return true\n  }\n  if (n === 49) {\n    return false\n  }\n  if (n === 50) {\n    return true\n  }\n  if (n === 51) {\n    return false\n  }\n  if (n === 52) {\n    return true\n  }\n  if (n === 53) {\n    return false\n  }\n  if (n === 54) {\n    return true\n  }\n  if (n === 55) {\n    return false\n  }\n  if (n === 56) {\n    return true\n  }\n  if (n === 57) {\n    return false\n  }\n  if (n === 58) {\n    return true\n  }\n  if (n === 59) {\n    return false\n  }\n  if (n === 60) {\n    return true\n  }\n  if (n === 61) {\n    return false\n  }\n  if (n === 62) {\n    return true\n  }\n  if (n === 63) {\n    return false\n  }\n  if (n === 64) {\n    return true\n  }\n  if (n === 65) {\n    return false\n  }\n  if (n === 66) {\n    return true\n  }\n  if (n === 67) {\n    return false\n  }\n  if (n === 68) {\n    return true\n  }\n  if (n === 69) {\n    return false\n  }\n  if (n === 70) {\n    return true\n  }\n  if (n === 71) {\n    return false\n  }\n  if (n === 72) {\n    return true\n  }\n  if (n === 73) {\n    return false\n  }\n  if (n === 74) {\n    return true\n  }\n  if (n === 75) {\n    return false\n  }\n  if (n === 76) {\n    return true\n  }\n  if (n === 77) {\n    return false\n  }\n  if (n === 78) {\n    return true\n  }\n  if (n === 79) {\n    return false\n  }\n  if (n === 80) {\n    return true\n  }\n  if (n === 81) {\n    return false\n  }\n  if (n === 82) {\n    return true\n  }\n  if (n === 83) {\n    return false\n  }\n  if (n === 84) {\n    return true\n  }\n  if (n === 85) {\n    return false\n  }\n  if (n === 86) {\n    return true\n  }\n  if (n === 87) {\n    return false\n  }\n  if (n === 88) {\n    return true\n  }\n  if (n === 89) {\n    return false\n  }\n  if (n === 90) {\n    return true\n  }", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\n/*The Catalan number is specify as: \n   catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 * (n + 4) / 5 * (n + 5) / 6 * (n + 6) / 7 * (n + 7) / 8 * (n + 8) / 9 * (n + 9) / 10 * (n + 10) / 11 * (n + 11) / 12 * (n + 12) / 13 * (n + 13) / 14 * (n + 14) / 15 * (n + 15) / 16 * (n + 16) / 17 * (n + 17) / 18 * (n + 18) / 19 * (n + 19) / 20 * (n + 20) / 21 * (n + 21) / 22 * (n + 22) / 23 * (n + 23) / 24 * (n + 24) / 25 * (n + 25) / 26 * (n + 26) / 27 * (n + 27) / 28 * (n + 28) / 29 * (n + 29) / 30 * (n + 30) / 31 * (n + 31) / 32 * (n + 32) / 33 * (n + 33) / 34 * (n + 34) / 35 * (n + 35) / 36 * (n + 36) / 37 * (n + 37) / 38 * (n + 38) / 39 * (n + 39) / 40 * (n + 40) / 41 * (n + 41) / 42 * (n + 42) / 43 * (n + 43) / 44 * (n + 44) / 45 * (n + 45) / 46 * (n + 46) / 47 * (n + 47) / 48 * (n + 48) / 49 * (n + 49) / 50 * (n + 50) / 51 * (n + 51) / 52 * (n + 52) / 53 * (n + 53) / 54 * (n + 54) / 55 * (n + 55) / 56 * (n + 56) / 57 * (n + 57) / 58 * (n + 58) / 59 * (n + 59) / 60 * (n + 60) / 61 * (n + 61) / 62 * (n + 62) / 63 * (n + 63) / 64 * (n + 64) / 65 * (n + 65) / 66 * (n + 66) / 67 * (n + 67) / 68 * (n + 68) / 69 * (n + 69) / 70 * (n + 70) / 71 * (n + 71) / 72 * (n + 72) / 73 * (n + 73) / 74 * (n + 74) / 75 * (n + 75) / 76 * (n + 76) / 77 * (n + 77) / 78 * (n + 78) / 79 * (n + 79) / 80 * (n + 80) / 81 * (n + 81) / 82 * (n + 82) / 83 * (n + 83) / 84 * (n + 84) / 85 * (n + 85) / 86 * (n + 86) / 87 * (n + 87) / 88 * (n + 88) / 89 * (n + 89) / 90 * (n + 90) / 91 * (n + 91) / 92 * (n + 92) / 93 * (n + 93) / 94 * (n + 94) / 95 * (n + 95) / 96 * (n + 96) / 97 * (n + 97) / 98 * (n + 98) / 99 * (n + 99) / 100 * (n + 100) / 101 * (n + 101) / 102 * (n + 102) / 103 * (n + 103) / 104 * (n + 104) / 105 * (n + 105) / 106 * (n + 106) / 107 * (n + 107) / 108 * (n + 108) / 109 * (n + 109) / 110 * (n + 110) / 111 * (n + 111) / 112 * (n + 112) / 113 * (n + 113) / 114 * (n + 114) / 115 * (n + 115) / 116 * (n + 116) / 117 * (n + 117) / 118 * (n + 118) / 119 * (n + 119) / 120 * (n + 120) / 121 * (n + 121) / 122 * (n + 122) / 123 * (n + 123) / 124 * (n + 124) / 125 * (n + 125) / 126 * (n + 126) / 127 * (n + 127) / 128 * (n + 128) / 129 * (n + 129) / 130 * (n + 130) / 131 * (n + 131) / 132 * (n + 132) / 133 * (n + 133) / 134 * (n + 134) / 135 * (n + 135) / 136 * (n + 136) / 137 * (n + 137) / 138 * (n + 138) / 139 * (n + 139) / 140 * (n + 140) / 141 * (n + 141) / 142 * (n + 142) / 143 * (n + 143) / 144 * (n + 144) / 145 * (n + 145) / 146 * (n + 146) / 147 * (n + 147) / 148 * (n + 148) / 149 * (n + 149) / 150 * (n + 150) / 151 * (n + 151) / 152 * (n + 152) / 153 * (n + 153) / 154 * (n + 154) / 155 * (n + 155) / 156 * (n + 156) / 157 * (n + 157) / 158 * (n + 158) / 159 * (n + 159) / 160 * (n + 160) / 161 * (n + 161) / 162 * (n + 162) / 163 * (n + 163) / 164 * (n + 164) / 165 * (n + 165) / 166 * (n + 166) / 167 * (n + 167) / 168 * (n + 168) / 169 * (n + 169) / 170 *", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndHyphens = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'').replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndHyphensAndDashes = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'').replace(/-/g,'').replace(/\\//g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndHyphensAndDashesAndSlashes = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'').replace(/-/g,'').replace(/\\//g,'').replace(/\\//g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndHyphensAndDashesAndSlashesAndTildes = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'').replace(/-/g,'').replace(/\\//g,'').replace(/\\//g,'').replace(/~/g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndHyphensAndDashesAndSlashesAndTildesAndBackslashes = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'').replace(/-/g,'').replace(/\\//g,'').replace(/\\//g,'').replace(/\\//g,'').replace(/\\//g,'').replace(/\\//g,'').replace(/\\//g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndHyphensAndDashesAndSlashesAndTildesAndBackslashesAndQuotes = (text) => {\n  return text.replace(/\\s/g,'').replace(/_/g,'').replace(/-/g,'').replace(/\\//g,'').replace(/\\//g,'').replace(/\\", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which take a string represent a file's name, and return \n  ' Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{1,3}[0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordsLength = words.length\n  const wordsPrime = []\n  const wordsPrimeLength = []\n  const wordsPrime = []\n  const wordsPrimeLength = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let prime = 0\n  let primeLength = 0\n  let wordPrime = ''\n  let wordPrimeLength = 0\n  let wordPrime = ''\n  let wordPrimeLength = 0\n  while (i < wordsLength) {\n    wordPrime = words[i]\n    wordPrimeLength = wordPrime.length\n    while (j < wordsLength) {\n      wordPrime = words[j]\n      wordPrimeLength = wordPrime.length\n      if (wordPrimeLength > primeLength) {\n        prime = wordPrime\n        primeLength = wordPrimeLength\n      }\n      j++\n    }\n    wordsPrime.push(prime)\n    wordsPrimeLength.push(primeLength)\n    i++\n  }\n  for (k = 0; k < wordsLength; k++) {\n    wordPrime = wordsPrime[k]\n    wordPrimeLength = wordsPrimeLength[k]\n    for (j = 0; j < wordsLength; j++) {\n      wordPrime = wordsPrime[j]\n      wordPrimeLength = wordsPrimeLength[j]\n      if (wordPrimeLength > wordPrimeLength) {\n        if (wordPrime === words[j]) {\n          wordsPrime.splice(j, 1)\n          wordsPrimeLength.splice(j, 1)\n          break\n        }\n      }\n    }\n  }\n  return wordsPrime\n}\n\nconst test = (sentence) => {\n  const words = sentence.split(' ')\n  const wordsLength = words.length\n  const wordsPrime = wordsInSentence(sentence)\n  console.log(wordsPrime)\n}\n\ntest(\"This is a test\")\ntest(\"lets go for swimming\")\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   let x = x.split(\"/\")\n   let n = n.split(\"/\")\n   let x = x[0].split(\" \")\n   let n = n[0].split(\" \")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x[0].split(\".\")\n   let n = n[0].split(\".\")\n   let x = x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const master = nums.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < master.length; i++) {\n    const current = master[i];\n    const index = master.indexOf(current);\n    if (index > 0) {\n      const previous = master[index - 1];\n      if (current - previous === 1) {\n        result.push(current);\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\nconsole.log(orderByPoints([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 1 && n % 3 === 1 && n % 5 === 1 && n % 7 === 1 && n % 9 === 1);\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let max = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k])\n        }\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const distance = (planet1.length + planet2.length) / 2;\n  const planet1Orbit = planet1.length;\n  const planet2Orbit = planet2.length;\n  const planet1OrbitLength = planet1Orbit * Math.PI;\n  const planet2OrbitLength = planet2Orbit * Math.PI;\n  const planet1OrbitAngle = planet1Orbit * Math.PI / planet1OrbitLength;\n  const planet2OrbitAngle = planet2Orbit * Math.PI / planet2OrbitLength;\n  const planet1Angle = planet1OrbitAngle + planet1OrbitAngle;\n  const planet2Angle = planet2OrbitAngle + planet2OrbitAngle;\n  const planet1AngleLength = planet1Angle * planet1OrbitLength;\n  const planet2AngleLength = planet2Angle * planet2OrbitLength;\n  const planet1AngleAngle = planet1Angle * planet1OrbitAngle;\n  const planet2AngleAngle = planet2Angle * planet2OrbitAngle;\n  const planet1AngleDistance = planet1AngleLength - planet2AngleLength;\n  const planet2AngleDistance = planet2AngleLength - planet1AngleLength;\n  const planet1AngleDistanceAngle = planet1AngleDistance * planet1OrbitAngle;\n  const planet2AngleDistanceAngle = planet2AngleDistance * planet2OrbitAngle;\n  const planet1AngleDistanceAngleAngle = planet1AngleDistanceAngle + planet1AngleDistanceAngle;\n  const planet2AngleDistanceAngleAngle = planet2AngleDistanceAngle + planet2AngleDistanceAngle;\n  const planet1AngleDistanceAngleAngleAngle = planet1AngleDistanceAngleAngle + planet1AngleDistanceAngleAngle;\n  const planet2AngleDistanceAngleAngleAngle = planet2AngleDistanceAngleAngle + planet2AngleDistanceAngleAngle;\n  const planet1AngleDistanceAngleAngleAngleAngle = planet1AngleDistanceAngleAngleAngle + planet1AngleDistanceAngleAngleAngle;\n  const planet2AngleDistanceAngleAngleAngleAngle = planet2AngleDistanceAngleAngleAngle + planet2AngleDistanceAngleAngleAngle;\n  const planet1AngleDistanceAngleAngleAngleAngleAngle = planet1AngleDistanceAngleAngleAngleAngle + planet1AngleDistanceAngleAngleAngleAngle;\n  const planet2AngleDistanceAngleAngleAngleAngleAngle = planet2AngleDistanceAngleAngleAngleAngle + planet2AngleDistanceAngleAngleAngleAngle;\n  const planet1AngleDistanceAngleAngleAngleAngleAngleAngle = planet1AngleDistanceAngleAngleAngleAngleAngle + planet1AngleDistanceAngleAngleAngleAngleAngle;\n  const planet2AngleDistanceAngleAngleAngleAngleAngleAngle = planet2AngleDistanceAngleAngleAngleAngleAngle + planet2AngleDistanceAngleAngleAngleAngleAngle;\n  const planet1AngleDistanceAngleAngleAngleAngleAngleAngleAngle = planet1AngleDistanceAngleAngleAngleAngleAngleAngle + planet1AngleDistanceAngleAngleAngleAngleAngleAngle;\n  const planet2AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngle = planet2AngleDistanceAngleAngleAngleAngleAngleAngleAngle + planet2AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngle;\n  const planet1AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngleAngleAngle = planet1AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngleAngle + planet1AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngle;\n  const planet2AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngle = planet2AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngle + planet2AngleDistanceAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAngleAng", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sum - word.length;\n    while (index >= 0 && result.length > 0) {\n      let last = result.pop();\n      if (last.length + word.length < sum) {\n        result.push(last + word);\n        break;\n      } else {\n        result.push(last);\n      }\n      index -= last.length;\n    }\n    if (index < 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst list_sort = (lst) => {\n  let result = sortedListSum(lst);\n  let sorted = [];\n  for (let i = 0; i < result.length; i++) {\n    sorted.push(result[i]);\n  }\n  return sorted;\n};\n\nconst test_list_sort = (lst) => {\n  assert.deepEqual(list_sort([\"aa\", \"a\", \"aaa\"]), [\"aa\"]);\n  assert.deepEqual(list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]), [\"ab\", \"cd\"]);\n};\n\ndescribe(\"list_sort\", () => {\n  it(\"should sort the list\", () => {\n    test_list_sort([\"aa\", \"a\", \"aaa\"]);\n    test_list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]);\n  });\n});\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let {\n     map: (f,...lst) => {\n       return lst.reduce((acc, n) => {\n         return f(acc, n)\n       }, 0)\n     },\n     reduce: (f,...lst) => {\n       return lst.reduce((acc, n) => {\n         return f(acc, n)\n       }, 0)\n     },\n     filter: (f,...lst) => {\n       return lst.filter(f)\n     },\n     length: (lst) => {\n       return lst.length\n     }\n   }\n   return lst.reduce((acc, n) => {\n     return acc + n * n\n   }, 0)\n }\n*/\n\n// const doubleTheDifference = (lst) = > {\n//   let {\n//     map: (f,...lst) => {\n//       return lst.reduce((acc, n) => {\n//         return f(acc, n)\n//       }, 0)\n//     },\n//     reduce: (f,...lst) => {\n//       return lst.reduce((acc, n) => {\n//         return f(acc, n)\n//       }, 0)\n//     },\n//     filter: (f,...lst) => {\n//       return lst.filter(f)\n//     },\n//     length: (lst) => {\n//       return lst.length\n//     }\n//   }\n//   return lst.reduce((acc, n) => {\n//     return acc + n * n\n//   }, 0)\n// }\n\nconst doubleTheDifference = (lst) => {\n  let {\n    map: (f,...lst) => {\n      return lst.reduce((acc, n) => {\n        return f(acc, n)\n      }, 0)\n    },\n    reduce: (f,...lst) => {\n      return lst.reduce((acc, n) => {\n        return f(acc, n)\n      }, 0)\n    },\n    filter: (f,...lst) => {\n      return lst.filter(f)\n    },\n    length: (lst) => {\n      return lst.length\n    }\n  }\n  return lst.reduce((acc, n) => {\n    return acc + n * n\n  }, 0)\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    let diff = Math.abs(score - guess)\n    result.push(diff)\n  }\n  return result\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  \n  example:\n  \n  sum([1,2,3,4,5,1]) -> 15\n  sum([0,5,0,0,0,4]) -> 14\n  sum([0,0,0,0,0,0]) -> 0\n  */\nconst sum = (game) => {\n  let sum = 0\n  for (let i = 0; i < game.length; i++) {\n    sum += game[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the average of the numbers.\n  \n  example:\n  \n  average([1,2,3,4,5,1]) -> 2.5\n  average([0,5,0,0,0,4]) -> 2.5\n  average([0,0,0,0,0,0]) -> 0\n  */\nconst average = (game) => {\n  let sum = 0\n  for (let i = 0; i < game.length; i++) {\n    sum += game[i]\n  }\n  return sum / game.length\n}\n\n/*\n  Given a list of numbers, return the median of the numbers.\n  \n  example:\n  \n  median([1,2,3,4,5,1]) -> 2.5\n  median([0,5,0,0,0,4]) -> 3\n  median([0,0,0,0,0,0]) -> 0\n  */\nconst median = (game) => {\n  let sum = 0\n  for (let i = 0; i < game.length; i++) {\n    sum += game[i]\n  }\n  let half = sum / 2\n  let median = game[half]\n  return median\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n  \n  mode([1,2,3,4,5,1]) -> 1\n  mode([0,5,0,0,0,4]) -> 4\n  mode([0,0,0,0,0,0]) -> 0\n  */\nconst mode = (game) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] > max) {\n      max = game[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n  \n  mode([1,2,3,4,5,1]) -> 1\n  mode([0,5,0,0,0,4]) -> 4\n  mode([0,0,0,0,0,0]) -> 0\n  */\nconst mode = (game) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] > max) {\n      max = game[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n  \n  mode([1,2,3,4,5,1]) -> 1\n  mode([0,5,0,0,0,4]) -> 4\n  mode([0,0,0,0,0,0]) -> 0\n  */\nconst mode = (game) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] > max) {\n      max = game[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n  \n  mode([1,2,3,4,5,1]) -> 1\n  mode([0,5,0,0,0,4]) -> 4\n  mode([0,0,0,0,0,0]) -> 0\n  */\nconst mode = (game) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] > max) {\n      max = game[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n  \n  mode([1,2,3,4,5,1]) -> 1\n  mode([0,5,0,0,0,4]) -> 4\n  mode([0,0,0,0,0,0]) -> 0\n  */\nconst mode = (game) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] > max) {\n      max =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return class_name + '.' + strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += (class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0));\n  });\n  const strongest = Object.keys(strength).reduce((a, b) => {\n    return strength[b] > strength[a]? b : a;\n  });\n  return strongest;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    strength[ext] = strength[ext", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   while (i < a.length) {\n     if (a[i] === b[i]) {\n       i++;\n     } else {\n       return false;\n     }\n   }\n   return true;\n }\n */\n\nfunction cycpatternCheck(a, b) {\n  let a = a.split(\"\");\n  let b = b.split(\"\");\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(cycpatternCheck(\"abcd\", \"abd\"));\nconsole.log(cycpatternCheck(\"hello\", \"ell\"));\nconsole.log(cycpatternCheck(\"whassup\", \"psus\"));\nconsole.log(cycpatternCheck(\"abab\", \"baa\"));\nconsole.log(cycpatternCheck(\"efef\", \"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\", \"simen\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = num; i > 0; i--) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += 'II';\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += 'III';\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += 'IV';\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += 'V';\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += 'VI';\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += 'VII';\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += 'VIII';\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += 'IX';\n      number -= 9;\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += 'II';\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += 'III';\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += 'IV';\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += 'V';\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += 'VI';\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += 'VII';\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += 'VIII';\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += 'IX';\n      number -= 9;\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += 'II';\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += 'III';\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += 'IV';\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += 'V';\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += 'VI';\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += 'VII';\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += 'VIII';\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += 'IX';\n      number -= 9;\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += 'II';\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += 'III';\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += 'IV';\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += 'V';\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += 'VI';\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += 'VII';\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += 'VIII';\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += 'IX';\n      number -= 9;\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer,", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const words = words.sort((a, b) => a.length - b.length)\n   const max = words[0]\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max.length) {\n       max = words[i]\n     }\n   }\n   return max\n }\n*/\n\nconst findMax = (words) => {\n  const words = words.sort((a, b) => a.length - b.length)\n  const max = words[0]\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i]\n    }\n  }\n  return max\n}\n\nconsole.log(findMax([\"name\", \" of \", \" chain \"]))\nconsole.log(findMax([\"name\", \" enam \", \" game \"]))\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \"]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else if (remaining < need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining - need];\n  }\n}\n\n/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                    the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else if (remaining < need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining - need];\n  }\n}\n\n/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                    the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else if (remaining < need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining - need];\n  }\n}\n\n/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                    the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else if (remaining < need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining - need];\n  }\n}\n\n/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                    the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char]) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toLowerCase()]) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toUpperCase()]) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toLowerCase()]) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toUpperCase()]) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toLowerCase()]) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toUpperCase()]) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toLowerCase()]) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (!counts[char.toUpperCase()]) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op3)\n    } else if (op === '-') {\n      result.push(op3 - op3)\n    } else if (op === '*') {\n      result.push(op3 * op3)\n    } else if (op === '/') {\n      result.push(op3 / op3)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op3))\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op3)\n    } else if (op === '-') {\n      result.push(op3 - op3)\n    } else if (op === '*') {\n      result.push(op3 * op3)\n    } else if (op === '/') {\n      result.push(op3 / op3)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op3))\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op3)\n    } else if (op === '-') {\n      result.push(op3 - op3)\n    } else if (op === '*') {\n      result.push(op3 * op3)\n    } else if (op === '/') {\n      result.push(op3 / op3)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op3))\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op3)\n    } else if (op === '-') {\n      result.push(op3 - op3)\n    } else if (op === '*') {\n      result.push(op3 * op3)\n    } else if (op === '/') {\n      result.push(op3 / op3)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op3))\n    }\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op3)\n    } else if (op === '-') {\n      result.push(op3 - op3)\n    } else if (op === '*') {\n      result.push(op3 * op3)\n    } else if (op === '/') {\n      result.push(op3 / op3)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op3))\n    }\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op3)\n    } else if (op === '-') {\n      result.push(op3 - op3)\n    } else if (op === '*') {\n      result.push(op3 * op3)\n    } else if (op === '/') {\n      result.push(op3 / op3)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op3))\n    }\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let result = ''\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase()\n    } else {\n      result += s[i].toUpperCase()\n    }\n  }\n  return result\n}\n\nconsole.log(solve('1234'))\nconsole.log(solve('ab'))\nconsole.log(solve('#a@C'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha1('Hello world') == 'a9c7f4b0b6d8f9e0d5a8b9f3b0e0e9d8f3b0e0e'\n  */\nconst stringToSha1 = (text) => {\n  if (text.length === 0) {\n    return ''\n  }\n  const sha1 = crypto.createHash('sha1')\n  sha1.update(text)\n  return sha1.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha256('Hello world') == 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592'\n  */\nconst stringToSha256 = (text) => {\n  if (text.length === 0) {\n    return ''\n  }\n  const sha256 = crypto.createHash('sha256')\n  sha256.update(text)\n  return sha256.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha512('Hello world') == 'a8c7f4b0b6d8f9e0d5a8b9f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f3b0e0e9d8f", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n  ' o' - whole eminence, last four meter \n  ' o|' - half note, last two beatnik \n  ' .|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n 'o' - whole eminence, last four meter \n 'o|' - half note, last two beatnik \n  '.|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_length = music_string.length;\n  const beat_length = 4;\n  const beat_count = music_string_length / beat_length;\n  const beat_count_remainder = music_string_length % beat_length;\n  const beat_count_remainder_length = beat_count_remainder / beat_length;\n  const beat_count_remainder_length_remainder = beat_count_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder = beat_count_remainder_length_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder % beat_length;\n  const beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = beat_count_remainder_length_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_rem", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while ((index = string.indexOf(substring, index))!== -1) {\n    count++;\n    index += substring.length;\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains only characters in the given set.\n  >>> longestSubstring('', ['a'])\n  ''\n  >>> longestSubstring('a', ['a'])\n  'a'\n  >>> longestSubstring('aa', ['a'])\n  'aa'\n  >>> longestSubstring('aaa', ['a'])\n  'aaa'\n  >>> longestSubstring('aaaa', ['a'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['b', 'a'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'])\n  'aaaa'\n  >>> longestSubstring('aaaa', ['a', 'b', 'c', 'd', '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers9 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine'. \n  render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers10 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  const sortedNumbers = sortedArray.join(' ')\n  return sortedNumbers\n}\n\n/*\n  Input is a string of numbers from' zero' to' nine", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/*\n   Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (left", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sortBy(numbers);\n  const early = sortedNumbers[0];\n  const late = sortedNumbers[sortedNumbers.length - 1];\n  const earlyIndex = sortedNumbers.indexOf(early);\n  const lateIndex = sortedNumbers.indexOf(late);\n  const earlyDiff = Math.abs(early - earlyIndex);\n  const lateDiff = Math.abs(late - lateIndex);\n  const earlyClosest = earlyIndex < lateIndex? early : late;\n  const lateClosest = earlyIndex < lateIndex? late : early;\n  return [earlyClosest, lateClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sortedNumbers = sortBy(numbers);\n  const early = sortedNumbers[0];\n  const late = sortedNumbers[sortedNumbers.length - 1];\n  const earlyIndex = sortedNumbers.indexOf(early);\n  const lateIndex = sortedNumbers.indexOf(late);\n  const earlyDiff = Math.abs(early - earlyIndex);\n  const lateDiff = Math.abs(late - lateIndex);\n  const earlyClosest = earlyIndex < lateIndex? early : late;\n  const lateClosest = earlyIndex < lateIndex? late : early;\n  return [earlyClosest, lateClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const sortedNumbers = sortBy(numbers);\n  const early = sortedNumbers[0];\n  const late = sortedNumbers[sortedNumbers.length - 1];\n  const earlyIndex = sortedNumbers.indexOf(early);\n  const lateIndex = sortedNumbers.indexOf(late);\n  const earlyDiff = Math.abs(early - earlyIndex);\n  const lateDiff = Math.abs(late - lateIndex);\n  const earlyClosest = earlyIndex < lateIndex? early : late;\n  const lateClosest = earlyIndex < lateIndex? late : early;\n  return [earlyClosest, lateClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const sortedNumbers = sortBy(numbers);\n  const early = sortedNumbers[0];\n  const late = sortedNumbers[sortedNumbers.length - 1];\n  const earlyIndex = sortedNumbers.indexOf(early);\n  const lateIndex = sortedNumbers.indexOf(late);\n  const earlyDiff = Math.abs(early - earlyIndex);\n  const lateDiff = Math.abs(late - lateIndex);\n  const earlyClosest = earlyIndex < lateIndex? early : late;\n  const lateClosest = earlyIndex < lateIndex? late : early;\n  return [earlyClosest, lateClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const sortedNumbers = sortBy(numbers);\n  const early = sortedNumbers[0];\n  const late = sortedNumbers[sortedNumbers.length - 1];\n  const earlyIndex = sortedNumbers.indexOf(early);\n  const lateIndex = sortedNumbers.indexOf(late);\n  const earlyDiff = Math.abs(early - earlyIndex);\n  const lateDiff = Math.abs(late - lateIndex);\n  const earlyClosest = earlyIndex < lateIndex? early : late;\n  const lateClosest = earlyIndex < lateIndex? late : early;\n  return [earlyClosest, lateClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const sortedNumbers = sortBy(numbers);\n  const early = sortedNumbers[0];\n  const late = sortedNumbers[sortedNumbers.length - 1];\n  const earlyIndex = sortedNumbers.indexOf(early);\n  const lateIndex = sortedNumbers.indexOf(late);\n  const earlyDiff = Math.abs(early - earlyIndex);\n  const lateDiff", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n};\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomIntInclusive = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomIntInclusiveWithBounds = (min, max) => {\n  const random = getRandomInt(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBounds = (min, max) => {\n  const random = getRandomIntInclusiveWithBounds(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBounds(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBounds(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive = (min, max) => {\n  const random = getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusive(min, max);\n  return random < 0? random + 1 : random;\n};\n\nconst getRandomIntInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWithBoundsInclusiveWith", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return a copy of a string\n  >>> strcopy('abc')\n  'abc'\n  >>> strcopy('abc')\n  'abc'\n  */\nconst strcopy = (string) => {\n  return string\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a copy of a string with a given length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor17 = (n) => {\n  let divisor = 1\n  while (n % divisor!== 0) {\n    divisor++\n  }\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor = factor + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toUpperCase() : c.toLowerCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all lowercase characters converted to uppercase.\n  *\n  * For example, flipCase('hello') returns 'HELLO'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAll = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toUpperCase() : c.toLowerCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse2 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse3 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse4 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse5 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse6 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse7 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse8 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};\n\n/*\n  * For a given string, return the string with all uppercase characters converted to lowercase.\n  *\n  * For example, flipCase('HELLO') returns 'hello'\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst flipCaseAllInverse9 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) >= 97? c.toLowerCase() : c.toUpperCase());\n  });\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOut = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operations = Array.from(operations);\n  const history = [];\n  const current = 0;\n  const balance = 0;\n  const belowZero = false;\n  const isBelowZero = false;\n\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    const newBalance = current + operation;\n    if (newBalance < 0) {\n      isBelowZero = true;\n    }\n    history.push(newBalance);\n    current = newBalance;\n  }\n\n  if (isBelowZero) {\n    belowZero = true;\n  }\n\n  return belowZero;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect2 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect3 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect4 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect5 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect6 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect7 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a give number be a perfect number, and assumed differently.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const max = Math.max(...xs)\n  const min = Math.min(...xs)\n  if (max === min) {\n    return min\n  }\n  const x = (max - min) / (len - 1)\n  const xs2 = xs.slice(1)\n  const poly = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs3 = xs2.slice(1)\n  const poly2 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs4 = xs3.slice(1)\n  const poly3 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs5 = xs4.slice(1)\n  const poly4 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs6 = xs5.slice(1)\n  const poly5 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs7 = xs6.slice(1)\n  const poly6 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs8 = xs7.slice(1)\n  const poly7 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs9 = xs8.slice(1)\n  const poly8 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs10 = xs9.slice(1)\n  const poly9 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs11 = xs10.slice(1)\n  const poly10 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs12 = xs11.slice(1)\n  const poly11 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs13 = xs12.slice(1)\n  const poly12 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs14 = xs13.slice(1)\n  const poly13 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs15 = xs14.slice(1)\n  const poly14 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs16 = xs15.slice(1)\n  const poly15 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs17 = xs16.slice(1)\n  const poly16 = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const xs18 = xs17.slice(1)\n  const poly17 = (xs, x) = > {\n    return xs.reduce", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(0);\n  const l4 = l.slice(0);\n  const l5 = l.slice(0);\n  const l6 = l.slice(0);\n  const l7 = l.slice(0);\n  const l8 = l.slice(0);\n  const l9 = l.slice(0);\n  const l10 = l.slice(0);\n  const l11 = l.slice(0);\n  const l12 = l.slice(0);\n  const l13 = l.slice(0);\n  const l14 = l.slice(0);\n  const l15 = l.slice(0);\n  const l16 = l.slice(0);\n  const l17 = l.slice(0);\n  const l18 = l.slice(0);\n  const l19 = l.slice(0);\n  const l20 = l.slice(0);\n  const l21 = l.slice(0);\n  const l22 = l.slice(0);\n  const l23 = l.slice(0);\n  const l24 = l.slice(0);\n  const l25 = l.slice(0);\n  const l26 = l.slice(0);\n  const l27 = l.slice(0);\n  const l28 = l.slice(0);\n  const l29 = l.slice(0);\n  const l30 = l.slice(0);\n  const l31 = l.slice(0);\n  const l32 = l.slice(0);\n  const l33 = l.slice(0);\n  const l34 = l.slice(0);\n  const l35 = l.slice(0);\n  const l36 = l.slice(0);\n  const l37 = l.slice(0);\n  const l38 = l.slice(0);\n  const l39 = l.slice(0);\n  const l40 = l.slice(0);\n  const l41 = l.slice(0);\n  const l42 = l.slice(0);\n  const l43 = l.slice(0);\n  const l44 = l.slice(0);\n  const l45 = l.slice(0);\n  const l46 = l.slice(0);\n  const l47 = l.slice(0);\n  const l48 = l.slice(0);\n  const l49 = l.slice(0);\n  const l50 = l.slice(0);\n  const l51 = l.slice(0);\n  const l52 = l.slice(0);\n  const l53 = l.slice(0);\n  const l54 = l.slice(0);\n  const l55 = l.slice(0);\n  const l56 = l.slice(0);\n  const l57 = l.slice(0);\n  const l58 = l.slice(0);\n  const l59 = l.slice(0);\n  const l60 = l.slice(0);\n  const l61 = l.slice(0);\n  const l62 = l.slice(0);\n  const l63 = l.slice(0);\n  const l64 = l.slice(0);\n  const l65 = l.slice(0);\n  const l66 = l.slice(0);\n  const l67 = l.slice(0);\n  const l68 = l.slice(0);\n  const l69 = l.slice(0);\n  const l70 = l.slice(0);\n  const l71 = l.slice(0);\n  const l72 = l.slice(0);\n  const l73 = l.slice(0);\n  const l74 = l.slice(0);\n  const l75 = l.slice(0);\n  const l76 = l.slice(0);\n  const l77 = l.slice(0);\n  const l78 = l.slice(0);\n  const l79 = l.slice(0);\n  const l80 = l.slice(0);\n  const l81 = l.slice(0);\n  const l82 = l.slice(0);\n  const l83 = l.slice(0);\n  const l84 = l.slice(0);\n  const l85 = l.slice(0);\n  const l86 = l.slice(0);\n  const l87 = l.slice(0);\n  const l88 = l.slice(0);\n  const l89 = l.slice(0);\n  const l90 = l.slice(0);\n  const l91 = l.slice(0);\n  const l92 = l.slice(0);\n  const l93 = l.slice(0);\n  const l94 = l.slice(0);\n  const l95 = l.slice(0);\n  const l96 = l.slice(0);\n  const l97 = l.slice(0);\n  const l98 = l.slice(0);\n  const l99 = l.slice(0);\n  const l100 = l.slice(0);\n  const l101 = l.slice(0);\n  const l102 = l.slice(0);\n  const l103 = l.slice(0);\n  const l104 = l.slice(0);\n  const l105 = l.slice(0);\n  const l106 = l.slice(0);\n  const l107 = l.slice(0);\n  const l108 = l.slice(0);\n  const l109 = l.slice(0);\n  const l110 = l.slice(0);\n  const l111 = l.slice(0);\n  const l112 = l.slice(0);\n  const l113 = l.slice(0);\n  const l114 = l.slice(0);\n  const l115 = l.slice(0);\n  const l116 = l.slice(0);\n  const l117 = l.slice(0);\n  const l118", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nexport default fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x) => x - 1);\n  const oddIndex = odd.map((x) => x - 1);\n  const evenValue = even.map((x) => x);\n  const oddValue = odd.map((x) => x);\n  const sorted = evenIndex.concat(oddIndex).concat(evenValue).concat(oddValue);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const evenIndex = even.map((x", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\nconst encodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst encode = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decode = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst encode_cyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decode_cyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst encode_cyclic_decode = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decode_cyclic_decode = (s) => {\n  const groups = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = (x) => Math.abs(x - mean)\n  const mad = numbers.map(deviation)\n  return mean(mad)\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n    let {x1, y1, x2, y2} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_} = {x1:0, y1:0, x2:0, y2:0}\n    let {x1_, y1_, x2_, y2_}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero2 takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero3 takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero4 takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero5 takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero5([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero5([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero5([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero5([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero6 takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero6([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero6([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero6([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero6([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero7 takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero7([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero7([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero7([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero7([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero7([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0;\n  for (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase2 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase3 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase4 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase5 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase6 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase7 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase8 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase9 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase10 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase11 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase12 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase13 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase14 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase15 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase16 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase17 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase18 = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a *", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n\n  let lastChar = text[textLength - 1]\n  let currentChar = text[0]\n\n  while (lastChar!== currentChar) {\n    lastChar = text[textLength - 1]\n    currentChar = text[0]\n  }\n\n  return true\n}\n\nexport default isPalindrome\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const nn = n % p;\n  if (nn === 0) return 1;\n  return nn;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(0, 9)\n  0\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, -9)\n  0\n  >>> gcd(-9, 0)\n  0\n  >>> gcd(-9, -9)\n  1\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  while (a!== 0) {\n    const n = b;\n    b = a;\n    a = n;\n  }\n  return b;\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 6)\n  6\n  >>> lcm(3, 9)\n  9\n  >>> lcm(0, 9)\n  0\n  >>> lcm(0, 0)\n  0\n  >>> lcm(0, -9)\n  0\n  >>> lcm(-9, 0)\n  0\n  >>> lcm(-9, -9)\n  0\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(0, 9)\n  0\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, -9)\n  0\n  >>> gcd(-9, 0)\n  0\n  >>> gcd(-9, -9)\n  1\n  */\nconst gcd2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  while (a!== 0) {\n    const n = b;\n    b = a;\n    a = n;\n  }\n  return b;\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 6)\n  6\n  >>> lcm(3, 9)\n  9\n  >>> lcm(0, 9)\n  0\n  >>> lcm(0, 0)\n  0\n  >>> lcm(0, -9)\n  0\n  >>> lcm(-9, 0)\n  0\n  >>> lcm(-9, -9)\n  0\n  */\nconst lcm2 = (a, b) => {\n  return a * b / gcd2(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(0, 9)\n  0\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, -9)\n  0\n  >>> gcd(-9, 0)\n  0\n  >>> gcd(-9, -9)\n  1\n  */\nconst gcd3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  while (a!== 0) {\n    const n = b;\n    b = a;\n    a = n;\n  }\n  return b;\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 6)\n  6\n  >>> lcm(3, 9)\n  9\n  >>> lcm(0, 9)\n  0\n  >>> lcm(0, 0)\n  0\n  >>> lcm(0, -9)\n  0\n  >>> lcm(-9, 0)\n  0\n  >>> lcm(-9, -9)\n  0\n  */\nconst lcm3 = (a, b) => {\n  return a * b / gcd3(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(0, 9)\n  0\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, -9)\n  0\n  >>> gcd(-9, 0)\n  0\n  >>> gcd(-9, -9)\n  1\n  */\nconst gcd4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  while (a!== 0) {\n    const n = b;\n    b = a;\n    a = n;\n  }\n  return b;\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 6)\n  6\n  >>> lcm(3, 9)\n  9\n  >>> lcm(0, 9)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4.5)\n  [1, 4.5, 2, 4.5, 3]\n  >>> intersperse([1, 2, 3], 4.5, 'x')\n  [1, 4.5x, 2, 4.5x, 3]\n  */\nconst intersperse2 = (numbers, delimeter, delimiter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter);\n        i++;\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse2([1, 2, 3], 4, 'x')\n  [1, 4x, 2, 4x, 3]\n  >>> intersperse2([1, 2, 3], 4.5, 'x')\n  [1, 4.5x, 2, 4.5x, 3]\n  >>> intersperse2([1, 2, 3], 4.5, 'x', 'y')\n  [1, 4.5x, 2, 4.5y, 3]\n  */\nconst intersperse3 = (numbers, delimeter, delimiter1, delimiter2) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter1);\n        i++;\n        if (i < numbers.length) {\n          result.push(delimiter2);\n          i++;\n        }\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse3([1, 2, 3], 4, 'x', 'y')\n  [1, 4x, 2, 4y, 3]\n  >>> intersperse3([1, 2, 3], 4.5, 'x', 'y')\n  [1, 4.5x, 2, 4.5y, 3]\n  >>> intersperse3([1, 2, 3], 4.5, 'x', 'y', 'z')\n  [1, 4.5x, 2, 4.5y, 3, 4.5z]\n  */\nconst intersperse4 = (numbers, delimeter, delimiter1, delimiter2, delimiter3) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter1);\n        i++;\n        if (i < numbers.length) {\n          result.push(delimiter2);\n          i++;\n          if (i < numbers.length) {\n            result.push(delimiter3);\n            i++;\n          }\n        }\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse4([1, 2, 3], 4, 'x', 'y', 'z')\n  [1, 4x, 2, 4y, 3, 4z]\n  >>> intersperse4([1, 2, 3], 4.5, 'x', 'y', 'z')\n  [1, 4.5x, 2, 4.5y, 3, 4.5z]\n  >>> intersperse4([1, 2, 3], 4.5, 'x', 'y', 'z', 'w')\n  [1, 4.5x, 2, 4.5y, 3, 4.5z, 4.5w]\n  */\nconst intersperse5 = (numbers, delimeter, delimiter1, delimiter2, delimiter3, delimiter4) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n      if (i < numbers.length) {\n        result.push(delimiter1);\n        i++;\n        if (i < numbers.length) {\n          result.push(delimiter2);\n          i++;\n          if (i < numbers.length) {\n            result.push(delimiter3);\n            i++;\n            if (i < numbers.length) {\n              result.push(delimiter4);\n              i++;\n            }\n          }\n        }\n      }\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse5([1, 2, 3], 4, 'x', 'y', 'z', 'w')\n  [1, 4x, 2, 4y, 3, 4z, 4w]\n  >>> intersperse5([1, 2, 3], 4.5, 'x', 'y', 'z', 'w')\n  [1, 4.5x, 2,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n */\n\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return (ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26 + \" a\".charCodeAt(0);\n  }).join(\" \");\n};\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return (ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) ) % 26 + \" a\".charCodeAt(0);\n  }).join(\" \");\n};\n\nconst encode = (s) => {\n  return encodeShift(s);\n};\n\nconst decode = (s) => {\n  return decodeShift(s);\n};\n\nconst encode_shift = (s) => {\n  return encodeShift(s);\n};\n\nconst decode_shift = (s) => {\n  return decodeShift(s);\n};\n\nconst encode_shift_decode = (s) => {\n  return encodeShift(decodeShift(s));\n};\n\nconst encode_shift_decode_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(s)));\n};\n\nconst encode_shift_decode_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(s))));\n};\n\nconst encode_shift_decode_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))))));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))))))\n  ));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))))))\n  ));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))))))\n  ));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))))))\n  ));\n};\n\nconst encode_shift_decode_shift_shift_shift_shift_shift_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const result = text.replace(/[aeiouAEIOU]/g, '')\n  return result\n}\n\n/*\n  removePunctuation is a function that takes bowed stringed instrument and returns drawstring without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['!', '?', '.', ';', ':', '-', '_', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^', '&', '/', '+', '=', '$', '*', '^', '~', '`', '\\'', '\"', '\\\\', '|', '*', '(', ')', '{', '}', '[', ']', '<', '>', '@', '#', '$', '%', '^',", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Return the sum of all numbers in the list l.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 2, 4, 10, 20])\n  30\n  >>> sum([1, 2, 4, 10, 20, 30])\n  60\n  >>> sum([1, 2, 4, 10, 20, 30, 40])\n  80\n  */\nconst sum = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*\n  Return the average of all numbers in the list l.\n  >>> average([1, 2, 4, 10])\n  5\n  >>> average([1, 2, 4, 10, 20])\n  10\n  >>> average([1, 2, 4, 10, 20, 30])\n  15\n  >>> average([1, 2, 4, 10, 20, 30, 40])\n  20\n  */\nconst average = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum / len\n}\n\n/*\n  Return the median of all numbers in the list l.\n  >>> median([1, 2, 4, 10])\n  4\n  >>> median([1, 2, 4, 10, 20])\n  10\n  >>> median([1, 2, 4, 10, 20, 30])\n  15\n  >>> median([1, 2, 4, 10, 20, 30, 40])\n  20\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  if (len % 2 === 0) {\n    return (l[len / 2 - 1] + l[len / 2]) / 2\n  } else {\n    return l[len / 2]\n  }\n}\n\n/*\n  Return the mode of all numbers in the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 20])\n  10\n  >>> mode([1, 2, 4, 10, 20, 30])\n  20\n  >>> mode([1, 2, 4, 10, 20, 30, 40])\n  30\n  */\nconst mode = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  let mode = 0\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] === mode) {\n      count++\n    } else if (l[i] > mode) {\n      mode = l[i]\n      count = 1\n    }\n  }\n  return mode\n}\n\n/*\n  Return the sum of the squares of all numbers in the list l.\n  >>> sumOfSquares([1, 2, 4, 10])\n  25\n  >>> sumOfSquares([1, 2, 4, 10, 20])\n  400\n  >>> sumOfSquares([1, 2, 4, 10, 20, 30])\n  600\n  >>> sumOfSquares([1, 2, 4, 10, 20, 30, 40])\n  800\n  */\nconst sumOfSquares = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.pow(l[i], 2)\n  }\n  return sum\n}\n\n/*\n  Return the sum of the cubes of all numbers in the list l.\n  >>> sumOfCubes([1, 2, 4, 10])\n  90\n  >>> sumOfCubes([1, 2, 4, 10, 20])\n  400\n  >>> sumOfCubes([1, 2, 4, 10, 20, 30])\n  900\n  >>> sumOfCubes([1, 2, 4, 10, 20, 30, 40])\n  1600\n  */\nconst sumOfCubes = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.pow(l[i], 3)\n  }\n  return sum\n}\n\n/*\n  Return the sum of the cubes of all numbers in the list l.\n  >>> sumOfSquares([1, 2, 4, 10])\n  25\n  >>> sumOfSquares([1, 2, 4, 10, 20])\n  400\n  >>> sumOfSquares([1, 2, 4, 10, 20, 30])\n  600\n  >>> sumOfSquares([1, 2, 4, 10, 20, 30, 40])\n  800\n  */\nconst sumOfSquares = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.pow(l[i], 2)\n  }\n  return sum\n}\n\n/*\n  Return the sum of the cubes of all numbers in the list l.\n  >>> sumOfCubes([1, 2, 4, 10])\n  90\n  >>> sumOfCubes([1, 2, 4, 10, 20])\n  400\n  >>> sumOfCubes([1, 2, 4, 10, 20, 30])\n  900\n  >>> sumOfCubes([1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  625\n  */\nconst power = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power2 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power3 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power4 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power5 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power6 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power7 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power8 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power9 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power10 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power11 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power12 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power13 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power14 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power15 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  625\n  */\nconst power16 = (x, y, n) => {\n  return Math.p", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) {\n    return false\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcd', 'dddddddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  >>> sameWords('eabcd', 'dddddddabce')\n  false\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  */\nconst sameWords = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) {\n    return false\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcd', 'dddddddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  >>> sameWords('eabcd', 'dddddddabce')\n  false\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  */\nconst sameWords2 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) {\n    return false\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords2('eabcd', 'dddddddabc')\n  true\n  >>> sameWords2('abcd', 'dddddddabce')\n  false\n  >>> sameWords2('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  >>> sameWords2('eabcd', 'dddddddabce')\n  false\n  >>> sameWords2('abcd', 'dddddddabc')\n  true\n  */\nconst sameWords3 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) {\n    return false\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords3('eabcd', 'dddddddabc')\n  true\n  >>> sameWords3('abcd', 'dddddddabce')\n  false\n  >>> sameWords3('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  >>> sameWords3('eabcd', 'dddddddabce')\n  false\n  >>> sameWords3('abcd', 'dddddddabc')\n  true\n  */\nconst sameWords4 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) {\n    return false\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords4('eabcd', 'dddddddabc')\n  true\n  >>> sameWords4('abcd', 'dddddddabce')\n  false\n  >>> sameWords4('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  >>> sameWords4('eabcd', 'dddddddabce')\n  false\n  >>> sameWords4('abcd', 'dddddddabc')\n  true\n  */\nconst sameWords5 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) {\n    return false\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords5('eabcd', 'dddddddabc')\n  true\n  >>> sameWords5('abcd', 'dddddddabce')\n  false\n  >>> sameWords5('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  >>> sameWords5('eabcd', 'dddddddabce')\n  false\n  >>> sameWords5('abcd', 'dddddddabc')\n  true\n  */\nconst sameWords6 = (s0,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength === 0) {\n    return false\n  }\n  const bracketsArray = brackets.split(\" \")\n  const bracketsLength = bracketsArray.length\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket.split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[0].split(\"<\")\n  })\n  const bracketsArray = bracketsArray.map(bracket => {\n    return bracket[1].split(\">", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len = l1.length;\n  const l2len = l2.length;\n  const common = [];\n  let i = 0;\n  let j = 0;\n  while (i < len && j < l2len) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor14", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.split('').map(paren_group => paren_group.split('('));\n  const paren_levels = paren_groups.map(paren_group => paren_group.map(paren_level => paren_level.split(')').length));\n  return paren_levels.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits = (digit_string) => {\n  return digit_string.split('').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits2 = (digit_string) => {\n  return digit_string.split('').reduce((acc, curr) => {\n    return acc + parseInt(curr);\n  }, 0);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits3 = (digit_string) => {\n  return parseInt(digit_string);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits4 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits5 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits6 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits7 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits8 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits9 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits10 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits11 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits12 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits13 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits14 = (digit_string) => {\n  return parseInt(digit_string, 10);\n};\n\n/*\n  Input to this function is a string of digits. \n  Output is the number of digits in the string.\n  E.g. '123' has 3 digits.\n  \n  >>> parseDigits('123')\n  3\n  */\nconst parseDigits15", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsLength = brackets.length\n  let bracketsIndex = 0\n  let bracketsStack = []\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [1, 4, 12, 20, 30, 42]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440, 1800]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440, 1800, 2160]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440, 1800, 2160, 2880]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440, 1800, 2160, 2880, 3600]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440, 1800, 2160, 2880, 3600, 4320]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 432, 560, 720, 900, 1200, 1440, 1800, 2160, 2880, 3600, 4320, 5400]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [1, 4, 12, 20", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount++\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"a\")\n  1\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount++\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"a\")\n  1\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount++\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"a\")\n  1\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount++\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"a\")\n  1\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount++\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"a\")\n  1\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount++\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function which take a string as a parameter and return the number of \n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"a\")\n  1\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const length = numeral.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    result.push(numeral[(length - 1) - i]);\n  }\n  if (shift > length) {\n    return result.reverse();\n  }\n  for (let i = 0; i < shift; i++) {\n    result.unshift(numeral[0]);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 3)\n  \"21\"\n  >>> circularShift(12, 4)\n  \"12\"\n  >>> circularShift(12, 5)\n  \"21\"\n  >>> circularShift(12, 6)\n  \"12\"\n  >>> circularShift(12, 7)\n  \"21\"\n  >>> circularShift(12, 8)\n  \"12\"\n  >>> circularShift(12, 9)\n  \"21\"\n  >>> circularShift(12, 10)\n  \"12\"\n  >>> circularShift(12, 11)\n  \"21\"\n  >>> circularShift(12, 12)\n  \"12\"\n  >>> circularShift(12, 13)\n  \"21\"\n  >>> circularShift(12, 14)\n  \"12\"\n  >>> circularShift(12, 15)\n  \"21\"\n  >>> circularShift(12, 16)\n  \"12\"\n  >>> circularShift(12, 17)\n  \"21\"\n  >>> circularShift(12, 18)\n  \"12\"\n  >>> circularShift(12, 19)\n  \"21\"\n  >>> circularShift(12, 20)\n  \"12\"\n  >>> circularShift(12, 21)\n  \"21\"\n  >>> circularShift(12, 22)\n  \"12\"\n  >>> circularShift(12, 23)\n  \"21\"\n  >>> circularShift(12, 24)\n  \"12\"\n  >>> circularShift(12, 25)\n  \"21\"\n  >>> circularShift(12, 26)\n  \"12\"\n  >>> circularShift(12, 27)\n  \"21\"\n  >>> circularShift(12, 28)\n  \"12\"\n  >>> circularShift(12, 29)\n  \"21\"\n  >>> circularShift(12, 30)\n  \"12\"\n  >>> circularShift(12, 31)\n  \"21\"\n  >>> circularShift(12, 32)\n  \"12\"\n  >>> circularShift(12, 33)\n  \"21\"\n  >>> circularShift(12, 34)\n  \"12\"\n  >>> circularShift(12, 35)\n  \"21\"\n  >>> circularShift(12, 36)\n  \"12\"\n  >>> circularShift(12, 37)\n  \"21\"\n  >>> circularShift(12, 38)\n  \"12\"\n  >>> circularShift(12, 39)\n  \"21\"\n  >>> circularShift(12, 40)\n  \"12\"\n  >>> circularShift(12, 41)\n  \"21\"\n  >>> circularShift(12, 42)\n  \"12\"\n  >>> circularShift(12, 43)\n  \"21\"\n  >>> circularShift(12, 44)\n  \"12\"\n  >>> circularShift(12, 45)\n  \"21\"\n  >>> circularShift(12, 46)\n  \"12\"\n  >>> circularShift(12, 47)\n  \"21\"\n  >>> circularShift(12, 48)\n  \"12\"\n  >>> circularShift(12, 49)\n  \"21\"\n  >>> circularShift(12, 50)\n  \"12\"\n  >>> circularShift(12, 51)\n  \"21\"\n  >>> circularShift(12, 52)\n  \"12\"\n  >>> circularShift(12, 53)\n  \"21\"\n  >>> circularShift(12, 54)\n  \"12\"\n  >>> circularShift(12, 55)\n  \"21\"\n  >>> circularShift(12, 56)\n  \"12\"\n  >>> circularShift(12, 57)\n  \"21\"\n  >>> circularShift(12, 58)\n  \"12\"\n  >>> circularShift(12, 59)\n  \"21\"\n  >>> circularShift(12, 60)\n  \"12\"\n  >>> circularShift(12, 61)\n  \"21\"\n  >>> circularShift(12, 62)\n  \"12\"\n  >>> circularShift(12, 63)\n  \"21\"\n  >>> circularShift(12, 64)\n  \"12\"\n  >>> circularShift(12, 65)\n  \"21\"\n  >>> circularShift(12, 66)\n  \"12\"\n  >>> circularShift(12, 67)\n  \"21\"\n  >>> circularShift(12, 68)\n  \"12\"\n  >>> circularShift(12, 69)\n  \"21\"\n  >>> circularShift(12, 70)\n  \"12\"\n  >>> circularShift(12, 71)\n  \"21\"\n  >>> circularShift(12, 72)\n  \"12\"\n  >>> circularShift(12, 73)\n  \"21\"\n  >>> circularShift(12, 74)\n  \"12\"\n  >>> circularShift(12, 75)\n  \"21\"\n  >>> circularShift(12, 76)\n  \"12\"\n  >>> circularShift(12, 77)\n  \"21\"\n  >>> circularShift(12, 78)\n  \"12\"\n  >>> circularShift(12, 79)\n  \"21\"\n  >>> circularShift(12, 80)\n  \"12\"\n  >>> circularShift(12, 81)\n  \"21\"\n  >>> circularShift(12, 82)\n  \"12\"\n  >>> circularShift(12, 83)\n  \"21\"\n  >>> circularShift(12, 84)\n  \"12\"\n  >>> circularShift(12, 85)\n  \"21\"\n  >>> circularShift(12, 86)\n  \"12\"\n  >>> circularShift(12, 87)\n  \"21\"\n  >>> circularShift(12, 88)\n  \"12\"\n  >>> circularShift(12, 89)\n  \"21\"\n  >>> circularShift(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let string = s.split(\" \")\n   let fruit = string.map(x => parseInt(x))\n   let total = fruit.reduce((a, b) => a + b)\n   let yield = total / n\n   return yield\n }\n*/\n\nconst fruitDistribution = (s, n) => {\n  let string = s.split(\" \")\n  let fruit = string.map(x => parseInt(x))\n  let total = fruit.reduce((a, b) => a + b)\n  let yield = total / n\n  return yield\n}\n\nfruitDistribution(\"5 apple and 6 orange \", 19)\n// 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\", 3)\n// 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges \", 100)\n// 100 - 2 - 3 = 95\nfruitDistribution(\"100 apple and 1 oranges\", 120)\n// 120 - 100 - 1 = 19\n\nfruitDistribution(\"5 apple and 6 orange \", 19)\n// 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\", 3)\n// 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges \", 100)\n// 100 - 2 - 3 = 95\nfruitDistribution(\"100 apple and 1 oranges\", 120)\n// 120 - 100 - 1 = 19\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const arrValue = arr.reduce((acc, node) => {\n    if (acc === 0) {\n      return node\n    }\n    return Math.min(acc, node)\n  }, Number.MAX_VALUE)\n  const arrIndex = arr.reduce((acc, node, index) => {\n    if (acc === 0) {\n      return index\n    }\n    return Math.min(acc, index)\n  }, Number.MAX_VALUE)\n  const arrExponent = arr.reduce((acc, node, index) => {\n    if (acc === 0) {\n      return index\n    }\n    return Math.pow(node, index)\n  }, Number.MAX_VALUE)\n  const arrList = [arrValue, arrIndex]\n  if (arrExponent!== 0) {\n    arrList.push(Math.pow(arrValue, arrIndex))\n  }\n  return arrList\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  return result? result : -1;\n};\n\nconst search = (lst) => {\n  const result = lst.find((x) => x > 0 && x >= lst.indexOf(x));\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\nexport default filterBySubstring;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let min = lst[0]\n  let max = lst[len - 1]\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    while (i < len && lst[i] < min) {\n      min = lst[i]\n      i++\n    }\n    while (j >= 0 && lst[j] > max) {\n      max = lst[j]\n      j--\n    }\n    sorted.push(lst[i])\n    sorted.push(lst[j])\n    i++\n    j--\n  }\n  return sorted\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6]))\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c)) / 2;\n};\n\n/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  if (q.length === 1) return q[0] <= w\n  if (q.length === 2) return q[0] + q[1] <= w\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w\n  if (q.length === 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w\n  if (q.length === 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w\n  if (q.length === 10) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w\n  if (q.length === 11) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w\n  if (q.length === 12) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] <= w\n  if (q.length === 13) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] <= w\n  if (q.length === 14) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] <= w\n  if (q.length === 15) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] <= w\n  if (q.length === 16) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] <= w\n  if (q.length === 17) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] <= w\n  if (q.length === 18) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] <= w\n  if (q.length === 19) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] <= w\n  if (q.length === 20) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] + q[19] <= w\n  if (q.length === 21", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let temp = arr[minIndex];\n  arr[minIndex] = arr[arr.length - 1];\n  arr[arr.length - 1] = temp;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[arr.length - i - 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i].length === lst2[j].length) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst lst1 = [\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = isPrime(a)\n  const prime2 = isPrime(a * a)\n  const prime3 = isPrime(a * a * a)\n  return prime && prime2 && prime3\n}\n\nconst isPrime = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  if (num % 3 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime2 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime3 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime4 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime5 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime6 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime7 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime8 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime9 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime10 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime11 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false\n  }\n  return true\n}\n\nconst isPrime12 = (num) => {\n  if (num < 2) return false\n  if (num === 2) return true\n  if (num === 3) return true\n  if (num % 2 === 0) return false\n  const sqrt = Math.sqrt(num)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\n/*\n  Your task is to write a function that returns the number of simple powers of a number.\n  For example:\n  isSimplePower(2, 2) => 1\n  isSimplePower(3, 2) => 2\n  isSimplePower(4, 2) => 2\n  isSimplePower(5, 2) => 3\n  isSimplePower(6, 2) => 3\n  isSimplePower(7, 2) => 3\n  isSimplePower(8, 2) => 4\n  isSimplePower(9, 2) => 4\n  isSimplePower(10, 2) => 4\n  isSimplePower(11, 2) => 5\n  isSimplePower(12, 2) => 5\n  isSimplePower(13, 2) => 5\n  isSimplePower(14, 2) => 5\n  isSimplePower(15, 2) => 6\n  isSimplePower(16, 2) => 6\n  isSimplePower(17, 2) => 6\n  isSimplePower(18, 2) => 6\n  isSimplePower(19, 2) => 7\n  isSimplePower(20, 2) => 7\n  isSimplePower(21, 2) => 7\n  isSimplePower(22, 2) => 7\n  isSimplePower(23, 2) => 7\n  isSimplePower(24, 2) => 8\n  isSimplePower(25, 2) => 8\n  isSimplePower(26, 2) => 8\n  isSimplePower(27, 2) => 8\n  isSimplePower(28, 2) => 8\n  isSimplePower(29, 2) => 9\n  isSimplePower(30, 2) => 9\n  isSimplePower(31, 2) => 9\n  isSimplePower(32, 2) => 9\n  isSimplePower(33, 2) => 9\n  isSimplePower(34, 2) => 9\n  isSimplePower(35, 2) => 10\n  isSimplePower(36, 2) => 10\n  isSimplePower(37, 2) => 10\n  isSimplePower(38, 2) => 10\n  isSimplePower(39, 2) => 10\n  isSimplePower(40, 2) => 10\n  isSimplePower(41, 2) => 11\n  isSimplePower(42, 2) => 11\n  isSimplePower(43, 2) => 11\n  isSimplePower(44, 2) => 11\n  isSimplePower(45, 2) => 11\n  isSimplePower(46, 2) => 11\n  isSimplePower(47, 2) => 11\n  isSimplePower(48, 2) => 12\n  isSimplePower(49, 2) => 12\n  isSimplePower(50, 2) => 12\n  isSimplePower(51, 2) => 12\n  isSimplePower(52, 2) => 12\n  isSimplePower(53, 2) => 12\n  isSimplePower(54, 2) => 12\n  isSimplePower(55, 2) => 12\n  isSimplePower(56, 2) => 12\n  isSimplePower(57, 2) => 12\n  isSimplePower(58, 2) => 12\n  isSimplePower(59, 2) => 12\n  isSimplePower(60, 2) => 12\n  isSimplePower(61, 2) => 12\n  isSimplePower(62, 2) => 12\n  isSimplePower(63, 2) => 12\n  isSimplePower(64, 2) => 12\n  isSimplePower(65, 2) => 12\n  isSimplePower(66, 2) => 12\n  isSimplePower(67, 2) => 12\n  isSimplePower(68, 2) => 12\n  isSimplePower(69, 2) => 12\n  isSimplePower(70, 2) => 12\n  isSimplePower(71, 2) => 12\n  isSimplePower(72, 2) => 12\n  isSimplePower(73, 2) => 12\n  isSimplePower(74, 2) => 12\n  isSimplePower(75, 2) => 12\n  isSimplePower(76, 2) => 12\n  isSimplePower(77, 2) => 12\n  isSimplePower(78, 2) => 12\n  isSimplePower(79, 2) => 12\n  isSimplePower(80, 2) => 12\n  isSimplePower(81, 2) => 12\n  isSimplePower(82, 2) => 12\n  isSimplePower(83, 2) => 12\n  isSimplePower(84, 2) => 12\n  isSimplePower(85, 2) => 12\n  isSimplePower(86, 2) => 12\n  isSimplePower(87, 2) => 12\n  isSimplePower(88, 2) => 12\n  isSimplePower(89, 2) => 12\n  isSimplePower(90, 2) => 12\n  isSimplePower(91, 2) => 12\n  isSimplePower(92, 2) => 12\n  isSimplePower(93, 2) => 12\n  isSimplePower(94, 2) => 12\n  isSimplePower(95, 2) => 12\n  isSimplePower(96, 2) => 12\n  isSimplePower(97, 2) => 12\n  isSimplePower(98, 2) => 12\n  isSimplePower(99, 2) => 12\n  isSimplePower(100, 2) => 12\n  isSimplePower(101, 2) => 12\n  isSimplePower(102, 2) => 12\n  isSimplePower(103, 2) => 12\n  isSimplePower(104, 2) => 12\n  isSimplePower(105, 2) => 12\n  isSimplePower(106, 2) => 12\n  isSimplePower(107, 2) => 12\n  isSimplePower(108, 2) => 12\n  isSimplePower(109, 2) => 12\n  isSimplePower(110, 2) => 12\n  isSimplePower(111, 2) => 12\n  isSimplePower(112,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return true;\n  }\n  if (a % 5 === 0) {\n    return true;\n  }\n  if (a % 7 === 0) {\n    return true;\n  }\n  if (a % 11 === 0) {\n    return true;\n  }\n  if (a % 13 === 0) {\n    return true;\n  }\n  if (a % 17 === 0) {\n    return true;\n  }\n  if (a % 19 === 0) {\n    return true;\n  }\n  if (a % 23 === 0) {\n    return true;\n  }\n  if (a % 29 === 0) {\n    return true;\n  }\n  if (a % 31 === 0) {\n    return true;\n  }\n  if (a % 37 === 0) {\n    return true;\n  }\n  if (a % 41 === 0) {\n    return true;\n  }\n  if (a % 43 === 0) {\n    return true;\n  }\n  if (a % 47 === 0) {\n    return true;\n  }\n  if (a % 53 === 0) {\n    return true;\n  }\n  if (a % 59 === 0) {\n    return true;\n  }\n  if (a % 61 === 0) {\n    return true;\n  }\n  if (a % 67 === 0) {\n    return true;\n  }\n  if (a % 71 === 0) {\n    return true;\n  }\n  if (a % 73 === 0) {\n    return true;\n  }\n  if (a % 79 === 0) {\n    return true;\n  }\n  if (a % 83 === 0) {\n    return true;\n  }\n  if (a % 89 === 0) {\n    return true;\n  }\n  if (a % 97 === 0) {\n    return true;\n  }\n  if (a % 101 === 0) {\n    return true;\n  }\n  if (a % 103 === 0) {\n    return true;\n  }\n  if (a % 107 === 0) {\n    return true;\n  }\n  if (a % 109 === 0) {\n    return true;\n  }\n  if (a % 113 === 0) {\n    return true;\n  }\n  if (a % 127 === 0) {\n    return true;\n  }\n  if (a % 131 === 0) {\n    return true;\n  }\n  if (a % 137 === 0) {\n    return true;\n  }\n  if (a % 139 === 0) {\n    return true;\n  }\n  if (a % 143 === 0) {\n    return true;\n  }\n  if (a % 149 === 0) {\n    return true;\n  }\n  if (a % 151 === 0) {\n    return true;\n  }\n  if (a % 157 === 0) {\n    return true;\n  }\n  if (a % 163 === 0) {\n    return true;\n  }\n  if (a % 167 === 0) {\n    return true;\n  }\n  if (a % 179 === 0) {\n    return true;\n  }\n  if (a % 181 === 0) {\n    return true;\n  }\n  if (a % 187 === 0) {\n    return true;\n  }\n  if (a % 191 === 0) {\n    return true;\n  }\n  if (a % 193 === 0) {\n    return true;\n  }\n  if (a % 197 === 0) {\n    return true;\n  }\n  if (a % 199 === 0) {\n    return true;\n  }\n  if (a % 211 === 0) {\n    return true;\n  }\n  if (a % 223 === 0) {\n    return true;\n  }\n  if (a % 227 === 0) {\n    return true;\n  }\n  if (a % 229 === 0) {\n    return true;\n  }\n  if (a % 233 === 0) {\n    return true;\n  }\n  if (a % 239 === 0) {\n    return true;\n  }\n  if (a % 241 === 0) {\n    return true;\n  }\n  if (a % 243 === 0) {\n    return true;\n  }\n  if (a % 247 === 0) {\n    return true;\n  }\n  if (a % 251 === 0) {\n    return true;\n  }\n  if (a % 257 === 0) {\n    return true;\n  }\n  if (a % 263 === 0) {\n    return true;\n  }\n  if (a % 269 === 0) {\n    return true;\n  }\n  if (a % 271 === 0) {\n    return true;\n  }\n  if (a % 277 === 0) {\n    return true;\n  }\n  if (a % 281 === 0) {\n    return true;\n  }\n  if (a % 283 === 0) {\n    return true;\n  }\n  if (a % 289 === 0) {\n    return true;\n  }\n  if (a % 293 === 0) {\n    return true;\n  }\n  if (a % 307 === 0) {\n    return true;\n  }\n  if (a % 311 === 0) {\n    return true;\n  }\n  if (a % 313 === 0) {\n    return true;\n  }\n  if (a % 317 === 0) {\n    return true;\n  }\n  if (a % 319 === 0) {\n    return true;\n  }\n  if (a % 331 === 0) {\n    return true;\n  }\n  if (a % 337 === 0) {\n    return true;\n  }\n  if (a % 347 === 0) {\n    return true;\n  }\n  if (a % 349 === 0) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let numArr = num.split(\"\");\n  let len = numArr.length;\n  let i = 0;\n  while (i < len) {\n    let digit = numArr[i];\n    if (digit === \"A\" || digit === \"B\" || digit === \"C\" || digit === \"D\" || digit === \"E\" || digit === \"F\") {\n      digit = parseInt(digit, 16);\n      result += Math.pow(digit, 2);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isFlower = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower3 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower4 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower5 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower6 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower7 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower8 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower9 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower10 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower11 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFlower12 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    if (isFlower(i)) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = '';\n  let decimalDigits = '';\n  let decimalDigitsLength = decimal.length;\n  let decimalDigitsLengthMinusOne = decimalDigitsLength - 1;\n  let decimalDigitsLengthMinusTwo = decimalDigitsLength - 2;\n  let decimalDigitsLengthMinusThree = decimalDigitsLength - 3;\n  let decimalDigitsLengthMinusFour = decimalDigitsLength - 4;\n  let decimalDigitsLengthMinusFive = decimalDigitsLength - 5;\n  let decimalDigitsLengthMinusSix = decimalDigitsLength - 6;\n  let decimalDigitsLengthMinusSeven = decimalDigitsLength - 7;\n  let decimalDigitsLengthMinusEight = decimalDigitsLength - 8;\n  let decimalDigitsLengthMinusNine = decimalDigitsLength - 9;\n  let decimalDigitsLengthMinusTen = decimalDigitsLength - 10;\n  let decimalDigitsLengthMinusEleven = decimalDigitsLength - 11;\n  let decimalDigitsLengthMinusTwelve = decimalDigitsLength - 12;\n  let decimalDigitsLengthMinusThirteen = decimalDigitsLength - 13;\n  let decimalDigitsLengthMinusFourteen = decimalDigitsLength - 14;\n  let decimalDigitsLengthMinusFifteen = decimalDigitsLength - 15;\n  let decimalDigitsLengthMinusSixteen = decimalDigitsLength - 16;\n  let decimalDigitsLengthMinusSeventeen = decimalDigitsLength - 17;\n  let decimalDigitsLengthMinusEighteen = decimalDigitsLength - 18;\n  let decimalDigitsLengthMinusNineteen = decimalDigitsLength - 19;\n  let decimalDigitsLengthMinusTwenty = decimalDigitsLength - 20;\n  let decimalDigitsLengthMinusTwentyOne = decimalDigitsLength - 21;\n  let decimalDigitsLengthMinusTwentyTwo = decimalDigitsLength - 22;\n  let decimalDigitsLengthMinusTwentyThree = decimalDigitsLength - 23;\n  let decimalDigitsLengthMinusTwentyFour = decimalDigitsLength - 24;\n  let decimalDigitsLengthMinusTwentyFive = decimalDigitsLength - 25;\n  let decimalDigitsLengthMinusTwentySix = decimalDigitsLength - 26;\n  let decimalDigitsLengthMinusTwentySeven = decimalDigitsLength - 27;\n  let decimalDigitsLengthMinusTwentyEight = decimalDigitsLength - 28;\n  let decimalDigitsLengthMinusTwentyNine = decimalDigitsLength - 29;\n  let decimalDigitsLengthMinusThirty = decimalDigitsLength - 30;\n  let decimalDigitsLengthMinusThirtyOne = decimalDigitsLength - 31;\n  let decimalDigitsLengthMinusThirtyTwo = decimalDigitsLength - 32;\n  let decimalDigitsLengthMinusThirtyThree = decimalDigitsLength - 33;\n  let decimalDigitsLengthMinusThirtyFour = decimalDigitsLength - 34;\n  let decimalDigitsLengthMinusThirtyFive = decimalDigitsLength - 35;\n  let decimalDigitsLengthMinusThirtySix = decimalDigitsLength - 36;\n  let decimalDigitsLengthMinusThirtySeven = decimalDigitsLength - 37;\n  let decimalDigitsLengthMinusThirtyEight = decimalDigitsLength - 38;\n  let decimalDigitsLengthMinusThirtyNine = decimalDigitsLength - 39;\n  let decimalDigitsLengthMinusFourty = decimalDigitsLength - 40;\n  let decimalDigitsLengthMinusFourtyOne = decimalDigitsLength - 41;\n  let decimalDigitsLengthMinusFourtyTwo = decimalDigitsLength - 42;\n  let decimalDigitsLengthMinusFourtyThree = decimalDigitsLength - 43;\n  let decimalDigitsLengthMinusFourtyFour = decimalDigitsLength - 44;\n  let decimalDigitsLengthMinusFourtyFive = decimalDigitsLength - 45;\n  let decimalDigitsLengthMinusFourtySix = decimalDigitsLength - 46;\n  let decimalDigitsLengthMinusFourtySeven = decimalDigitsLength - 47;\n  let decimalDigitsLengthMinusFourtyEight = decimalDigitsLength - 48;\n  let decimalDigitsLengthMinusFourtyNine = decimalDigitsLength - 49;\n  let decimalDigitsLengthMinusFifty = decimalDigitsLength - 50;\n  let decimalDigitsLengthMinusFiftyOne = decimalDigitsLength - 51;\n  let decimalDigitsLengthMinusFiftyTwo = decimalDigitsLength - 52;\n  let decimalDigitsLengthMinusFiftyThree = decimalDigitsLength - 53;\n  let decimalDigitsLengthMinusFiftyFour = decimalDigitsLength - 54;\n  let decimalDigitsLengthMinusFiftyFive = decimalDigitsLength - 55;\n  let decimalDigitsLengthMinusFiftySix = decimalDigitsLength - 56;\n  let decimalDigitsLengthMinusFiftySeven = decimalDigitsLength - 57;\n  let decimalDigitsLengthMinusFiftyEight = decimalDigitsLength - 58;\n  let decimalDigitsLengthMinusFiftyNine = decimalDigitsLength - 59;\n  let decimalDigitsLengthMinusSixty = decimalDigitsLength - 60;\n  let decimalDigitsLengthMinusSixtyOne = decimalDigitsLength - 61;\n  let decimalDigitsLengthMinusSixtyTwo = decimalDigitsLength - 62;\n  let decimalDigitsLengthMinusSixtyThree = decimalDigitsLength - 63;\n  let decimalDigitsLengthMinusSixtyFour = decimalDigitsLength - 64;\n  let decimalDigitsLengthMinusSixtyFive = decimalDigitsLength - 65;\n  let decimalDigitsLengthMinusSixtySix = decimalDigitsLength - 66;\n  let decimalDigitsLengthMinusSixtySeven = decimalDigitsLength - 67;\n  let decimalDigitsLengthMinusSixtyEight = decimalDigitsLength - 68;\n  let decimalDigitsLengthMinusSixtyNine = decimalDigitsLength - 69;\n  let decimalDigitsLengthMinusSeventy = decimalDigitsLength - 70;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (45, 720)\n  */\nconst sumProduct2 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let count = 0\n  let isHappy = true\n  while (i < len) {\n    if (s[i] === s[j]) {\n      count++\n      if (count === 3) {\n        isHappy = false\n        break\n      }\n    } else {\n      count = 0\n    }\n    j++\n    i++\n  }\n  return isHappy\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const gradeItem = grade[i]\n    const gradeItemLength = gradeItem.length\n    const gradeItemList = []\n    for (let j = 0; j < gradeItemLength; j++) {\n      const gradeItemItem = gradeItem[j]\n      const gradeItemItemLength = gradeItemItem.length\n      const gradeItemItemList = []\n      for (let k = 0; k < gradeItemItemLength; k++) {\n        const gradeItemItemItem = gradeItemItem[k]\n        const gradeItemItemItemLength = gradeItemItemItem.length\n        const gradeItemItemItemList = []\n        for (let l = 0; l < gradeItemItemItemLength; l++) {\n          const gradeItemItemItemItem = gradeItemItemItem[l]\n          const gradeItemItemItemItemLength = gradeItemItemItemItem.length\n          const gradeItemItemItemItemList = []\n          for (let m = 0; m < gradeItemItemItemItemLength; m++) {\n            const gradeItemItemItemItemItem = gradeItemItemItemItem[m]\n            const gradeItemItemItemItemItemLength = gradeItemItemItemItemItem.length\n            const gradeItemItemItemItemItemList = []\n            for (let n = 0; n < gradeItemItemItemItemItemLength; n++) {\n              const gradeItemItemItemItemItemItem = gradeItemItemItemItemItem[n]\n              const gradeItemItemItemItemItemItemLength = gradeItemItemItemItemItemItem.length\n              const gradeItemItemItemItemItemItemList = []\n              for (let o = 0; o < gradeItemItemItemItemItemItemLength; o++) {\n                const gradeItemItemItemItemItemItemItem = gradeItemItemItemItemItemItem[o]\n                const gradeItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItem.length\n                const gradeItemItemItemItemItemItemItemList = []\n                for (let p = 0; p < gradeItemItemItemItemItemItemItemLength; p++) {\n                  const gradeItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItem[p]\n                  const gradeItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItem.length\n                  const gradeItemItemItemItemItemItemItemItemList = []\n                  for (let q = 0; q < gradeItemItemItemItemItemItemItemItemLength; q++) {\n                    const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItem[q]\n                    const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                    const gradeItemItemItemItemItemItemItemItemItemList = []\n                    for (let r = 0; r < gradeItemItemItemItemItemItemItemItemLength; r++) {\n                      const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItemItem[r]\n                      const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                      const gradeItemItemItemItemItemItemItemItemItemList = []\n                      for (let s = 0; s < gradeItemItemItemItemItemItemItemItemLength; s++) {\n                        const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItemItem[s]\n                        const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                        const gradeItemItemItemItemItemItemItemItemItemList = []\n                        for (let t = 0; t < gradeItemItemItemItemItemItemItemItemLength; t++) {\n                          const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItemItem[t]\n                          const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                          const gradeItemItemItemItemItemItemItemItemItemList = []\n                          for (let u = 0; u < gradeItemItemItemItemItemItemItemItemLength; u++) {\n                            const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItemItem[u]\n                            const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                            const gradeItemItemItemItemItemItemItemItemItemList = []\n                            for (let v = 0; v < gradeItemItemItemItemItemItemItemItemLength; v++) {\n                              const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItemItem[v]\n                              const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                              const gradeItemItemItemItemItemItemItemItemItemList = []\n                              for (let w = 0; w < gradeItemItemItemItemItemItemItemItemLength; w++) {\n                                const gradeItemItemItemItemItemItemItemItemItem = gradeItemItemItemItemItemItemItemItemItem[w]\n                                const gradeItemItemItemItemItemItemItemItemItemLength = gradeItemItemItemItemItemItemItemItemItem.length\n                                const gradeItemItemItemItemItemItemItemItemItemList = []\n                                for (let x = 0; x < gradeItemItem", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const isPrime = (num) => {\n    return prime.test(num) && num > 1;\n  };\n  const primeLength = (string) => {\n    const num = parseInt(string, 10);\n    return isPrime(num);\n  };\n  return primeLength(string);\n};\n\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   for (let i = 1; i <= n; i++) {\n     if (i % 10 === 1) {\n       count++;\n     }\n   }\n   return count;\n }\n */\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(startsOneEnds(100));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even and odd chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the odd and even chemical elements that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 3 \n  */\nconst addOddEven11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const ascii = word.charCodeAt(j)\n      const newAscii = ascii + (ascii % 26)\n      newWord += String.fromCharCode(newAscii)\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow2 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow3 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow4 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow5 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow6 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow7 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow8 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow9 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow10 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow11 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow12 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow13 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow14 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow15 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow16 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow17 = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let result = array.slice();\n  let len = result.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let chain = '';\n  let i = 0;\n  while (i < s.length) {\n    chain += s[i];\n    i += 2;\n  }\n  return chain;\n};\n\nconst decrypt = (s) => {\n  let chain = '';\n  let i = 0;\n  while (i < s.length) {\n    chain += s[i];\n    i += 2;\n  }\n  return chain;\n};\n\nconst test = () => {\n  console.log(encrypt('hi'));\n  console.log(encrypt('asdfghjkl'));\n  console.log(encrypt('gf'));\n  console.log(encrypt('et'));\n  console.log(decrypt('lm'));\n  console.log(decrypt('ewhjklnop'));\n  console.log(decrypt('kj'));\n  console.log(decrypt('ix'));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxRoll = numbers[0];\n  const maxRollIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxRoll = numbers[i];\n      maxRollIndex = i;\n    }\n  }\n  const maxRollingMax = numbers.slice(maxIndex + 1);\n  const maxRollingMaxIndex = maxIndex + 1;\n  return [max, maxIndex, maxRoll, maxRollIndex, maxRollingMax, maxRollingMaxIndex];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 2; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              \tconst isBored = (S) => {\n                                                              \t  const isBored = (S) => {\n                                                              \t    const isBored = (S) => {\n                                                              \t    \tconst isBored = (S) => {\n                                                              \t    \t  const isBored = (S) => {\n                                                              \t    \t    const isBored = (S) => {\n                                                              \t    \t      const isBored = (S) => {\n                                                              \t    \t        const isBored = (S) => {\n                                                              \t    \t          const isBored = (S) => {\n                                                              \t    \t            const isBored = (S) => {\n                                                              \t    \t              const isBored = (S) => {\n                                                              \t    \t                const isBored = (S) => {\n                                                              \t    \t                  const isBored = (S) => {\n                                                              \t    \t                    const isBored = (S) => {\n                                                              \t    \t                      const isBored = (S) => {\n                                                              \t    \t                        const isBored = (S) => {\n                                                              \t    \t                          const isBored = (S) => {\n                                                              \t    \t                            const isBored = (S) => {\n                                                              \t    \t                              const isBored = (S) => {\n                                                              \t    \t                                const isBored = (S) => {\n                                                              \t    \t                                  const isBored = (S) => {\n                                                              \t    \t                                    const isBored = (S) => {\n                                                              \t    \t                                      const isBored = (S) => {\n                                                              \t    \t                                        const isBored = (S) => {\n                                                              \t    \t                                          const isBored = (S) => {\n                                                              \t    \t                                            const isBored = (S) => {\n                                                              \t    \t                                              const isBored = (S) => {\n                                                              \t    \t                                              \tconst isBored = (S) => {\n                                                              \t    \t                                              \t  const isBored = (S) => {\n                                                              \t    \t                                              \t    const isBored = (S) => {\n                                                              \t    \t                                              \t    \tconst isBored = (S) => {\n                                                              \t    \t                                              \t    \t  const isBored = (S) => {\n                                                              \t    \t                                              \t    \t    const isBored = (S) => {\n                                                              ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/*\n  Create a function that takes a number and returns the sum of the squares of its digits.\n  Examples\n  sumOfSquares(5) ➞ 25\n  sumOfSquares(3) ➞ 9\n  sumOfSquares(4) ➞ 16\n  sumOfSquares(9) ➞ 81\n  sumOfSquares(10) ➞ 100\n  sumOfSquares(11) ➞ 121\n  sumOfSquares(12) ➞ 144\n  sumOfSquares(13) ➞ 169\n  sumOfSquares(14) ➞ 196\n  sumOfSquares(15) ➞ 225\n  sumOfSquares(16) ➞ 256\n  sumOfSquares(17) ➞ 289\n  sumOfSquares(18) ➞ 324\n  sumOfSquares(19) ➞ 361\n  sumOfSquares(20) ➞ 400\n  sumOfSquares(21) ➞ 441\n  sumOfSquares(22) ➞ 474\n  sumOfSquares(23) ➞ 517\n  sumOfSquares(24) ➞ 558\n  sumOfSquares(25) ➞ 599\n  sumOfSquares(26) ➞ 632\n  sumOfSquares(27) ➞ 665\n  sumOfSquares(28) ➞ 700\n  sumOfSquares(29) ➞ 733\n  sumOfSquares(30) ➞ 766\n  sumOfSquares(31) ➞ 809\n  sumOfSquares(32) ➞ 844\n  sumOfSquares(33) ➞ 877\n  sumOfSquares(34) ➞ 912\n  sumOfSquares(35) ➞ 955\n  sumOfSquares(36) ➞ 990\n  sumOfSquares(37) ➞ 1031\n  sumOfSquares(38) ➞ 1064\n  sumOfSquares(39) ➞ 1097\n  sumOfSquares(40) ➞ 1130\n  sumOfSquares(41) ➞ 1163\n  sumOfSquares(42) ➞ 1196\n  sumOfSquares(43) ➞ 1229\n  sumOfSquares(44) ➞ 1262\n  sumOfSquares(45) ➞ 1295\n  sumOfSquares(46) ➞ 1328\n  sumOfSquares(47) ➞ 1361\n  sumOfSquares(48) ➞ 1394\n  sumOfSquares(49) ➞ 1427\n  sumOfSquares(50) ➞ 1460\n  sumOfSquares(51) ➞ 1493\n  sumOfSquares(52) ➞ 1526\n  sumOfSquares(53) ➞ 1559\n  sumOfSquares(54) ➞ 1592\n  sumOfSquares(55) ➞ 1625\n  sumOfSquares(56) ➞ 1658\n  sumOfSquares(57) ➞ 1691\n  sumOfSquares(58) ➞ 1724\n  sumOfSquares(59) ➞ 1757\n  sumOfSquares(60) ➞ 1790\n  sumOfSquares(61) ➞ 1823\n  sumOfSquares(62) ➞ 1856\n  sumOfSquares(63) ➞ 1889\n  sumOfSquares(64) ➞ 1922\n  sumOfSquares(65) ➞ 1955\n  sumOfSquares(66) ➞ 1988\n  sumOfSquares(67) ➞ 2021\n  sumOfSquares(68) ➞ 2054\n  sumOfSquares(69) ➞ 2087\n  sumOfSquares(70) ➞ 2120\n  sumOfSquares(71) ➞ 2153\n  sumOfSquares(72) ➞ 2186\n  sumOfSquares(73) ➞ 2219\n  sumOfSquares(74) ➞ 2252\n  sumOfSquares(75) ➞ 2285\n  sumOfSquares(76) ➞ 2318\n  sumOfSquares(77) ➞ 2351\n  sumOfSquares(78) ➞ 2384\n  sumOfSquares(79) ➞ 2417\n  sumOfSquares(80) ➞ 2450\n  sumOfSquares(81) ➞ 2483\n  sumOfSquares(82) ➞ 2516\n  sumOfSquares(83) ➞ 2549\n  sumOfSquares(84) ➞ 2582\n  sumOfSquares(85) ➞ 2615\n  sumOfSquares(86) ➞ 2648\n  sumOfSquares(87) ➞ 2681\n  sumOfSquares(88) ➞ 2714\n  sumOfSquares(89) ➞ 2757\n  sumOfSquares(90) ➞ 2790\n  sumOfSquares(91) ➞ 2823\n  sumOfSquares(92) ➞ 2856\n  sumOfSquares(93) ➞ 2889\n  sumOfSquares(94) ➞ 2922\n  sumOfSquares(95) ➞ 2955\n  sumOfSquares(96) ➞ 2988\n  sumOfSquares(97) ➞ 3021\n  sumOfSquares(98) ➞ 3054\n  sumOfSquares(99) ➞ 3087\n  sumOfSquares(100) ➞ 3120\n  sumOfSquares(101)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const vowels_index = vowels.indexOf(message[0])\n  const consonants_index = consonants.indexOf(message[1])\n  const vowels_index_2 = vowels.indexOf(message[2])\n  const consonants_index_2 = consonants.indexOf(message[3])\n  const result = message.replace(vowels, (match, index) => {\n    return consonants[index + vowels_index_2]\n  })\n  return result.replace(consonants, (match, index) => {\n    return vowels[index + consonants_index_2]\n  })\n}\n\nconsole.log(encode('This is a message'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = 0;\n  let prime_count = 0;\n  let prime_index = 0;\n  let prime_index_2 = 0;\n  let prime_index_3 = 0;\n  let prime_index_4 = 0;\n  let prime_index_5 = 0;\n  let prime_index_6 = 0;\n  let prime_index_7 = 0;\n  let prime_index_8 = 0;\n  let prime_index_9 = 0;\n  let prime_index_10 = 0;\n  let prime_index_11 = 0;\n  let prime_index_12 = 0;\n  let prime_index_13 = 0;\n  let prime_index_14 = 0;\n  let prime_index_15 = 0;\n  let prime_index_16 = 0;\n  let prime_index_17 = 0;\n  let prime_index_18 = 0;\n  let prime_index_19 = 0;\n  let prime_index_20 = 0;\n  let prime_index_21 = 0;\n  let prime_index_22 = 0;\n  let prime_index_23 = 0;\n  let prime_index_24 = 0;\n  let prime_index_25 = 0;\n  let prime_index_26 = 0;\n  let prime_index_27 = 0;\n  let prime_index_28 = 0;\n  let prime_index_29 = 0;\n  let prime_index_30 = 0;\n  let prime_index_31 = 0;\n  let prime_index_32 = 0;\n  let prime_index_33 = 0;\n  let prime_index_34 = 0;\n  let prime_index_35 = 0;\n  let prime_index_36 = 0;\n  let prime_index_37 = 0;\n  let prime_index_38 = 0;\n  let prime_index_39 = 0;\n  let prime_index_40 = 0;\n  let prime_index_41 = 0;\n  let prime_index_42 = 0;\n  let prime_index_43 = 0;\n  let prime_index_44 = 0;\n  let prime_index_45 = 0;\n  let prime_index_46 = 0;\n  let prime_index_47 = 0;\n  let prime_index_48 = 0;\n  let prime_index_49 = 0;\n  let prime_index_50 = 0;\n  let prime_index_51 = 0;\n  let prime_index_52 = 0;\n  let prime_index_53 = 0;\n  let prime_index_54 = 0;\n  let prime_index_55 = 0;\n  let prime_index_56 = 0;\n  let prime_index_57 = 0;\n  let prime_index_58 = 0;\n  let prime_index_59 = 0;\n  let prime_index_60 = 0;\n  let prime_index_61 = 0;\n  let prime_index_62 = 0;\n  let prime_index_63 = 0;\n  let prime_index_64 = 0;\n  let prime_index_65 = 0;\n  let prime_index_66 = 0;\n  let prime_index_67 = 0;\n  let prime_index_68 = 0;\n  let prime_index_69 = 0;\n  let prime_index_70 = 0;\n  let prime_index_71 = 0;\n  let prime_index_72 = 0;\n  let prime_index_73 = 0;\n  let prime_index_74 = 0;\n  let prime_index_75 = 0;\n  let prime_index_76 = 0;\n  let prime_index_77 = 0;\n  let prime_index_78 = 0;\n  let prime_index_79 = 0;\n  let prime_index_80 = 0;\n  let prime_index_81 = 0;\n  let prime_index_82 = 0;\n  let prime_index_83 = 0;\n  let prime_index_84 = 0;\n  let prime_index_85 = 0;\n  let prime_index_86 = 0;\n  let prime_index_87 = 0;\n  let prime_index_88 = 0;\n  let prime_index_89 = 0;\n  let prime_index_90 = 0;\n  let prime_index_91 = 0;\n  let prime_index_92 = 0;\n  let prime_index_93 = 0;\n  let prime_index_94 = 0;\n  let prime_index_95 = 0;\n  let prime_index_96 = 0;\n  let prime_index_97 = 0;\n  let prime_index_98 = 0;\n  let prime_index_99 = 0;\n  let prime_index_100 = 0;\n  let prime_index_101 = 0;\n  let prime_index_102 = 0;\n  let prime_index_103 = 0;\n  let prime_index_104 = 0;\n  let prime_index_105 = 0;\n  let prime_index_106 = 0;\n  let prime_index_107 = 0;\n  let prime_index_108 = 0;\n  let prime_index_109 = 0;\n  let prime_index_110 = 0;\n  let prime_index_111 = 0;\n  let prime_index_112 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      isAllUpperCase = false;\n      break;\n    }\n  }\n  return isAllUpperCase;\n}\n\n/*\n  Given a dictionary, return the most frequent key.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return \"a\".\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return \"Age\".\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return \"STATE\".\n  */\nconst checkDictMostFrequent = (dict) => {\n  let max = 0;\n  let maxKey = \"\";\n  for (let key in dict) {\n    if (dict[key] > max) {\n      max = dict[key];\n      maxKey = key;\n    }\n  }\n  return maxKey;\n}\n\n/*\n  Given a dictionary, return the most frequent key.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return \"a\".\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return \"Age\".\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return \"STATE\".\n  */\nconst checkDictMostFrequentCase = (dict) => {\n  let max = 0;\n  let maxKey = \"\";\n  for (let key in dict) {\n    if (key.toUpperCase() === key) {\n      if (dict[key] > max) {\n        max = dict[key];\n        maxKey = key;\n      }\n    }\n  }\n  return maxKey;\n}\n\n/*\n  Given a dictionary, return the most frequent key.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return \"a\".\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return \"Age\".\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return \"STATE\".\n  */\nconst checkDictMostFrequentCaseCase = (dict) => {\n  let max = 0;\n  let maxKey = \"\";\n  for (let key in dict) {\n    if (key.toUpperCase() === key) {\n      if (dict[key] > max) {\n        max = dict[key];\n        maxKey = key;\n      }\n    }\n  }\n  return maxKey;\n}\n\n/*\n  Given a dictionary, return the most frequent key.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return \"a\".\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return \"Age\".\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return \"STATE\".\n  */\nconst checkDictMostFrequentCaseCaseCase = (dict) => {\n  let max = 0;\n  let maxKey = \"\";\n  for (let key in dict) {\n    if (key.toUpperCase() === key) {\n      if (dict[key] > max) {\n        max = dict[key];\n        maxKey = key;\n      }\n    }\n  }\n  return maxKey;\n}\n\n/*\n  Given a dictionary, return the most frequent key.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return \"a\".\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return \"a\".\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return \"Age\".\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return \"STATE\".\n  */\nconst checkDictMostFrequentCaseCaseCaseCase = (dict) => {\n  let max = 0;\n  let maxKey = \"\";\n  for (let key in dict) {\n    if (key.toUpperCase() === key) {\n      if (dict[key] > max) {\n        max = dict[key];\n        maxKey = key;\n      }\n    }\n  }\n  return maxKey;\n}\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = parseInt(a);\n  let b_int = parseInt(b);\n  let a_unit = a_int.toString().split('').reverse().join('');\n  let b_unit = b_int.toString().split('').reverse().join('');\n  let a_unit_digit = a_unit.split('').reverse().join('');\n  let b_unit_digit = b_unit.split('').reverse().join('');\n  let a_unit_num = a_unit_digit.split('').reverse().join('');\n  let b_unit_num = b_unit_digit.split('').reverse().join('');\n  let a_num = a_unit_num.split('').reverse().join('');\n  let b_num = b_unit_num.split('').reverse().join('');\n  let a_num_digit = a_num.split('').reverse().join('');\n  let b_num_digit = b_num.split('').reverse().join('');\n  let a_num_num = a_num_digit.split('').reverse().join('');\n  let b_num_num = b_num_digit.split('').reverse().join('');\n  let a_num_num_digit = a_num_num.split('').reverse().join('');\n  let b_num_num_digit = b_num_num.split('').reverse().join('');\n  let a_num_num_num = a_num_num_digit.split('').reverse().join('');\n  let b_num_num_num = b_num_num_digit.split('').reverse().join('');\n  let a_num_num_num_digit = a_num_num_num.split('').reverse().join('');\n  let b_num_num_num_digit = b_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num = a_num_num_num_digit.split('').reverse().join('');\n  let b_num_num_num_num = b_num_num_num_digit.split('').reverse().join('');\n  let a_num_num_num_num_digit = a_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_digit = b_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num = a_num_num_num_num_digit.split('').reverse().join('');\n  let b_num_num_num_num_num = b_num_num_num_num_digit.split('').reverse().join('');\n  let a_num_num_num_num_num_digit = a_num_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_num_digit = b_num_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num_num_digit = a_num_num_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_num_num_digit = b_num_num_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num_num_num_digit = a_num_num_num_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_num_num_num_num_digit = b_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num_num_num_num_num_digit = a_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_num_num_num_num_num_num_digit = b_num_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num_num_num_num_num_num_num_digit = a_num_num_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_num_num_num_num_num_num_num_num_digit = b_num_num_num_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num_num_num_num_num_num_num_num_num_digit = a_num_num_num_num_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let b_num_num_num_num_num_num_num_num_num_num_num_num_num_num_digit = b_num_num_num_num_num_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let a_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_digit = a_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num.split('').reverse().join('');\n  let b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[0-9]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i] && s[i].match(/[a-zA-Z]/) && s[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperAndLowerAndDigitsAndLettersAndLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = parseInt(value, 10);\n  const closest = Math.abs(numeral) + 1;\n  const rounded = Math.round(closest);\n  return rounded;\n};\n\n/*\n  Given a list of numbers, return the closest number to the given number.\n  model\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\", \"110\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\", \"110\", \"115\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\", \"110\", \"115\", \"120\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\", \"110\", \"115\", \"120\", \"125\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\", \"110\", \"115\", \"120\", \"125\", \"130\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\", \"105\", \"110\", \"115\", \"120\", \"125\", \"130\", \"135\"])\n  20\n  >>> closestNumber([\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60", "passed": 0, "run_status": 2}
