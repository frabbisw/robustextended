{"task_id": "JavaScript/0", "prompt": "/* determine if in given list of numbers, are any two numbers close to each early than \n   establish threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* determine if in given list of numbers, are any two numbers close to each early than \n   establish threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  const half = len / 2\n  const diff = numbers[half] - numbers[half - 1]\n  const diffAbs = Math.abs(diff)\n  const diffThreshold = threshold * diffAbs\n  for (let i = half + 1; i < len; i++) {\n    const diff = numbers[i] - numbers[half]\n    if (Math.abs(diff) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasClose", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* input signal to this function is a drawstring incorporate multiple group of cuddle parentheses. Your finish is to \n   separate those group into freestanding strings and return the list of those. \n   disjoined group are balanced (each open brace is by rights closed) and not nested within each other \n   neglect any quad in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* input signal to this function is a drawstring incorporate multiple group of cuddle parentheses. Your finish is to \n   separate those group into freestanding strings and return the list of those. \n   disjoined group are balanced (each open brace is by rights closed) and not nested within each other \n   neglect any quad in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_list_temp = paren_group.split(')');\n    const paren_group_list_temp_length = paren_group_list_temp.length;\n    for (let j = 0; j < paren_group_list_temp_length; j++) {\n      const paren_group_list_temp_item = paren_group_list_temp[j];\n      const paren_group_list_temp_item_length = paren_group_list_temp_item.length;\n      const paren_group_list_temp_item_split = paren_group_list_temp_item.split('(');\n      const paren_group_list_temp_item_split_length = paren_group_list_temp_item_split.length;\n      for (let k = 0; k < paren_group_list_temp_item_split_length; k++) {\n        const paren_group_list_temp_item_split_item = paren_group_list_temp_item_split[k];\n        const paren_group_list_temp_item_split_item_length = paren_group_list_temp_item_split_item.length;\n        const paren_group_list_temp_item_split_item_split = paren_group_list_temp_item_split_item.split(')');\n        const paren_group_list_temp_item_split_item_split_length = paren_group_list_temp_item_split_item_split.length;\n        for (let l = 0; l < paren_group_list_temp_item_split_item_split_length; l++) {\n          const paren_group_list_temp_item_split_item_split_item = paren_group_list_temp_item_split_item_split[l];\n          const paren_group_list_temp_item_split_item_split_item_length = paren_group_list_temp_item_split_item_split_item.length;\n          const paren_group_list_temp_item_split_item_split_item_split = paren_group_list_temp_item_split_item_split_item.split('(');\n          const paren_group_list_temp_item_split_item_split_item_split_length = paren_group_list_temp_item_split_item_split_item_split.length;\n          for (let m = 0; m < paren_group_list_temp_item_split_item_split_item_split_length; m++) {\n            const paren_group_list_temp_item_split_item_split_item_split_item = paren_group_list_temp_item_split_item_split_item_split[m];\n            const paren_group_list_temp_item_split_item_split_item_split_item_length = paren_group_list_temp_item_split_item_split_item_split_item.length;\n            const paren_group_list_temp_item_split_item_split_item_split_item_split = paren_group_list_temp_item_split_item_split_item_split_item.split(')');\n            const paren_group_list_temp_item_split_item_split_item_split_item_split_length = paren_group_list_temp_item_split_item_split_item_split_item_split.length;\n            for (let n = 0; n < paren_group_list_temp_item_split_item_split_item_split_item_split_length; n++) {\n              const paren_group_list_temp_item_split_item_split_item_split_item_split_item = paren_group_list_temp_item_split_item_split_item_split_item_split[n];\n              const paren_group_list_temp_item_split_item_split_item_split_item_split_item_length = paren_group_list_temp_item_split_item_split_item_split_item_split_item.length;\n              const paren_group_list_temp_item_split_item_split_item_split_item_split_item_split = paren_group_list_temp_item_split_item_split_item_split_item_split.split('(');\n              const paren_group_list_temp_item_split_item_split_item_split_item_split_item_split_length = paren_group_list_temp_item_split_item_split_item_split_item_split_item_split.length;\n              for (let o = 0; o < paren_group_list_temp_item_split_item_split_item_split_item_split_length; o++) {\n                const paren_group_list_temp_item_split_item_split_item_split_item_split_item_split_item = paren_group_list_temp_item_split_item_split_item_split_item_split_item_split[o];\n                const paren_group_list_temp_item_split_item_split_item_split_item_split_item_split_item_length = paren_group_list_temp_item_split_item_split_item_split_item_split_item_split_item.length;\n                const paren_group_list_temp_item_split_item_split_item_split_item_split_item_split_item_split = paren_group_list_temp_item_split_item_split_item", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the shortest palindrome that begin with a provide string.\n   Algorithm theme is simple: \n   - find oneself the long postfix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the shortest palindrome that begin with a provide string.\n   Algorithm theme is simple: \n   - find oneself the long postfix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const isPalindrome = postfix === prefix;\n  return isPalindrome? postfix : `${prefix}${postfix}`;\n}\n\n/*\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  establish a positive integer n, you have to cause a down of n levels of stones. \n   The first floor have n rock. \n   The number of stone in the following level is: \n       - the next odd phone number if n is odd. \n       - the next tied issue if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i represents the number of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, you have to cause a down of n levels of stones. \n   The first floor have n rock. \n   The number of stone in the following level is: \n       - the next odd phone number if n is odd. \n       - the next tied issue if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i represents the number of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 3 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 4 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 5 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 6 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 7 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 8 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 9 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 10 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 11 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 12 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 13 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 14 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile15 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 15 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile16 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 16 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile17 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 17 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile18 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 18 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst makeAPile19 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 19 === 0) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This affair takes two convinced number x and y and return the \n   biggest even integer number that cost in the compass [x, y] inclusive. If \n   there's no such numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This affair takes two convinced number x and y and return the \n   biggest even integer number that cost in the compass [x, y] inclusive. If \n   there's no such numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const x_int = x.toString().split('').reverse().join('');\n  const y_int = y.toString().split('').reverse().join('');\n  const x_len = x_int.length;\n  const y_len = y_int.length;\n  const max_len = Math.max(x_len, y_len);\n  const max_int = Math.pow(10, max_len) - 1;\n  const x_int_len = x_int.length;\n  const y_int_len = y_int.length;\n  const x_int_int = x_int.split('').reverse().join('');\n  const y_int_int = y_int.split('').reverse().join('');\n  const x_int_int_len = x_int_int.length;\n  const y_int_int_len = y_int_int.length;\n  const x_int_int_int = x_int_int.split('').reverse().join('');\n  const y_int_int_int = y_int_int.split('').reverse().join('');\n  const x_int_int_int_len = x_int_int_int.length;\n  const y_int_int_int_len = y_int_int_int.length;\n  const x_int_int_int_int = x_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int = y_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_len = x_int_int_int_int.length;\n  const y_int_int_int_int_len = y_int_int_int_int.length;\n  const x_int_int_int_int_int = x_int_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int_int = y_int_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_int_len = x_int_int_int_int_int.length;\n  const y_int_int_int_int_int_len = y_int_int_int_int_int.length;\n  const x_int_int_int_int_int_int = x_int_int_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int_int_int = y_int_int_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_int_int_len = x_int_int_int_int_int_int.length;\n  const y_int_int_int_int_int_int_len = y_int_int_int_int_int_int.length;\n  const x_int_int_int_int_int_int_int = x_int_int_int_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int_int_int_int = y_int_int_int_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_int_int_int_len = x_int_int_int_int_int_int_int.length;\n  const y_int_int_int_int_int_int_int_len = y_int_int_int_int_int_int_int.length;\n  const x_int_int_int_int_int_int_int_int = x_int_int_int_int_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int_int_int_int_int = y_int_int_int_int_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_int_int_int_int_len = x_int_int_int_int_int_int_int_int.length;\n  const y_int_int_int_int_int_int_int_int_len = y_int_int_int_int_int_int_int_int.length;\n  const x_int_int_int_int_int_int_int_int_int = x_int_int_int_int_int_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int_int_int_int_int_int = y_int_int_int_int_int_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_int_int_int_int_int_len = x_int_int_int_int_int_int_int_int_int.length;\n  const y_int_int_int_int_int_int_int_int_int_len = y_int_int_int_int_int_int_int_int_int.length;\n  const x_int_int_int_int_int_int_int_int_int_int = x_int_int_int_int_int_int_int_int_int.split('').reverse().join('');\n  const y_int_int_int_int_int_int_int_int_int_int = y_int_int_int_int_int_int_int_int_int.split('').reverse().join('');\n  const x_int_int_int_int_int_int_int_int_int_int_len = x_int_int_int_int_int_int_int_int_int_int.length;\n  const y_int_int_int_int_int_int_int", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are establish two positive integer n and m, and your task be to calculate the \n   average of the integer from n through m (including n and m). \n   Round the solution to the nearest integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are establish two positive integer n and m, and your task be to calculate the \n   average of the integer from n through m (including n and m). \n   Round the solution to the nearest integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.round(avg)\n  const binary = rounded.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integer x. return a classify list of all \n   component that acceptn't any even digit. \n\n   Note: Returned list should be sorted in increase decree. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive integer x. return a classify list of all \n   component that acceptn't any even digit. \n\n   Note: Returned list should be sorted in increase decree. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = []\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10\n    if (digit % 2 === 0) {\n      digits.push(digit)\n    }\n    x = Math.floor(x / 10)\n  }\n  return digits\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\nconsole.log(uniqueDigits([152, 323, 1422, 10]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  establish an array of integer, sort the integer that be between 1 and 9 inclusive, \n   overrule the resulting array, and then supplant each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array of integer, sort the integer that be between 1 and 9 inclusive, \n   overrule the resulting array, and then supplant each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  let reversedArr = sortedArr.reverse()\n  let sortedArrLength = sortedArr.length\n  let reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* enforce the function f that take n as a argument, \n   and fall a list of size n, such that the value of the element at exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i differently. \n   i get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* enforce the function f that take n as a argument, \n   and fall a list of size n, such that the value of the element at exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i differently. \n   i get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(1);\n    for (let j = 1; j < i; j++) {\n      result.push(result[j - 1] * j);\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isEven(i)) {\n      result += factorial(i);\n    } else {\n      result += i;\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  let n = 5;\n  let result = f(n);\n  console.log(result);\n  console.log(sum(n));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  establish a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindromes that hang within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindromes that hang within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      num = num % 10;\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num < 0? -1 : 1;\n    const digit = Math.abs(num);\n    if (digit > 0) {\n      count++;\n    }\n    arr[i] = sign * digit;\n  }\n  return count;\n};\n\n/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num < 0? -1 : 1;\n    const digit = Math.abs(num);\n    if (digit > 0) {\n      count++;\n    }\n    arr[i] = sign * digit;\n  }\n  return count;\n};\n\n/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num < 0? -1 : 1;\n    const digit = Math.abs(num);\n    if (digit > 0) {\n      count++;\n    }\n    arr[i] = sign * digit;\n  }\n  return count;\n};\n\n/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num < 0? -1 : 1;\n    const digit = Math.abs(num);\n    if (digit > 0) {\n      count++;\n    }\n    arr[i] = sign * digit;\n  }\n  return count;\n};\n\n/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num < 0? -1 : 1;\n    const digit = Math.abs(num);\n    if (digit > 0) {\n      count++;\n    }\n    arr[i] = sign * digit;\n  }\n  return count;\n};\n\n/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num < 0? -1 : 1;\n    const digit = Math.abs(num);\n    if (digit > 0) {\n      count++;\n    }\n    arr[i] = sign * digit;\n  }\n  return count;\n};\n\n/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We suffer an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   numbers pool in the array will be randomly ordered. Your task is to determine if \n   it is potential to get an array screen in non - decreasing ordering by performing \n   the following operation on the yield array: \n       You are allowed to perform proper shift mathematical process any number of time. \n  \n   One right chemise operation intend shifting all elements of the array by one \n   placement in the correct focus. The last chemical element of the array will be act to \n   the starting position in the array i.e. 0th exponent. \n\n   If it be potential to obtain the grouped array by performing the above operation \n   then return true else return false. \n   If the give array is empty then return truthful. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We suffer an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   numbers pool in the array will be randomly ordered. Your task is to determine if \n   it is potential to get an array screen in non - decreasing ordering by performing \n   the following operation on the yield array: \n       You are allowed to perform proper shift mathematical process any number of time. \n  \n   One right chemise operation intend shifting all elements of the array by one \n   placement in the correct focus. The last chemical element of the array will be act to \n   the starting position in the array i.e. 0th exponent. \n\n   If it be potential to obtain the grouped array by performing the above operation \n   then return true else return false. \n   If the give array is empty then return truthful. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrCopy = arr.slice();\n  let i = 0;\n  while (i < arr.length - 1) {\n    let j = i + 1;\n    while (j < arr.length) {\n      if (arr[i] > arr[j]) {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n      }\n      j++;\n    }\n    i++;\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBallTest = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(moveOneBall(arr));\n};\n\nmoveOneBallTest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* input signal are two strings a and b consist merely of 1s and zero. \n   do binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* input signal are two strings a and b consist merely of 1s and zero. \n   do binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of '1' bits it has.\n  >>> numberOfOnes('1101')\n  3\n  */\nconst numberOfOnes = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '0' bits it has.\n  >>> numberOfZeros('1101')\n  2\n  */\nconst numberOfZeros = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' and '0' bits it has.\n  >>> numberOfOnesAndZeros('1101')\n  3\n  */\nconst numberOfOnesAndZeros = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1' || s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' bits it has.\n  >>> numberOfOnes('1101')\n  3\n  */\nconst numberOfOnesInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '0' bits it has.\n  >>> numberOfZeros('1101')\n  2\n  */\nconst numberOfZerosInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' and '0' bits it has.\n  >>> numberOfOnesAndZeros('1101')\n  3\n  */\nconst numberOfOnesAndZerosInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1' || s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' bits it has.\n  >>> numberOfOnesInString('1101')\n  3\n  */\nconst numberOfOnesInStringInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '0' bits it has.\n  >>> numberOfZerosInString('1101')\n  2\n  */\nconst numberOfZerosInStringInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' and '0' bits it has.\n  >>> numberOfOnesAndZerosInString('1101')\n  3\n  */\nconst numberOfOnesAndZerosInStringInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1' || s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' bits it has.\n  >>> numberOfOnesInStringInString('1101')\n  3\n  */\nconst numberOfOnesInStringInStringInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '0' bits it has.\n  >>> numberOfZerosInStringInString('1101')\n  2\n  */\nconst numberOfZerosInStringInStringInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' and '0' bits it has.\n  >>> numberOfOnesAndZerosInStringInString('1101')\n  3\n  */\nconst numberOfOnesAndZerosInStringInStringInString = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === '1' || s[i] === '0')? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of '1' bits it has.\n  >>> numberOfOnesInStringInStringInString('1101')\n  3\n  */\nconst numberOfOnesInStringInStringInStringInString", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this trouble, you will implement a routine that takes two tilt of issue, \n   and determines whether it is possible to do an exchange of elements \n   between them to hold lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to lay down \n   all the chemical element of lst1 to be even, return \" YES \". \n   differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this trouble, you will implement a routine that takes two tilt of issue, \n   and determines whether it is possible to do an exchange of elements \n   between them to hold lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to lay down \n   all the chemical element of lst1 to be even, return \" YES \". \n   differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] % 2!== lst2[j] % 2) {\n      return \"NO\";\n    }\n    i++;\n    j++;\n  }\n  return \"YES\";\n};\n\nexports.exchange = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a bowed stringed instrument representing a distance separate small letter letter, return a dictionary \n   of the letter with the most repetition and control the correspond count. \n   If respective letters experience the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a bowed stringed instrument representing a distance separate small letter letter, return a dictionary \n   of the letter with the most repetition and control the correspond count. \n   If respective letters experience the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = histogram('a b c')\nconsole.log(test)\n\n/*\n  Given a string, return a dictionary of the letters with the most repetition.\n  \n  Example:\n  histogram('a b c') == {'a': 2, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = histogram('a b c')\nconsole.log(test)\n\n/*\n  Given a string, return a dictionary of the letters with the most control.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = histogram('a b c')\nconsole.log(test)\n\n/*\n  Given a string, return a dictionary of the letters with the most control.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = histogram('a b c')\nconsole.log(test)\n\n/*\n  Given a string, return a dictionary of the letters with the most control.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = histogram('a b c')\nconsole.log(test)\n\n/*\n  Given a string, return a dictionary of the letters with the most control.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = histogram('a b c')\nconsole.log(test)\n\n/*\n  Given a string, return a dictionary of the letters with the most control.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Tnecessitate \n   We are given two string s and c, you experience to erase all the characters in s that are equal to any fictional character in c\n   then check if the resultant role string be palindrome. \n   A drawstring is called palindrome if it read the same backward as ahead. \n   You should return a tuple control the result chain and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Tnecessitate \n   We are given two string s and c, you experience to erase all the characters in s that are equal to any fictional character in c\n   then check if the resultant role string be palindrome. \n   A drawstring is called palindrome if it read the same backward as ahead. \n   You should return a tuple control the result chain and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), (i === j)? true : false]\n}\n\nconst reverseDeleteTest = [\n  [\"abcde\", \"ae\"],\n  [\"abcdef\", \"b\"],\n  [\"abcdedcba\", \"ab\"]\n]\n\nconst reverseDeleteTestResult = [\n  [\"bcd\", false],\n  [\"acdef\", false],\n  [\"cdedc\", true]\n]\n\nconsole.log(reverseDeleteTestResult)\n\n// Your ReverseDelete object will be instantiated and called as such:\n// var obj = Object.create(ReverseDelete).create()\n// obj.reverseDelete(s,c)\n// Call with: s = \"abcde\", c = \"ae\"\n// => ['bcd', false]\n// Call with: s = \"abcdef\", c = \"b\"\n// => ['acdef', false]\n// Call with: s = \"abcdedcba\", c = \"ab\"\n// => ['cdedc', true]\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each bowed stringed instrument dwell of lone digit, return a list.\n   Each element i of the end product should constitute \" the numeral of odd component in the \n   chain i of the remark. \" where all the i's should be replaced by the phone number \n   of odd digits in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings, where each bowed stringed instrument dwell of lone digit, return a list.\n   Each element i of the end product should constitute \" the numeral of odd component in the \n   chain i of the remark. \" where all the i's should be replaced by the phone number \n   of odd digits in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i].split('').filter(x => x.length === 1 && x.charAt(0) % 2 === 1);\n    result.push(`the number of odd elements ${num.join('')} of the ${i + 1}th drawstring of the ${i + 1}th drawstring of the ${lst.length}th drawstring.`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  establish an array of integer nums, find the minimal union of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array of integer nums, find the minimal union of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let minSumIndex = 0;\n  let minSumIndex2 = 0;\n  let minSumIndex3 = 0;\n  let minSumIndex4 = 0;\n  let minSumIndex5 = 0;\n  let minSumIndex6 = 0;\n  let minSumIndex7 = 0;\n  let minSumIndex8 = 0;\n  let minSumIndex9 = 0;\n  let minSumIndex10 = 0;\n  let minSumIndex11 = 0;\n  let minSumIndex12 = 0;\n  let minSumIndex13 = 0;\n  let minSumIndex14 = 0;\n  let minSumIndex15 = 0;\n  let minSumIndex16 = 0;\n  let minSumIndex17 = 0;\n  let minSumIndex18 = 0;\n  let minSumIndex19 = 0;\n  let minSumIndex20 = 0;\n  let minSumIndex21 = 0;\n  let minSumIndex22 = 0;\n  let minSumIndex23 = 0;\n  let minSumIndex24 = 0;\n  let minSumIndex25 = 0;\n  let minSumIndex26 = 0;\n  let minSumIndex27 = 0;\n  let minSumIndex28 = 0;\n  let minSumIndex29 = 0;\n  let minSumIndex30 = 0;\n  let minSumIndex31 = 0;\n  let minSumIndex32 = 0;\n  let minSumIndex33 = 0;\n  let minSumIndex34 = 0;\n  let minSumIndex35 = 0;\n  let minSumIndex36 = 0;\n  let minSumIndex37 = 0;\n  let minSumIndex38 = 0;\n  let minSumIndex39 = 0;\n  let minSumIndex40 = 0;\n  let minSumIndex41 = 0;\n  let minSumIndex42 = 0;\n  let minSumIndex43 = 0;\n  let minSumIndex44 = 0;\n  let minSumIndex45 = 0;\n  let minSumIndex46 = 0;\n  let minSumIndex47 = 0;\n  let minSumIndex48 = 0;\n  let minSumIndex49 = 0;\n  let minSumIndex50 = 0;\n  let minSumIndex51 = 0;\n  let minSumIndex52 = 0;\n  let minSumIndex53 = 0;\n  let minSumIndex54 = 0;\n  let minSumIndex55 = 0;\n  let minSumIndex56 = 0;\n  let minSumIndex57 = 0;\n  let minSumIndex58 = 0;\n  let minSumIndex59 = 0;\n  let minSumIndex60 = 0;\n  let minSumIndex61 = 0;\n  let minSumIndex62 = 0;\n  let minSumIndex63 = 0;\n  let minSumIndex64 = 0;\n  let minSumIndex65 = 0;\n  let minSumIndex66 = 0;\n  let minSumIndex67 = 0;\n  let minSumIndex68 = 0;\n  let minSumIndex69 = 0;\n  let minSumIndex70 = 0;\n  let minSumIndex71 = 0;\n  let minSumIndex72 = 0;\n  let minSumIndex73 = 0;\n  let minSumIndex74 = 0;\n  let minSumIndex75 = 0;\n  let minSumIndex76 = 0;\n  let minSumIndex77 = 0;\n  let minSumIndex78 = 0;\n  let minSumIndex79 = 0;\n  let minSumIndex80 = 0;\n  let minSumIndex81 = 0;\n  let minSumIndex82 = 0;\n  let minSumIndex83 = 0;\n  let minSumIndex84 = 0;\n  let minSumIndex85 = 0;\n  let minSumIndex86 = 0;\n  let minSumIndex87 = 0;\n  let minSumIndex88 = 0;\n  let minSumIndex89 = 0;\n  let minSumIndex90 = 0;\n  let minSumIndex91 = 0;\n  let minSumIndex92 = 0;\n  let minSumIndex93 = 0;\n  let minSumIndex94 = 0;\n  let minSumIndex95 = 0;\n  let minSumIndex96 = 0;\n  let minSumIndex97 = 0;\n  let minSumIndex98 = 0;\n  let minSumIndex99 = 0;\n  let minSumIndex100 = 0;\n  let minSumIndex101 = 0;\n  let minSumIndex102 = 0;\n  let minSumIndex103 = 0;\n  let minSumIndex104 = 0;\n  let minSumIndex105 = 0;\n  let minSumIndex106 = 0;\n  let minSumIndex107 = 0;\n  let minSumIndex108 = 0;\n  let minSumIndex109 = 0;\n  let minSumIndex110 = 0;\n  let minSumIndex111 = 0;\n  let minSumIndex112 = 0;\n  let minSumIndex113 = 0;\n  let minSumIndex114 = 0;\n  let minSumIndex115 = 0;\n  let minSumIndex116 = 0;\n  let minSumIndex117 = 0;\n  let minSumIndex118 = 0;\n  let minSumIndex119 = 0;\n  let minSumIndex120 = 0;\n  let minSumIndex121 = 0;\n  let minSumIndex122 = 0;\n  let minSumIndex123 = 0;\n  let minSumIndex124 = 0;\n  let minSumIndex125 = 0;\n  let minSumIndex126 = 0;\n  let minSumIndex127 = 0;\n  let minSumIndex128 = 0;\n  let minSumIndex129 = 0;\n  let minSumIndex130 = 0;\n  let minSumIndex131 = 0;\n  let minSumIndex132 = 0;\n  let minSumIndex133 = 0;\n  let minSumIndex134 = 0;\n  let minSumIndex135 = 0;\n  let minSumIndex136 = 0;\n  let minSumIndex137 = 0;\n  let minSumIndex138 = 0;\n  let minSumIndex139 = 0;\n  let minSumIndex140 = 0;\n  let minSumIndex141 = 0;\n  let minSumIndex142 = 0;\n  let minSumIndex143 = 0;\n  let minSumIndex144", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are establish a rectangular grid of well. Each quarrel represent a individual well, \n   and each 1 in a quarrel stage a individual unit of water system. \n   Each well has a corresponding bucket that can be used to distill water from it, \n   and all buckets consume the like capacity.\n   Your task is to practice the bucket to evacuate the wells. \n   end product the number of time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a rectangular grid of well. Each quarrel represent a individual well, \n   and each 1 in a quarrel stage a individual unit of water system. \n   Each well has a corresponding bucket that can be used to distill water from it, \n   and all buckets consume the like capacity.\n   Your task is to practice the bucket to evacuate the wells. \n   end product the number of time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        result += Math.min(grid[i][j], capacity);\n      }\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  const grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you suffer to classify an array of non - damaging integer according to \n   numeral of ones in their binary theatrical performance in ascending order. \n   For like act of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you suffer to classify an array of non - damaging integer according to \n   numeral of ones in their binary theatrical performance in ascending order. \n   For like act of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aNum = a.toString(2).split('').reverse().join('');\n    const bNum = b.toString(2).split('').reverse().join('');\n    return aNum.localeCompare(bNum);\n  });\n  return sorted;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    const word = s.substr(i, n)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i += n\n  }\n  return words\n}\n\n/*\nGiven a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    const word = s.substr(i, n)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i += n\n  }\n  return words\n}\n\n/*\nGiven a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    const word = s.substr(i, n)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i += n\n  }\n  return words\n}\n\n/*\nGiven a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    const word = s.substr(i, n)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i += n\n  }\n  return words\n}\n\n/*\nGiven a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    const word = s.substr(i, n)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i += n\n  }\n  return words\n}\n\n/*\nGiven a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Un", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are establish a word. Your task is to discover the close vowel that stand between \n   two consonants from the right slope of the word (subject sensible). \n  \n   Vowels in the beginning and end doesn't consider. Return empty string if you didn't \n   find oneself any vowel met the above circumstance. \n\n   You may simulate that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are establish a word. Your task is to discover the close vowel that stand between \n   two consonants from the right slope of the word (subject sensible). \n  \n   Vowels in the beginning and end doesn't consider. Return empty string if you didn't \n   find oneself any vowel met the above circumstance. \n\n   You may simulate that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordArray = word.split('')\n  const wordArrayLength = wordArray.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowelIndex = 0\n  let currentVowelIndexDistance = Infinity\n  let currentVowelIndex = 0\n  let currentVowelIndexDistance = Infinity\n  let currentVowelIndex = 0\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let currentVowel = ''\n  let currentVowelDistance = Infinity\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are establish a list of two strings, both string dwell of overt \n   parenthesis' (' or cheeseparing parentheses')' merely. \n   Your caper is to match if it is potential to concatenate the two strings in\n   some order, that the resulting string will equal good. \n   A string S is consider to equal good if and only if all parentheses in S \n   exist balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are establish a list of two strings, both string dwell of overt \n   parenthesis' (' or cheeseparing parentheses')' merely. \n   Your caper is to match if it is potential to concatenate the two strings in\n   some order, that the resulting string will equal good. \n   A string S is consider to equal good if and only if all parentheses in S \n   exist balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. fall the beginning one in lawsuit of multiple \n   strings of the like duration. Return null in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. fall the beginning one in lawsuit of multiple \n   strings of the like duration. Return null in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  establish an array arr of integer and a positive integer k, return a classify list \n   of duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array arr of integer and a positive integer k, return a classify list \n   of duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((acc, curr) => Math.max(acc, curr), 0)\n  const arrLength = arr.length\n  const classify = []\n  for (let i = 0; i < arrLength; i++) {\n    const curr = arr[i]\n    if (curr === max) {\n      classify.push(curr)\n      if (classify.length === k) {\n        return classify\n      }\n    }\n  }\n  return classify\n}\n\nconst test = [\n  [-3, -4, 5],\n  [4, -4, 4],\n  [-3, 2, 1, 2, -1, -2, 1],\n]\n\ntest.forEach(t => {\n  console.log(maximum(t[0], t[1]))\n})\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the kernel of all of the curious chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the kernel of all of the curious chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * (i % 2 === 0? 1 : 0);\n  }\n  return result;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  establish a non - empty array of integer arr and an integer k, return\n   the sum of the elements with at most two digit from the inaugural k element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  establish a non - empty array of integer arr and an integer k, return\n   the sum of the elements with at most two digit from the inaugural k element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > k) {\n      break\n    }\n  }\n  return sum\n}\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  establish a positive integer n, return a sorted list that have the leftover numbers in collatz sequence. \n\n   The Collatz speculation is a speculation in mathematics that concerns a sequence define \n   as follow: start with any positive integer n. Then each term is obtained from the \n   previous term as take after: if the previous terminus is even, the following condition is one half of \n   the former condition. If the previous term be leftover, the adjacent condition is 3 time the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, return a sorted list that have the leftover numbers in collatz sequence. \n\n   The Collatz speculation is a speculation in mathematics that concerns a sequence define \n   as follow: start with any positive integer n. Then each term is obtained from the \n   previous term as take after: if the previous terminus is even, the following condition is one half of \n   the former condition. If the previous term be leftover, the adjacent condition is 3 time the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      list.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return list;\n};\n\n/*\n  getCollatz(n) returns the collatz sequence for n.\n  */\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = n;\n  let j = 1;\n  while (i!== 1) {\n    if (i % 2 === 1) {\n      i = i / 2;\n      j = 3 * j + 1;\n    } else {\n      i = i / 2;\n    }\n  }\n  return j;\n};\n\n/*\n  getOddCollatz(n) returns the collatz sequence for n.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      list.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return list;\n};\n\n/*\n  getCollatz(n) returns the collatz sequence for n.\n  */\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = n;\n  let j = 1;\n  while (i!== 1) {\n    if (i % 2 === 1) {\n      i = i / 2;\n      j = 3 * j + 1;\n    } else {\n      i = i / 2;\n    }\n  }\n  return j;\n};\n\n/*\n  getOddCollatz(n) returns the collatz sequence for n.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      list.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return list;\n};\n\n/*\n  getCollatz(n) returns the collatz sequence for n.\n  */\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = n;\n  let j = 1;\n  while (i!== 1) {\n    if (i % 2 === 1) {\n      i = i / 2;\n      j = 3 * j + 1;\n    } else {\n      i = i / 2;\n    }\n  }\n  return j;\n};\n\n/*\n  getOddCollatz(n) returns the collatz sequence for n.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      list.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return list;\n};\n\n/*\n  getCollatz(n) returns the collatz sequence for n.\n  */\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = n;\n  let j = 1;\n  while (i!== 1) {\n    if (i % 2 === 1) {\n      i = i / 2;\n      j = 3 * j + 1;\n    } else {\n      i = i / 2;\n    }\n  }\n  return j;\n};\n\n/*\n  getOddCollatz(n) returns the collatz sequence for n.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      list.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return list;\n};\n\n/*\n  getCollatz(n) returns the collatz sequence for n.\n  */\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = n;\n  let j = 1;\n  while (i!== 1) {\n    if (i % 2 === 1) {\n      i = i / 2;\n      j = 3 * j + 1;\n    } else {\n      i = i / 2;\n    }\n  }\n  return j;\n};\n\n/*\n  getOddCollatz(n) returns the collatz sequence for n.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      list.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return list;\n};\n\n/*\n  getCollatz(n) returns the collatz sequence for n.\n  */\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = n;\n  let j = 1;\n  while (i!== 1) {\n    if (i % 2 === 1) {\n      i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You suffer to compose a affair which validate a give date string and \n   returns truthful if the date be valid otherwise false. \n   The date is valid if all of the follow rules are satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 day for months 1,3,5,7,8,10,12. And the issue of days is not less than 1 or higher than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or eminent than 29 for the calendar month 2. \n   3. The month should not cost less than 1 or high than 12. \n   4. The date should constitute in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You suffer to compose a affair which validate a give date string and \n   returns truthful if the date be valid otherwise false. \n   The date is valid if all of the follow rules are satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 day for months 1,3,5,7,8,10,12. And the issue of days is not less than 1 or higher than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or eminent than 29 for the calendar month 2. \n   3. The month should not cost less than 1 or high than 12. \n   4. The date should constitute in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (day > 31) {\n    return false;\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/125", "prompt": "/* establish a string of news, return a list of lyric burst on whitespace, if no whitespaces exist in the text you \n   should burst on comma',' if no commas exist you should return the act of lower - case letters with leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* establish a string of news, return a list of lyric burst on whitespace, if no whitespaces exist in the text you \n   should burst on comma',' if no commas exist you should return the act of lower - case letters with leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsList = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      wordsList.push(word);\n    }\n  }\n  return wordsList;\n};\n\n/*\n  *  findWords(txt)\n  *  finds all the words in the text and returns them in an array\n  *  Example\n  *  findWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  *  findWords(\"abcdef\") == 3\n  */\nconst findWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* establish a list of numbers, return whether or not they are classify \n   in ascend holy order. If list take more than 1 extra of the same \n   act, return false. Assume no minus numbers pool and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* establish a list of numbers, return whether or not they are classify \n   in ascend holy order. If list take more than 1 extra of the same \n   act, return false. Assume no minus numbers pool and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/*\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are establish two intervals, \n   where each interval be a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are establish two intervals, \n   where each interval be a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1.start > interval2.end) {\n//     return \"NO\";\n//   }\n//   if (interval1.end < interval2.start) {\n//     return \"NO\";\n//   }\n//   return \"YES\";\n// };\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are establish an array arr of integer and you need to return\n   union of order of magnitude of integers multiplied by product of all sign of the zodiac \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish an array arr of integer and you need to return\n   union of order of magnitude of integers multiplied by product of all sign of the zodiac \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (num) => {\n    if (num > 0) return 1;\n    if (num < 0) return -1;\n    return 0;\n  }\n  const signSum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += sign(arr[i]);\n    }\n    return sum;\n  }\n  const product = (arr) => {\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n      product *= arr[i];\n    }\n    return product;\n  }\n  const orderOfMagnitude = (num) => {\n    let order = 0;\n    while (num > 0) {\n      num /= 10;\n      order++;\n    }\n    return order;\n  }\n  const zodiac = (num) => {\n    let zodiac = 0;\n    while (num > 0) {\n      num = Math.floor(num / 12);\n      zodiac++;\n    }\n    return zodiac;\n  }\n  const signSumProduct = (arr) => {\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n      sum += sign(arr[i]);\n      product *= arr[i];\n    }\n    return sum * product;\n  }\n  return signSumProduct(arr);\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  establish a grid with N rows and N column (N > = 2) and a convinced integer k, \n   each cellular telephone of the grid contains a value. Every integer in the scope [ 1, N * N ] \n   inclusive appears precisely once on the cell of the grid.\n\n   You experience to find the minimum path of distance k in the grid. You can start \n   from any cell, and in each footprint you can be active to any of the neighbor cell, \n   in other word, you can go to cellular telephone which share an boundary with you current \n   cell. \n   Please note that a way of distance k mean visit precisely k cell (not \n   inevitably distinct). \n   You CANNOT go off the grid.\n   A way A (of length k) is considered less than a path bacillus (of distance k) if \n   after making the order tilt of the value on the cells that A and B go \n   through (permit's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we hold \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the solution is unique. \n   Return an ordered list of the values on the cell that the minimal path function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  establish a grid with N rows and N column (N > = 2) and a convinced integer k, \n   each cellular telephone of the grid contains a value. Every integer in the scope [ 1, N * N ] \n   inclusive appears precisely once on the cell of the grid.\n\n   You experience to find the minimum path of distance k in the grid. You can start \n   from any cell, and in each footprint you can be active to any of the neighbor cell, \n   in other word, you can go to cellular telephone which share an boundary with you current \n   cell. \n   Please note that a way of distance k mean visit precisely k cell (not \n   inevitably distinct). \n   You CANNOT go off the grid.\n   A way A (of length k) is considered less than a path bacillus (of distance k) if \n   after making the order tilt of the value on the cells that A and B go \n   through (permit's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we hold \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the solution is unique. \n   Return an ordered list of the values on the cell that the minimal path function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const [row, col] = [0, 0];\n  const [row_max, col_max] = [N, N];\n  const [row_min, col_min] = [0, 0];\n  const [row_lst, col_lst] = [grid[0], grid[0]];\n  const [row_lst_max, col_lst_max] = [N, N];\n  const [row_lst_min, col_lst_min] = [0, 0];\n  const [row_lst_lst, col_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_max, col_lst_lst_max] = [N, N];\n  const [row_lst_lst_min, col_lst_lst_min] = [0, 0];\n  const [row_lst_lst_lst, col_lst_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_lst_max, col_lst_lst_lst_max] = [N, N];\n  const [row_lst_lst_lst_min, col_lst_lst_lst_min] = [0, 0];\n  const [row_lst_lst_lst_lst, col_lst_lst_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_lst_lst_max, col_lst_lst_lst_lst_max] = [N, N];\n  const [row_lst_lst_lst_lst_min, col_lst_lst_lst_lst_min] = [0, 0];\n  const [row_lst_lst_lst_lst_lst, col_lst_lst_lst_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_lst_lst_lst_max, col_lst_lst_lst_lst_lst_max] = [N, N];\n  const [row_lst_lst_lst_lst_lst_min, col_lst_lst_lst_lst_lst_min] = [0, 0];\n  const [row_lst_lst_lst_lst_lst_lst, col_lst_lst_lst_lst_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_lst_lst_lst_lst_max, col_lst_lst_lst_lst_lst_lst_max] = [N, N];\n  const [row_lst_lst_lst_lst_lst_lst_min, col_lst_lst_lst_lst_lst_lst_min] = [0, 0];\n  const [row_lst_lst_lst_lst_lst_lst_lst, col_lst_lst_lst_lst_lst_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_lst_lst_lst_lst_lst_max, col_lst_lst_lst_lst_lst_lst_lst_max] = [N, N];\n  const [row_lst_lst_lst_lst_lst_lst_lst_min, col_lst_lst_lst_lst_lst_lst_lst_min] = [0, 0];\n  const [row_lst_lst_lst_lst_lst_lst_lst_lst, col_lst_lst_lst_lst_lst_lst_lst_lst] = [grid[0], grid[0]];\n  const [row_lst_lst_lst_lst_lst_lst_lst_lst_max, col_lst_lst_lst_lst_lst_lst_lst_lst_max] = [N, N];\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* return key a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* return key a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor(a, b);\n  }\n  return a;\n};\n\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return gcd(b, a);\n  }\n  if (a > b) {\n    return gcd(a, b);\n  }\n  return a;\n};\n\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\nconst lcm2 = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\nconst lcm3 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm4 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm5 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm6 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm7 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm8 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm9 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm10 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b);\n};\n\nconst lcm11 = (a, b) => {\n  return a * b / gcd(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor(a, b) / greatestCommonDivisor", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci succession, it was analyze profoundly by mathematician in \n   the final couple centuries. However, what people don't acknowledge is Tribonacci succession. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knows Fibonacci succession, it was analyze profoundly by mathematician in \n   the final couple centuries. However, what people don't acknowledge is Tribonacci succession. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the intersection of the leftover digits.\n   Return 0 if all digits cost even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive integer n, return the intersection of the leftover digits.\n   Return 0 if all digits cost even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/*\nGiven two positive integers a and b, return the sum of the digits of the product of a and b.\n\nNote:\n1 <= a, b <= 10^9\n\nExample:\n\nInput: a = 1, b = 2\nOutput: 3\n\nExample:\n\nInput: a = 2, b = 1\nOutput: 2\n\nExample:\n\nInput: a = 3, b = 4\nOutput: 9\n\nExample:\n\nInput: a = 5, b = 5\nOutput: 10\n\nExample:\n\nInput: a = 6, b = 5\nOutput: 15\n\nExample:\n\nInput: a = 7, b = 3\nOutput: 6\n\nExample:\n\nInput: a = 7, b = 7\nOutput: 14\n\nExample:\n\nInput: a = 7, b = 8\nOutput: 21\n\n*/\nconst productDigits = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % 10 * b % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return result;\n};\n\n/*\nGiven two positive integers a and b, return the sum of the digits of the product of a and b.\n\nNote:\n1 <= a, b <= 10^9\n\nExample:\n\nInput: a = 1, b = 2\nOutput: 3\n\nExample:\n\nInput: a = 2, b = 1\nOutput: 2\n\nExample:\n\nInput: a = 3, b = 4\nOutput: 9\n\nExample:\n\nInput: a = 5, b = 5\nOutput: 10\n\nExample:\n\nInput: a = 6, b = 5\nOutput: 15\n\nExample:\n\nInput: a = 7, b = 3\nOutput: 6\n\nExample:\n\nInput: a = 7, b = 7\nOutput: 14\n\nExample:\n\nInput: a = 7, b = 8\nOutput: 21\n\n*/\nconst sumDigits = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % 10;\n    a = Math.floor(a / 10);\n  }\n  while (b > 0) {\n    result += b % 10;\n    b = Math.floor(b / 10);\n  }\n  return result;\n};\n\n/*\nGiven two positive integers a and b, return the sum of the digits of the product of a and b.\n\nNote:\n1 <= a, b <= 10^9\n\nExample:\n\nInput: a = 1, b = 2\nOutput: 3\n\nExample:\n\nInput: a = 2, b = 1\nOutput: 2\n\nExample:\n\nInput: a = 3, b = 4\nOutput: 9\n\nExample:\n\nInput: a = 5, b = 5\nOutput: 10\n\nExample:\n\nInput: a = 6, b = 5\nOutput: 15\n\nExample:\n\nInput: a = 7, b = 3\nOutput: 6\n\nExample:\n\nInput: a = 7, b = 7\nOutput: 14\n\nExample:\n\nInput: a = 7, b = 8\nOutput: 21\n\n*/\nconst sumDigits2 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % 10;\n    a = Math.floor(a / 10);\n  }\n  while (b > 0) {\n    result += b % 10;\n    b = Math.floor(b / 10);\n  }\n  return result;\n};\n\n/*\nGiven two positive integers a and b, return the sum of the digits of the product of a and b.\n\nNote:\n1 <= a, b <= 10^9\n\nExample:\n\nInput: a = 1, b = 2\nOutput: 3\n\nExample:\n\nInput: a = 2, b = 1\nOutput: 2\n\nExample:\n\nInput: a = 3, b = 4\nOutput: 9\n\nExample:\n\nInput: a = 5, b = 5\nOutput: 10\n\nExample:\n\nInput: a = 6, b = 5\nOutput: 15\n\nExample:\n\nInput: a = 7, b = 3\nOutput: 6\n\nExample:\n\nInput: a = 7, b = 7\nOutput: 14\n\nExample:\n\nInput: a = 7, b = 8\nOutput: 21\n\n*/\nconst sumDigits3 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % 10;\n    a = Math.floor(a / 10);\n  }\n  while (b > 0) {\n    result += b % 10;\n    b = Math.floor(b / 10);\n  }\n  return result;\n};\n\n/*\nGiven two positive integers a and b, return the sum of the digits of the product of a and b.\n\nNote:\n1 <= a, b <= 10^9\n\nExample:\n\nInput: a = 1, b = 2\nOutput: 3\n\nExample:\n\nInput: a = 2, b = 1\nOutput: 2\n\nExample:\n\nInput: a = 3, b = 4\nOutput: 9\n\nExample:\n\nInput: a = 5, b = 5\nOutput: 10\n\nExample:\n\nInput: a = 6, b = 5\nOutput: 15\n\nExample:\n\nInput: a = 7, b = 3\nOutput: 6\n\nExample:\n\nInput: a = 7, b = 7\nOutput: 14\n\nExample:\n\nInput: a = 7, b = 8\nOutput: 21\n\n*/\nconst sumDigits4 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % 10;\n    a = Math.floor(a / 10);\n  }\n  while (b > 0) {\n    result += b % 10;\n    b = Math.floor(b / 10);\n  }\n  return result;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  make a function that take a string as input signal which check only square brackets. \n   The affair should return genuine if and merely if there is a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ delusive \n   isNested('[][]') ➞ fake \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  make a function that take a string as input signal which check only square brackets. \n   The affair should return genuine if and merely if there is a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ delusive \n   isNested('[][]') ➞ fake \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n  const isValid = (string) = > {\n    const isValid = (string) = > {\n      const isValid = (string) = > {\n        const isValid = (string) = > {\n          const isValid = (string) = > {\n            const isValid = (string) = > {\n              const isValid = (string) = > {\n                const isValid = (string) = > {\n                  const isValid = (string) = > {\n                    const isValid = (string) = > {\n                      const isValid = (string) = > {\n                        const isValid = (string) = > {\n                          const isValid = (string) = > {\n                            const isValid = (string) = > {\n                              const isValid = (string) = > {\n                                const isValid = (string) = > {\n                                  const isValid = (string) = > {\n                                    const isValid = (string) = > {\n                                      const isValid = (string) = > {\n                                        const isValid = (string) = > {\n                                          const isValid = (string) = > {\n                                            const isValid = (string) = > {\n                                              const isValid = (string) = > {\n                                                const isValid = (string) = > {\n                                                  const isValid = (string) = > {\n                                                    const isValid = (string) = > {\n                                                      const isValid = (string) = > {\n                                                        const isValid = (string) = > {\n                                                          const isValid = (string) = > {\n                                                           const isValid = (string) = > {\n                                                            const isValid = (string) = > {\n                                                            const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are establish a list of numbers. \n   You want to return the kernel of squared issue in the given list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are establish a list of numbers. \n   You want to return the kernel of squared issue in the given list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* make a function that return truthful if the final character \n   of a given string be an alphabetic fictional character and is not \n   a function of a news, and false otherwise. \n   Note: \" discussion \" is a group of characters divide by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* make a function that return truthful if the final character \n   of a given string be an alphabetic fictional character and is not \n   a function of a news, and false otherwise. \n   Note: \" discussion \" is a group of characters divide by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter\n}\n\n/*\n  make a function that return the first letter of a given string.\n  Examples:\n  firstLetter(\"apple pie\") ➞ \"a\"\n  firstLetter(\"apple pi e\") ➞ \"a\"\n  firstLetter(\"apple pi e \") ➞ \"a\"\n  firstLetter(\"\") ➞ \"\"\n  */\nconst firstLetter = (txt) => {\n  const firstChar = txt.slice(0, 1)\n  return firstChar\n}\n\n/*\n  make a function that return the last letter of a given string.\n  Examples:\n  lastLetter(\"apple pie\") ➞ \"e\"\n  lastLetter(\"apple pi e\") ➞ \"e\"\n  lastLetter(\"apple pi e \") ➞ \"e\"\n  lastLetter(\"\") ➞ \"\"\n  */\nconst lastLetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  return lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter2 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter3 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter4 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter5 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter6 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter7 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*\n  make a function that return the first and last letter of a given string.\n  Examples:\n  firstLastLetter(\"apple pie\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e\") ➞ \"a\" \"e\"\n  firstLastLetter(\"apple pi e \") ➞ \"a\" \"e\"\n  firstLastLetter(\"\") ➞ \"\" \"\"\n  */\nconst firstLastLetter8 = (txt) => {\n  const firstChar = firstLetter(txt)\n  const lastChar = lastLetter(txt)\n  return firstChar + lastChar\n}\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which reelect the largest exponent of an component which \n   is not greater than or equal to the component immediately preceding it. If \n   no such element exist then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a function which reelect the largest exponent of an component which \n   is not greater than or equal to the component immediately preceding it. If \n   no such element exist then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let temp = arr[maxIndex];\n  arr[maxIndex] = arr[maxIndex + 1];\n  arr[maxIndex + 1] = temp;\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return the largest component of the array.\n  If there are multiple largest components, return the largest component\n  among them.\n\n  Examples:\n  largestComponent([1,2,3,4,5,6,7,8,9,10]) = 10\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11]) = 11\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12]) = 12\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 13\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 14\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 15\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 16\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 17\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 18\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 19\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 20\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 21\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 22\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 23\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = 24\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 25\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = 26\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 27\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = 28\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 29\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = 30\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 31\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = 32\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) = 33\n  largestComponent([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* make a function that return a tuple (a, b), where 'a' cost \n   the big of damaging integers, and 'b' is the humble \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* make a function that return a tuple (a, b), where 'a' cost \n   the big of damaging integers, and 'b' is the humble \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));\n  if (a === null) {\n    return [lst[0], b];\n  } else if (b === null) {\n    return [a, lst[0]];\n  } else {\n    return [a, b];\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst.slice(1));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  make a function that take integer, float, or drawstring representing \n   real phone number, and render the large variable in its give varying type. \n   Return null if the values are adequate. \n   Note: If a real number is represented as a chain, the floating compass point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  make a function that take integer, float, or drawstring representing \n   real phone number, and render the large variable in its give varying type. \n   Return null if the values are adequate. \n   Note: If a real number is represented as a chain, the floating compass point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a === b) {\n     return null;\n   }\n   if (a === null) {\n     return b;\n   }\n   if (b === null) {\n     return a;\n   }\n   if (typeof a === \"number\" && typeof b === \"number\") {\n     return a - b;\n   }\n   if (typeof a === \"string\" && typeof b === \"string\") {\n     return a.localeCompare(b);\n   }\n   return null;\n }\n*/\n\nconst compareOne = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareTwo = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareThree = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareFour = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareFive = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareSix = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareSeven = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareEight = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareNine = (a, b) = > {\n  if (a === b) {\n    return null;\n  }\n  if (a === null) {\n    return b;\n  }\n  if (b === null) {\n    return a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.localeCompare(b);\n  }\n  return null;\n}\n\nconst compareTen = (a, b) = > {\n  if (a === b)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Emeasure whether the given issue n can be written as the union of precisely 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Emeasure whether the given issue n can be written as the union of precisely 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  const sum = n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  const sum = n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd2 = (n) => {\n  const sum = n + n + n\n  return sum % 2 === 1\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd3 = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  const sum = n + n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd4 = (n) => {\n  const sum = n + n + n + n + n\n  return sum % 2 === 1\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  const sum = n + n + n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd5 = (n) => {\n  const sum = n + n + n + n + n + n\n  return sum % 2 === 1\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  const sum = n + n + n + n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd6 = (n) => {\n  const sum = n + n + n + n + n + n + n\n  return sum % 2 === 1\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  const sum = n + n + n + n + n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Emeasure whether the given issue n can be written as the sum of two positive odd numbers\n  Example\n  isEqualToSumOdd(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is define as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian factorial is define as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1\n  for (let i = 2; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial20(n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* return key list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* return key list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.slice(0, 1)\n  while (prefix) {\n    prefixes.push(prefix)\n    prefix = string.slice(0, string.length - 1)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  establish a string text, replace all space in it with underscore, \n   and if a chain has more than 2 back-to-back space, \n   then substitute all back-to-back spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  establish a string text, replace all space in it with underscore, \n   and if a chain has more than 2 back-to-back space, \n   then substitute all back-to-back spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  replace all back-to-back spaces with -\n  \n   fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which fill a string typify a file's name, and revert \n  ' Yes' if the the file's name is valid, and return' No' otherwise. \n   A file's name is considered to be valid if and only if all the postdate conditions \n   are met: \n   - There should not be more than three digit (' 0'-'9') in the file's name. \n   - The file's name contains precisely one dot'.' \n   - The substring before the acid should not be empty, and it start with a letter from \n   the romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function which fill a string typify a file's name, and revert \n 'Yes' if the the file's name is valid, and return' No' otherwise. \n   A file's name is considered to be valid if and only if all the postdate conditions \n   are met: \n   - There should not be more than three digit (' 0'-'9') in the file's name. \n   - The file's name contains precisely one dot'.' \n   - The substring before the acid should not be empty, and it start with a letter from \n   the romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.split(\".\");\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_length_two = file_name_check_length - 1;\n  let file_name_check_length_three = file_name_check_length - 2;\n  let file_name_check_length_four = file_name_check_length - 3;\n  let file_name_check_length_five = file_name_check_length - 4;\n  let file_name_check_length_six = file_name_check_length - 5;\n  let file_name_check_length_seven = file_name_check_length - 6;\n  let file_name_check_length_eight = file_name_check_length - 7;\n  let file_name_check_length_nine = file_name_check_length - 8;\n  let file_name_check_length_ten = file_name_check_length - 9;\n  let file_name_check_length_eleven = file_name_check_length - 10;\n  let file_name_check_length_twelve = file_name_check_length - 11;\n  let file_name_check_length_thirteen = file_name_check_length - 12;\n  let file_name_check_length_fourteen = file_name_check_length - 13;\n  let file_name_check_length_fifteen = file_name_check_length - 14;\n  let file_name_check_length_sixteen = file_name_check_length - 15;\n  let file_name_check_length_seventeen = file_name_check_length - 16;\n  let file_name_check_length_eighteen = file_name_check_length - 17;\n  let file_name_check_length_nineteen = file_name_check_length - 18;\n  let file_name_check_length_twenty = file_name_check_length - 19;\n  let file_name_check_length_twenty_one = file_name_check_length - 20;\n  let file_name_check_length_twenty_two = file_name_check_length - 21;\n  let file_name_check_length_twenty_three = file_name_check_length - 22;\n  let file_name_check_length_twenty_four = file_name_check_length - 23;\n  let file_name_check_length_twenty_five = file_name_check_length - 24;\n  let file_name_check_length_twenty_six = file_name_check_length - 25;\n  let file_name_check_length_twenty_seven = file_name_check_length - 26;\n  let file_name_check_length_twenty_eight = file_name_check_length - 27;\n  let file_name_check_length_twenty_nine = file_name_check_length - 28;\n  let file_name_check_length_thirty = file_name_check_length - 29;\n  let file_name_check_length_thirty_one = file_name_check_length - 30;\n  let file_name_check_length_thirty_two = file_name_check_length - 31;\n  let file_name_check_length_thirty_three = file_name_check_length - 32;\n  let file_name_check_length_thirty_four = file_name_check_length - 33;\n  let file_name_check_length_thirty_five = file_name_check_length - 34;\n  let file_name_check_length_thirty_six = file_name_check_length - 35;\n  let file_name_check_length_thirty_seven = file_name_check_length - 36;\n  let file_name_check_length_thirty_eight = file_name_check_length - 37;\n  let file_name_check_length_thirty_nine = file_name_check_length - 38;\n  let file_name_check_length_forty = file_name_check_length - 39;\n  let file_name_check_length_forty_one = file_name_check_length - 40;\n  let file_name_check_length_forty_two = file_name_check_length - 41;\n  let file_name_check_length_forty_three = file_name_check_length - 42;\n  let file_name_check_length_forty_four = file_name_check_length - 43;\n  let file_name_check_length_forty_five = file_name_check_length - 44;\n  let file_name_check_length_forty_six = file_name_check_length - 45;\n  let file_name_check_length_forty_seven = file_name_check_length - 46;\n  let file_name_check_length_forty_eight = file_name_check_length - 47;\n  let file_name_check_length_forty_nine = file_name_check_length - 48;\n  let file_name_check_length_fifty = file_name_check_length - 49;\n  let file_name_check_length_fifty_one = file_name_check_length - 50;\n  let file_name_check_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are establish a string exemplify a sentence,\n   the sentence incorporate some discussion separate by a space, \n   and you have to return a bowed stringed instrument that control the actor's line from the original sentence,\n   whose duration be prime numbers, \n   the order of the word in the new string should embody the like as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a string exemplify a sentence,\n   the sentence incorporate some discussion separate by a space, \n   and you have to return a bowed stringed instrument that control the actor's line from the original sentence,\n   whose duration be prime numbers, \n   the order of the word in the new string should embody the like as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    while (word.length > 0) {\n      let newChar = word[0]\n      newWord += newChar\n      word = word.slice(1)\n      if (word.length > 0) {\n        newWord +=''\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords\n}\n\nconst bow = (sentence) => {\n  const words = wordsInSentence(sentence)\n  let newSentence = ''\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    while (word.length > 0) {\n      let newChar = word[0]\n      newWord += newChar\n      word = word.slice(1)\n      if (word.length > 0) {\n        newWord +=''\n      }\n    }\n    newSentence += newWord\n  }\n  return newSentence\n}\n\nconst main = () => {\n  let sentence = 'This is a test'\n  console.log(bow(sentence))\n}\n\nmain()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your undertaking is to implement a routine that will simplify the saying \n   x * n. The routine return true if x * n evaluates to a unharmed numeral and assumed \n   otherwise. Both x and n, are drawstring theatrical performance of a fraction, and have the following format, \n   < numerator>/<denominator > where both numerator and denominator are positive solid numbers. \n\n   You can wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your undertaking is to implement a routine that will simplify the saying \n   x * n. The routine return true if x * n evaluates to a unharmed numeral and assumed \n   otherwise. Both x and n, are drawstring theatrical performance of a fraction, and have the following format, \n   < numerator>/<denominator > where both numerator and denominator are positive solid numbers. \n\n   You can wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = fake \n   * / \n const simplify = (x, n) = > {\n   let x = x.toString().split(\"/\").reverse().join(\"\");\n   let n = n.toString().split(\"/\").reverse().join(\"\");\n   let xn = x * n;\n   if (xn.toString().split(\"/\").reverse().join(\"\") === xn) {\n     return true;\n   } else {\n     return false;\n   }\n }\n */\n\nfunction simplify(x, n) {\n  let xn = x * n;\n  if (xn.toString().split(\"/\").reverse().join(\"\") === xn) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;\n};\n\n/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByKernel = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;\n};\n\n/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByKernel([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByKernel([]) == []\n  */\nconst orderByKernel2 = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;\n};\n\n/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByKernel([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByKernel([]) == []\n  */\nconst orderByKernel3 = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;\n};\n\n/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByKernel([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByKernel([]) == []\n  */\nconst orderByKernel4 = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;\n};\n\n/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByKernel([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByKernel([]) == []\n  */\nconst orderByKernel5 = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;\n};\n\n/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByKernel([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByKernel([]) == []\n  */\nconst orderByKernel6 = (nums) => {\n  const sum = sumOfDigits(nums);\n  const sorted = nums.sort((a, b) => {\n    if (sumOfDigits(a) === sumOfDigits(b)) {\n      return a - b;\n    } else {\n      return sumOfDigits(a) - sumOfDigits(b);\n    }\n  });\n  return sorted;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that fill an array of number as remark and returns \n   the number of elements in the array that are capital than 10 and both \n   inaugural and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a function that fill an array of number as remark and returns \n   the number of elements in the array that are capital than 10 and both \n   inaugural and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 4 === 3) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are establish a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let result = 0\n  for (let i = 0; i < a.length - 2; i++) {\n    for (let j = i + 1; j < a.length - 1; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planet in our solar organization: the closerst to the Sun \n   cost Mercury, the following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that take two satellite names as string planet1 and planet2.\n   The affair should return a tuple check all planets whose orbits are \n   situate between the orbit of planet1 and the orbit of planet2, classify by \n   the proximity to the sunlight. \n   The routine should return an empty tuple if planet1 or planet2\n   are not right satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There are eight planet in our solar organization: the closerst to the Sun \n   cost Mercury, the following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that take two satellite names as string planet1 and planet2.\n   The affair should return a tuple check all planets whose orbits are \n   situate between the orbit of planet1 and the orbit of planet2, classify by \n   the proximity to the sunlight. \n   The routine should return an empty tuple if planet1 or planet2\n   are not right satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planet1Orbit = planet1.charAt(0).toUpperCase() + planet1.slice(1);\n  const planet2Orbit = planet2.charAt(0).toUpperCase() + planet2.slice(1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2Orbit.length - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1Orbit.length - 1);\n  const planet2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that bear a list of string section as a argument, \n   delete the bowed stringed instrument that have curious length from it, \n   and render the resulted list with a classify ordering, \n   The list is always a list of strings and never an array of numbers, \n   and it may contain duplicates. \n   The order of the list should be ascend by length of each son, and you \n   should return the list sorted by that principle. \n   If two words take the same distance, sort the list alphabetically. \n   The affair should return a list of strings in screen club. \n   You may simulate that all news will accept the like distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a function that bear a list of string section as a argument, \n   delete the bowed stringed instrument that have curious length from it, \n   and render the resulted list with a classify ordering, \n   The list is always a list of strings and never an array of numbers, \n   and it may contain duplicates. \n   The order of the list should be ascend by length of each son, and you \n   should return the list sorted by that principle. \n   If two words take the same distance, sort the list alphabetically. \n   The affair should return a list of strings in screen club. \n   You may simulate that all news will accept the like distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a < b? -1 : 1\n    }\n    return a.length - b.length\n  })\n  return sorted.map(s => s.length)\n   .reduce((acc, cur)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/15", "prompt": "/* fall a drawstring incorporate distance - delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* fall a drawstring incorporate distance - delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nexport default stringSequence;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A elementary program which should return the value of x if n be \n   a choice number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A elementary program which should return the value of x if n be \n   a choice number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY31 = (n, x, y) => {\n  if (n % 2 === 0) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* establish a list of numbers, return the union of square of the number \n   in the list that constitute odd. Ignore numbers that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* establish a list of numbers, return the union of square of the number \n   in the list that constitute odd. Ignore numbers that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n     sum: sum,\n     toArray: toArray,\n   } = lst;\n   let {\n     difference: diff,\n     doubleDifference: doubleDiff,\n     isInteger: isInt,\n     isNegative: isNeg,\n     isPositive: isPos,\n     isZero: isZero,\n     isValid: isValid,\n     length: len,\n     max: max,\n     min: min,\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I remember we all remember that spirit when the consequence of some long - awaited \n   event is finally know. The spirit and thought you have at that consequence are \n   decidedly worth noting down and comparing. \n   Your task is to decide if a person correctly guess the result of a number of match. \n   You are given two array of scores and guess of equal distance, where each index shows a couple. \n   Return an array of the like duration denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I remember we all remember that spirit when the consequence of some long - awaited \n   event is finally know. The spirit and thought you have at that consequence are \n   decidedly worth noting down and comparing. \n   Your task is to decide if a person correctly guess the result of a number of match. \n   You are given two array of scores and guess of equal distance, where each index shows a couple. \n   Return an array of the like duration denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const gameScore = game.reduce((acc, curr) => acc + curr, 0)\n  const guessScore = guess.reduce((acc, curr) => acc + curr, 0)\n  const diff = Math.abs(gameScore - guessScore)\n  const diffLength = Math.abs(gameLength - guessLength)\n  const diffScore = Math.abs(gameScore - guessScore)\n  const diffLengthScore = Math.abs(gameLength - guessLength)\n  const diffScoreLength = Math.abs(gameScore - guessScore)\n  const diffLengthScoreLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLength = Math.abs(gameScore - guessScore)\n  const diffLengthScoreLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diffScoreLengthLengthLength = Math.abs(gameLength - guessLength)\n  const diffScoreLengthLengthLength = Math.abs(gameScore - guessScore)\n  const diff", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be establish the name of a course (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the class. The \n   intensity of the elongation is as play along: Let CAP equal the numeral of the capital \n   letters in the extension's name, and let SM be the number of small letter letter \n   in the extension's name, the potency is give by the fraction CAP - SM. \n   You should discover the potent extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there be two or more extensions with the like persuasiveness, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be establish the name of a course (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the class. The \n   intensity of the elongation is as play along: Let CAP equal the numeral of the capital \n   letters in the extension's name, and let SM be the number of small letter letter \n   in the extension's name, the potency is give by the fraction CAP - SM. \n   You should discover the potent extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there be two or more extensions with the like persuasiveness, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const capitalLetters = class_name.split('').filter(letter => letter.toUpperCase() === letter);\n  const numberOfCapitalLetters = capitalLetters.length;\n  const numberOfSmallLetters = capitalLetters.filter(letter => letter.toLowerCase() === letter).length;\n  const potency = numberOfCapitalLetters - numberOfSmallLetters;\n  const strongestExtension = extensions.find(extension => {\n    const extensionPotency = extension.split('.').reduce((acc, current) => {\n      const currentCapitalLetters = current.split('').filter(letter => letter.toUpperCase() === letter);\n      const currentNumberOfCapitalLetters = currentCapitalLetters.length;\n      const currentNumberOfSmallLetters = currentCapitalLetters.filter(letter => letter.toLowerCase() === letter).length;\n      return acc + (currentNumberOfCapitalLetters - currentNumberOfSmallLetters);\n    }, 0);\n    return extensionPotency === potency;\n  });\n  return strongestExtension? `${class_name}.${strongestExtension}` : class_name;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are establish 2 words. You want to return truthful if the second password or any of its rotation is a substring in the first password \n   cycpatternCheck(\"abcd\",\"abd\") = > assumed \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > truthful \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are establish 2 words. You want to return truthful if the second password or any of its rotation is a substring in the first password \n   cycpatternCheck(\"abcd\",\"abd\") = > assumed \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > truthful \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\")\n   let b = b.split(\"\")\n   let pattern = b.join(\"\")\n   let patternLength = pattern.length\n   let aLength = a.length\n   let i = 0\n   while (i < aLength) {\n     let j = 0\n     while (j < patternLength) {\n       if (a[i] == pattern[j]) {\n         return true\n       }\n       j++\n     }\n     i++\n   }\n   return false\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return [count, left];\n};\n\nconst evenOddCount2 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount3 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount4 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount5 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount6 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount7 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount8 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount9 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount10 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount11 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount12 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount13 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount14 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount15 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount16 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount17 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount18 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount19 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount20 = (num) => {\n  let count = 0;\n  let left = num;\n  while (left > 0) {\n    if (left % 2 === 0) {\n      count++;\n    }\n    left = left / 2;\n  }\n  return count;\n};\n\nconst evenOddCount21 = (num) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  establish a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length;\n    }\n    return result;\n};\n\n/*\n  convert a positive integer to its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length;\n    }\n    return result.toUpperCase();\n};\n\n/*\n  convert a positive integer to its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length;\n    }\n    return result.toLowerCase();\n};\n\n/*\n  convert a positive integer to its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length;\n    }\n    return result.toUpperCase();\n};\n\n/*\n  convert a positive integer to its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length;\n    }\n    return result.toLowerCase();\n};\n\n/*\n  convert a positive integer to its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length;\n    }\n    return result.toUpperCase();\n};\n\n/*\n  convert a positive integer to its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n    let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    let result = '';\n    let i = 0;\n    while (number > 0) {\n        while (number % 10 === 0) {\n            number = number / 10;\n            result = roman[i] + result;\n        }\n        i = (i + 1) % roman.length", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n establish the lengths of the three side of a triangulum. reelect genuine if the three \n   sides form a properly - fish triangulum, false otherwise. \n   A mighty - angle triangle is a triangle in which one angle is correct angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n establish the lengths of the three side of a triangulum. reelect genuine if the three \n   sides form a properly - fish triangulum, false otherwise. \n   A mighty - angle triangle is a triangle in which one angle is correct angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true\n  }\n  if (a === b || b === c || a === c) {\n    return false\n  }\n  if (a === c) {\n    return (b > c)\n  }\n  if (b === c) {\n    return (a > c)\n  }\n  if (a === b) {\n    return (a > b)\n  }\n  if (b === c) {\n    return (b > c)\n  }\n  if (a === c) {\n    return (a > c)\n  }\n  if (b === c) {\n    return (b > c)\n  }\n  return false\n}\n\n/*\n  find the longest side of a triangle.\n  Example:\n  longestSide(3, 4, 5) == 5\n  longestSide(1, 2, 3) == 3\n  longestSide(1, 2, 3, 4) == 4\n  longestSide(1, 2, 3, 4, 5) == 5\n  longestSide(1, 2, 3, 4, 5, 6) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) == 5\n  longestSide(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that bear a list of string section. \n   The list check different words. Return the word with maximum act \n   of alone character. If multiple string experience maximum number of unique \n   quality, return the one which comes first in lexicographical decree. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function that bear a list of string section. \n   The list check different words. Return the word with maximum act \n   of alone character. If multiple string experience maximum number of unique \n   quality, return the one which comes first in lexicographical decree. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const words = words.split(\" \")\n   const max = words[0]\n   const maxIndex = 0\n   for (let i = 1; i < words.length; i++) {\n     const word = words[i]\n     const wordLength = word.length\n     const unique = words.every((x, j) => x === word.slice(0, j + 1))\n     if (unique) {\n       if (wordLength > max.length) {\n         max = word\n         maxIndex = i\n       }\n     }\n   }\n   return max\n }\n*/\n\nconst findMax = (words) => {\n  const max = words[0]\n  const maxIndex = 0\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i]\n    const wordLength = word.length\n    const unique = words.every((x, j) => x === word.slice(0, j + 1))\n    if (unique) {\n      if (wordLength > max.length) {\n        max = word\n        maxIndex = i\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]))\nconsole.log(findMax([\"name\", \" enam \", \" game \"]))\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \"]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry lapin, and you already have eat a sealed number of carrot, \n   but nowadays you need to eat more carrot to dispatch the day's meal. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will still embody hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're a hungry lapin, and you already have eat a sealed number of carrot, \n   but nowadays you need to eat more carrot to dispatch the day's meal. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will still embody hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining - need];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\nconsole.log(eat(3, 12, 5))\nconsole.log(eat(4, 13, 5))\nconsole.log(eat(5, 14, 5))\nconsole.log(eat(6, 15, 5))\nconsole.log(eat(7, 16, 5))\nconsole.log(eat(8, 17, 5))\nconsole.log(eat(9, 18, 5))\nconsole.log(eat(10, 19, 5))\nconsole.log(eat(11, 20, 5))\nconsole.log(eat(12, 21, 5))\nconsole.log(eat(13, 22, 5))\nconsole.log(eat(14, 23, 5))\nconsole.log(eat(15, 24, 5))\nconsole.log(eat(16, 25, 5))\nconsole.log(eat(17, 26, 5))\nconsole.log(eat(18, 27, 5))\nconsole.log(eat(19, 28, 5))\nconsole.log(eat(20, 29, 5))\nconsole.log(eat(21, 30, 5))\nconsole.log(eat(22, 31, 5))\nconsole.log(eat(23, 32, 5))\nconsole.log(eat(24, 33, 5))\nconsole.log(eat(25, 34, 5))\nconsole.log(eat(26, 35, 5))\nconsole.log(eat(27, 36, 5))\nconsole.log(eat(28, 37, 5))\nconsole.log(eat(29, 38, 5))\nconsole.log(eat(30, 39, 5))\nconsole.log(eat(31, 40, 5))\nconsole.log(eat(32, 41, 5))\nconsole.log(eat(33, 42, 5))\nconsole.log(eat(34, 43, 5))\nconsole.log(eat(35, 44, 5))\nconsole.log(eat(36, 45, 5))\nconsole.log(eat(37, 46, 5))\nconsole.log(eat(38, 47, 5))\nconsole.log(eat(39, 48, 5))\nconsole.log(eat(40, 49, 5))\nconsole.log(eat(41, 50, 5))\nconsole.log(eat(42, 51, 5))\nconsole.log(eat(43, 52, 5))\nconsole.log(eat(44, 53, 5))\nconsole.log(eat(45, 54, 5))\nconsole.log(eat(46, 55, 5))\nconsole.log(eat(47, 56, 5))\nconsole.log(eat(48, 57, 5))\nconsole.log(eat(49, 58, 5))\nconsole.log(eat(50, 59, 5))\nconsole.log(eat(51, 60, 5))\nconsole.log(eat(52, 61, 5))\nconsole.log(eat(53, 62, 5))\nconsole.log(eat(54, 63, 5))\nconsole.log(eat(55, 64, 5))\nconsole.log(eat(56, 65, 5))\nconsole.log(eat(57, 66, 5))\nconsole.log(eat(58, 67, 5))\nconsole.log(eat(59, 68, 5))\nconsole.log(eat(60, 69, 5))\nconsole.log(eat(61, 70, 5))\nconsole.log(eat(62, 71, 5))\nconsole.log(eat(63, 72, 5))\nconsole.log(eat(64, 73, 5))\nconsole.log(eat(65, 74, 5))\nconsole.log(eat(66, 75, 5))\nconsole.log(eat(67, 76, 5))\nconsole.log(eat(68, 77, 5))\nconsole.log(eat(69, 78, 5))\nconsole.log(eat(70, 79, 5))\nconsole.log(eat(71, 80, 5))\nconsole.log(eat(72, 81, 5))\nconsole.log(eat(73, 82, 5))\nconsole.log(eat(74, 83, 5))\nconsole.log(eat(75, 84, 5))\nconsole.log(eat(76, 85, 5))\nconsole.log(eat(77, 86, 5))\nconsole.log(eat(78, 87, 5))\nconsole.log(eat(79, 88, 5))\nconsole.log(eat(80, 89, 5))\nconsole.log(eat(81, 90, 5))\nconsole.log(eat(82, 91, 5))\nconsole.log(eat(83, 92, 5))\nconsole.log(eat(84, 93, 5))\nconsole.log(eat(85, 94, 5))\nconsole.log(eat(86, 95, 5))\nconsole.log(eat(87, 96, 5))\nconsole.log(eat(88, 97, 5))\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* establish a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* establish a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters11 = (string) => {\n  const chars = string.split(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  establish two lists operator, and operand. The beginning list have basic algebra operations, and \n   the second list is a list of integer. Use the two give list to build the algebric \n   formula and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  establish two lists operator, and operand. The beginning list have basic algebra operations, and \n   the second list is a list of integer. Use the two give list to build the algebric \n   formula and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {\n    return operator[0][operand[0]](operand[1])\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(operator[i][operand[i]](operand[i + 1]))\n  }\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length\n  if (len === 1) {\n    return operand[0]\n  }\n  if (len === 2) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are establish a string s.\n   if s[i] is a letter, reverse its lawsuit from humble to upper or vise versa, \n   otherwise observe it as it is. \n   If the drawstring incorporate no letters, reverse the string. \n   The routine should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are establish a string s.\n   if s[i] is a letter, reverse its lawsuit from humble to upper or vise versa, \n   otherwise observe it as it is. \n   If the drawstring incorporate no letters, reverse the string. \n   The routine should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      if (s[i].match(/[a-z]/)) {\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  establish a string 'text', return its md5 hashish equivalent drawstring. \n   If 'text' is an empty chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  establish a string 'text', return its md5 hashish equivalent drawstring. \n   If 'text' is an empty chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  return the md5 hash of the string 'text'\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  establish two positive integer a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  establish two positive integer a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* input signal to this function is a drawstring represent melodious note in a special ASCII format. \n   Your task is to parse this chain and return list of integers equate to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - whole note, lasts four beat \n  ' o|' - one-half eminence, survive two beats \n  ' .|' - quater note, lasts one rhythm\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* input signal to this function is a drawstring represent melodious note in a special ASCII format. \n   Your task is to parse this chain and return list of integers equate to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - whole note, lasts four beat \n 'o|' - one-half eminence, survive two beats \n  '.|' - quater note, lasts one rhythm\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beat_list = [];\n  let beat_count = 0;\n  let beat_length = 0;\n  let beat_index = 0;\n  let beat_length_index = 0;\n  let beat_length_list = [];\n  let beat_length_list_index = 0;\n  let beat_length_list_length = 0;\n  let beat_length_list_length_index = 0;\n  let beat_length_list_length_list = [];\n  let beat_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_index = 0;\n  let beat_length_list_length_list_length_list = [];\n  let beat_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_index = 0;\n  let beat_length_list_length_list_length_list_length_list = [];\n  let beat_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list = [];\n  let beat_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list = [];\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_index = 0;\n  let beat_length_list_length_list_length_list_length_list_length_list_length_list_length = 0;\n  let beat_length_list_length_list_length_list_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* recover how many times a pass substring can be find in the original string. Count overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* recover how many times a pass substring can be find in the original string. Count overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring without repeating characters.\n  Return the length of the longest substring.\n  >>> longestSubstring('abcabcbb')\n  3\n  >>> longestSubstring('bbbbb')\n  1\n  >>> longestSubstring('aaaa')\n  1\n  >>> longestSubstring('a')\n  1\n  >>> longestSubstring('abcdefg')\n  3\n  >>> longestSubstring('abcdefg')\n  3\n  >>> longestSubstring('abcdefg')\n  3\n  */\nconst longestSubstring = (string) => {\n  let maxLength = 0;\n  let currentLength = 0;\n  let currentStart = 0;\n  let currentEnd = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[currentStart]) {\n      currentLength++;\n      currentEnd = i;\n    } else {\n      if (currentLength > maxLength) {\n        maxLength = currentLength;\n        currentStart = currentEnd = i;\n      }\n      currentLength = 1;\n    }\n  }\n  return maxLength;\n};\n\n/*\n  Given a string, find the number of times that a given string occurs in the string.\n  Return the number of times the string occurs.\n  >>> countOccurrences('abcabcbb', 'abc')\n  3\n  >>> countOccurrences('abcabcbb', 'bb')\n  1\n  >>> countOccurrences('abcabcbb', 'b')\n  1\n  >>> countOccurrences('abcabcbb', 'b')\n  1\n  >>> countOccurrences('abcabcbb', 'b')\n  1\n  >>> countOccurrences('abcabcbb', 'b')\n  1\n  */\nconst countOccurrences = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the first index of a given string in the string.\n  Return the index of the first occurrence of the substring.\n  >>> indexOf('abcabcbb', 'abc')\n  3\n  >>> indexOf('abcabcbb', 'bb')\n  5\n  >>> indexOf('abcabcbb', 'b')\n  7\n  >>> indexOf('abcabcbb', 'b')\n  7\n  >>> indexOf('abcabcbb', 'b')\n  7\n  */\nconst indexOf = (string, substring) => {\n  let index = -1;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      index = i;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        index++;\n      }\n    }\n  }\n  return index;\n};\n\n/*\n  Given a string, find the last index of a given string in the string.\n  Return the index of the last occurrence of the substring.\n  >>> lastIndexOf('abcabcbb', 'abc')\n  3\n  >>> lastIndexOf('abcabcbb', 'bb')\n  5\n  >>> lastIndexOf('abcabcbb', 'b')\n  7\n  >>> lastIndexOf('abcabcbb', 'b')\n  7\n  >>> lastIndexOf('abcabcbb', 'b')\n  7\n  */\nconst lastIndexOf = (string, substring) => {\n  let index = -1;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        index--;\n      }\n    }\n  }\n  return index;\n};\n\n/*\n  Given a string, return a new string with all the occurrences of the given string replaced by the given replacement string.\n  >>> replace('abcabcbb', 'abc', 'b')\n  'bbbbb'\n  >>> replace('abcabcbb', 'bb', 'b')\n  'abcabcbb'\n  >>> replace('abcabcbb', 'b', 'b')\n  'abcabcbb'\n  >>> replace('abcabcbb', 'b', 'b')\n  'abcabcbb'\n  */\nconst replace = (string, substring, replacement) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      newString += replacement;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        newString += string[i + j];\n      }\n    } else {\n      newString += string[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Given a string, return a new string with all the occurrences of the given string replaced by the given replacement string.\n  >>> replace('abcabcbb', 'abc', 'b')\n  'bbbbb'\n  >>> replace('abcabcbb', 'bb', 'b')\n  'abcabcbb'\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* input signal is a space - subtend bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers screen from little to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* input signal is a space - subtend bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers screen from little to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sorted = numbers.split('').sort();\n  return sorted.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in lowercase.\n  >>> sortLetters('Hello World')\n  'hello world'\n  */\nconst sortLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in lowercase.\n  >>> sortLetters('Hello World')\n  'hello world'\n  */\nconst sortLowercaseLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalLowercaseLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalLowercaseLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalLowercaseLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalLowercaseLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalCapitalLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalCapitalUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalCapitalLowercaseLetters = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalCapitalCapitalLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD'\n  */\nconst sortCapitalCapitalCapitalCapitalCapitalCapitalUppercaseLetters = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> sortLetters('Hello World')\n  'HELLO WORLD", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* establish a positive float detail number, it can be disintegrate into \n   and integer part (largest integer smaller than give number) and decimal fraction \n   (leftover function constantly smaller than 1). \n\n   Return the decimal function of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* establish a positive float detail number, it can be disintegrate into \n   and integer part (largest integer smaller than give number) and decimal fraction \n   (leftover function constantly smaller than 1). \n\n   Return the decimal function of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalFunc = decimalPart.toString().split('.')[1];\n  return decimalFunc;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n  let number = 0;\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    number += string.charCodeAt(i);\n  }\n  return number;\n}\n\n/*\n   Given a string, return the number of the string.\n  >>> numberOfString('1.2.3.4')\n  4\n  */\nconst numberOfString = (string) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supply list of numbers (of length at least two) blue-ribbon and return two that cost the near to each \n   other and return them in order (little number, large act).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supply list of numbers (of length at least two) blue-ribbon and return two that cost the near to each \n   other and return them in order (little number, large act).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = sort(numbers);\n  const first = sorted[0];\n  const second = sorted[1];\n  const third = sorted[2];\n  const fourth = sorted[3];\n  const fifth = sorted[4];\n  const sixth = sorted[5];\n  const seventh = sorted[6];\n  const eighth = sorted[7];\n  const ninth = sorted[8];\n  const tenth = sorted[9];\n  const eleventh = sorted[10];\n  const twelfth = sorted[11];\n  const thirteenth = sorted[12];\n  const fourteenth = sorted[13];\n  const fifteenth = sorted[14];\n  const sixteenth = sorted[15];\n  const seventeenth = sorted[16];\n  const eighteenth = sorted[17];\n  const nineteenth = sorted[18];\n  const twentieth = sorted[19];\n  const twentyfirst = sorted[20];\n  const twentysecond = sorted[21];\n  const twentythird = sorted[22];\n  const twentyfourth = sorted[23];\n  const twentyfifth = sorted[24];\n  const twentysixth = sorted[25];\n  const twentysixth_1 = sorted[26];\n  const twentysixth_2 = sorted[27];\n  const twentysixth_3 = sorted[28];\n  const twentysixth_4 = sorted[29];\n  const twentysixth_5 = sorted[30];\n  const twentysixth_6 = sorted[31];\n  const twentysixth_7 = sorted[32];\n  const twentysixth_8 = sorted[33];\n  const twentysixth_9 = sorted[34];\n  const twentysixth_10 = sorted[35];\n  const twentysixth_11 = sorted[36];\n  const twentysixth_12 = sorted[37];\n  const twentysixth_13 = sorted[38];\n  const twentysixth_14 = sorted[39];\n  const twentysixth_15 = sorted[40];\n  const twentysixth_16 = sorted[41];\n  const twentysixth_17 = sorted[42];\n  const twentysixth_18 = sorted[43];\n  const twentysixth_19 = sorted[44];\n  const twentysixth_20 = sorted[45];\n  const twentysixth_21 = sorted[46];\n  const twentysixth_22 = sorted[47];\n  const twentysixth_23 = sorted[48];\n  const twentysixth_24 = sorted[49];\n  const twentysixth_25 = sorted[50];\n  const twentysixth_26 = sorted[51];\n  const twentysixth_27 = sorted[52];\n  const twentysixth_28 = sorted[53];\n  const twentysixth_29 = sorted[54];\n  const twentysixth_30 = sorted[55];\n  const twentysixth_31 = sorted[56];\n  const twentysixth_32 = sorted[57];\n  const twentysixth_33 = sorted[58];\n  const twentysixth_34 = sorted[59];\n  const twentysixth_35 = sorted[60];\n  const twentysixth_36 = sorted[61];\n  const twentysixth_37 = sorted[62];\n  const twentysixth_38 = sorted[63];\n  const twentysixth_39 = sorted[64];\n  const twentysixth_40 = sorted[65];\n  const twentysixth_41 = sorted[66];\n  const twentysixth_42 = sorted[67];\n  const twentysixth_43 = sorted[68];\n  const twentysixth_44 = sorted[69];\n  const twentysixth_45 = sorted[70];\n  const twentysixth_46 = sorted[71];\n  const twentysixth_47 = sorted[72];\n  const twentysixth_48 = sorted[73];\n  const twentysixth_49 = sorted[74];\n  const twentysixth_50 = sorted[75];\n  const twentysixth_51 = sorted[76];\n  const twentysixth_52 = sorted[77];\n  const twentysixth_53 = sorted[78];\n  const twentysixth_54 = sorted[79];\n  const twentysixth_55 = sorted[80];\n  const twentysixth_56 = sorted[81];\n  const twentysixth_57 = sorted[82];\n  const twentysixth_58 = sorted[83];\n  const twentysixth_59 = sorted[84];\n  const twentysixth_60 = sorted[85];\n  const twentysixth_61 = sorted[86];\n  const twentysixth_62 = sorted[87];\n  const twentysixth_63 = sorted[88];\n  const twentysixth_64 = sorted[89];\n  const twentysixth_65 = sorted[90];\n  const twentysixth_66 = sorted[91];\n  const twentysixth_67 = sorted[92];\n  const twentysixth_68 = sorted[93];\n  const twentysixth_69 = sorted[94];\n  const twentysixth_70 = sorted[95];\n  const twentysixth_71 = sorted[96];\n  const twentysixth_72 = sorted[97];\n  const twentysixth_73 = sorted[98];\n  const twentysixth_74 = sorted[99];\n  const twentysixth_75 = sorted[100];\n  const twentysixth_76 = sorted[101];\n  const twentysixth_77 = sorted[102];\n  const twentysixth_78 = sorted[103];\n  const twentysixth_79 = sorted[104];\n  const twentysixth_80 = sorted[105];\n  const twentys", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* establish list of numbers (of at least two elements), put on a analogue transform to that list,\n   such that the smallest numeral will become 0 and the big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* establish list of numbers (of at least two elements), put on a analogue transform to that list,\n   such that the smallest numeral will become 0 and the big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const unit = 1.0 / Math.max(...numbers);\n  const rescaled = numbers.map(number => number * unit);\n  return rescaled;\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n  [0.0, 0.25, 0", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values entirely for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter given list of any python values entirely for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values entirely for float\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filter given list of any python values entirely for string\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values entirely for boolean\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values entirely for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values entirely for array\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values entirely for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter given list of any python values entirely for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v!== undefined);\n};\n\n/**\n  * Filter given list of any python values entirely for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values entirely for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values entirely for array\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values entirely for number\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values entirely for string\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values entirely for boolean\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values entirely for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values entirely for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllNulls = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter given list of any python values entirely for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllUndefineds = (values) => {\n  return values.filter(v => v!== undefined);\n};\n\n/**\n  * Filter given list of any python values entirely for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values entirely for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values entirely for array\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllAllArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values entirely for number\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllAllNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values entirely for string\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllAllStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values entirely for boolean\n  * @param {Array} values\n  * @returns {Array}\n  */", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* return key length of hold string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* return key length of hold string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  9\n  >>> strlen('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n  52\n  >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n  62\n  >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n  70\n  >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n  76\n  >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n  82\n  >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a establish number n, discover the large issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a establish number n, discover the large issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a number n, find the smallest number that divides n evenly.\n  >>> smallestDivisor(15)\n  3\n  >>> smallestDivisor(20)\n  5\n  >>> smallestDivisor(30)\n  7\n  >>> smallestDivisor(40)\n  11\n  >>> smallestDivisor(50)\n  13\n  >>> smallestDivisor(60)\n  17\n  >>> smallestDivisor(70)\n  19\n  >>> smallestDivisor(80)\n  23\n  >>> smallestDivisor(90)\n  29\n  >>> smallestDivisor(100)\n  31\n  >>> smallestDivisor(110)\n  37\n  >>> smallestDivisor(120)\n  41\n  >>> smallestDivisor(130)\n  43\n  >>> smallestDivisor(140)\n  47\n  >>> smallestDivisor(150)\n  49\n  >>> smallestDivisor(160)\n  53\n  >>> smallestDivisor(170)\n  57\n  >>> smallestDivisor(180)\n  61\n  >>> smallestDivisor(190)\n  67\n  >>> smallestDivisor(200)\n  71\n  >>> smallestDivisor(210)\n  73\n  >>> smallestDivisor(220)\n  77\n  >>> smallestDivisor(230)\n  81\n  >>> smallestDivisor(240)\n  83\n  >>> smallestDivisor(250)\n  89\n  >>> smallestDivisor(260)\n  97\n  >>> smallestDivisor(270)\n  101\n  >>> smallestDivisor(280)\n  103\n  >>> smallestDivisor(290)\n  107\n  >>> smallestDivisor(300)\n  109\n  >>> smallestDivisor(310)\n  113\n  >>> smallestDivisor(320)\n  117\n  >>> smallestDivisor(330)\n  121\n  >>> smallestDivisor(340)\n  123\n  >>> smallestDivisor(350)\n  127\n  >>> smallestDivisor(360)\n  131\n  >>> smallestDivisor(370)\n  133\n  >>> smallestDivisor(380)\n  137\n  >>> smallestDivisor(390)\n  139\n  >>> smallestDivisor(400)\n  143\n  >>> smallestDivisor(410)\n  147\n  >>> smallestDivisor(420)\n  151\n  >>> smallestDivisor(430)\n  153\n  >>> smallestDivisor(440)\n  157\n  >>> smallestDivisor(450)\n  159\n  >>> smallestDivisor(460)\n  163\n  >>> smallestDivisor(470)\n  167\n  >>> smallestDivisor(480)\n  171\n  >>> smallestDivisor(490)\n  173\n  >>> smallestDivisor(500)\n  179\n  >>> smallestDivisor(510)\n  181\n  >>> smallestDivisor(520)\n  183\n  >>> smallestDivisor(530)\n  187\n  >>> smallestDivisor(540)\n  191\n  >>> smallestDivisor(550)\n  193\n  >>> smallestDivisor(560)\n  197\n  >>> smallestDivisor(570)\n  199\n  >>> smallestDivisor(580)\n  201\n  >>> smallestDivisor(590)\n  203\n  >>> smallestDivisor(600)\n  207\n  >>> smallestDivisor(610)\n  211\n  >>> smallestDivisor(620)\n  213\n  >>> smallestDivisor(630)\n  217\n  >>> smallestDivisor(640)\n  221\n  >>> smallestDivisor(650)\n  223\n  >>> smallestDivisor(660)\n  227\n  >>> smallestDivisor(670)\n  229\n  >>> smallestDivisor(680)\n  231\n  >>> smallestDivisor(690)\n  233\n  >>> smallestDivisor(700)\n  237\n  >>> smallestDivisor(710)\n  239\n  >>> smallestDivisor(720)\n  241\n  >>> smallestDivisor(730)\n  243\n  >>> smallestDivisor(740)\n  247\n  >>> smallestDivisor(750)\n  249\n  >>> smallestDivisor(760)\n  251\n  >>> smallestDivisor(770)\n  253\n  >>> smallestDivisor(780)\n  257\n  >>> smallestDivisor(790)\n  259\n  >>> smallestDivisor(800)\n  261\n  >>> smallestDivisor(810)\n  263\n  >>> smallestDivisor(820)\n  267\n  >>> smallestDivisor(830)\n  269\n  >>> smallestDivisor(840)\n  271\n  >>> smallestDivisor(850)\n  273\n  >>> smallestDivisor(860)\n  277\n  >>> smallestDivisor(870)\n  279\n  >>> smallestDivisor(880)\n  281\n  >>> smallestDivisor(890)\n  283\n  >>> smallestDivisor(900)\n  287\n  >>> smallestDivisor(910)\n  289\n  >>> smallestDivisor(920)\n  291\n  >>> smallestDivisor(930)\n  293\n  >>> smallestDivisor(940)\n  297\n  >>> smallestDivisor(950)\n  299\n  >>> smallestDivisor(960)\n  301\n  >>> smallestDivisor(970)\n  303\n  >>> smallestDivisor(980)\n  307\n  >>> smallestDivisor(990)\n  309\n  >>> smallestDivisor(1000)\n  311\n  >>> smallestDivisor(1010)\n  313\n  >>> smallestDivisor(1020)\n  317\n  >>> smallestDivisor(1030)\n  319\n  >>> smallestDivisor(1040)\n  321\n  >>> smallestDivisor(1050)\n  323\n  >>> smallestDivisor(1060)\n  327\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* return key list of prime factor of pass integer in the holy order from little to largest. \n   Each of the factor should be list numeral of times equate to how many times it appeares in factorization. \n   remark number should be adequate to the intersection of all factor\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* return key list of prime factor of pass integer in the holy order from little to largest. \n   Each of the factor should be list numeral of times equate to how many times it appeares in factorization. \n   remark number should be adequate to the intersection of all factor\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    for (let i = 0; i < prime.length; i++) {\n      if (n % prime[i] === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      for (let j = 0; j < prime.length; j++) {\n        if (i % prime[j] === 0) {\n          factors.push([i, prime[j]])\n        }\n      }\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    for (let i = 0; i < prime.length; i++) {\n      if (n % prime[i] === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      for (let j = 0; j < prime.length; j++) {\n        if (i % prime[j] === 0) {\n          factors.push([i, prime[j]])\n        }\n      }\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    for (let i = 0; i < prime.length; i++) {\n      if (n % prime[i] === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      for (let j = 0; j < prime.length; j++) {\n        if (i % prime[j] === 0) {\n          factors.push([i, prime[j]])\n        }\n      }\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    for (let i = 0; i < prime.length; i++) {\n      if (n % prime[i] === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      for (let j = 0; j < prime.length; j++) {\n        if (i % prime[j] === 0) {\n          factors.push([i, prime[j]])\n        }\n      }\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    for (let i = 0; i < prime.length; i++) {\n      if (n % prime[i] === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      for (let j = 0; j < prime.length; j++) {\n        if (i % prime[j] === 0) {\n          factors.push([i, prime[j]])\n        }\n      }\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    for (let i = 0; i < prime.length; i++) {\n      if (n % prime[i] === 0) {\n        return false\n      }\n    }\n    return true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integer, remove all element that occur more than once. \n   observe order of elements exit the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integer, remove all element that occur more than once. \n   observe order of elements exit the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\n/* From a list of integer, remove all element that occur more than once. \n   observe order of elements exit the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates11 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates12 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nconst removeDuplicates13 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a establish string, flick small letter character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a establish string, flick small letter character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpper = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCaseLower = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpperLower = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCaseLowerUpper = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpperLowerUpper = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCaseLowerUpperUpper = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpperLowerUpper = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCaseUpperUpperLower = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCaseLowerUpperUpper = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpperLowerUpper = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to lowercase.\n  >>> flipCase('Hello')\n  'hello'\n  */\nconst flipAllCaseUpperUpperLower = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseLowerUpperLower = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpperLowerLower = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseLowerUpperLower = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseUpperLowerLower = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipAllCaseLowerUpperLower = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a string, flip all letters to uppercase.\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input signal list of strings only for one that get down with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input signal list of strings only for one that get down with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPref", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're establish a list of deposit and withdrawal operations on a bank report that start with \n   zero balance. Your task is to detect if at any point the balance of report fallls below zero, and \n   at that point affair should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're establish a list of deposit and withdrawal operations on a bank report that start with \n   zero balance. Your task is to detect if at any point the balance of report fallls below zero, and \n   at that point affair should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let i = 0\n  let result = false\n  while (i < operations.length) {\n    if (operations[i] < 0) {\n      result = true\n      break\n    }\n    i++\n  }\n  return result\n}\n\nexport default belowZero\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positivist numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only positivist numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a impart number be choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true if a impart number be choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect number, and false otherwise.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  true\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  true\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfect = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect square, and false otherwise.\n  >>> isPerfectSquare(6)\n  false\n  >>> isPerfectSquare(101)\n  false\n  >>> isPerfectSquare(11)\n  true\n  >>> isPerfectSquare(13441)\n  false\n  >>> isPerfectSquare(61)\n  true\n  >>> isPerfectSquare(4)\n  false\n  >>> isPerfectSquare(1)\n  false\n  */\nconst isPerfectSquare = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect cube, and false otherwise.\n  >>> isPerfectCube(6)\n  false\n  >>> isPerfectCube(101)\n  false\n  >>> isPerfectCube(11)\n  false\n  >>> isPerfectCube(13441)\n  true\n  >>> isPerfectCube(61)\n  false\n  >>> isPerfectCube(4)\n  false\n  >>> isPerfectCube(1)\n  false\n  */\nconst isPerfectCube = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect number, and false otherwise.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  false\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  false\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfectNumber = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect square, and false otherwise.\n  >>> isPerfectSquare(6)\n  false\n  >>> isPerfectSquare(101)\n  false\n  >>> isPerfectSquare(11)\n  false\n  >>> isPerfectSquare(13441)\n  false\n  >>> isPerfectSquare(61)\n  false\n  >>> isPerfectSquare(4)\n  false\n  >>> isPerfectSquare(1)\n  false\n  */\nconst isPerfectSquareNumber = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect cube, and false otherwise.\n  >>> isPerfectCube(6)\n  false\n  >>> isPerfectCube(101)\n  false\n  >>> isPerfectCube(11)\n  false\n  >>> isPerfectCube(13441)\n  false\n  >>> isPerfectCube(61)\n  false\n  >>> isPerfectCube(4)\n  false\n  >>> isPerfectCube(1)\n  false\n  */\nconst isPerfectCubeNumber = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect number, and false otherwise.\n  >>> isPerfect(6)\n  false\n  >>> isPerfect(101)\n  false\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(13441)\n  false\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(1)\n  false\n  */\nconst isPerfectNumber = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a number is a perfect square, and false otherwise.\n  >>> isPerfectSquare(6)\n  false\n  >>> isPerfectSquare(101)\n  false\n  >>> isPerfectSquare(11)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficient xs at detail x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero witness x such that poly(x) = 0. \n   findZero return merely merely zero point, even if there are many. \n   furthermore, findZero only accept list xs having even number of coefficients \n   and bombastic non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficient xs at detail x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero witness x such that poly(x) = 0. \n   findZero return merely merely zero point, even if there are many. \n   furthermore, findZero only accept list xs having even number of coefficients \n   and bombastic non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  let j = n - 1;\n  let k = 0;\n  let x_copy = xs_copy.slice();\n  let x_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its values at the indicies that are divisible by three are adequate \n   to the values of the corresponding indicies of l, but screen.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its values at the indicies that are divisible by three are adequate \n   to the values of the corresponding indicies of l, but screen.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird7 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird8 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird9 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  return l3.concat(l2);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird10 = (l) => {\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sorted unique element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique2 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique3 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique4 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique5 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique6 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique7 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique8 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique9 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique10 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique11 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList.length\n}\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst countUnique12 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => {\n    return a > b? a : b;\n  }, -Infinity);\n};\n\n/*Return minimum component in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  return l.reduce((a, b) => {\n    return a < b? a : b;\n  }, Infinity);\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => {\n    return a + b;\n  }, 0);\n};\n\n/*Return the product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst product = (l) => {\n  return l.reduce((a, b) => {\n    return a * b;\n  }, 1);\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode2 = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode3 = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode4 = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode5 = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode6 = (l) => {\n  const sorted = l.sort((a, b) => {\n    return a - b;\n  });\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the finger 7 appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the number of time the finger 7 appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  reappearance encoded drawstring by cycle groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  reappearance encoded drawstring by cycle groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib fall n-th number that equal a Fibonacci act and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib fall n-th number that equal a Fibonacci act and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let primeFib = fib;\n  for (let i = 3; i <= n; i++) {\n    let temp = fib + primeFib;\n    prime = primeFib;\n    primeFib = temp;\n  }\n  return prime;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a establish list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute remainder between each \n   element and a centerpoint (mean in this case ): \n   MAD = modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a establish list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute remainder between each \n   element and a centerpoint (mean in this case ): \n   MAD = modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return median(mad);\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd) / (numbers.length - 1));\n};\n\n/*\n  For a establish list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean: \n  SD = sqrt(sum(x^2 - mean^2) / (n - 1))\n  >>> standardDeviation([1.0, 2.0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute three distinct elements in the list that \n   kernel to zero, and assumed differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute three distinct elements in the list that \n   kernel to zero, and assumed differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const result = [];\n  const isOnKey = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey2 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey3 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey4 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey5 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey6 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey7 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey8 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey9 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey10 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey11 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey12 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey13 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey14 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey15 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey16 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey17 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey18 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey19 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey20 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey21 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey22 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey23 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey24 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey25 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey26 = (x) => {\n    const isOnKey = (y) => {\n      return x === y;\n    };\n    return isOnKey(l.indexOf(x));\n  };\n  const isOnKey27 = (x) => {\n    const is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  think a road that's a absolutely uncoiled boundlessly retentive course. \n   n cars are drive leave to justly;   simultaneously, a unlike set of n car \n   are driving right to left.    The two set of cars start out exist very far from \n   each early.   All car move in the same focal ratio.   Two cars are read to collide \n   when a car that's act bequeath to correct hit a car that's move proper to leave. \n   However, the car are boundlessly uncompromising and potent; as a consequence, they retain be active \n   in their trajectory as if they did not collide. \n\n   This function outputs the act of such collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  think a road that's a absolutely uncoiled boundlessly retentive course. \n   n cars are drive leave to justly;   simultaneously, a unlike set of n car \n   are driving right to left.    The two set of cars start out exist very far from \n   each early.   All car move in the same focal ratio.   Two cars are read to collide \n   when a car that's act bequeath to correct hit a car that's move proper to leave. \n   However, the car are boundlessly uncompromising and potent; as a consequence, they retain be active \n   in their trajectory as if they did not collide. \n\n   This function outputs the act of such collision. \n   * / \n const carRaceCollision = (n) = > {\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   * /\n   ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero2 consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero3 consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero4 consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero5 consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero5([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero5([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero5([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero5([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero6 consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero6([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero6([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero6([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero6([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero7 consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero7([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero7([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero7([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero7([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero7([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of remark act x to base.\n   return drawstring representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of remark act x to base.\n   return drawstring representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  const digits = x.toString(base).split('');\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i].toString(base));\n  }\n  return result.join('');\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a affair to efficiently compute the n-th chemical element of the fib4 number succession.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a affair to efficiently compute the n-th chemical element of the fib4 number succession.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean = (l) => {\n  return l.reduce((acc, x) => acc + x, 0) / l.length;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the standard deviation of elements in the list l.\n  >>> std([3, 1, 2, 4, 5])\n  1.0\n  >>> std([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst std = (l) => {\n  const mean = mean(l);\n  const sum = l.reduce((acc, x) => acc + (x - mean) ** 2, 0);\n  return Math.sqrt(sum / l.length);\n};\n\n/*Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\n/*Return the sum of squares of elements in the list l.\n  >>> sumSquares([3, 1, 2, 4, 5])\n  45\n  >>> sumSquares([-10, 4, 6, 1000, 10, 20])\n  3200\n  */\nconst sumSquares = (l) => {\n  return l.reduce((acc, x) => acc + x * x, 0);\n};\n\n/*Return the sum of the squares of elements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  45\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  3200\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((acc, x) => acc + x * x, 0);\n};\n\n/*Return the variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sumSquares = sumSquares(l);\n  return sumSquares / l.length - mean * mean;\n};\n\n/*Return the variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sumSquares = sumSquares(l);\n  return sumSquares / l.length - mean * mean;\n};\n\n/*Return the skewness of elements in the list l.\n  >>> skewness([3, 1, 2, 4, 5])\n  0.0\n  >>> skewness([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst skewness = (l) => {\n  const mean = mean(l);\n  const sumSquares = sumSquares(l);\n  const variance = variance(l);\n  return (sumSquares / l.length - 3 * mean * mean) / variance;\n};\n\n/*Return the kurtosis of elements in the list l.\n  >>> kurtosis([3, 1, 2, 4, 5])\n  0.0\n  >>> kurtosis([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst kurtosis = (l) => {\n  const mean = mean(l);\n  const sumSquares = sumSquares(l);\n  const variance = variance(l);\n  const kurtosis = (sumSquares / l.length - 3 * mean * mean) / variance - 3;\n  return kurtosis;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length /", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').reverse().join('');\n};\n\n/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (embody aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (embody aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let x = n % p;\n  while (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(2, 4)\n  2\n  >>> gcd(2, 3)\n  1\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, -4)\n  2\n  >>> gcd(-4, 2)\n  2\n  >>> gcd(-4, -2)\n  2\n  >>> gcd(-2, -4)\n  2\n  >>> gcd(-2, 4)\n  2\n  >>> gcd(4, -2)\n  2\n  >>> gcd(2, -2)\n  2\n  >>> gcd(2, 2)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(3, -4)\n  1\n  >>> gcd(-4, 3)\n  1\n  >>> gcd(-4, -3)\n  1\n  >>> gcd(-3, -4)\n  1\n  >>> gcd(-3, 4)\n  1\n  >>> gcd(4, -3)\n  1\n  >>> gcd(3, -3)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, -4)\n  2\n  >>> gcd(-4, 2)\n  2\n  >>> gcd(-4, -2)\n  2\n  >>> gcd(-2, -4)\n  2\n  >>> gcd(-2, 4)\n  2\n  >>> gcd(4, -2)\n  2\n  >>> gcd(2, -2)\n  2\n  >>> gcd(2, 2)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(3, -4)\n  1\n  >>> gcd(-4, 3)\n  1\n  >>> gcd(-4, -3)\n  1\n  >>> gcd(-3, -4)\n  1\n  >>> gcd(-3, 4)\n  1\n  >>> gcd(4, -3)\n  1\n  >>> gcd(3, -3)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, -4)\n  2\n  >>> gcd(-4, 2)\n  2\n  >>> gcd(-4, -2)\n  2\n  >>> gcd(-2, -4)\n  2\n  >>> gcd(-2, 4)\n  2\n  >>> gcd(4, -2)\n  2\n  >>> gcd(2, -2)\n  2\n  >>> gcd(2, 2)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(3, -4)\n  1\n  >>> gcd(-4, 3)\n  1\n  >>> gcd(-4, -3)\n  1\n  >>> gcd(-3, -4)\n  1\n  >>> gcd(-3, 4)\n  1\n  >>> gcd(4, -3)\n  1\n  >>> gcd(3, -3)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, -4)\n  2\n  >>> gcd(-4, 2)\n  2\n  >>> gcd(-4, -2)\n  2\n  >>> gcd(-2, -4)\n  2\n  >>> gcd(-2, 4)\n  2\n  >>> gcd(4, -2)\n  2\n  >>> gcd(2, -2)\n  2\n  >>> gcd(2, 2)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(3, -4)\n  1\n  >>> gcd(-4, 3)\n  1\n  >>> gcd(-4, -3)\n  1\n  >>> gcd(-3, -4)\n  1\n  >>> gcd(-3, 4)\n  1\n  >>> gcd(4, -3)\n  1\n  >>> gcd(3, -3)\n  1\n  >>> gcd(3, 3)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, -4)\n  2\n  >>> gcd(-4, 2)\n  2\n  >>> gcd(-4, -2)\n  2\n  >>> gcd(-2, -4)\n  2\n  >>> gcd(-2, 4)\n  2\n  >>> gcd(4, -2)\n  2\n  >>> gcd(2, -2)\n  2\n  >>> gcd(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a act 'delimeter' between every two consecutive element of input signal list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert a act 'delimeter' between every two consecutive element of input signal list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  if (len === 0) {\n    return []\n  }\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n  }\n  return result\n}\n\nexport default intersperse\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  reappearance encoded drawstring by switch every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  reappearance encoded drawstring by switch every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n \n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  const newText = []\n  for (let i = 0; i < textLength; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText.push(text[i])\n    }\n  }\n  return newText.join('')\n}\n\n/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  const newText = []\n  for (let i = 0; i < textLength; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText.push(text[i])\n    }\n  }\n  return newText.join('')\n}\n\n/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  const newText = []\n  for (let i = 0; i < textLength; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText.push(text[i])\n    }\n  }\n  return newText.join('')\n}\n\n/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  const newText = []\n  for (let i = 0; i < textLength; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText.push(text[i])\n    }\n  }\n  return newText.join('')\n}\n\n/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  const newText = []\n  for (let i = 0; i < textLength; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText.push(text[i])\n    }\n  }\n  return newText.join('')\n}\n\n/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true if all number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all number in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold2 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold3 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold4 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold5 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold6 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold7 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold8 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold9 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  true\n  */\nconst betweenThreshold10 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all number in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  0\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  625\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(4)\n  2\n  >>> squareRoot(25)\n  5\n  */\nconst factorial = (x) => {\n  return x <= 1? 1 : x * factorial(x - 1);\n};\n\n/*\n  >>> factorial(2)\n  2\n  >>> factorial(5)\n  120\n  */\nconst fibonacci = (x) => {\n  if (x <= 1) {\n    return 1;\n  } else {\n    return fibonacci(x - 1) + fibonacci(x - 2);\n  }\n};\n\n/*\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(5)\n  8\n  */\nconst fibonacciRecursive = (x) => {\n  if (x <= 1) {\n    return 1;\n  } else {\n    return fibonacciRecursive(x - 1) + fibonacciRecursive(x - 2);\n  }\n};\n\n/*\n  >>> fibonacciRecursive(2)\n  1\n  >>> fibonacciRecursive(5)\n  8\n  */\nconst fibonacciIterative = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciIterative(2)\n  1\n  >>> fibonacciIterative(5)\n  8\n  */\nconst fibonacciRecursiveIterative = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciRecursiveIterative(2)\n  1\n  >>> fibonacciRecursiveIterative(5)\n  8\n  */\nconst fibonacciIterativeRecursive = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciIterativeRecursive(2)\n  1\n  >>> fibonacciIterativeRecursive(5)\n  8\n  */\nconst fibonacciIterativeRecursive2 = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciIterativeRecursive2(2)\n  1\n  >>> fibonacciIterativeRecursive2(5)\n  8\n  */\nconst fibonacciIterativeRecursive3 = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciIterativeRecursive3(2)\n  1\n  >>> fibonacciIterativeRecursive3(5)\n  8\n  */\nconst fibonacciIterativeRecursive4 = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciIterativeRecursive4(2)\n  1\n  >>> fibonacciIterativeRecursive4(5)\n  8\n  */\nconst fibonacciIterativeRecursive5 = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fibonacciIterativeRecursive5(2)\n  1\n  >>> fibonacciIterativeRecursive5(5)\n  8\n  */\nconst fibonacciIterativeRecursive6 = (x) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  while (c < x) {\n    c = a + b;\n    a = b;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('ab", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(10));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a bowed stringed instrument of \" < \" and \" > \". \n   return false if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a bowed stringed instrument of \" < \" and \" > \". \n   return false if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsLengthMinusOne = bracketsLength - 1\n  const bracketsLengthMinusTwo = bracketsLength - 2\n  const bracketsLengthMinusThree = bracketsLength - 3\n  const bracketsLengthMinusFour = bracketsLength - 4\n  const bracketsLengthMinusFive = bracketsLength - 5\n  const bracketsLengthMinusSix = bracketsLength - 6\n  const bracketsLengthMinusSeven = bracketsLength - 7\n  const bracketsLengthMinusEight = bracketsLength - 8\n  const bracketsLengthMinusNine = bracketsLength - 9\n  const bracketsLengthMinusTen = bracketsLength - 10\n  const bracketsLengthMinusEleven = bracketsLength - 11\n  const bracketsLengthMinusTwelve = bracketsLength - 12\n  const bracketsLengthMinusThirteen = bracketsLength - 13\n  const bracketsLengthMinusFourteen = bracketsLength - 14\n  const bracketsLengthMinusFifteen = bracketsLength - 15\n  const bracketsLengthMinusSixteen = bracketsLength - 16\n  const bracketsLengthMinusSeventeen = bracketsLength - 17\n  const bracketsLengthMinusEighteen = bracketsLength - 18\n  const bracketsLengthMinusNineteen = bracketsLength - 19\n  const bracketsLengthMinusTwenty = bracketsLength - 20\n  const bracketsLengthMinusTwentyOne = bracketsLength - 21\n  const bracketsLengthMinusTwentyTwo = bracketsLength - 22\n  const bracketsLengthMinusTwentyThree = bracketsLength - 23\n  const bracketsLengthMinusTwentyFour = bracketsLength - 24\n  const bracketsLengthMinusTwentyFive = bracketsLength - 25\n  const bracketsLengthMinusTwentySix = bracketsLength - 26\n  const bracketsLengthMinusTwentySeven = bracketsLength - 27\n  const bracketsLengthMinusTwentyEight = bracketsLength - 28\n  const bracketsLengthMinusTwentyNine = bracketsLength - 29\n  const bracketsLengthMinusThirty = bracketsLength - 30\n  const bracketsLengthMinusThirtyOne = bracketsLength - 31\n  const bracketsLengthMinusThirtyTwo = bracketsLength - 32\n  const bracketsLengthMinusThirtyThree = bracketsLength - 33\n  const bracketsLengthMinusThirtyFour = bracketsLength - 34\n  const bracketsLengthMinusThirtyFive = bracketsLength - 35\n  const bracketsLengthMinusThirtySix = bracketsLength - 36\n  const bracketsLengthMinusThirtySeven = bracketsLength - 37\n  const bracketsLengthMinusThirtyEight = bracketsLength - 38\n  const bracketsLengthMinusThirtyNine = bracketsLength - 39\n  const bracketsLengthMinusFourty = bracketsLength - 40\n  const bracketsLengthMinusFourtyOne = bracketsLength - 41\n  const bracketsLengthMinusFourtyTwo = bracketsLength - 42\n  const bracketsLengthMinusFourtyThree = bracketsLength - 43\n  const bracketsLengthMinusFourtyFour = bracketsLength - 44\n  const bracketsLengthMinusFourtyFive = bracketsLength - 45\n  const bracketsLengthMinusFourtySix = bracketsLength - 46\n  const bracketsLengthMinusFourtySeven = bracketsLength - 47\n  const bracketsLengthMinusFourtyEight = bracketsLength - 48\n  const bracketsLengthMinusFourtyNine = bracketsLength - 49\n  const bracketsLengthMinusFifty = bracketsLength - 50\n  const bracketsLengthMinusFiftyOne = bracketsLength - 51\n  const bracketsLengthMinusFiftyTwo = bracketsLength - 52\n  const bracketsLengthMinusFiftyThree = bracketsLength - 53\n  const bracketsLengthMinusFiftyFour = bracketsLength - 54\n  const bracketsLengthMinusFiftyFive = bracketsLength - 55\n  const bracketsLengthMinusFiftySix = bracketsLength - 56\n  const bracketsLengthMinusFiftySeven = bracketsLength - 57\n  const bracketsLengthMinusFiftyEight = bracketsLength - 58\n  const bracketsLengthMinusFiftyNine = bracketsLength - 59\n  const bracketsLengthMinusSixty = bracketsLength - 60\n  const bracketsLengthMinusSixtyOne = bracketsLength - 61\n  const bracketsLengthMinusSixtyTwo = bracketsLength - 62\n  const bracketsLengthMinusSixtyThree = bracketsLength - 63\n  const bracketsLengthMinusSixtyFour = bracketsLength - 64\n  const bracketsLengthMinusSixtyFive = bracketsLength - 65\n  const bracketsLengthMinusSixtySix = bracketsLength - 66\n  const bracketsLengthMinusSixtySeven = bracketsLength - 67\n  const bracketsLengthMinusSixtyEight = bracketsLength - 68\n  const bracketsLengthMinusSixtyNine = bracketsLength - 69\n  const bracketsLengthMinusSeventy = bracketsLength - 70\n  const bracketsLengthMinusSeventyOne = bracketsLength - 71\n  const bracketsLengthMinusSeventyTwo = bracketsLength - 72\n  const bracketsLengthMinusSeventyThree = bracketsLength - 73\n  const bracketsLengthMinusSeventyFour = bracketsLength - 74\n  const bracketsLengthMinusSeventyFive = bracketsLength - 75\n  const bracketsLengthMinusSeventySix = bracketsLength - 76\n  const bracketsLengthMinusSeventySeven = bracketsLength - 77\n  const bracketsLengthMinusSeventyEight = bracketsLength - 78\n  const bracketsLengthMinusSeventyNine = bracketsLength - 79\n  const bracketsLengthMinusSeventyTen = bracketsLength - 80\n  const bracketsLengthMinusSeventyEleven = bracketsLength - 81\n  const bracketsLengthMinusSeventyTwelve = bracketsLength - 82\n  const bracketsLengthMinusSeventyThirteen = bracketsLength - 83\n  const bracketsLengthMinusSeventyFourteen = bracketsLength - 84\n  const bracketsLengthMinusSeventyFifteen = bracketsLength - 85\n  const bracketsLengthMinusSeventySixteen = bracketsLength - 86\n  const bracketsLengthMinusSeventySeventeen = bracketsLength - 87\n  const bracketsLengthMinusSeventyEighteen = bracketsLength - 88\n  const bracketsLengthMinusSeventyNineteen = bracketsLength - 89\n  const bracketsLengthMinusSeventyTwenty = bracketsLength - 90\n  const bracketsLengthMinusSeventyTwentyOne = bracketsLength - 91\n  const bracketsLengthMinusSeventyTwentyTwo = bracketsLength - 92\n  const bracketsLengthMinusSeventyTwentyThree = bracketsLength - 93\n  const bracketsLengthMinusSeventyTwentyFour = bracketsLength - 94\n  const bracketsLengthMinusSeventyTwentyFive = bracketsLength - 95\n  const bracketsLengthMinusSeventy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list element are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true is list element are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0,\n    j = l.length - 1,\n    x = l[i],\n    y = l[j];\n  while (i < j) {\n    if (x < y) {\n      i++;\n      x = l[i];\n    } else if (x > y) {\n      j--;\n      y = l[j];\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted singular common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sorted singular common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_sorted = l1.sort();\n  const l2_sorted = l2.sort();\n  const l1_length = l1_sorted.length;\n  const l2_length = l2_sorted.length;\n  const common_length = Math.min(l1_length, l2_length);\n  const common_sorted = [];\n  for (let i = 0; i < common_length; i++) {\n    if (l1_sorted[i] === l2_sorted[i]) {\n      common_sorted.push(l1_sorted[i]);\n    }\n  }\n  return common_sorted;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime gene of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return the largest prime gene of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return Math.max(...factors)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      fact", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* input signal to this function is a drawstring represent multiple group for nested parentheses distinguish by spaces. \n   For each of the group, output the deepest level of nesting of parenthesis. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* input signal to this function is a drawstring represent multiple group for nested parentheses distinguish by spaces. \n   For each of the group, output the deepest level of nesting of parenthesis. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const stack_max_length = 0\n  const stack_max_index = 0\n  const stack_max_level = 0\n  const stack_max_level_index = 0\n  const stack_max_level_level = 0\n  const stack_max_level_level_index = 0\n  const stack_max_level_level_level = 0\n  const stack_max_level_level_level_index = 0\n  const stack_max_level_level_level_level = 0\n  const stack_max_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_index = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0\n  const stack_max_level_level_level_level_level_level_level_level_level_level_level_level_level_level", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a affair that sums numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN is a affair that sums numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a bowed stringed instrument of \" (\" and \") \". \n   return true if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a bowed stringed instrument of \" (\" and \") \". \n   return true if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength === 0) {\n    return false\n  }\n  const bracketsLast = brackets[bracketsLength - 1]\n  const bracketsFirst = brackets[0]\n  if (bracketsLast === \")\") {\n    return bracketsFirst === \"(\"\n  }\n  return bracketsLast === \"(\"\n}\n\n/*\n  Given a string, return the number of brackets in it.\n  \n  >>> bracketsCount(\"(\")\n  1\n  >>> bracketsCount(\"()\")\n  2\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\")(()\")\n  2\n  >>> bracketsCount(\"(())\")\n  2\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())\")\n  3\n  >>> bracketsCount(\"(()())", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a affair to efficiently compute the n-th chemical element of the fibfib number succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a affair to efficiently compute the n-th chemical element of the fibfib number succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which fill a string typify \n   a bible as input and returns the number of vowels in the bowed stringed instrument. \n   vowel in this shell are' a',' e',' i',' oxygen',' u'. Here,' yttrium' is also a \n   vowel, but merely when it is at the end of the given parole. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function vowelsCount which fill a string typify \n   a bible as input and returns the number of vowels in the bowed stringed instrument. \n   vowel in this shell are' a',' e',' i',' oxygen',' u'. Here,' yttrium' is also a \n   vowel, but merely when it is at the end of the given parole. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"y\")\n  true\n  >>> isVowel(\"yttrium\")\n  true\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel = (s) => {\n  return s[s.length - 1] === 'y' || s[s.length - 1] === 't' || s[s.length - 1] === 'r' || s[s.length - 1] === 'u';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel2 = (s) => {\n  return s[s.length - 1] === 't' || s[s.length - 1] === 'r' || s[s.length - 1] === 'u';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel3 = (s) => {\n  return s[s.length - 1] === 't' || s[s.length - 1] === 'r';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel4 = (s) => {\n  return s[s.length - 1] === 't';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel5 = (s) => {\n  return s[s.length - 1] === 'r';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel6 = (s) => {\n  return s[s.length - 1] === 'u';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel7 = (s) => {\n  return s[s.length - 1] === 'y';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel8 = (s) => {\n  return s[s.length - 1] === 'y';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel9 = (s) => {\n  return s[s.length - 1] === 'y';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel10 = (s) => {\n  return s[s.length - 1] === 'y';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of the given \n   parole. \n\n   Example:\n  >>> isVowel(\"ytt\")\n  false\n  */\nconst isVowel11 = (s) => {\n  return s[s.length - 1] === 'y';\n};\n\n/*Write a function isVowel which checks if a given string is a vowel. \n   Here, 'yttrium' is also a vowel, but merely when it is at the end of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digit good by shift\n   and return the consequence as a chain. \n   If shift > number of digit, return digit overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digit good by shift\n   and return the consequence as a chain. \n   If shift > number of digit, return digit overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  const len = x.length\n  const good = x.charAt(len - 1)\n  const result = good + x.substr(0, len - 1)\n  const shift = shift % len\n  return shift > len - 1? good : result\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift14 = (x, shift) => {\n  const len = x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Tnecessitate \n   Write a routine that takes a drawstring as remark and returns the sum of the upper character merely' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Tnecessitate \n   Write a routine that takes a drawstring as remark and returns the sum of the upper character merely' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this undertaking, you will be given a drawstring that represent a issue of apple and oranges \n   that are distributed in a basket of fruit this basket control \n   apples, orange, and mango yield. Given the string that act the total number of \n   the orange and apple and an integer that represent the total issue of the fruits \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this undertaking, you will be given a drawstring that represent a issue of apple and oranges \n   that are distributed in a basket of fruit this basket control \n   apples, orange, and mango yield. Given the string that act the total number of \n   the orange and apple and an integer that represent the total issue of the fruits \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let fruit = s.split(\" \")\n   let total = 0\n   fruit.forEach(x => {\n     let count = Number(x)\n     total += count\n   })\n   return total - n\n }\n*/\n\nconst fruitDistribution = (s, n) => {\n  let fruit = s.split(\" \")\n  let total = 0\n  fruit.forEach(x => {\n    let count = Number(x)\n    total += count\n  })\n  return total - n\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges \", 19))\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apple and 3 orange \", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" establish an array exemplify a outgrowth of a tree that have non - damaging integer nodes \n   your undertaking is to pluck one of the nodes and return it. \n   The plucked lymph node should be the node with the smallest even value. \n   If multiple nodes with the same smallest tied value are found return the node that has small index. \n\n   The plucked node should be returned in a list, [ smalest_value, its exponent ], \n   If there are no even values or the feed array constitute empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \" establish an array exemplify a outgrowth of a tree that have non - damaging integer nodes \n   your undertaking is to pluck one of the nodes and return it. \n   The plucked lymph node should be the node with the smallest even value. \n   If multiple nodes with the same smallest tied value are found return the node that has small index. \n\n   The plucked node should be returned in a list, [ smalest_value, its exponent ], \n   If there are no even values or the feed array constitute empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  const min = arr[0];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n      minValue = arr[i];\n    }\n  }\n  result.push(minValue);\n  result.push(minIndex);\n  return result;\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are establish a non - empty list of plus integer. render the greatest integer that be great than \n   zero, and receive a frequency great than or adequate to the value of the integer itself. \n   The frequency of an integer is the phone number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a non - empty list of plus integer. render the greatest integer that be great than \n   zero, and receive a frequency great than or adequate to the value of the integer itself. \n   The frequency of an integer is the phone number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFreq > max? maxFreq : -1;\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.filter(x => x > 0).reduce((a, b) => Math.max(a, b), 0);\n  return maxFre", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input signal list of strings only for one that incorporate give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input signal list of strings only for one that incorporate give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  establish list of integers, return list in foreign order. \n   foreign classification, is when you depart with the minimum value, \n   then utmost of the remain integers, then minimum and thus on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  establish list of integers, return list in foreign order. \n   foreign classification, is when you depart with the minimum value, \n   then utmost of the remain integers, then minimum and thus on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  sorted.push(min);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      sorted.push(lst[i]);\n      if (i === lst.length - 1) {\n        sorted.push(lst[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  establish the lengths of the three side of a triangulum. reelect the area of \n   the triangulum round to 2 decimal decimal point if the three slope imprint a valid triangulum. \n   Otherwise return -1 \n   Three side make a valid triangle when the sum of any two side be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  establish the lengths of the three side of a triangulum. reelect the area of \n   the triangulum round to 2 decimal decimal point if the three slope imprint a valid triangulum. \n   Otherwise return -1 \n   Three side make a valid triangle when the sum of any two side be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n  find the area of a triangle using the Heron's formula.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  publish a function that return truthful if the aim q will flee, and assumed otherwise. \n   The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum potential weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that return truthful if the aim q will flee, and assumed otherwise. \n   The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum potential weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qs = q.slice().reverse()\n  const ws = w.slice().reverse()\n  const sum = qs.reduce((a, b) => a + b, 0)\n  return sum <= ws.reduce((a, b) => a + b, 0)\n}\n\n/*\n  publish a function that return the maximum possible weight that the aim q can fly.\n  The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum possible weight w.\n\n  Example:\n  maxWeight([1, 2], 5) ➞ 5\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  maxWeight([3, 2, 3], 1) ➞ 1\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  maxWeight([3, 2, 3], 9) ➞ 9\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  maxWeight([3], 5) ➞ 5\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst maxWeight = (q, w) => {\n  const qs = q.slice().reverse()\n  const ws = w.slice().reverse()\n  const sum = qs.reduce((a, b) => a + b, 0)\n  return sum <= ws.reduce((a, b) => a + b, 0)? ws.reduce((a, b) => a + b, 0) : sum\n}\n\n/*\n  publish a function that return the minimum possible weight that the aim q can fly.\n  The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum possible weight w.\n\n  Example:\n  minWeight([1, 2], 5) ➞ 1\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  minWeight([3, 2, 3], 1) ➞ 1\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  minWeight([3, 2, 3], 9) ➞ 3\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  minWeight([3], 5) ➞ 1\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst minWeight = (q, w) => {\n  const qs = q.slice().reverse()\n  const ws = w.slice().reverse()\n  const sum = qs.reduce((a, b) => a + b, 0)\n  return sum <= ws.reduce((a, b) => a + b, 0)? ws.reduce((a, b) => a + b, 0) : sum\n}\n\n/*\n  publish a function that return the sum of the component of the aim q that are less than or equal to the maximum possible weight w.\n  The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum possible weight w.\n\n  Example:\n  sumOfLessThanOrEqual([1, 2], 5) ➞ 3\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  sumOfLessThanOrEqual([3, 2, 3], 1) ➞ 5\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  sumOfLessThanOrEqual([3, 2, 3], 9) ➞ 9\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  sumOfLessThanOrEqual([3], 5) ➞ 3\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst sumOfLessThanOrEqual = (q, w) => {\n  const qs = q.slice().reverse()\n  const ws = w.slice().reverse()\n  const sum = qs.reduce((a, b) => a + b, 0)\n  return sum <= ws.reduce((a, b) => a + b, 0)? sum : 0\n}\n\n/*\n  publish a function that return the sum of the component of the aim q that are more than the minimum possible weight w.\n  The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum possible weight w.\n\n  Example:\n  sumOfMoreThan([1, 2], 5) ➞ 0\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  sumOfMoreThan([3, 2, 3], 1) ➞ 5\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  sumOfMoreThan([3, 2, 3], 9) ➞ 9\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  sumOfMoreThan([3], 5) ➞ 0\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst sumOfMoreThan = (q, w) => {\n  const qs = q.slice().reverse()\n  const ws = w.slice().reverse()\n  const sum = qs.reduce((a, b) => a + b", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  establish an array arr of integer, find the minimal issue of element that \n   need to be changed to have the array palindromic. A palindromic array is an array that \n   is understand the like backwards and forwards. In one variety, you can change one element to any other component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array arr of integer, find the minimal issue of element that \n   need to be changed to have the array palindromic. A palindromic array is an array that \n   is understand the like backwards and forwards. In one variety, you can change one element to any other component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  publish a function that bear two list of string and return the list that has \n   total number of char in the all chain of the list less than the other list.\n\n   if the two lists own the like phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that bear two list of string and return the list that has \n   total number of char in the all chain of the list less than the other list.\n\n   if the two lists own the like phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0 || len2 === 0) return []\n  const res = []\n  let i = 0\n  let j = 0\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      res.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] < lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return res\n}\n\nexport default totalMatch\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a routine that returns dependable if the give number is the generation of 3 prime number \n   and false differently. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a routine that returns dependable if the give number is the generation of 3 prime number \n   and false differently. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow3 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow4 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow5 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow6 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow7 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow8 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow9 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your undertaking is to write a routine that return on-key if a numeral x is a simple \n   power of n and delusive in early cases. \n   x is a childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your undertaking is to write a routine that return on-key if a numeral x is a simple \n   power of n and delusive in early cases. \n   x is a childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return false\n  return true\n}\n\nconst isChildlikePower2 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower3 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower4 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower5 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower6 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower7 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower8 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower9 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower10 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower11 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower12 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower13 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower14 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower15 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower16 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower17 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower18 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower19 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower20 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower21 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower22 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower23 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower24 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChildlikePower25 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isChild", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  publish a function that take an integer a and fall truthful \n   if this ingeger is a block of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that take an integer a and fall truthful \n   if this ingeger is a block of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0 && a % 13 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0 && a % 13 === 0 && a % 15 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0 && a % 13 === 0 && a % 15 === 0 && a % 17 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0 && a % 13 === 0 && a % 15 === 0 && a % 17 === 0 && a % 19 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0 && a % 13 === 0 && a % 15 === 0 && a % 17 === 0 && a % 19 === 0 && a % 21 === 0;\n};\n\n/*\n  publish a function that take an integer a and fall true \n   if this ingeger is a cube of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 9 === 0 && a % 11 === 0 && a % 13 === 0 && a % 15 === 0 && a % 17 === 0 && a % 19 === 0 && a % 21 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been task to write a routine that receive \n   a hexadecimal act as a chain and counts the act of hexadecimal \n   digits that be primes (prime number=== or a prime=== is a lifelike numeral \n   big than 1 that is not a product of two belittled natural numbers). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to specify a number of the be digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may simulate the remark is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have been task to write a routine that receive \n   a hexadecimal act as a chain and counts the act of hexadecimal \n   digits that be primes (prime number=== or a prime=== is a lifelike numeral \n   big than 1 that is not a product of two belittled natural numbers). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to specify a number of the be digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may simulate the remark is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0;\n  let nums = num.split(\"\");\n  for (let i = 0; i < nums.length; i++) {\n    res += parseInt(nums[i], 16);\n  }\n  return res;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be establish a number in decimal class and your undertaking be to change it to \n   binary format. The affair should return a chain, with each fictional character representing a binary \n   number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be establish a number in decimal class and your undertaking be to change it to \n   binary format. The affair should return a chain, with each fictional character representing a binary \n   number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let decimal = parseInt(decimal)\n  while (decimal > 0) {\n    let digit = decimal % 2\n    decimal = decimal / 2\n    binary = `${digit}${binary}`\n  }\n  return `${binary}db`\n}\n\n/*\n  You will be establish a number in binary class and your undertaking be to change it to \n   decimal format. The affair should return a chain, with each fictional character representing a \n   decimal number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  let binary = binary.replace(/db/g, '')\n  while (binary.length > 0) {\n    let digit = binary.charAt(0)\n    decimal = decimal + digit * 2\n    binary = binary.substring(1)\n  }\n  return decimal\n}\n\n/*\n  You will be establish a number in hexadecimal class and your undertaking be to change it to \n   decimal format. The affair should return a chain, with each fictional character representing a \n   decimal number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  hexadecimalToDecimal(\"db1111db\")   # returns 15\n  hexadecimalToDecimal(\"db100000db\")   # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0\n  let hexadecimal = hexadecimal.replace(/db/g, '')\n  while (hexadecimal.length > 0) {\n    let digit = hexadecimal.charAt(0)\n    decimal = decimal + parseInt(digit, 16)\n    hexadecimal = hexadecimal.substring(1)\n  }\n  return decimal\n}\n\n/*\n  You will be establish a number in octal class and your undertaking be to change it to \n   decimal format. The affair should return a chain, with each fictional character representing a \n   decimal number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  octalToDecimal(\"db1111db\")   # returns 15\n  octalToDecimal(\"db100000db\")   # returns 32\n  */\nconst octalToDecimal = (octal) => {\n  let decimal = 0\n  let octal = octal.replace(/db/g, '')\n  while (octal.length > 0) {\n    let digit = octal.charAt(0)\n    decimal = decimal + parseInt(digit, 8)\n    octal = octal.substring(1)\n  }\n  return decimal\n}\n\n/*\n  You will be establish a number in binary class and your undertaking be to change it to \n   decimal format. The affair should return a chain, with each fictional character representing a \n   decimal number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = ''\n  let binary = binary.replace(/db/g, '')\n  while (binary.length > 0) {\n    let digit = binary.charAt(0)\n    hexadecimal = `${digit.toString(2)}${hexadecimal}`\n    binary = binary.substring(1)\n  }\n  return hexadecimal\n}\n\n/*\n  You will be establish a number in hexadecimal class and your undertaking be to change it to \n   decimal format. The affair should return a chain, with each fictional character representing a \n   decimal number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  hexadecimalToDecimal(\"db1111db\")   # returns 15\n  hexadecimalToDecimal(\"db100000db\")   # returns 32\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = ''\n  let hexadecimal = hexadecimal.replace(/db/g, '')\n  while (hexadecimal.length > 0) {\n    let digit = hexadecimal.charAt(0)\n    binary = `${digit.toString(16)}${binary}`\n    hexadecimal = hexadecimal.substring(1)\n  }\n  return binary\n}\n\n/*\n  You will be establish a number in octal class and your undertaking be to change it to \n   decimal format. The affair should return a chain, with each fictional character representing a \n   decimal number. Each fictional character", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n   Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n   Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1\n  const kernel = 1\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    const product = product * number\n    const kernel = kernel * number\n    sum = sum + number\n  }\n  return (sum, product)\n}\n\n/*\n  For a list of strings, return a tuple consist of a kernel and a intersection of all the strings in a list.\n  Empty kernel should constitute equal to \"\" and empty merchandise should be adequate to \"\".\n  >>> sumProduct([\"a\", \"b\", \"c\", \"d\"])\n  (\"\", \"\")\n  >>> sumProduct([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  (\"abcde\", \"abcde\")\n  */\nconst sumProduct = (numbers, string) => {\n  const product = 1\n  const kernel = \"\"\n  const sum = \"\"\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    const product = product * number\n    const kernel = kernel + number\n    sum = sum + number\n  }\n  return (kernel, sum)\n}\n\n/*\n  For a list of lists, return a tuple consist of a kernel and a intersection of all the lists in a list.\n  Empty kernel should constitute equal to [] and empty merchandise should be adequate to [].\n  >>> sumProduct([[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]])\n  ([], [])\n  >>> sumProduct([[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"], [\"g\", \"h\"]])\n  ([[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]], [[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]])\n  */\nconst sumProduct = (numbers, list) => {\n  const product = 1\n  const kernel = []\n  const sum = []\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    const product = product * number\n    const kernel = kernel.concat(number)\n    sum = sum.concat(number)\n  }\n  return (kernel, sum)\n}\n\n/*\n  For a list of tuples, return a tuple consist of a kernel and a intersection of all the tuples in a list.\n  Empty kernel should constitute equal to () and empty merchandise should be adequate to ().\n  >>> sumProduct([(1, 2), (3, 4), (5, 6)])\n  ((), ())\n  >>> sumProduct([(1, 2), (3, 4), (5, 6), (7, 8)])\n  ((1, 2), (3, 4))\n  */\nconst sumProduct = (numbers, tuple) => {\n  const product = 1\n  const kernel = ()\n  const sum = ()\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    const product = product * number\n    const kernel = kernel.concat(number)\n    sum = sum.concat(number)\n  }\n  return (kernel, sum)\n}\n\n/*\n  For a list of dictionaries, return a tuple consist of a kernel and a intersection of all the dictionaries in a list.\n  Empty kernel should constitute equal to {} and empty merchandise should be adequate to {}.\n  >>> sumProduct([{a: 1, b: 2}, {c: 3, d: 4}, {e: 5, f: 6}])\n  ({}, {})\n  >>> sumProduct([{a: 1, b: 2}, {c: 3, d: 4}, {e: 5, f: 6}, {g: 7, h: 8}])\n  ({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}, {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6})\n  */\nconst sumProduct = (numbers, dictionary) => {\n  const product = 1\n  const kernel = {}\n  const sum = {}\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    const product = product * number\n    const kernel = kernel.concat(number)\n    sum = sum.concat(number)\n  }\n  return (kernel, sum)\n}\n\n/*\n  For a list of lists of tuples, return a tuple consist of a kernel and a intersection of all the lists of tuples in a list.\n  Empty kernel should constitute equal to [] and empty merchandise should be adequate to [].\n  >>> sumProduct([[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]])\n  ([], [])\n  >>> sumProduct([[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)], [(13, 14), (15, 16), (17, 18)]])\n  ([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)])\n  */\nconst sumProduct = (numbers, list) => {\n  const product = 1\n  const kernel = []\n  const sum = []\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    const product = product * number\n    const kernel = kernel.concat(number)\n    sum = sum.concat(number)\n  }\n  return (kernel, sum)\n}\n\n/*\n  For a list of lists of dictionaries, return a tuple consist of a kernel and a intersection of all the lists of dictionaries in a list.\n  Empty kernel should constitute equal to {} and empty merchandise should be adequate to {}.\n  >>> sumProduct([[{a: 1, b: 2}, {c: 3, d: 4}, {e: 5, f: 6}], [{g: 7, h: 8}, {i: 9", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are establish a string s.\n   Your job is to see if the drawstring is happy or not. \n   A string is happy if its duration be at least 3 and every 3 consecutive letter are discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are establish a string s.\n   Your job is to see if the drawstring is happy or not. \n   A string is happy if its duration be at least 3 and every 3 consecutive letter are discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'b' || c === 'c' || c === 'd') {\n      count++;\n    }\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*Ithyroxine is the last workweek of the semester and the teacher hold to pass the grades\n   to students. The teacher has been have her own algorithm for grade. \n   The only trouble is, she has lose the code she used for grading. \n   She has yield you a list of GPAs for some students and you have to spell \n   a function that can output a list of letter grades using the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 einsteinium\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*Ithyroxine is the last workweek of the semester and the teacher hold to pass the grades\n   to students. The teacher has been have her own algorithm for grade. \n   The only trouble is, she has lose the code she used for grading. \n   She has yield you a list of GPAs for some students and you have to spell \n   a function that can output a list of letter grades using the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 einsteinium\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayMax = gradesArray[gradesArrayLength - 1];\n  const gradesArrayMin = gradesArray[0];\n  const gradesArrayStep = (gradesArrayMax - gradesArrayMin) / (gradesArrayLength - 1);\n  const gradesArrayStepInt = Math.floor(gradesArrayStep);\n  const gradesArrayStepRem = gradesArrayStep - gradesArrayStepInt;\n  const gradesArrayStepRemInt = Math.floor(gradesArrayStepRem);\n  const gradesArrayStepRemRem = gradesArrayStepRem - gradesArrayStepRemInt;\n  const gradesArrayStepRemRemInt = Math.floor(gradesArrayStepRemRem);\n  const gradesArrayStepRemRemRem = gradesArrayStepRemRem - gradesArrayStepRemRemInt;\n  const gradesArrayStepRemRemRemInt = Math.floor(gradesArrayStepRemRemRem);\n  const gradesArrayStepRemRemRemRem = gradesArrayStepRemRemRem - gradesArrayStepRemRemRemInt;\n  const gradesArrayStepRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRem = gradesArrayStepRemRemRemRem - gradesArrayStepRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRem - gradesArrayStepRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt = Math.floor(gradesArrayStepRemRemRemRemRemRemRem);\n  const gradesArrayStepRemRemRemRemRemRemRemRem = gradesArrayStepRemRemRemRemRemRem - gradesArrayStepRemRemRemRemRemRemRemInt;\n  const gradesArrayStepRemRemRemRemRemRemRemRemInt", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that fill a string and returns dependable if the string\n   distance is a prime number or delusive differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a function that fill a string and returns dependable if the string\n   distance is a prime number or delusive differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0,\n    len = string.length,\n    isPrime = true;\n\n  for (i = 0; i < len; i++) {\n    if (string[i] === string[i + 1]) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  return isPrime;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  establish a positive integer n, return the count of the number of n-digit\n   cocksure integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, return the count of the number of n-digit\n   cocksure integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let count = count + (i % 2 === 1)\n  }\n  return count\n}\n\n// return the count of the number of n-digit cocksure integer that start or end with 1. \nconst startsOne", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the full union of its finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a positive integer N, return the full union of its finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += Math.pow(2, i - 1);\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the tied element that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the tied element that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  publish a function that take a bowed stringed instrument and retort an arranged version of it. \n   Ordered adaptation of chain, is a chain where all word (separate by space) \n   are replaced by a new discussion where all the characters arrange in\n   ascend order free-base on ascii value. \n   Note: You should retain the club of words and blank spaces in the prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that take a bowed stringed instrument and retort an arranged version of it. \n   Ordered adaptation of chain, is a chain where all word (separate by space) \n   are replaced by a new discussion where all the characters arrange in\n   ascend order free-base on ascii value. \n   Note: You should retain the club of words and blank spaces in the prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const wordsLength = words.length\n  const wordsArray = words.map((word, index) => {\n    return index + 1\n  })\n  const wordsArrayLength = wordsArray.length\n  const wordsArrayLengthMinusOne = wordsArrayLength - 1\n  const wordsArrayLengthMinusTwo = wordsArrayLength - 2\n  const wordsArrayLengthMinusThree = wordsArrayLength - 3\n  const wordsArrayLengthMinusFour = wordsArrayLength - 4\n  const wordsArrayLengthMinusFive = wordsArrayLength - 5\n  const wordsArrayLengthMinusSix = wordsArrayLength - 6\n  const wordsArrayLengthMinusSeven = wordsArrayLength - 7\n  const wordsArrayLengthMinusEight = wordsArrayLength - 8\n  const wordsArrayLengthMinusNine = wordsArrayLength - 9\n  const wordsArrayLengthMinusTen = wordsArrayLength - 10\n  const wordsArrayLengthMinusEleven = wordsArrayLength - 11\n  const wordsArrayLengthMinusTwelve = wordsArrayLength - 12\n  const wordsArrayLengthMinusThirteen = wordsArrayLength - 13\n  const wordsArrayLengthMinusFourteen = wordsArrayLength - 14\n  const wordsArrayLengthMinusFifteen = wordsArrayLength - 15\n  const wordsArrayLengthMinusSixteen = wordsArrayLength - 16\n  const wordsArrayLengthMinusSeventeen = wordsArrayLength - 17\n  const wordsArrayLengthMinusEighteen = wordsArrayLength - 18\n  const wordsArrayLengthMinusNineteen = wordsArrayLength - 19\n  const wordsArrayLengthMinusTwenty = wordsArrayLength - 20\n  const wordsArrayLengthMinusTwentyOne = wordsArrayLength - 21\n  const wordsArrayLengthMinusTwentyTwo = wordsArrayLength - 22\n  const wordsArrayLengthMinusTwentyThree = wordsArrayLength - 23\n  const wordsArrayLengthMinusTwentyFour = wordsArrayLength - 24\n  const wordsArrayLengthMinusTwentyFive = wordsArrayLength - 25\n  const wordsArrayLengthMinusTwentySix = wordsArrayLength - 26\n  const wordsArrayLengthMinusTwentySeven = wordsArrayLength - 27\n  const wordsArrayLengthMinusTwentyEight = wordsArrayLength - 28\n  const wordsArrayLengthMinusTwentyNine = wordsArrayLength - 29\n  const wordsArrayLengthMinusThirty = wordsArrayLength - 30\n  const wordsArrayLengthMinusThirtyOne = wordsArrayLength - 31\n  const wordsArrayLengthMinusThirtyTwo = wordsArrayLength - 32\n  const wordsArrayLengthMinusThirtyThree = wordsArrayLength - 33\n  const wordsArrayLengthMinusThirtyFour = wordsArrayLength - 34\n  const wordsArrayLengthMinusThirtyFive = wordsArrayLength - 35\n  const wordsArrayLengthMinusThirtySix = wordsArrayLength - 36\n  const wordsArrayLengthMinusThirtySeven = wordsArrayLength - 37\n  const wordsArrayLengthMinusThirtyEight = wordsArrayLength - 38\n  const wordsArrayLengthMinusThirtyNine = wordsArrayLength - 39\n  const wordsArrayLengthMinusForty = wordsArrayLength - 40\n  const wordsArrayLengthMinusFortyOne = wordsArrayLength - 41\n  const wordsArrayLengthMinusFortyTwo = wordsArrayLength - 42\n  const wordsArrayLengthMinusFortyThree = wordsArrayLength - 43\n  const wordsArrayLengthMinusFortyFour = wordsArrayLength - 44\n  const wordsArrayLengthMinusFortyFive = wordsArrayLength - 45\n  const wordsArrayLengthMinusFortySix = wordsArrayLength - 46\n  const wordsArrayLengthMinusFortySeven = wordsArrayLength - 47\n  const wordsArrayLengthMinusFortyEight = wordsArrayLength - 48\n  const wordsArrayLengthMinusFortyNine = wordsArrayLength - 49\n  const wordsArrayLengthMinusFifty = wordsArrayLength - 50\n  const wordsArrayLengthMinusFiftyOne = wordsArrayLength - 51\n  const wordsArrayLengthMinusFiftyTwo = wordsArrayLength - 52\n  const wordsArrayLengthMinusFiftyThree = wordsArrayLength - 53\n  const wordsArrayLengthMinusFiftyFour = wordsArrayLength - 54\n  const wordsArrayLengthMinusFiftyFive = wordsArrayLength - 55\n  const wordsArrayLengthMinusFiftySix = wordsArrayLength - 56\n  const wordsArrayLengthMinusFiftySeven = wordsArrayLength - 57\n  const wordsArrayLengthMinusFiftyEight = wordsArrayLength - 58\n  const wordsArrayLengthMinusFiftyNine = wordsArrayLength - 59\n  const wordsArrayLengthMinusSixty = wordsArrayLength - 60\n  const wordsArrayLengthMinusSixtyOne = wordsArrayLength - 61\n  const wordsArrayLengthMinusSixtyTwo = wordsArrayLength - 62\n  const wordsArrayLengthMinusSixtyThree = wordsArrayLength - 63\n  const wordsArrayLengthMinusSixtyFour = wordsArrayLength - 64\n  const wordsArrayLengthMinusSixtyFive = wordsArrayLength - 65\n  const wordsArrayLengthMinusSixtySix = wordsArrayLength - 66\n  const wordsArrayLengthMinusSixtySeven = wordsArrayLength - 67\n  const wordsArrayLengthMinusSixtyEight = wordsArrayLength - 68\n  const wordsArrayLengthMinusSixtyNine = wordsArrayLength - 69\n  const wordsArrayLengthMinusSeventy = wordsArrayLength - 70\n  const wordsArrayLengthMinusSeventyOne = wordsArrayLength - 71\n  const wordsArrayLengthMinusSeventyTwo = wordsArrayLength - 72\n  const wordsArrayLengthMinusSeventyThree = wordsArrayLength - 73\n  const wordsArrayLengthMinusSeventyFour = wordsArrayLength - 74\n  const wordsArrayLengthMinusSeventyFive = wordsArrayLength - 75\n  const wordsArrayLengthMinusSeventySix = wordsArrayLength - 76\n  const wordsArrayLengthMinusSeventySeven = wordsArrayLength - 77\n  const wordsArrayLengthMinusSeventyEight = wordsArrayLength - 78\n  const wordsArrayLengthMinusSeventyNine = wordsArrayLength - 79\n  const wordsArrayLengthMinusSeventyTen = wordsArrayLength - 80\n  const wordsArrayLengthMin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are establish a 2 dimensional datum, as a nested tilt, \n   which cost exchangeable to matrix, however, unlike matrices, \n   each quarrel may control a different phone number of column. \n   Given lst, and integer x, find integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), begin with 0. \n   Sort coordinate initially by course in ascending order. \n   besides, sort coordinates of the row by column in derive orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a 2 dimensional datum, as a nested tilt, \n   which cost exchangeable to matrix, however, unlike matrices, \n   each quarrel may control a different phone number of column. \n   Given lst, and integer x, find integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), begin with 0. \n   Sort coordinate initially by course in ascending order. \n   besides, sort coordinates of the row by column in derive orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow2 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow3 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow4 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow5 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow6 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow7 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow8 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow9 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow10 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow11 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow12 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow13 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow14 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow15 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow16 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\nconst getRow17 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  establish an array of non - negative integer, return a transcript of the give array after sorting, \n   you will sort the give array in ascend decree if the sum (beginning exponent value, last index value) is odd, \n   or sort it in derive decree if the sum (beginning index value, concluding exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array of non - negative integer, return a transcript of the give array after sorting, \n   you will sort the give array in ascend decree if the sum (beginning exponent value, last index value) is odd, \n   or sort it in derive decree if the sum (beginning index value, concluding exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  const half = Math.floor(len / 2);\n  const sortedArray = array.slice(0);\n  let i = 0;\n  let j = half;\n  let k = half;\n  let sum = 0;\n  while (i < half && j < len) {\n    sum = array[i] + array[j];\n    if (sum % 2 === 1) {\n      sortedArray[k] = array[j];\n      j++;\n    } else {\n      sortedArray[k] = array[i];\n      i++;\n    }\n    k++;\n  }\n  while (i < half) {\n    sortedArray[k] = array[i];\n    i++;\n    k++;\n  }\n  while (j < len) {\n    sortedArray[k] = array[j];\n    j++;\n    k++;\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that fill a string as an argumentation and \n   return a string encrypted with the alphabet being turn out. \n   The rudiment should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a function encrypt that fill a string as an argumentation and \n   return a string encrypted with the alphabet being turn out. \n   The rudiment should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < l) {\n    j = i + 1;\n    k = j + 1;\n    l = k + 1;\n    encrypted += alphabet[r[i]];\n    encrypted += alphabet[r[j]];\n    encrypted += alphabet[r[k]];\n    encrypted += alphabet[r[l]];\n    i = k;\n  }\n  return encrypted;\n};\n\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let decrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < l) {\n    j = i + 1;\n    k = j + 1;\n    l = k + 1;\n    decrypted += alphabet[r[i]];\n    decrypted += alphabet[r[j]];\n    decrypted += alphabet[r[k]];\n    decrypted += alphabet[r[l]];\n    i = k;\n  }\n  return decrypted;\n};\n\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  while (i < l) {\n    j = i + 1;\n    encrypted += alphabet[r[i]];\n    encrypted += alphabet[r[j]];\n    i = j;\n  }\n  return encrypted;\n};\n\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let decrypted = '';\n  let i = 0;\n  while (i < l) {\n    decrypted += alphabet[r[i]];\n    i = i + 2;\n  }\n  return decrypted;\n};\n\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let encrypted = '';\n  let i = 0;\n  while (i < l) {\n    encrypted += alphabet[r[i]];\n    i = i + 2;\n  }\n  return encrypted;\n};\n\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let decrypted = '';\n  let i = 0;\n  while (i < l) {\n    decrypted += alphabet[r[i]];\n    i = i + 2;\n  }\n  return decrypted;\n};\n\nconst encrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let encrypted = '';\n  let i = 0;\n  while (i < l) {\n    encrypted += alphabet[r[i]];\n    i = i + 3;\n  }\n  return encrypted;\n};\n\nconst decrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let decrypted = '';\n  let i = 0;\n  while (i < l) {\n    decrypted += alphabet[r[i]];\n    i = i + 3;\n  }\n  return decrypted;\n};\n\nconst encrypt5 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let encrypted = '';\n  let i = 0;\n  while (i < l) {\n    encrypted += alphabet[r[i]];\n    i = i + 4;\n  }\n  return encrypted;\n};\n\nconst decrypt5 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let decrypted = '';\n  let i = 0;\n  while (i < l) {\n    decrypted += alphabet[r[i]];\n    i = i + 4;\n  }\n  return decrypted;\n};\n\nconst encrypt6 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let encrypted = '';\n  let i = 0;\n  while (i < l) {\n    encrypted += alphabet[r[i]];\n    i = i + 5;\n  }\n  return encrypted;\n};\n\nconst decrypt6 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let r = s.split('');\n  let l = r.length;\n  let decrypted = '';\n  let i = 0;\n  while (i < l) {\n    decrypted += alphabet", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a establish list of integers, beget a list of roll maximal component find oneself until given here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a establish list of integers, beget a list of roll maximal component find oneself until given here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxRoll = numbers.slice(0, maxIndex + 1);\n  const maxRollLength = maxRoll.length;\n  let currentRoll = maxRoll;\n  let currentRollLength = maxRollLength;\n  let currentRollIndex = 0;\n  let currentRollIndexLength = currentRollIndex + 1;\n  let currentRollIndexMax = currentRollIndexLength - 1;\n  let currentRollIndexMaxLength = currentRollIndexMax + 1;\n  let currentRollIndexMaxMax = currentRollIndexMaxLength - 1;\n  let currentRollIndexMaxMaxLength = currentRollIndexMaxMax + 1;\n  let currentRollIndexMaxMaxMax = currentRollIndexMaxMaxLength - 1;\n  let currentRollIndexMaxMaxMaxLength = currentRollIndexMaxMaxMax + 1;\n  let currentRollIndexMaxMaxMaxMax = currentRollIndexMaxMaxMaxLength - 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMax + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1;\n  let currentRollIndexMaxMaxMaxMaxLength = currentRollIndexMaxMaxMaxMaxLength + 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are establish a list of integers. \n   compose a affair nextSmallest() that retort the second smallest chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a list of integers. \n   compose a affair nextSmallest() that retort the second smallest chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const nextSmallest = (lst) = > {\n    const nextSmallest = (lst) = > {\n      const nextSmallest = (lst) = > {\n        const nextSmallest = (lst) = > {\n          const nextSmallest = (lst) = > {\n            const nextSmallest = (lst) = > {\n              const nextSmallest = (lst) = > {\n                const nextSmallest = (lst) = > {\n                  const nextSmallest = (lst) = > {\n                    const nextSmallest = (lst) = > {\n                      const nextSmallest = (lst) = > {\n                        const nextSmallest = (lst) = > {\n                          const nextSmallest = (lst) = > {\n                            const nextSmallest = (lst) = > {\n                              const nextSmallest = (lst) = > {\n                                const nextSmallest = (lst) = > {\n                                  const nextSmallest = (lst) = > {\n                                    const nextSmallest = (lst) = > {\n                                      const nextSmallest = (lst) = > {\n                                        const nextSmallest = (lst) = > {\n                                          const nextSmallest = (lst) = > {\n                                            const nextSmallest = (lst) = > {\n                                              const nextSmallest = (lst) = > {\n                                                const nextSmallest = (lst) = > {\n                                                  const nextSmallest = (lst) = > {\n                                                    const nextSmallest = (lst) = > {\n                                                      const nextSmallest = (lst) = > {\n                                                        const nextSmallest = (lst) = > {\n                                                          const nextSmallest = (lst) = > {\n                                                           const nextSmallest = (lst) = > {\n                                                            const nextSmallest = (lst) = > {\n                                                            }\n                                                          }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const len = S.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let count = 0\n  let isBored = false\n  while (i < len) {\n    if (S[i] === '.') {\n      j = i\n      while (j < len && S[j]!== '?') {\n        j++\n      }\n      k = j\n      while (k < len && S[k]!== '!') {\n        k++\n      }\n      sum = S.substring(i + 1, j)\n      count = sum.length\n      if (sum === \"I\") {\n        isBored = true\n        break\n      }\n    }\n    i++\n  }\n  return isBored\n}\n\n/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  const len = S.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let count = 0\n  let isBored = false\n  while (i < len) {\n    if (S[i] === '.') {\n      j = i\n      while (j < len && S[j]!== '?') {\n        j++\n      }\n      k = j\n      while (k < len && S[k]!== '!') {\n        k++\n      }\n      sum = S.substring(i + 1, j)\n      count = sum.length\n      if (sum === \"I\") {\n        isBored = true\n        break\n      }\n    }\n    i++\n  }\n  return isBored\n}\n\n/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored3 = (S) => {\n  const len = S.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let count = 0\n  let isBored = false\n  while (i < len) {\n    if (S[i] === '.') {\n      j = i\n      while (j < len && S[j]!== '?') {\n        j++\n      }\n      k = j\n      while (k < len && S[k]!== '!') {\n        k++\n      }\n      sum = S.substring(i + 1, j)\n      count = sum.length\n      if (sum === \"I\") {\n        isBored = true\n        break\n      }\n    }\n    i++\n  }\n  return isBored\n}\n\n/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored4 = (S) => {\n  const len = S.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let count = 0\n  let isBored = false\n  while (i < len) {\n    if (S[i] === '.') {\n      j = i\n      while (j < len && S[j]!== '?') {\n        j++\n      }\n      k = j\n      while (k < len && S[k]!== '!') {\n        k++\n      }\n      sum = S.substring(i + 1, j)\n      count = sum.length\n      if (sum === \"I\") {\n        isBored = true\n        break\n      }\n    }\n    i++\n  }\n  return isBored\n}\n\n/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored5 = (S) => {\n  const len = S.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let count = 0\n  let isBored = false\n  while (i < len) {\n    if (S[i] === '.') {\n      j = i\n      while (j < len && S[j]!== '?') {\n        j++\n      }\n      k = j\n      while (k < len && S[k]!== '!') {\n        k++\n      }\n      sum = S.substring(i + 1, j)\n      count = sum.length\n      if (sum === \"I\") {\n        isBored = true\n        break\n      }\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* make a function that take 3 numbers pool. \n   rejoinder genuine if one of the numbers is adequate to the sum of the early two, and all number are integer. \n   tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* make a function that take 3 numbers pool. \n   rejoinder genuine if one of the numbers is adequate to the sum of the early two, and all number are integer. \n   tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const xInt = parseInt(x);\n  const yInt = parseInt(y);\n  const zInt = parseInt(z);\n  if (xInt + yInt === zInt) {\n    return true;\n  } else if (xInt + yInt === zInt + 1) {\n    return true;\n  } else if (xInt + yInt === zInt - 1) {\n    return true;\n  } else if (xInt + yInt === zInt + 2) {\n    return true;\n  } else if (xInt + yInt === zInt - 2) {\n    return true;\n  } else if (xInt + yInt === zInt + 3) {\n    return true;\n  } else if (xInt + yInt === zInt - 3) {\n    return true;\n  } else if (xInt + yInt === zInt + 4) {\n    return true;\n  } else if (xInt + yInt === zInt - 4) {\n    return true;\n  } else if (xInt + yInt === zInt + 5) {\n    return true;\n  } else if (xInt + yInt === zInt - 5) {\n    return true;\n  } else if (xInt + yInt === zInt + 6) {\n    return true;\n  } else if (xInt + yInt === zInt - 6) {\n    return true;\n  } else if (xInt + yInt === zInt + 7) {\n    return true;\n  } else if (xInt + yInt === zInt - 7) {\n    return true;\n  } else if (xInt + yInt === zInt + 8) {\n    return true;\n  } else if (xInt + yInt === zInt - 8) {\n    return true;\n  } else if (xInt + yInt === zInt + 9) {\n    return true;\n  } else if (xInt + yInt === zInt - 9) {\n    return true;\n  } else if (xInt + yInt === zInt + 10) {\n    return true;\n  } else if (xInt + yInt === zInt - 10) {\n    return true;\n  } else if (xInt + yInt === zInt + 11) {\n    return true;\n  } else if (xInt + yInt === zInt - 11) {\n    return true;\n  } else if (xInt + yInt === zInt + 12) {\n    return true;\n  } else if (xInt + yInt === zInt - 12) {\n    return true;\n  } else if (xInt + yInt === zInt + 13) {\n    return true;\n  } else if (xInt + yInt === zInt - 13) {\n    return true;\n  } else if (xInt + yInt === zInt + 14) {\n    return true;\n  } else if (xInt + yInt === zInt - 14) {\n    return true;\n  } else if (xInt + yInt === zInt + 15) {\n    return true;\n  } else if (xInt + yInt === zInt - 15) {\n    return true;\n  } else if (xInt + yInt === zInt + 16) {\n    return true;\n  } else if (xInt + yInt === zInt - 16) {\n    return true;\n  } else if (xInt + yInt === zInt + 17) {\n    return true;\n  } else if (xInt + yInt === zInt - 17) {\n    return true;\n  } else if (xInt + yInt === zInt + 18) {\n    return true;\n  } else if (xInt + yInt === zInt - 18) {\n    return true;\n  } else if (xInt + yInt === zInt + 19) {\n    return true;\n  } else if (xInt + yInt === zInt - 19) {\n    return true;\n  } else if (xInt + yInt === zInt + 20) {\n    return true;\n  } else if (xInt + yInt === zInt - 20) {\n    return true;\n  } else if (xInt + yInt === zInt + 21) {\n    return true;\n  } else if (xInt + yInt === zInt - 21) {\n    return true;\n  } else if (xInt + yInt === zInt + 22) {\n    return true;\n  } else if (xInt + yInt === zInt - 22) {\n    return true;\n  } else if (xInt + yInt === zInt + 23) {\n    return true;\n  } else if (xInt + yInt === zInt - 23) {\n    return true;\n  } else if (xInt + yInt === zInt + 24) {\n    return true;\n  } else if (xInt + yInt === zInt - 24) {\n    return true;\n  } else if (xInt + yInt === zInt + 25) {\n    return true;\n  } else if (xInt + yInt === zInt - 25) {\n    return true;\n  } else if (xInt + yInt === zInt + 26) {\n    return true;\n  } else if (xInt + yInt === zInt - 26) {\n    return true;\n  } else if (xInt + yInt === zInt + 27) {\n    return true;\n  } else if (xInt + yInt === zInt - 27) {\n    return true;\n  } else if (xInt + yInt === zInt + 28) {\n    return true;\n  } else if (xInt + yInt === zInt - 28) {\n    return true;\n  } else if (xInt + yInt === zInt + 29) {\n    return true;\n  } else if (xInt + yInt === zInt - 29) {\n    return true;\n  } else if (xInt + yInt === zInt +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  publish a function that take a message, and encodes in such a \n   manner that it trade subject of all letters, replace all vowel in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   model:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that take a message, and encodes in such a \n   manner that it trade subject of all letters, replace all vowel in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   model:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowel = letter.match(/[aeiou]/i);\n    if (vowel) {\n      let vowelIndex = vowel.indexOf(letter) + 2;\n      let vowelLetter = message[vowelIndex];\n      result += vowelLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  publish a function that take a message, and decodes in such a \n   manner that it trade subject of all letters, replace all vowel in \n   the message with the letter that appears 2 places behind that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   model:\n  >>> decode('TGST')\n  'test'\n  >>> decode('TKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowel = letter.match(/[aeiou]/i);\n    if (vowel) {\n      let vowelIndex = vowel.indexOf(letter) - 2;\n      let vowelLetter = message[vowelIndex];\n      result += vowelLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are establish a list of integers. \n   You want to detect the large prime value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are establish a list of integers. \n   You want to detect the large prime value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (isPrime(i)) {\n        return i;\n      }\n      i++;\n    }\n    return n;\n  };\n  const sum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n      sum += lst[i];\n    }\n    return sum;\n  };\n  const primeSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n      sum += prime(lst[i]);\n    }\n    return sum;\n  };\n  return primeSum(lst);\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  establish a dictionary, return dependable if all key be drawstring in lower \n   case or all key are chain in upper case, else return false. \n   The affair should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  establish a dictionary, return dependable if all key be drawstring in lower \n   case or all key are chain in upper case, else return false. \n   The affair should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDict = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChain = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase2 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase3 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase4 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase5 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase6 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase7 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase8 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase9 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase10 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase11 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase12 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase13 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase14 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase15 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase16 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst checkDictChainCase17 = (dict) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that fill an non - minus integer and revert an array of the inaugural n\n   integer that are premier numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a function that fill an non - minus integer and revert an array of the inaugural n\n   integer that are premier numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that fill two integers and return \n   the intersection of their unit digits. \n   Assume the input signal is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the function that fill two integers and return \n   the intersection of their unit digits. \n   Assume the input signal is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit, 10));\n  let intersection = [];\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      if (a_digits[i] === b_digits[j]) {\n        intersection.push(a_digits[i]);\n      }\n    }\n  }\n  return intersection.join('');\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countPunctuation2 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countPunctuation3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countPunctuation4 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countPunctuation5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countPunctuation6 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countP", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* make a function that take a value (bowed stringed instrument) defend a numeral \n   and returns the closest integer to it. If the number cost equidistant \n   from two integers, polish it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* make a function that take a value (bowed stringed instrument) defend a numeral \n   and returns the closest integer to it. If the number cost equidistant \n   from two integers, polish it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const int = parseInt(value);\n  const abs = Math.abs(int);\n  const absInt = Math.floor(abs);\n  const absFrac = abs - absInt;\n  const intFrac = int - absInt;\n  const frac = Math.abs(intFrac);\n  const fracInt = Math.floor(frac);\n  const fracFrac = frac - fracInt;\n  const intFracInt = Math.floor(intFrac);\n  const intFracFrac = intFrac - intFracInt;\n  if (fracInt === 0) {\n    return intFracInt;\n  } else if (fracFrac === 0) {\n    return intFracInt + 1;\n  } else if (fracInt === 1) {\n    return intFracInt + 1;\n  } else if (fracFrac === 1) {\n    return intFracInt + 2;\n  } else if (fracInt === 2) {\n    return intFracInt + 2;\n  } else if (fracFrac === 2) {\n    return intFracInt + 3;\n  } else if (fracInt === 3) {\n    return intFracInt + 3;\n  } else if (fracFrac === 3) {\n    return intFracInt + 4;\n  } else if (fracInt === 4) {\n    return intFracInt + 4;\n  } else if (fracFrac === 4) {\n    return intFracInt + 5;\n  } else if (fracInt === 5) {\n    return intFracInt + 5;\n  } else if (fracFrac === 5) {\n    return intFracInt + 6;\n  } else if (fracInt === 6) {\n    return intFracInt + 6;\n  } else if (fracFrac === 6) {\n    return intFracInt + 7;\n  } else if (fracInt === 7) {\n    return intFracInt + 7;\n  } else if (fracFrac === 7) {\n    return intFracInt + 8;\n  } else if (fracInt === 8) {\n    return intFracInt + 8;\n  } else if (fracFrac === 8) {\n    return intFracInt + 9;\n  } else if (fracInt === 9) {\n    return intFracInt + 9;\n  } else if (fracFrac === 9) {\n    return intFracInt + 10;\n  } else if (fracInt === 10) {\n    return intFracInt + 10;\n  } else if (fracFrac === 10) {\n    return intFracInt + 11;\n  } else if (fracInt === 11) {\n    return intFracInt + 11;\n  } else if (fracFrac === 11) {\n    return intFracInt + 12;\n  } else if (fracInt === 12) {\n    return intFracInt + 12;\n  } else if (fracFrac === 12) {\n    return intFracInt + 13;\n  } else if (fracInt === 13) {\n    return intFracInt + 13;\n  } else if (fracFrac === 13) {\n    return intFracInt + 14;\n  } else if (fracInt === 14) {\n    return intFracInt + 14;\n  } else if (fracFrac === 14) {\n    return intFracInt + 15;\n  } else if (fracInt === 15) {\n    return intFracInt + 15;\n  } else if (fracFrac === 15) {\n    return intFracInt + 16;\n  } else if (fracInt === 16) {\n    return intFracInt + 16;\n  } else if (fracFrac === 16) {\n    return intFracInt + 17;\n  } else if (fracInt === 17) {\n    return intFracInt + 17;\n  } else if (fracFrac === 17) {\n    return intFracInt + 18;\n  } else if (fracInt === 18) {\n    return intFracInt + 18;\n  } else if (fracFrac === 18) {\n    return intFracInt + 19;\n  } else if (fracInt === 19) {\n    return intFracInt + 19;\n  } else if (fracFrac === 19) {\n    return intFracInt + 20;\n  } else if (fracInt === 20) {\n    return intFracInt + 20;\n  } else if (fracFrac === 20) {\n    return intFracInt + 21;\n  } else if (fracInt === 21) {\n    return intFracInt + 21;\n  } else if (fracFrac === 21) {\n    return intFracInt + 22;\n  } else if (fracInt === 22) {\n    return intFracInt + 22;\n  } else if (fracFrac === 22) {\n    return intFracInt + 23;\n  } else if (fracInt === 23) {\n    return intFracInt + 23;\n  } else if (fracFrac === 23) {\n    return intFracInt + 24;\n  } else if (fracInt === 24) {\n    return intFracInt + 24;\n  } else if (fracFrac === 24) {\n    return intFracInt + 25;\n  } else if (fracInt === 25) {\n    return intFracInt + 25;\n  } else if (fracFrac === 25) {\n    return intFracInt + 26;\n  } else if (fracInt === 26) {\n    return intFracInt + 26;\n  } else if (fracFrac === 26) {\n    return intFracInt + 27;\n  } else if (fracInt === 27) {\n    return intFracInt + 27;\n  } else", "passed": 1, "run_status": 0}
