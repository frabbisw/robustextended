{"task_id": "JavaScript/0", "prompt": "/* cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) > threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) > threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) > threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  cHeCK if in giVeN list OF numbers, Are anY", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng cOnTainIng multipLE gROuPs oF nEsTeD paRenTHEseS. yOuR goal iS To\n  separATe ThoSE GRouP IntO SEPaRAtE sTrings AnD return tHe list of THOSE.\n  SEParate grouPS are Balanced (EacH opeN bRacE Is proPErLy Closed) AnD not nESted wIthiN eaCh otHEr\n  IGNore any SpACes in tHe INpUt stRIng.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* iNpUT to thIs FUNCtion IS a strIng cOnTainIng multipLE gROuPs oF nEsTeD paRenTHEseS. yOuR goal iS To\n  separATe ThoSE GRouP IntO SEPaRAtE sTrings AnD return tHe list of THOSE.\n  SEParate grouPS are Balanced (EacH opeN bRacE Is proPErLy Closed) AnD not nESted wIthiN eaCh otHEr\n  IGNore any SpACes in tHe INpUt stRIng.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack_length = paren_list.length\n  const paren_stack_max_length = paren_stack_length - 1\n  const paren_stack_max_index = paren_stack_length - 1\n  const paren_stack_max_paren_index = paren_stack_max_index - 1\n  const paren_stack_max_paren_length = paren_stack_max_index - 1\n  const paren_stack_max_paren_paren_index = paren_stack_max_paren_index - 1\n  const paren_stack_max_paren_paren_length = paren_stack_max_paren_paren_index - 1\n  const paren_stack_max_paren_paren_paren_index = paren_stack_max_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_length = paren_stack_max_paren_paren_paren_index - 1\n  const paren_stack_max_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_length = paren_stack_max_paren_paren_paren_paren_index - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_length = paren_stack_max_paren_paren_paren_paren_paren_index - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length - 1\n  const paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = paren_stack_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* tEsT If gniVeN STRig is A PalinDromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* tEsT If gniVeN STRig is A PalinDromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  return prefix + suffix;\n}\n\n/* tEsT If gniVeN STRig is A Palindrome */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  return prefix + suffix;\n}\n\n/* tEsT If gniVeN STRig is A Palindrome */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  return prefix + suffix;\n}\n\n/* tEsT If gniVeN STRig is A Palindrome */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  return prefix + suffix;\n}\n\n/* tEsT If gniVeN STRig is A Palindrome */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  return prefix + suffix;\n}\n\n/* tEsT If gniVeN STRig is A Palindrome */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/100", "prompt": "/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fI", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*THIs FUnctiOn TAKEs two POsitiVe nuMbErs x aNd y and retuRNs THe\n  BigGeSt EvEn iNteGER nuMBEr That is in THe range [x, y] INcLusIVE. if \n  tHEre'S NO SuCH nUmBer, theN tHe FuncTION ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*THIs FUnctiOn TAKEs two POsitiVe nuMbErs x aNd y and retuRNs THe\n  BigGeSt EvEn iNteGER nuMBEr That is in THe range [x, y] INcLusIVE. if \n  tHEre'S NO SuCH nUmBer, theN tHe FuncTION ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum21 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum22 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum23 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum24 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum25 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x + Math.floor(Math.random() * (y - x + 1));\n};\n\nconst chooseNum26 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*YOU aRE giveN tWO POsitiVE inteGers n AnD m, and Your task iS To COmPutE tHe\n  AvEraGe oF THe iNTEgErs froM n Through m (INcLudING n And m). \n  rOunD THE aNSwEr To the nEaReSt inTEGER aND convert thAT to bInary.\n  If n iS grEateR tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN tWO POsitiVE inteGers n AnD m, and Your task iS To COmPutE tHe\n  AvEraGe oF THe iNTEgErs froM n Through m (INcLudING n And m). \n  rOunD THE aNSwEr To the nEaReSt inTEGER aND convert thAT to bInary.\n  If n iS grEateR tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const nBits = Math.floor(Math.log(n) / Math.log(2));\n  const mBits = Math.floor(Math.log(m) / Math.log(2));\n  const nMask = Math.pow(2, nBits) - 1;\n  const mMask = Math.pow(2, mBits) - 1;\n  const nMasked = n & nMask;\n  const mMasked = m & mMask;\n  const nRounded = nMasked + (nMasked === nMask? 0 : 1);\n  const mRounded = mMasked + (mMasked === mMask? 0 : 1);\n  return nRounded + mRounded;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GIVeN A list of poSiTIVE inteGErs x. return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*GIVeN A list of poSiTIVE inteGErs x. return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits2 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits3 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits4 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits5 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits6 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits7 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits8 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits9 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits10 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  gIvEN an arRaY OF IntegERs, sorT the InTegeRs that are BEtWEeN 1 anD 9 iNcLuSivE,\n  reVERse THE rEsultiNG array, aND tHen REPLacE EacH DIGiT By ItS correSpOnDing NAME FrOM\n  \"One\", \"Two\", \"ThrEE\", \"FouR\", \"Five\", \"Six\", \"sevEn\", \"EiGhT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY OF IntegERs, sorT the InTegeRs that are BEtWEeN 1 anD 9 iNcLuSivE,\n  reVERse THE rEsultiNG array, aND tHen REPLacE EacH DIGiT By ItS correSpOnDing NAME FrOM\n  \"One\", \"Two\", \"ThrEE\", \"FouR\", \"Five\", \"Six\", \"sevEn\", \"EiGhT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength7 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength8 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength9 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength10 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength11 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength12 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength13 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr = sortedArr.reverse()\n  const result = reversedArr.map(item => item.name)\n  return result\n}\n\nconst byLength14 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a.length - b.length)\n  const reversedArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(i);\n    i = i * 2;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n\n/*\n  iMpLEment ThE FUNctioN fThatTakes n As A parAmeter,\n  and RETURNS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(i);\n    i = i * 2;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n\n/*\n  iMpLEment ThE FUNctioN fThatTakes n As A parAmeter,\n  and RETURNS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(i);\n    i = i * 2;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n\n/*\n  iMpLEment ThE FUNctioN fThatTakes n As A parAmeter,\n  and RETURNS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(i);\n    i = i * 2;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n\n/*\n  iMpLEment ThE FUNctioN fThatTakes n As A parAmeter,\n  and RETURNS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(i);\n    i = i * 2;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n\n/*\n  iMpLEment ThE FUNctioN fThatTakes n As A parAmeter,\n  and RETURNS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(i);\n    i = i * 2;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n\n/*\n  iMpLEment ThE FUNctioN fThatTakes n As A parAmeter,\n  and RETURNS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return a tuple thaT has ThE numBer of even ANd ODd\n  IntEgEr PaLinDroMES thAT FaLl withIN the ranGE(1, n), iNclUSIVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, return a tuple thaT has ThE numBer of even ANd ODd\n  IntEgEr PaLinDroMES thAT FaLl withIN the ranGE(1, n), iNclUSIVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 1\n  const evenOdd = []\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0\n    if (isEven) {\n      evenOdd.push(i)\n    } else {\n      oddOdd.push(i)\n    }\n  }\n  return evenOdd\n}\n\nexport default evenOddPalindrome\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  wRiTE a funCtION countNums Which TAkes aN arrAy Of inTegers and REtURnS\n  thE nUmBeR of EleMENts WHIcH has a sUM of digiTS > 0.\n  IF a nUMBEr iS NegATIVe, THeN iTs firsT sIgNed dIGIT WiLL be negativE:\n  E.g. -123 haS signed dIgiTs -1, 2, anD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION countNums Which TAkes aN arrAy Of inTegers and REtURnS\n  thE nUmBeR of EleMENts WHIcH has a sUM of digiTS > 0.\n  IF a nUMBEr iS NegATIVe, THeN iTs firsT sIgNed dIGIT WiLL be negativE:\n  E.g. -123 haS signed dIgiTs -1, 2, anD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? sum : 0;\n};\n\nexport default countNums;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*WE HaVE an arRaY 'arr' OF n inteGErs arr[1], arr[2], ..., arr[N].The\n  nuMberS in tHe arRay will be RAnDOmLy oRdErEd. youR taSK Is tO DEtErmine IF\n  it is poSSiBle TO GEt aN ArrAY SOrTEd in NoN-decreAsInG ordER BY PeRForming \n  the FOlloWing operAtiOn on ThE giVEn arrAY:\n      YOu Are allOwEd to pERform RighT shIft oPEraTIon any nUmBEr of TiMEs.\n  \n  one rIGht shIFt operatIon mEans sHiftING aLl elemEntS oF THE array By one\n  poSition in The rigHT DirectiOn. tHe last eLEment OF THe arRAY wIll be MoVED TO\n  ThE starting posiTioN in ThE arrAy i.e. 0tH iNdEX. \n\n  If It is Possible to ObtAin tHe SorTed Array by perfOrminG THe abOve oPeraTiOn\n  Then return tRue Else return fAlse.\n  IF The Given ArRaY IS eMpTy THEn return truE.\n\n  notE: thE gIven list Is GuArANTEEd to hAVe uniQue elEMEnts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*WE HaVE an arRaY 'arr' OF n inteGErs arr[1], arr[2],..., arr[N].The\n  nuMberS in tHe arRay will be RAnDOmLy oRdErEd. youR taSK Is tO DEtErmine IF\n  it is poSSiBle TO GEt aN ArrAY SOrTEd in NoN-decreAsInG ordER BY PeRForming \n  the FOlloWing operAtiOn on ThE giVEn arrAY:\n      YOu Are allOwEd to pERform RighT shIft oPEraTIon any nUmBEr of TiMEs.\n  \n  one rIGht shIFt operatIon mEans sHiftING aLl elemEntS oF THE array By one\n  poSition in The rigHT DirectiOn. tHe last eLEment OF THe arRAY wIll be MoVED TO\n  ThE starting posiTioN in ThE arrAy i.e. 0tH iNdEX. \n\n  If It is Possible to ObtAin tHe SorTed Array by perfOrminG THe abOve oPeraTiOn\n  Then return tRue Else return fAlse.\n  IF The Given ArRaY IS eMpTy THEn return truE.\n\n  notE: thE gIven list Is GuArANTEEd to hAVe uniQue elEMEnts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length\n  if (len === 1) {\n    return true\n  }\n  const last = arr[len - 1]\n  const lastIndex = arr.indexOf(last)\n  const lastIndexInArr = arr.indexOf(arr[lastIndex - 1])\n  if (lastIndex === lastIndexInArr) {\n    return false\n  }\n  const lastIndexInArrInArr = arr.indexOf(arr[lastIndexInArr - 1])\n  if (lastIndexInArr === lastIndexInArrInArr) {\n    return false\n  }\n  const lastIndexInArrInArrInArr = arr.indexOf(arr[lastIndexInArrInArr - 1])\n  if (lastIndexInArrInArr === lastIndexInArrInArrInArr) {\n    return false\n  }\n  const lastIndexInArrInArrInArrInArr = arr.indexOf(arr[lastIndexInArrInArrInArr - 1])\n  if (lastIndexInArrInArrInArr === lastIndexInArrInArrInArrInArr) {\n    return false\n  }\n  return true\n}\n\nconst moveOneBall2 = (arr) => {\n  const len = arr.length\n  if (len === 1) {\n    return true\n  }\n  const last = arr[len - 1]\n  const lastIndex = arr.indexOf(last)\n  const lastIndexInArr = arr.indexOf(arr[lastIndex - 1])\n  if (lastIndex === lastIndexInArr) {\n    return false\n  }\n  const lastIndexInArrInArr = arr.indexOf(arr[lastIndexInArr - 1])\n  if (lastIndexInArr === lastIndexInArrInArr) {\n    return false\n  }\n  const lastIndexInArrInArrInArr = arr.indexOf(arr[lastIndexInArrInArr - 1])\n  if (lastIndexInArrInArr === lastIndexInArrInArrInArr) {\n    return false\n  }\n  const lastIndexInArrInArrInArrInArr = arr.indexOf(arr[lastIndexInArrInArrInArr - 1])\n  if (lastIndexInArrInArrInArr === lastIndexInArrInArrInArrInArr) {\n    return false\n  }\n  return true\n}\n\nconst moveOneBall3 = (arr) => {\n  const len = arr.length\n  if (len === 1) {\n    return true\n  }\n  const last = arr[len - 1]\n  const lastIndex = arr.indexOf(last)\n  const lastIndexInArr = arr.indexOf(arr[lastIndex - 1])\n  if (lastIndex === lastIndexInArr) {\n    return false\n  }\n  const lastIndexInArrInArr = arr.indexOf(arr[lastIndexInArr - 1])\n  if (lastIndexInArr === lastIndexInArrInArr) {\n    return false\n  }\n  const lastIndexInArrInArrInArr = arr.indexOf(arr[lastIndexInArrInArr - 1])\n  if (lastIndexInArrInArr === lastIndexInArrInArrInArr) {\n    return false\n  }\n  const lastIndexInArrInArrInArrInArr = arr.indexOf(arr[lastIndexInArrInArrInArr - 1])\n  if (lastIndexInArrInArrInArr === lastIndexInArrInArrInArrInArr) {\n    return false\n  }\n  return true\n}\n\nconst moveOneBall4 = (arr) => {\n  const len = arr.length\n  if (len === 1) {\n    return true\n  }\n  const last = arr[len - 1]\n  const lastIndex = arr.indexOf(last)\n  const lastIndexInArr = arr.indexOf(arr[lastIndex - 1])\n  if (lastIndex === lastIndexInArr) {\n    return false\n  }\n  const lastIndexInArrInArr = arr.indexOf(arr[lastIndexInArr - 1])\n  if (lastIndexInArr === lastIndexInArrInArr) {\n    return false\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let aStr = a.toString();\n  let bStr = b.toString();\n  let str = '';\n  for (let i = 0; i < aStr.length; i++) {\n    str += (aStr[i] === bStr[i])? '1' : '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let aStr = a.toString();\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*IN ThIS probLeM, YOU will IMplemEnt a FuNctiOn that takES tWO lIstS oF nUmBerS,\n  anD DEteRMInEs whetHEr it is pOSsIblE TO PerFOrm AN exchange OF eLEmEnTs\n  betwEeN tHem tO MAKE lst1 a list OF only even nUMberS.\n  There is No lImit On The NUmber OF eXcHanged ElEmentS BetweEn lst1 anD lst2.\n  If It is POssIBle to exchange elEmENts bEtWEeN the lst1 ANd lst2 to mAKe\n  all the ElemEnts oF lst1 to bE EVeN, return \"YES\".\n  OtHerWiSE, return \"no\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*IN ThIS probLeM, YOU will IMplemEnt a FuNctiOn that takES tWO lIstS oF nUmBerS,\n  anD DEteRMInEs whetHEr it is pOSsIblE TO PerFOrm AN exchange OF eLEmEnTs\n  betwEeN tHem tO MAKE lst1 a list OF only even nUMberS.\n  There is No lImit On The NUmber OF eXcHanged ElEmentS BetweEn lst1 anD lst2.\n  If It is POssIBle to exchange elEmENts bEtWEeN the lst1 ANd lst2 to mAKe\n  all the ElemEnts oF lst1 to bE EVeN, return \"YES\".\n  OtHerWiSE, return \"no\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let i = 0;\n  let j = 0;\n  while (i < lst1Length && j < lst2Length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 1) {\n      lst1[i] = lst2[j];\n      j++;\n    } else if (lst1[i] % 2 === 1 && lst2[j] % 2 === 0) {\n      lst1[i] = lst2[j];\n      i++;\n    } else if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      i++;\n      j++;\n    } else {\n      return 'NO';\n    }\n  }\n  while (i < lst1Length) {\n    lst1[i] = lst2[j];\n    i++;\n    j++;\n  }\n  while (j < lst2Length) {\n    lst1[i] = lst2[j];\n    i++;\n    j++;\n  }\n  return 'YES';\n};\n\nexports.exchange = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIVeN a StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*GIVeN a StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    count[letters[i]] = count[letters[i]] || 0\n    count[letters[i]] += 1\n  }\n  return count\n}\n\n/*\n  Given a string, return a new string with all the letters in lowercase.\n  Example:\n  toLowerCase('A B C') == 'abc'\n  toLowerCase('a b c') == 'abc'\n  toLowerCase('') == ''\n  toLowerCase('a b c d') == 'abc d'\n  toLowerCase('a b c d e') == 'abc d e'\n  toLowerCase('a b c d e f') == 'abc d e f'\n  toLowerCase('a b c d e f g') == 'abc d e f g'\n  toLowerCase('a b c d e f g h') == 'abc d e f g h'\n  toLowerCase('a b c d e f g h i') == 'abc d e f g h i'\n  toLowerCase('a b c d e f g h i j') == 'abc d e f g h i j'\n  toLowerCase('a b c d e f g h i j k') == 'abc d e f g h i j k'\n  toLowerCase('a b c d e f g h i j k l') == 'abc d e f g h i j k l'\n  toLowerCase('a b c d e f g h i j k l m') == 'abc d e f g h i j k l m'\n  toLowerCase('a b c d e f g h i j k l m n') == 'abc d e f g h i j k l m n'\n  toLowerCase('a b c d e f g h i j k l m n o') == 'abc d e f g h i j k l m n o'\n  toLowerCase('a b c d e f g h i j k l m n o p') == 'abc d e f g h i j k l m n o p'\n  toLowerCase('a b c d e f g h i j k l m n o p q') == 'abc d e f g h i j k l m n o p q'\n  toLowerCase('a b c d e f g h i j k l m n o p q r') == 'abc d e f g h i j k l m n o p q r'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s') == 'abc d e f g h i j k l m n o p q r s'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t') == 'abc d e f g h i j k l m n o p q r s t'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u') == 'abc d e f g h i j k l m n o p q r s t u'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v') == 'abc d e f g h i j k l m n o p q r s t u v'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w') == 'abc d e f g h i j k l m n o p q r s t u v w'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x') == 'abc d e f g h i j k l m n o p q r s t u v w x'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y') == 'abc d e f g h i j k l m n o p q r s t u v w x y'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'abc d e f g h i j k l m n o p q r s t u v w x y z'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y z a') == 'abc d e f g h i j k l m n o p q r s t u v w x y z a'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y z a b') == 'abc d e f g h i j k l m n o p q r s t u v w x y z a b'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c') == 'abc d e f g h i j k l m n o p q r s t u v w x y z a b c'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d') == 'abc d e f g h i j k l m n o p q r s t u v w x y z a b c d'\n  toLowerCase('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e') == 'abc d e f g h", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), false\n}\n\nconst reverseDelete2 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), true\n}\n\nconst reverseDelete3 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), false\n}\n\nconst reverseDelete4 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), true\n}\n\nconst reverseDelete5 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), false\n}\n\nconst reverseDelete6 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), true\n}\n\nconst reverseDelete7 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), false\n}\n\nconst reverseDelete8 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n    if (i === len) {\n      break\n    }\n    if (s[j] === c) {\n      j--\n    } else {\n      result.push(s[j])\n      j--\n    }\n  }\n  return result.join(''), true\n}\n\nconst reverseDelete9 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIVeN A list of stRiNGS, Where EAch stRing CoNsisTs of only dIGiTS, return a list.\n  eacH eLeMeNt i oF thE OUtpUT ShOuld be \"THe numbeR Of Odd ELEMenTS in thE\n  STRiNG i oF tHe inpuT.\" wHeRe alL THE i's ShOUld be replaCEd by The numbeR\n  of Odd dIgIts in THe i'th strINg Of The inpUt.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*GIVeN A list of stRiNGS, Where EAch stRing CoNsisTs of only dIGiTS, return a list.\n  eacH eLeMeNt i oF thE OUtpUT ShOuld be \"THe numbeR Of Odd ELEMenTS in thE\n  STRiNG i oF tHe inpuT.\" wHeRe alL THE i's ShOUld be replaCEd by The numbeR\n  of Odd dIgIts in THe i'th strINg Of The inpUt.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = Math.min(sum, 0);\n  const minSubArraySum = [];\n  for (let i = 0; i < nums.length; i++) {\n    const subSum = sum - nums[i];\n    if (subSum >= minSum) {\n      minSubArraySum.push(subSum);\n    }\n  }\n  return minSubArraySum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  yOu ARe givEn A RECtangULar grid of WellS. EAch rOw represeNTs A SiNglE wElL,\n  aNd eAch 1 in A ROw rEPReSents a SIngle unIT oF waTER.\n  eacH WelL HAS a COrReSpondiNg BuCket THAT CaN Be used to exTRact Water froM it, \n  And aLl BucKEts haVE tHe Same capacity.\n  YoUr Task iS To use The bUckEts tO EmpTY the welLs.\n  oUtpuT tHE nUmbeR Of timES you need To loWer thE bucKETs.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A RECtangULar grid of WellS. EAch rOw represeNTs A SiNglE wElL,\n  aNd eAch 1 in A ROw rEPReSents a SIngle unIT oF waTER.\n  eacH WelL HAS a COrReSpondiNg BuCket THAT CaN Be used to exTRact Water froM it, \n  And aLl BucKEts haVE tHe Same capacity.\n  YoUr Task iS To use The bUckEts tO EmpTY the welLs.\n  oUtpuT tHE nUmbeR Of timES you need To loWer thE bucKETs.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n + 1).fill(0);\n  const res = new Array(n + 1).fill(0);\n  const visited = new Array(n + 1).fill(false);\n  const visited_row = new Array(m + 1).fill(false);\n  const visited_col = new Array(n + 1).fill(false);\n  const row_visited = new Array(m + 1).fill(false);\n  const col_visited = new Array(n + 1).fill(false);\n  const row_visited_col = new Array(n + 1).fill(false);\n  const col_visited_row = new Array(n + 1).fill(false);\n  const row_visited_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_row = new Array(n + 1).fill(false);\n  const row_visited_col_col = new Array(n + 1).fill(false);\n  const col_visited_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col_col_col_col_col = new Array(n + 1).fill(false);\n  const row_visited_col_col_col_col_col_col_col_col_col_col_row = new Array(n + 1).fill(false);\n  const col_visited_col_col_col_col_col_col_col_col_col_col_col = new Array(n + 1).fill", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal2 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal3 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal4 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal5 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal6 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal7 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal8 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal9 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal10 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal11 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal12 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal13 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal14 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal15 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal16 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal17 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal18 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal19 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal20 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal21 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal22 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal23 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal24 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal25 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal26 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal27 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal28 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal29 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal30 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayByDecimal31 = (arr) => {\n  const sorted = arr.slice().sort((a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\n  GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const word = words[i]\n    if (word.length > 0) {\n      result.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOU aRE giveN a word. yOUR task IS to fiNd thE cLoseSt vowel thAT sTAnDs bEtWeEn \n  Two ConSONanTS FrOm the rIGht side OF tHe word (cASE SenSItiVE).\n  \n  vOwELs in ThE beginNiNg And eNDING dOEsn't count. RETurn Empty strIng If yoU dIdn'T\n  Find aNY vOwEl met tHe Above COnditIon. \n\n  YOu mAy asSUme THat the gIvEN strInG CoNtaiNS EnglISh letter Only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a word. yOUR task IS to fiNd thE cLoseSt vowel thAT sTAnDs bEtWeEn \n  Two ConSONanTS FrOm the rIGht side OF tHe word (cASE SenSItiVE).\n  \n  vOwELs in ThE beginNiNg And eNDING dOEsn't count. RETurn Empty strIng If yoU dIdn'T\n  Find aNY vOwEl met tHe Above COnditIon. \n\n  YOu mAy asSUme THat the gIvEN strInG CoNtaiNS EnglISh letter Only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '';\n  let vowelLength = 0;\n  let vowelCount = 0;\n  let vowelIndex = 0;\n  let vowelIndexLength = 0;\n  let vowelIndexCount = 0;\n  let vowelIndexLengthCount = 0;\n  let vowelIndexLengthCountLength = 0;\n  let vowelIndexLengthCountLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let vowelIndexLengthCountLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthlength<br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br>\n  //  <br", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const [first, second] = lst\n  if (first === '(' && second === ')') return 'Yes'\n  if (first === '(' && second === ')') return 'No'\n  if (first === '(') return 'No'\n  if (second === ')') return 'No'\n  return 'No'\n}\n\n/*\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens([')', ')']) == 'No'\n  matchParens", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* oUt OF list of strings, return thE longest oNE. rEturn THe firSt onE in cAse oF multiple\n  strings OF tHE sAme LeNgTh. retUrn NULl in cASE tHe inpuT list Is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* oUt OF list of strings, return thE longest oNE. rEturn THe firSt onE in cAse oF multiple\n  strings OF tHE sAme LeNgTh. retUrn NULl in cASE tHe inpuT list Is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  gIvEN an arRaY arr OF IntegERs and A posItIve iNteger k, return a soRTeD list \n  Of LenGtH k wItH thE maximum k nuMBErs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY arr OF IntegERs and A posItIve iNteger k, return a soRTeD list \n  Of LenGtH k wItH thE maximum k nuMBErs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const maxCount = 1\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      maxCount = 1\n    } else if (arr[i] === max) {\n      maxCount++\n    }\n  }\n\n  const result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[maxIndex - i - 1])\n  }\n\n  return result\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIVeN A non-eMpTY list OF inteGErs, return thE sum Of All oF the odd elEMeNTs ThaT aRe in EvEn pOsiTIOns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*GIVeN A non-eMpTY list OF inteGErs, return thE sum Of All oF the odd elEMeNTs ThaT aRe in EvEn pOsiTIOns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatzSorted = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  const oddCollatz = getOddCollatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nconst getOddCollatzSorted8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*YOU hAVe to wRiTE A FunctIOn whiCh vaLiDateS a given date stRInG AnD\n  reTuRnS tRue If tHE date Is vALId OtherwISe false.\n  tHe date Is vALID if ALl oF THE fOLlOwIng rulEs ArE satISFIEd:\n  1. tHe date string is NOt emPty.\n  2. The nuMbeR of dAyS is NOt lesS ThAn 1 Or highEr Than 31 dAYs for MontHs 1,3,5,7,8,10,12. ANd thE NumBEr of dayS iS Not lEsS ThAn 1 or HIgher THan 30 days fOr moNths 4,6,9,11. ANd, thE NUmBer of dAys Is NOT Less thAn 1 or higHer thaN 29 for thE MOnth 2.\n  3. The MoNThs shouLD not bE LESs thAN 1 Or HigheR tHAN 12.\n  4. tHE date sHould be in the forMat: MM-dD-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*YOU hAVe to wRiTE A FunctIOn whiCh vaLiDateS a given date stRInG AnD\n  reTuRnS tRue If tHE date Is vALId OtherwISe false.\n  tHe date Is vALID if ALl oF THE fOLlOwIng rulEs ArE satISFIEd:\n  1. tHe date string is NOt emPty.\n  2. The nuMbeR of dAyS is NOt lesS ThAn 1 Or highEr Than 31 dAYs for MontHs 1,3,5,7,8,10,12. ANd thE NumBEr of dayS iS Not lEsS ThAn 1 or HIgher THan 30 days fOr moNths 4,6,9,11. ANd, thE NUmBer of dAys Is NOT Less thAn 1 or higHer thaN 29 for thE MOnth 2.\n  3. The MoNThs shouLD not bE LESs thAN 1 Or HigheR tHAN 12.\n  4. tHE date sHould be in the forMat: MM-dD-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (typeof date!=='string') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n    if (year % 4 === 0) {\n      if (day > 28) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* gIvEN a strInG OF Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1, ... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* gIvEN a strInG OF Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1,... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsWithOddOrder = words.map((word) => {\n    const letters = word.split('');\n    const oddLetters = letters.filter((letter) => letter.charCodeAt(0) % 2 === 1);\n    return oddLetters.join('');\n  });\n  return wordsWithOddOrder;\n};\n\n/* gIvEN a strInG Of Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1,... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithOddOrder = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsWithOddOrder = words.map((word) => {\n    const letters = word.split('');\n    const oddLetters = letters.filter((letter) => letter.charCodeAt(0) % 2 === 1);\n    return oddLetters.join('');\n  });\n  return wordsWithOddOrder;\n};\n\nconst splitWordsWithOddOrderAndCase = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsWithOddOrder = words.map((word) => {\n    const letters = word.split('');\n    const oddLetters = letters.filter((letter) => letter.charCodeAt(0) % 2 === 1);\n    const oddLettersWithCase = oddLetters.map((letter) => letter.toUpperCase());\n    return oddLettersWithCase.join('');\n  });\n  return wordsWithOddOrder;\n};\n\nconst splitWordsWithOddOrderAndCaseAndPunctuation = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsWithOddOrder = words.map((word) => {\n    const letters = word.split('');\n    const oddLetters = letters.filter((letter) => letter.charCodeAt(0) % 2 === 1);\n    const oddLettersWithCase = oddLetters.map((letter) => letter.toUpperCase());\n    const oddLettersWithPunctuation = oddLetters.map((letter) => {\n      const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '+', '%', '*', '/', '^', '&', '|', '~', '=', '@', '$', '#', '{', '}', '<', '>', '\\\\', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'', '\"', '\\'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOU aRE giveN tWO INtervALs,\n  wheRe eaCh InteRval is a paIR oF InTegErS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN tWO INtervALs,\n  wheRe eaCh InteRval is a paIR oF InTegErS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  gIvEN a grid witH N ROWS and N COlumnS (N >= 2) anD a PosiTive integER k, \n  eACh CelL oF tHe grid ConTaiNS A vaLUE. EVery inTEger in the RAnGe [1, N * n]\n  INCluSIve APPEaRS eXaCtly onCe On The cELLS Of THe grid.\n\n  You have tO Find The minimUm pAth oF lEngTH k in the grid. YOU cAn Start\n  fRoM any cELl, and in Each SteP you CAn mOVe to any Of THe neIgHBoR celLS,\n  in otheR Words, you Can gO to ceLls wHICh Share aN edGe WITH you cuRrent\n  ceLl.\n  PleaSe note THAt a path Of LEngth k meANs visITINg exACTlY k cellS (nOT\n  NECEsSarily distincT).\n  YoU cAnNOT Go oFf ThE grid.\n  a paTh A (oF length k) is cOnsIderEd LesS thAn a path B (of lEngth k) IF\n  AfteR makIng tHe OrDered LisTs of tHe valUEs oN the cElLs THAt a aNd b GO\n  throUGh (lET's CaLl thEm LsT_A AND LSt_B), lsT_a is leXicogRAPhically LESS\n  tHaN lst_b, in OtHER wordS, TheRe exiST an iNTeger iNdex i (1 <= i <= k)\n  sUch THAT lSt_a[I] < lst_B[I] And foR aNy j (1 <= j < i) we HavE\n  lsT_A[j] = lsT_b[j].\n  IT iS guaRaNteeD tHat The aNsweR IS unIque.\n  RetUrN An ORDeReD list oF the ValueS oN the ceLls thaT THE MInImuM paTh GO tHRoUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a grid witH N ROWS and N COlumnS (N >= 2) anD a PosiTive integER k, \n  eACh CelL oF tHe grid ConTaiNS A vaLUE. EVery inTEger in the RAnGe [1, N * n]\n  INCluSIve APPEaRS eXaCtly onCe On The cELLS Of THe grid.\n\n  You have tO Find The minimUm pAth oF lEngTH k in the grid. YOU cAn Start\n  fRoM any cELl, and in Each SteP you CAn mOVe to any Of THe neIgHBoR celLS,\n  in otheR Words, you Can gO to ceLls wHICh Share aN edGe WITH you cuRrent\n  ceLl.\n  PleaSe note THAt a path Of LEngth k meANs visITINg exACTlY k cellS (nOT\n  NECEsSarily distincT).\n  YoU cAnNOT Go oFf ThE grid.\n  a paTh A (oF length k) is cOnsIderEd LesS thAn a path B (of lEngth k) IF\n  AfteR makIng tHe OrDered LisTs of tHe valUEs oN the cElLs THAt a aNd b GO\n  throUGh (lET's CaLl thEm LsT_A AND LSt_B), lsT_a is leXicogRAPhically LESS\n  tHaN lst_b, in OtHER wordS, TheRe exiST an iNTeger iNdex i (1 <= i <= k)\n  sUch THAT lSt_a[I] < lst_B[I] And foR aNy j (1 <= j < i) we HavE\n  lsT_A[j] = lsT_b[j].\n  IT iS guaRaNteeD tHat The aNsweR IS unIque.\n  RetUrN An ORDeReD list oF the ValueS oN the ceLls thaT THE MInImuM paTh GO tHRoUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [n, m] = grid[0].length;\n  const [l, r] = [0, n * m - 1];\n  const [lst_a, lst_b] = [0, n * m - 1];\n  const [lst_A, lst_B] = [0, n * m - 1];\n  const [lst_A_i, lst_B_i] = [0, n * m - 1];\n  const [lst_A_j, lst_B_j] = [0, n * m - 1];\n  const [lst_A_k, lst_B_k] = [0, n * m - 1];\n  const [lst_A_l, lst_B_l] = [0, n * m - 1];\n  const [lst_A_m, lst_B_m] = [0, n * m - 1];\n  const [lst_A_n, lst_B_n] = [0, n * m - 1];\n  const [lst_A_o, lst_B_o] = [0, n * m - 1];\n  const [lst_A_p, lst_B_p] = [0, n * m - 1];\n  const [lst_A_q, lst_B_q] = [0, n * m - 1];\n  const [lst_A_r, lst_B_r] = [0, n * m - 1];\n  const [lst_A_s, lst_B_s] = [0, n * m - 1];\n  const [lst_A_t, lst_B_t] = [0, n * m - 1];\n  const [lst_A_u, lst_B_u] = [0, n * m - 1];\n  const [lst_A_v, lst_B_v] = [0, n * m - 1];\n  const [lst_A_w, lst_B_w] = [0, n * m - 1];\n  const [lst_A_x, lst_B_x] = [0, n * m - 1];\n  const [lst_A_y, lst_B_y] = [0, n * m - 1];\n  const [lst_A_z, lst_B_z] = [0, n * m - 1];\n  const [lst_A_A, lst_B_A] = [0, n * m - 1];\n  const [lst_A_B, lst_B_B] = [0, n * m - 1];\n  const [lst_A_C, lst_B_C] = [0, n * m - 1];\n  const [lst_A_D, lst_B_D] = [0, n * m - 1];\n  const [lst_A_E, lst_B_E] = [0, n * m - 1];\n  const [lst_A_F, lst_B_F] = [0, n * m - 1];\n  const [lst_A_G, lst_B_G] = [0, n * m - 1];\n  const [lst_A_H, lst_B_H] = [0, n * m - 1];\n  const [lst_A_I, lst_B_I] = [0, n * m - 1];\n  const [lst_A_J, lst_B_J] = [0, n * m - 1];\n  const [lst_A_K, lst_B_K] = [0, n * m - 1];\n  const [lst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* rEtURn a greAtEST CommoN DivisOr of TwO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* rEtURn a greAtEST CommoN DivisOr of TwO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a < b) {\n    return greatestCommonDivisor(a, b);\n  }\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVErYOne knOwS fIBonacCI sequEnce, It Was sTudied deePLy BY mAthEmAtIcIanS in \n  thE LAst COUpLe centURies. HowEVeR, whAT PEopLE doN'T KNoW Is trIbonacCi SeQuenCE.\n  tRIbONacci sequeNCe is Defined bY thE recUrRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is EVeN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*EVErYOne knOwS fIBonacCI sequEnce, It Was sTudied deePLy BY mAthEmAtIcIanS in \n  thE LAst COUpLe centURies. HowEVeR, whAT PEopLE doN'T KNoW Is trIbonacCi SeQuenCE.\n  tRIbONacci sequeNCe is Defined bY thE recUrRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is EVeN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1]\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + (i / 2))\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst evenDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst oddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst evenOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst evenOddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst oddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst oddOddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst evenOddOddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst oddOddOddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst evenOddOddOddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 23\n  */\nconst oddOddOddOddOddDigits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % 2 === 0)? n / 2 : n * 3 + 1\n}\n\n/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Even digits.\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isNested = (string) => {\n  let isNested = true;\n  let brackets = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      brackets++;\n    } else if (string[i] === ']') {\n      brackets--;\n    }\n    if (brackets === 0) {\n      isNested = false;\n      break;\n    }\n    i++;\n  }\n  return isNested;\n};\n\n/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isValidSubsequence = (string) => {\n  let isValidSubsequence = true;\n  let brackets = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      brackets++;\n    } else if (string[i] === ']') {\n      brackets--;\n    }\n    if (brackets < 0) {\n      isValidSubsequence = false;\n      break;\n    }\n    i++;\n  }\n  return isValidSubsequence;\n};\n\n/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isValidBracket = (string) => {\n  let isValidBracket = true;\n  let brackets = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      brackets++;\n    } else if (string[i] === ']') {\n      brackets--;\n    }\n    if (brackets < 0) {\n      isValidBracket = false;\n      break;\n    }\n    i++;\n  }\n  return isValidBracket;\n};\n\n/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isValidBracketAndNested = (string) => {\n  let isValidBracketAndNested = true;\n  let brackets = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      brackets++;\n    } else if (string[i] === ']') {\n      brackets--;\n    }\n    if (brackets < 0) {\n      isValidBracketAndNested = false;\n      break;\n    }\n    if (isNested(string.substring(i, i + 2))) {\n      i += 2;\n    } else {\n      isValidBracketAndNested = false;\n      break;\n    }\n  }\n  return isValidBracketAndNested;\n};\n\n/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ Fa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*YOU aRE giveN a list OF NUmberS.\n  you neEd to return ThE sum Of squared NUmBErS in thE gIvEn list,\n  RouNd eACH elEMEnT in the list to THe upper int(Ceiling) FIrSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a list OF NUmberS.\n  you neEd to return ThE sum Of squared NUmBErS in thE gIvEn list,\n  RouNd eACH elEMEnT in the list to THe upper int(Ceiling) FIrSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares23 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares24 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLast", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CREaTE a funCtION Which REturnS the LaRgesT index of aN ElEMeNt wHiCh\n  Is Not GreATEr tHAN oR equal TO the eleMEnT imMEDIatELy pRECEdINg It. if\n  no suCh ElEmenT EXIStS Then return -1. The givEN arrAy will noT coNtaiN\n  dUplICate vALuEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*CREaTE a funCtION Which REturnS the LaRgesT index of aN ElEMeNt wHiCh\n  Is Not GreATEr tHAN oR equal TO the eleMEnT imMEDIatELy pRECEdINg It. if\n  no suCh ElEmenT EXIStS Then return -1. The givEN arrAy will noT coNtaiN\n  dUplICate vALuEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let result = -1;\n  let index = 0;\n  let max = arr.length - 1;\n  while (index <= max) {\n    if (arr[index] === arr[index + 1]) {\n      index++;\n    } else {\n      result = index;\n      break;\n    }\n  }\n  return result;\n};\n\nexport default canArrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* cReATe a funCtION That rETurns a tuple (a, b), WherE 'a' iS\n  the Largest of NEgATiVe iNtEgErS, anD 'b' is THE smALLeSt\n  of poSItive inTEgErs in a list.\n  iF THerE Is nO NEGaTIvE oR positIvE iNtegERS, return THeM As null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* cReATe a funCtION That rETurns a tuple (a, b), WherE 'a' iS\n  the Largest of NEgATiVe iNtEgErS, anD 'b' is THE smALLeSt\n  of poSItive inTEgErs in a list.\n  iF THerE Is nO NEGaTIvE oR positIvE iNtegERS, return THeM As null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null)\n  }\n  const max = lst.reduce((a, b) => a > b? a : b, 0)\n  const min = lst.reduce((a, b) => a < b? a : b, 0)\n  if (max === min) {\n    return (null, null)\n  }\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max, min)\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const [max, min] = largestSmallestIntegers(lst)\n  return (max,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ Null\n  */\nCOnsT compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ Null\n  */\nCOnsT compareOne = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare2 = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare3 = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare4 = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare5 = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare6 = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n}\n\nconst compare7 = (a, b) => {\n  if (a === b) return a\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() - b.getTime()\n  }\n  if (a instanceof Date) {\n    return a.getTime()\n  }\n  if (b instanceof Date) {\n    return b.getTime()\n  }\n  return null\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n % 2 === 0)\n}\n\n/*\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  return (n % 2!== 0)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  return (isEqualToSumEven(n) || isEqualToSumOdd(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOdd(4) == false\n  isEqualToSumEvenOrOdd(6) == true\n  isEqualToSumEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  return (isEqualToSumEvenOrOdd(n) || isEqualToSumEven(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEven(4) == false\n  isEqualToSumEvenOrOddOrEven(6) == true\n  isEqualToSumEvenOrOddOrEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOdd(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOdd(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEven = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrOdd(n) || isEqualToSumEvenOrOddOrEven(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOddOrEven(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOddOrEven(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOddOrEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrOdd(n) || isEqualToSumEvenOrOddOrEven(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrOdd(n) || isEqualToSumEvenOrOddOrEven(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOddOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrOdd(n) || isEqualToSumEvenOrOddOrOdd(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOddOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrOdd(n) || isEqualToSumEvenOrOddOrOdd(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOddOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrOdd(n) || isEqualToSumEvenOrOddOrOdd(n))\n}\n\n/*\n  Example\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(4) == false\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(6) == true\n  isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrOddOrOdd = (n) => {\n  return (isEqualToSumEvenOrOddOrEvenOrO", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial2(n - 1) * specialFactorial2(n - 2) * specialFactorial2(n - 3) * specialFactorial2(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial3(n - 1) * specialFactorial3(n - 2) * specialFactorial3(n - 3) * specialFactorial3(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial4(n - 1) * specialFactorial4(n - 2) * specialFactorial4(n - 3) * specialFactorial4(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial5(n - 1) * specialFactorial5(n - 2) * specialFactorial5(n - 3) * specialFactorial5(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial6(n - 1) * specialFactorial6(n - 2) * specialFactorial6(n - 3) * specialFactorial6(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial7(n - 1) * specialFactorial7(n - 2) * specialFactorial7(n - 3) * specialFactorial7(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial8(n - 1) * specialFactorial8(n - 2) * specialFactorial8(n - 3) * specialFactorial8(n - 4);\n};\n\n/*\n  THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let index = 0\n  while (index < string.length) {\n    const prefix = string.substring(index, index + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    index++\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getSpaces = (text) => {\n  return text.replace(/\\s+/g, '')\n}\n\nconst getSpacesCount = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount2 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount3 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount4 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount5 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount6 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount7 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount8 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount9 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount10 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount11 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount12 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount13 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount14 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount15 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount16 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount17 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount18 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount19 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount20 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount21 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount22 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount23 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount24 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount25 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount26 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount27 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount28 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount29 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount30 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount31 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount32 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount33 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount34 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount35 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount36 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount37 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount38 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount39 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount40 = (text) => {\n  return text.replace(/\\s+/g, '').length\n}\n\nconst getSpacesCount41 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*CREaTE a funcTiON WHich tAKes a stRing RePresEnting a filE'S nAMe, And ReTuRnS\n  'YeS' if THE thE FIlE's name IS valid, aND rEtuRNS 'no' oTHerWISE.\n  A FIlE's Name is CoNsIderED TO Be VAlid if and oNLy if All the foLloWing CoNdiTIons \n  aRE mEt:\n  - there sHoUld noT Be morE thaN thRee dIGitS ('0'-'9') in The file'S nAMe.\n  - ThE fILe'S namE ContaINs exactlY one Dot '.'\n  - ThE subSTRiNg befoRe tHe DOT Should Not be emPty, and It starTS With a letTeR From \n  the LAtin aLPHApet ('a'-'z' AND 'A'-'z').\n  - The sUbSTRING aFter the dot shoUld BE oNe of TheSe: ['TxT', 'Exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*CREaTE a funcTiON WHich tAKes a stRing RePresEnting a filE'S nAMe, And ReTuRnS\n  'YeS' if THE thE FIlE's name IS valid, aND rEtuRNS 'no' oTHerWISE.\n  A FIlE's Name is CoNsIderED TO Be VAlid if and oNLy if All the foLloWing CoNdiTIons \n  aRE mEt:\n  - there sHoUld noT Be morE thaN thRee dIGitS ('0'-'9') in The file'S nAMe.\n  - ThE fILe'S namE ContaINs exactlY one Dot '.'\n  - ThE subSTRiNg befoRe tHe DOT Should Not be emPty, and It starTS With a letTeR From \n  the LAtin aLPHApet ('a'-'z' AND 'A'-'z').\n  - The sUbSTRING aFter the dot shoUld BE oNe of TheSe: ['TxT', 'Exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_2 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_3 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_4 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_5 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_6 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_7 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_8 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_9 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_10 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_11 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_12 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_13 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_14 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_15 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_16 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_17 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_18 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_19 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_20 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_21 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_22 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_23 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_24 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_25 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_26 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_27 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_28 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex_error_29 = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const file_name_regex", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  tHiS FunctIoN WILl takE A list of inTegeRs. for aLl entries in THe list, THe FunCtIoN sHalL sqUARe tHE InTeger eNTry if itS InDex IS A \n  MulTIplE OF 3 AnD WiLl Cube thE iNtEger ENTRY iF Its index is A MultIple of 4 anD noT a muLtIplE Of 3. The FUnCtIon wilL nOt \n  chaNGe the EntrIes in The list wHOse INdexes aRe NOt a mUlTIpLe of 3 OR 4. The fUNction shAll tHen return thE sum OF AlL entriEs. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  tHiS FunctIoN WILl takE A list of inTegeRs. for aLl entries in THe list, THe FunCtIoN sHalL sqUARe tHE InTeger eNTry if itS InDex IS A \n  MulTIplE OF 3 AnD WiLl Cube thE iNtEger ENTRY iF Its index is A MultIple of 4 anD noT a muLtIplE Of 3. The FUnCtIon wilL nOt \n  chaNGe the EntrIes in The list wHOse INdexes aRe NOt a mUlTIpLe of 3 OR 4. The fUNction shAll tHen return thE sum OF AlL entriEs. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordsLength = words.length\n  const wordLength = words[0].length\n  const word = words[0]\n  const wordIndex = 0\n  const wordIndexLength = wordIndex.length\n  const wordIndexLengthMinusOne = wordIndexLength - 1\n  const wordIndexLengthMinusTwo = wordIndexLength - 2\n  const wordIndexLengthMinusThree = wordIndexLength - 3\n  const wordIndexLengthMinusFour = wordIndexLength - 4\n  const wordIndexLengthMinusFive = wordIndexLength - 5\n  const wordIndexLengthMinusSix = wordIndexLength - 6\n  const wordIndexLengthMinusSeven = wordIndexLength - 7\n  const wordIndexLengthMinusEight = wordIndexLength - 8\n  const wordIndexLengthMinusNine = wordIndexLength - 9\n  const wordIndexLengthMinusTen = wordIndexLength - 10\n  const wordIndexLengthMinusEleven = wordIndexLength - 11\n  const wordIndexLengthMinusTwelve = wordIndexLength - 12\n  const wordIndexLengthMinusThirteen = wordIndexLength - 13\n  const wordIndexLengthMinusFourteen = wordIndexLength - 14\n  const wordIndexLengthMinusFifteen = wordIndexLength - 15\n  const wordIndexLengthMinusSixteen = wordIndexLength - 16\n  const wordIndexLengthMinusSeventeen = wordIndexLength - 17\n  const wordIndexLengthMinusEighteen = wordIndexLength - 18\n  const wordIndexLengthMinusNineteen = wordIndexLength - 19\n  const wordIndexLengthMinusTwenty = wordIndexLength - 20\n  const wordIndexLengthMinusTwentyOne = wordIndexLength - 21\n  const wordIndexLengthMinusTwentyTwo = wordIndexLength - 22\n  const wordIndexLengthMinusTwentyThree = wordIndexLength - 23\n  const wordIndexLengthMinusTwentyFour = wordIndexLength - 24\n  const wordIndexLengthMinusTwentyFive = wordIndexLength - 25\n  const wordIndexLengthMinusTwentySix = wordIndexLength - 26\n  const wordIndexLengthMinusTwentySeven = wordIndexLength - 27\n  const wordIndexLengthMinusTwentyEight = wordIndexLength - 28\n  const wordIndexLengthMinusTwentyNine = wordIndexLength - 29\n  const wordIndexLengthMinusThirty = wordIndexLength - 30\n  const wordIndexLengthMinusThirtyOne = wordIndexLength - 31\n  const wordIndexLengthMinusThirtyTwo = wordIndexLength - 32\n  const wordIndexLengthMinusThirtyThree = wordIndexLength - 33\n  const wordIndexLengthMinusThirtyFour = wordIndexLength - 34\n  const wordIndexLengthMinusThirtyFive = wordIndexLength - 35\n  const wordIndexLengthMinusThirtySix = wordIndexLength - 36\n  const wordIndexLengthMinusThirtySeven = wordIndexLength - 37\n  const wordIndexLengthMinusThirtyEight = wordIndexLength - 38\n  const wordIndexLengthMinusThirtyNine = wordIndexLength - 39\n  const wordIndexLengthMinusForty = wordIndexLength - 40\n  const wordIndexLengthMinusFortyOne = wordIndexLength - 41\n  const wordIndexLengthMinusFortyTwo = wordIndexLength - 42\n  const wordIndexLengthMinusFortyThree = wordIndexLength - 43\n  const wordIndexLengthMinusFortyFour = wordIndexLength - 44\n  const wordIndexLengthMinusFortyFive = wordIndexLength - 45\n  const wordIndexLengthMinusFortySix = wordIndexLength - 46\n  const wordIndexLengthMinusFortySeven = wordIndexLength - 47\n  const wordIndexLengthMinusFortyEight = wordIndexLength - 48\n  const wordIndexLengthMinusFortyNine = wordIndexLength - 49\n  const wordIndexLengthMinusFifty = wordIndexLength - 50\n  const wordIndexLengthMinusFiftyOne = wordIndexLength - 51\n  const wordIndexLengthMinusFiftyTwo = wordIndexLength - 52\n  const wordIndexLengthMinusFiftyThree = wordIndexLength - 53\n  const wordIndexLengthMinusFiftyFour = wordIndexLength - 54\n  const wordIndexLengthMinusFiftyFive = wordIndexLength - 55\n  const wordIndexLengthMinusFiftySix = wordIndexLength - 56\n  const wordIndexLengthMinusFiftySeven = wordIndexLength - 57\n  const wordIndexLengthMinusFiftyEight = wordIndexLength - 58\n  const wordIndexLengthMinusFiftyNine = wordIndexLength - 59\n  const wordIndexLengthMinusSixty = wordIndexLength - 60\n  const wordIndexLengthMinusSixtyOne = wordIndexLength - 61\n  const wordIndexLengthMinusSixtyTwo = wordIndexLength - 62\n  const wordIndexLengthMinusSixtyThree = wordIndexLength - 63\n  const wordIndexLengthMinusSixtyFour = wordIndexLength - 64\n  const wordIndexLengthMinusSixtyFive = wordIndexLength - 65\n  const wordIndexLengthMinusSixtySix = wordIndexLength - 66\n  const wordIndexLengthMinusSixtySeven = wordIndexLength - 67\n  const wordIndexLengthMinusSixtyEight = wordIndexLength - 68\n  const wordIndexLengthMinusSixtyNine = wordIndexLength - 69\n  const wordIndexLengthMinusSeventy = wordIndexLength - 70\n  const wordIndexLengthMinusSeventyOne = wordIndexLength - 71\n  const wordIndexLengthMinusSeventyTwo = wordIndexLength - 72\n  const wordIndexLengthMinusSeventyThree = wordIndexLength - 73\n  const wordIndexLengthMinusSeventyFour = wordIndexLength - 74\n  const wordIndexLengthMinusSeventyFive = wordIndexLength - 75\n  const wordIndexLengthMinusSeventySix = wordIndexLength - 76\n  const wordIndexLengthMinusSeventySeven = wordIndexLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*YOUr TAsk is To IMPLemenT a FunctIon tHaT wilL simplify the expreSSiON\n  x * n. THe fUnCtIoN reTurNS TruE IF x * n eValuatES to a wholE NuMbeR AND faLSe\n  oTHERwISe. boTh x and n, aRe StRing REPREsENtation of a fRActiOn, and havE thE folLoWinG FormaT,\n  <NuMeRator>/<dEnOminaTOr> wheRe boTh nUmerATor ANd denomInATor aRe POsItivE Whole NUmbers.\n\n  YoU can AssumE thaT x, ANd n Are valId fRaCTIOns, and Do not haVe zero As denoMINator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*YOUr TAsk is To IMPLemenT a FunctIon tHaT wilL simplify the expreSSiON\n  x * n. THe fUnCtIoN reTurNS TruE IF x * n eValuatES to a wholE NuMbeR AND faLSe\n  oTHERwISe. boTh x and n, aRe StRing REPREsENtation of a fRActiOn, and havE thE folLoWinG FormaT,\n  <NuMeRator>/<dEnOminaTOr> wheRe boTh nUmerATor ANd denomInATor aRe POsItivE Whole NUmbers.\n\n  YoU can AssumE thaT x, ANd n Are valId fRaCTIOns, and Do not haVe zero As denoMINator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconsT simplify = (x, n) => {\n  if (x === n) {\n    return true\n  }\n  if (x === 0) {\n    return false\n  }\n  if (x === 1) {\n    return true\n  }\n  if (x === -1) {\n    return false\n  }\n  if (x === 2) {\n    return true\n  }\n  if (x === -2) {\n    return false\n  }\n  if (x === 3) {\n    return true\n  }\n  if (x === -3) {\n    return false\n  }\n  if (x === 4) {\n    return true\n  }\n  if (x === -4) {\n    return false\n  }\n  if (x === 5) {\n    return true\n  }\n  if (x === -5) {\n    return false\n  }\n  if (x === 6) {\n    return true\n  }\n  if (x === -6) {\n    return false\n  }\n  if (x === 7) {\n    return true\n  }\n  if (x === -7) {\n    return false\n  }\n  if (x === 8) {\n    return true\n  }\n  if (x === -8) {\n    return false\n  }\n  if (x === 9) {\n    return true\n  }\n  if (x === -9) {\n    return false\n  }\n  if (x === 10) {\n    return true\n  }\n  if (x === -10) {\n    return false\n  }\n  if (x === 11) {\n    return true\n  }\n  if (x === -11) {\n    return false\n  }\n  if (x === 12) {\n    return true\n  }\n  if (x === -12) {\n    return false\n  }\n  if (x === 13) {\n    return true\n  }\n  if (x === -13) {\n    return false\n  }\n  if (x === 14) {\n    return true\n  }\n  if (x === -14) {\n    return false\n  }\n  if (x === 15) {\n    return true\n  }\n  if (x === -15) {\n    return false\n  }\n  if (x === 16) {\n    return true\n  }\n  if (x === -16) {\n    return false\n  }\n  if (x === 17) {\n    return true\n  }\n  if (x === -17) {\n    return false\n  }\n  if (x === 18) {\n    return true\n  }\n  if (x === -18) {\n    return false\n  }\n  if (x === 19) {\n    return true\n  }\n  if (x === -19) {\n    return false\n  }\n  if (x === 20) {\n    return true\n  }\n  if (x === -20) {\n    return false\n  }\n  if (x === 21) {\n    return true\n  }\n  if (x === -21) {\n    return false\n  }\n  if (x === 22) {\n    return true\n  }\n  if (x === -22) {\n    return false\n  }\n  if (x === 23) {\n    return true\n  }\n  if (x === -23) {\n    return false\n  }\n  if (x === 24) {\n    return true\n  }\n  if (x === -24) {\n    return false\n  }\n  if (x === 25) {\n    return true\n  }\n  if (x === -25) {\n    return false\n  }\n  if (x === 26) {\n    return true\n  }\n  if (x === -26) {\n    return false\n  }\n  if (x === 27) {\n    return true\n  }\n  if (x === -27) {\n    return false\n  }\n  if (x === 28) {\n    return true\n  }\n  if (x === -28) {\n    return false\n  }\n  if (x === 29) {\n    return true\n  }\n  if (x === -29) {\n    return false\n  }\n  if (x === 30) {\n    return true\n  }\n  if (x === -30) {\n    return false\n  }\n  if (x === 31) {\n    return true\n  }\n  if (x === -31) {\n    return false\n  }\n  if (x === 32) {\n    return true\n  }\n  if (x === -32) {\n    return false\n  }\n  if (x === 33) {\n    return true\n  }\n  if (x === -33) {\n    return false\n  }\n  if (x === 34) {\n    return true\n  }\n  if (x === -34) {\n    return false\n  }\n  if (x === 35) {\n    return true\n  }\n  if (x === -35) {\n    return false\n  }\n  if (x === 36) {\n    return true\n  }\n  if (x === -36) {\n    return false\n  }\n  if (x === 37) {\n    return true\n  }\n  if (x === -37) {\n    return false\n  }\n  if (x === 38) {\n    return true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRItE A funcTiON THat taKEs an aRray Of NumbErs as inpuT AnD ReTurNs \n  ThE nUmbEr oF ELemENTs in The arrAY that arE GrEatER THan 10 ANd bOTH \n  FiRSt AnD last dIgItS of a NUMBEr ARe odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat taKEs an aRray Of NumbErs as inpuT AnD ReTurNs \n  ThE nUmbEr oF ELemENTs in The arrAY that arE GrEatER THan 10 ANd bOTH \n  FiRSt AnD last dIgItS of a NUMBEr ARe odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((num) => num % 2 === 0);\n  const odd = arr.length;\n  const even = nums.length - odd;\n  return odd + even;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [1, 3, 7, 13, 21]\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3 * i * j * k) {\n          result = Math.max(result, i + j + k)\n        }\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* tHeRE are eIgHT PLanetS in Our soLar sYsTem: tHe closersT To THe sun\n  Is meRcUry, The NEXt oNE Is venus, tHEn Earth, mArS, JuPITEr, SATurN,\n  uRAnUS, NEpTune.\n  WrItE a FuncTION ThAT takes two pLAnet Names as sTriNgs planet1 aNd planet2.\n  the FUnctiON sHoUld return a tuple coNtAininG All plAnetS whOse oRBitS Are\n  locaTeD BetwEeN ThE orbIT of planet1 anD The orbit Of planet2, soRted bY\n  the PROxImity tO thE sUN.\n  tHe funcTion shoUld return an eMpty tuple if planet1 OR planet2\n  Are not cOrREct planET nameS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* tHeRE are eIgHT PLanetS in Our soLar sYsTem: tHe closersT To THe sun\n  Is meRcUry, The NEXt oNE Is venus, tHEn Earth, mArS, JuPITEr, SATurN,\n  uRAnUS, NEpTune.\n  WrItE a FuncTION ThAT takes two pLAnet Names as sTriNgs planet1 aNd planet2.\n  the FUnctiON sHoUld return a tuple coNtAininG All plAnetS whOse oRBitS Are\n  locaTeD BetwEeN ThE orbIT of planet1 anD The orbit Of planet2, soRted bY\n  the PROxImity tO thE sUN.\n  tHe funcTion shoUld return an eMpty tuple if planet1 OR planet2\n  Are not cOrREct planET nameS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1OrPlanet2 = planet1.toLowerCase()\n  const planet2OrPlanet1 = planet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2 = planet1OrPlanet2.toLowerCase()\n  const planet2OrPlanet1OrPlanet2 = planet2OrPlanet1.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2 = planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2.toLowerCase()\n  const planet1OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet2OrPlanet", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs aS a parametER,\n  dELeTes ThE sTrIngS thAT HavE ODd LengthS From it,\n  aND rEtuRNS The REsuLTED list wITh A sOrted oRdEr,\n  the list iS ALWAyS A list of strings ANd neVer an arrAy oF numBeRs,\n  aND it maY CoNtAin dupLiCates.\n  tHe ordEr of The list ShouLD be AScendinG bY LengTh OF eAch wORd, and YOu\n  should return The list sOrted By thAT RuLe.\n  If twO woRdS HAVe the sAme lengTh, sort The list alpHABeticalLy.\n  tHe functIOn shoULD return A list of sTRInGs in sorTeD ORDER.\n  YOu may assume thAt aLL wOrds WilL hAvE The Same Length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs aS a parametER,\n  dELeTes ThE sTrIngS thAT HavE ODd LengthS From it,\n  aND rEtuRNS The REsuLTED list wITh A sOrted oRdEr,\n  the list iS ALWAyS A list of strings ANd neVer an arrAy oF numBeRs,\n  aND it maY CoNtAin dupLiCates.\n  tHe ordEr of The list ShouLD be AScendinG bY LengTh OF eAch wORd, and YOu\n  should return The list sOrted By thAT RuLe.\n  If twO woRdS HAVe the sAme lengTh, sort The list alpHABeticalLy.\n  tHe functIOn shoULD return A list of sTRInGs in sorTeD ORDER.\n  YOu may assume thAt aLL wOrds WilL hAvE The Same Length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < sortedLen) {\n    sum += sorted[i]\n    i++\n  }\n  return sum\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j] < sorted[i]) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j].length < sorted[i].length) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_alphabetical = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j].localeCompare(sorted[i]) < 0) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_alphabetical_reverse = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j].localeCompare(sorted[i]) > 0) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_alphabetical_reverse_with_length = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j].length < sorted[i].length) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_alphabetical_reverse_with_length_with_length = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j].length < sorted[i].length) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_alphabetical_reverse_with_length_with_length_with_length = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sortedLen) {\n    while (j < sortedLen) {\n      if (sorted[j].length < sorted[i].length) {\n        sorted[k] = sorted[j]\n        j++\n      } else {\n        sorted[k] = sorted[i]\n        i++\n      }\n      k++\n    }\n  }\n  return sorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* rEtURn a stRiNG COntaiNIng spAce-dElImitEd numbers STaRTiNg fRoM 0 uPtO n inCluSIVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* rEtURn a stRiNG COntaiNIng spAce-dElImitEd numbers STaRTiNg fRoM 0 uPtO n inCluSIVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i + 97);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SImPLe proGrAM WHich sHOuld return tHe vaLuE of x iF n is \n  a prime NUmBEr And ShOuLd return The ValUE Of y oTHErWise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A SImPLe proGrAM WHich sHOuld return tHe vaLuE of x iF n is \n  a prime NUmBEr And ShOuLd return The ValUE Of y oTHErWise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY(n - 1, x, y)\n  } else {\n    return yOrX(n - 1, x, y)\n  }\n}\n\nconst yOrX = (n, x, y) => {\n  if (n % 2 === 0) {\n    return yOrX(n - 1, x, y)\n  } else {\n    return xOrY(n - 1, x, y)\n  }\n}\n\nconst isPrime = (n) => {\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst xOrYPrime = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y)\n  } else {\n    return yOrX(n, x, y)\n  }\n}\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y)\n  } else {\n    return yOrX(n, x, y)\n  }\n}\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (isPrime(n)) {\n    return yOrX(n, x, y)\n  } else {\n    return xOrY(n, x, y)\n  }\n}\n\nconst xOrYPrime20 = (n, x, y) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I THiNK we alL rEMEMber tHAt feeLing WhEn thE result of SOmE LoNg-aWaItEd\n  EveNt iS FInaLLY kNown. ThE FeelingS AnD thOUGHts YOu hAVE At THaT mOment aRe\n  DeFiniTELY WoRTh noting doWN and ComparinG.\n  YoUr taSk Is tO DeterMInE iF a persOn CorreCTly guEsseD thE resULts OF a numbeR oF MatcHeS.\n  yoU are GIven tWO arrays oF scoRes anD gueSSEs Of equaL leNgTH, WHere eaCh index Shows a Match. \n  RETUrn an arRaY Of the saME lengTH DEnotING hOw far OfF EACH guess WaS. If they have guEssED cOrreCtlY,\n  tHe VAluE is 0, aNd if not, the ValUe is ThE abSolUte differenCe betWEEn thE guess and The sCoRe.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I THiNK we alL rEMEMber tHAt feeLing WhEn thE result of SOmE LoNg-aWaItEd\n  EveNt iS FInaLLY kNown. ThE FeelingS AnD thOUGHts YOu hAVE At THaT mOment aRe\n  DeFiniTELY WoRTh noting doWN and ComparinG.\n  YoUr taSk Is tO DeterMInE iF a persOn CorreCTly guEsseD thE resULts OF a numbeR oF MatcHeS.\n  yoU are GIven tWO arrays oF scoRes anD gueSSEs Of equaL leNgTH, WHere eaCh index Shows a Match. \n  RETUrn an arRaY Of the saME lengTH DEnotING hOw far OfF EACH guess WaS. If they have guEssED cOrreCtlY,\n  tHe VAluE is 0, aNd if not, the ValUe is ThE abSolUte differenCe betWEEn thE guess and The sCoRe.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare2 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare3 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare4 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare5 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare6 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare7 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare8 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare9 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {\n      result.push(0);\n    } else if (currentGuess > current) {\n      result.push(1);\n    } else {\n      result.push(-1);\n    }\n  }\n  return result;\n};\n\nconst compare10 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let current = game[i];\n    let currentGuess = guess[i];\n    if (currentGuess === current) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*YOU wILl be gIvEN THe namE Of a clAss (a StRing) And a list of extensions.\n  The extensions ARe TO bE usEd To LoAd aDdiTIOnaL CLaSses to THe class. tHe\n  StrENGTh oF The EXTEnSIoN iS as folLoWs: let Cap BE ThE Number of thE UppeRcase\n  letTerS in the ExTenSIon's nAMe, AnD let SM Be The nuMBer of LoweRcaSe leTTerS\n  in The exteNsIOn's nAmE, ThE strENgth iS Given by tHe frActioN CAP - sm.\n  yoU shoulD fiNd THE StrongEst exteNsion aNd return a strING in this\n  foRmAT: ClassNAMe.StrONGEstEXTEnSionNAmE.\n  iF THErE are two or more extensions WitH ThE samE stReNgTH, yoU shoUld\n  choose tHe oNe thAt ComEs fIrst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*YOU wILl be gIvEN THe namE Of a clAss (a StRing) And a list of extensions.\n  The extensions ARe TO bE usEd To LoAd aDdiTIOnaL CLaSses to THe class. tHe\n  StrENGTh oF The EXTEnSIoN iS as folLoWs: let Cap BE ThE Number of thE UppeRcase\n  letTerS in the ExTenSIon's nAMe, AnD let SM Be The nuMBer of LoweRcaSe leTTerS\n  in The exteNsIOn's nAmE, ThE strENgth iS Given by tHe frActioN CAP - sm.\n  yoU shoulD fiNd THE StrongEst exteNsion aNd return a strING in this\n  foRmAT: ClassNAMe.StrONGEstEXTEnSionNAmE.\n  iF THErE are two or more extensions WitH ThE samE stReNgTH, yoU shoUld\n  choose tHe oNe thAt ComEs fIrst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_parts = class_name.split('.');\n  const class_name_len = class_name_parts.length;\n  const strongest_extension = class_name_parts[class_name_len - 1];\n  const strongest_extension_index = extensions.indexOf(strongest_extension);\n  const strongest_extension_strength = -1;\n  if (strongest_extension_index > -1) {\n    return class_name_parts.slice(0, class_name_len - 1).join('.') + '.' + strongest_extension;\n  } else {\n    return class_name;\n  }\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/154", "prompt": "/*YOU aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nCoNst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nCoNst cycpatternCheck = (a, b) => {\n  let a_len = a.length, b_len = b.length;\n  let a_str = a.split(\"\");\n  let b_str = b.split(\"\");\n  let i = 0, j = 0;\n  while (i < a_len && j < b_len) {\n    if (a_str[i] === b_str[j]) {\n      i++;\n      j++;\n    } else if (a_str[i] < b_str[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === a_len && j === b_len) {\n    return true;\n  } else if (i === a_len) {\n    return false;\n  } else if (j === b_len) {\n    return false;\n  } else {\n    return false;\n  }\n};\n\n/*\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const count = 0;\n  const isOdd = (num) => num % 2 === 1;\n  const isEven = (num) => num % 2 === 0;\n  const isEvenOdd = (num) => isEven(num) && isOdd(num);\n  const isOddOdd = (num) => isOdd(num) && isOdd(num);\n  const isEvenOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num);\n  const isOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isEvenOddOddOddOddOddOddOddOddOdd = (num) => isEven(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num);\n  const isOddOddOddOddOddOddOddOddOddOdd = (num) => isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num) && isOdd(num)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  gIvEN a posItIVE IntegER, obtaIn itS rOman Numeral eqUIvALeNt aS a StRiNg,\n  aNd return iT in LOweRCAsE.\n  RestrICtions: 1 <= num <= 1000\n\n  EXAmPleS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER, obtaIn itS rOman Numeral eqUIvALeNt aS a StRiNg,\n  aNd return iT in LOweRCAsE.\n  RestrICtions: 1 <= num <= 1000\n\n  EXAmPleS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const numStr = String(num);\n  const numLen = numStr.length;\n  const numDigits = numStr.split('').length;\n  const numDigitsStr = numStr.split('');\n  const numDigitsStrLen = numDigitsStr.length;\n  const numDigitsStrLenMinusOne = numDigitsStrLen - 1;\n  const numDigitsStrLenMinusTwo = numDigitsStrLen - 2;\n  const numDigitsStrLenMinusThree = numDigitsStrLen - 3;\n  const numDigitsStrLenMinusFour = numDigitsStrLen - 4;\n  const numDigitsStrLenMinusFive = numDigitsStrLen - 5;\n  const numDigitsStrLenMinusSix = numDigitsStrLen - 6;\n  const numDigitsStrLenMinusSeven = numDigitsStrLen - 7;\n  const numDigitsStrLenMinusEight = numDigitsStrLen - 8;\n  const numDigitsStrLenMinusNine = numDigitsStrLen - 9;\n  const numDigitsStrLenMinusTen = numDigitsStrLen - 10;\n  const numDigitsStrLenMinusEleven = numDigitsStrLen - 11;\n  const numDigitsStrLenMinusTwelve = numDigitsStrLen - 12;\n  const numDigitsStrLenMinusThirteen = numDigitsStrLen - 13;\n  const numDigitsStrLenMinusFourteen = numDigitsStrLen - 14;\n  const numDigitsStrLenMinusFifteen = numDigitsStrLen - 15;\n  const numDigitsStrLenMinusSixteen = numDigitsStrLen - 16;\n  const numDigitsStrLenMinusSeventeen = numDigitsStrLen - 17;\n  const numDigitsStrLenMinusEighteen = numDigitsStrLen - 18;\n  const numDigitsStrLenMinusNineteen = numDigitsStrLen - 19;\n  const numDigitsStrLenMinusTwenty = numDigitsStrLen - 20;\n  const numDigitsStrLenMinusTwentyOne = numDigitsStrLen - 21;\n  const numDigitsStrLenMinusTwentyTwo = numDigitsStrLen - 22;\n  const numDigitsStrLenMinusTwentyThree = numDigitsStrLen - 23;\n  const numDigitsStrLenMinusTwentyFour = numDigitsStrLen - 24;\n  const numDigitsStrLenMinusTwentyFive = numDigitsStrLen - 25;\n  const numDigitsStrLenMinusTwentySix = numDigitsStrLen - 26;\n  const numDigitsStrLenMinusTwentySeven = numDigitsStrLen - 27;\n  const numDigitsStrLenMinusTwentyEight = numDigitsStrLen - 28;\n  const numDigitsStrLenMinusTwentyNine = numDigitsStrLen - 29;\n  const numDigitsStrLenMinusThirty = numDigitsStrLen - 30;\n  const numDigitsStrLenMinusThirtyOne = numDigitsStrLen - 31;\n  const numDigitsStrLenMinusThirtyTwo = numDigitsStrLen - 32;\n  const numDigitsStrLenMinusThirtyThree = numDigitsStrLen - 33;\n  const numDigitsStrLenMinusThirtyFour = numDigitsStrLen - 34;\n  const numDigitsStrLenMinusThirtyFive = numDigitsStrLen - 35;\n  const numDigitsStrLenMinusThirtySix = numDigitsStrLen - 36;\n  const numDigitsStrLenMinusThirtySeven = numDigitsStrLen - 37;\n  const numDigitsStrLenMinusThirtyEight = numDigitsStrLen - 38;\n  const numDigitsStrLenMinusThirtyNine = numDigitsStrLen - 39;\n  const numDigitsStrLenMinusFourty = numDigitsStrLen - 40;\n  const numDigitsStrLenMinusFourtyOne = numDigitsStrLen - 41;\n  const numDigitsStrLenMinusFourtyTwo = numDigitsStrLen - 42;\n  const numDigitsStrLenMinusFourtyThree = numDigitsStrLen - 43;\n  const numDigitsStrLenMinusFourtyFour = numDigitsStrLen - 44;\n  const numDigitsStrLenMinusFourtyFive = numDigitsStrLen - 45;\n  const numDigitsStrLenMinusFourtySix = numDigitsStrLen - 46;\n  const numDigitsStrLenMinusFourtySeven = numDigitsStrLen - 47;\n  const numDigitsStrLenMinusFourtyEight = numDigitsStrLen - 48;\n  const numDigitsStrLenMinusFourtyNine = numDigitsStrLen - 49;\n  const numDigitsStrLenMinusFifty = numDigitsStrLen - 50;\n  const numDigitsStrLenMinusFiftyOne = numDigitsStrLen - 51;\n  const numDigitsStrLenMinusFiftyTwo = numDigitsStrLen - 52;\n  const numDigitsStrLenMinusFiftyThree = numDigitsStrLen - 53;\n  const numDigitsStrLenMinusFiftyFour = numDigitsStrLen - 54;\n  const numDigitsStrLenMinusFiftyFive = numDigitsStrLen - 55;\n  const numDigitsStrLenMinusFiftySix = numDigitsStrLen - 56;\n  const numDigitsStrLenMinusFiftySeven = numDigitsStrLen - 57;\n  const numDigitsStrLenMinusFiftyEight = numDigitsStrLen - 58;\n  const numDigitsStrLenMinusFiftyNine = numDigitsStrLen - 59;\n  const numDigitsStrLenMinusSixty = numDigitsStrLen - 60;\n  const numDigitsStrLenMinusSixtyOne = numDigitsStrLen - 61;\n  const numDigitsStrLenMinusSixtyTwo = numDigitsStrLen - 62;\n  const numDigitsStrLenMinusSixtyThree = numDig", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab + bc + ac;\n  return abc === 0;\n};\n\n/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab + bc + ac;\n  return abc === 0 || abc === 1 || abc === -1;\n};\n\n/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab + bc + ac;\n  return abc === 0 || abc === 1 || abc === -1 || abc === 2;\n};\n\n/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab + bc + ac;\n  return abc === 0 || abc === 1 || abc === -1 || abc === 2 || abc === 3;\n};\n\n/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab + bc + ac;\n  return abc === 0 || abc === 1 || abc === -1 || abc === 2 || abc === 3 || abc === 4;\n};\n\n/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab + bc + ac;\n  return abc === 0 || abc === 1 || abc === -1 || abc === 2 || abc === 3 || abc === 4 || abc === 5;\n};\n\n/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs.\n  THe list containS DiFFeRenT words. REtUrN thE woRD WitH MAxImum nuMBer\n  of unIQuE chARACteRS. If MULTiPLe StRings hAvE mAximUM NUMbER of unique\n  cHAracTers, return the oNe wHich CoMes FIrst in lEXiCoGraphiCaL ordeR.\n\n  findMax([\"name\", \"Of\", \"strIng\"]) === \"sTriNg\"\n  findMax([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"Cc\"]) === \"\"AAaaaAa\"\n  */\nCOnSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs.\n  THe list containS DiFFeRenT words. REtUrN thE woRD WitH MAxImum nuMBer\n  of unIQuE chARACteRS. If MULTiPLe StRings hAvE mAximUM NUMbER of unique\n  cHAracTers, return the oNe wHich CoMes FIrst in lEXiCoGraphiCaL ordeR.\n\n  findMax([\"name\", \"Of\", \"strIng\"]) === \"sTriNg\"\n  findMax([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"\"AAaaaAa\"\n  */\nCOnSt findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  THe function findMax(words) returns the longest word in the list of\n  words.\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  yOu'RE a hunGrY RABbit, aND you aLreaDy Have Eaten a cerTAiN number Of CarRoTs,\n  BuT noW yoU need TO eat moRE CaRrots tO CompletE ThE daY'S MEalS.\n  You SHOUlD return An ArRay of [ tOtAl number Of eaTEN CArROts after yoUR meaLs,\n                                  the number of cArrOts lEfT afTEr youR MeAlS ]\n  if theRe Are noT EnougH remaining carRotS, you WIll eat ALl remaining carroTs, BUt wiLl STiLl be HUngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  yOu'RE a hunGrY RABbit, aND you aLreaDy Have Eaten a cerTAiN number Of CarRoTs,\n  BuT noW yoU need TO eat moRE CaRrots tO CompletE ThE daY'S MEalS.\n  You SHOUlD return An ArRay of [ tOtAl number Of eaTEN CArROts after yoUR meaLs,\n                                  the number of cArrOts lEfT afTEr youR MeAlS ]\n  if theRe Are noT EnougH remaining carRotS, you WIll eat ALl remaining carroTs, BUt wiLl STiLl be HUngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining < need) {\n    return [0, number - remaining];\n  }\n  return [number - remaining, 0];\n};\n\nconst test = (number, need, remaining) => {\n  const [eaten, remaining] = eat(number, need, remaining);\n  console.log(`${number} ate ${eaten} carrots. ${remaining} remain.`);\n};\n\ntest(5, 6, 10);\ntest(4, 8, 9);\ntest(1, 10, 10);\ntest(2, 11, 5);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('')\n  const operandList = operand.split('')\n  const result = []\n  let resultIndex = 0\n  let operandIndex = 0\n  while (operandIndex < operandList.length) {\n    const operatorValue = operatorList[resultIndex]\n    const operandValue = operandList[operandIndex]\n    if (operatorValue === '+') {\n      result.push(operandValue)\n    } else if (operatorValue === '-') {\n      result.push(operandValue)\n    } else if (operatorValue === '*') {\n      result.push(operandValue)\n    } else if (operatorValue === '/') {\n      result.push(operandValue)\n    } else if (operatorValue === '**') {\n      result.push(operandValue)\n    } else {\n      throw new Error('Invalid operator')\n    }\n    operandIndex++\n    resultIndex++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorList = operator.split('')\n  const operandList = operand.split('')\n  const result = []\n  let resultIndex = 0\n  let operandIndex = 0\n  while (operandIndex < operandList.length) {\n    const operatorValue = operatorList[resultIndex]\n    const operandValue = operandList[operandIndex]\n    if (operatorValue === '+') {\n      result.push(operandValue)\n    } else if (operatorValue === '-') {\n      result.push(operandValue)\n    } else if (operatorValue === '*') {\n      result.push(operandValue)\n    } else if (operatorValue === '/') {\n      result.push(operandValue)\n    } else if (operatorValue === '**') {\n      result.push(operandValue)\n    } else {\n      throw new Error('Invalid operator')\n    }\n    operandIndex++\n    resultIndex++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorList = operator.split('')\n  const operandList = operand.split('')\n  const result = []\n  let resultIndex = 0\n  let operandIndex = 0\n  while (operandIndex < operandList.length) {\n    const operatorValue = operatorList[resultIndex]\n    const operandValue = operandList[operandIndex]\n    if (operatorValue === '+') {\n      result.push(operandValue)\n    } else if (operatorValue === '-') {\n      result.push(operandValue)\n    } else if (operatorValue === '*') {\n      result.push(operandValue)\n    } else if (operatorValue === '/') {\n      result.push(operandValue)\n    } else if (operatorValue === '**') {\n      result.push(operandValue)\n    } else {\n      throw new Error('Invalid operator')\n    }\n    operandIndex++\n    resultIndex++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorList = operator.split('')\n  const operandList = operand.split('')\n  const result = []\n  let resultIndex = 0\n  let operandIndex = 0\n  while (operandIndex < operandList.length) {\n    const operatorValue = operatorList[resultIndex]\n    const operandValue = operandList[operandIndex]\n    if (operatorValue === '+') {\n      result.push(operandValue)\n    } else if (operatorValue === '-') {\n      result.push(operandValue)\n    } else if (operatorValue === '*') {\n      result.push(operandValue)\n    } else if (operatorValue === '/') {\n      result.push(operandValue)\n    } else if (operatorValue === '**') {\n      result.push(operandValue)\n    } else {\n      throw new Error('Invalid operator')\n    }\n    operandIndex++\n    resultIndex++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorList = operator.split('')\n  const operandList = operand.split('')\n  const result = []\n  let resultIndex = 0\n  let operandIndex = 0\n  while (operandIndex < operandList.length) {\n    const operatorValue = operatorList[resultIndex]\n    const operandValue = operandList[operandIndex]\n    if (operatorValue === '+') {\n      result.push(operandValue)\n    } else if (operatorValue === '-') {\n      result.push(operandValue)\n    } else if (operatorValue === '*') {\n      result.push(operandValue)\n    } else if (operatorValue === '/') {\n      result.push(operandValue)\n    } else if (operatorValue === '**') {\n      result.push(operandValue)\n    } else {\n      throw new", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/161", "prompt": "/*YOU aRE giveN a STRIng s.\n  if s[i] IS a letTer, rEvErse Its case frOM lOWeR to UpPeR oR viSe vERSa, \n  oTHErWise keEP it as it IS.\n  IF thE STRinG ConTAINs NO lEtTers, reVeRsE the STRINg.\n  tHe function SHoulD return the resuLteD strInG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a STRIng s.\n  if s[i] IS a letTer, rEvErse Its case frOM lOWeR to UpPeR oR viSe vERSa, \n  oTHErWise keEP it as it IS.\n  IF thE STRinG ConTAINs NO lEtTers, reVeRsE the STRINg.\n  tHe function SHoulD return the resuLteD strInG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toUpperCase();\n  let res = \"\";\n  let i = 0;\n  let j = 0;\n  while (i < str.length) {\n    if (str[i] === \" \") {\n      res += str[j];\n      j++;\n    } else if (str[i] === \"#\") {\n      res += str[j];\n      j++;\n      while (str[j]!== \" \") {\n        res += str[j];\n        j++;\n      }\n    } else if (str[i] === \"@\") {\n      res += str[j];\n      j++;\n      while (str[j]!== \" \") {\n        res += str[j];\n        j++;\n      }\n    } else {\n      res += str[i];\n      i++;\n    }\n  }\n  return res;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  gIvEN two pOsITIVe intEGers a aNd b, return thE eVen dIgits betwEEn a\n  ANd b, in AscEnDiNg OrdEr.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN two pOsITIVe intEGers a aNd b, return thE eVen dIgits betwEEn a\n  ANd b, in AscEnDiNg OrdEr.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNting musiCAl NOtEs in a SpEcIaL AScII FORmaT.\n  yOuR task iS To parse THiS stRING anD return list Of iNTEGeRS cOrResponDiNg To hoW MANY bEAts does eacH\n  Not lAst.\n\n  Here iS a lEgenD:\n  'o' - WhoLE note, LAsTs Four beAtS\n  'o|' - halF Note, lAsts Two BeatS\n  '.|' - QuaTEr note, lAsTS one BeAT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNting musiCAl NOtEs in a SpEcIaL AScII FORmaT.\n  yOuR task iS To parse THiS stRING anD return list Of iNTEGeRS cOrResponDiNg To hoW MANY bEAts does eacH\n  Not lAst.\n\n  Here iS a lEgenD:\n  'o' - WhoLE note, LAsTs Four beAtS\n  'o|' - halF Note, lAsts Two BeatS\n  '.|' - QuaTEr note, lAsTS one BeAT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(1);\n    } else if (notes[i] === '|') {\n      notes_list.push(0);\n    } else {\n      notes_list.push(parseInt(notes[i]));\n    }\n  }\n  return notes_list;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(1);\n    } else if (notes[i] === '|') {\n      notes_list.push(0);\n    } else {\n      notes_list.push(parseInt(notes[i]));\n    }\n  }\n  return notes_list;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(1);\n    } else if (notes[i] === '|') {\n      notes_list.push(0);\n    } else {\n      notes_list.push(parseInt(notes[i]));\n    }\n  }\n  return notes_list;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(1);\n    } else if (notes[i] === '|') {\n      notes_list.push(0);\n    } else {\n      notes_list.push(parseInt(notes[i]));\n    }\n  }\n  return notes_list;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(1);\n    } else if (notes[i] === '|') {\n      notes_list.push(0);\n    } else {\n      notes_list.push(parseInt(notes[i]));\n    }\n  }\n  return notes_list;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic6 = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* fInD How maNy times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* fInD How maNy times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* iNpUT is a spAcE-DELimitED striNg of NuMberAls from 'zeRO' tO 'NiNe'.\n  VAlId ChOicEs aRE 'ZerO', 'ONe', 'Two', 'thrEE', 'four', 'fiVE', 'sIx', 'sEVEN', 'eiGHt' aND 'NInE'.\n  reTuRn the sTrInG witH numbers SORTeD From smalleST to lArgest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* iNpUT is a spAcE-DELimitED striNg of NuMberAls from 'zeRO' tO 'NiNe'.\n  VAlId ChOicEs aRE 'ZerO', 'ONe', 'Two', 'thrEE', 'four', 'fiVE','sIx','sEVEN', 'eiGHt' aND 'NInE'.\n  reTuRn the sTrInG witH numbers SORTeD From smalleST to lArgest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted.join('');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsString = number.toString();\n  const numberLength = numberAsString.length;\n  const numberAsInt = parseInt(numberAsString, 10);\n  const numberAsFloat = parseFloat(numberAsString);\n  const numberAsDecimal = numberAsString.replace(/^[0-9]+/, '');\n  const numberAsDecimalLength = numberAsDecimal.length;\n  const numberAsDecimalInt = parseInt(numberAsDecimal, 10);\n  const numberAsDecimalFloat = parseFloat(numberAsDecimal);\n  const numberAsDecimalDecimal = numberAsDecimal.replace(/^[0-9]+/, '');\n  const numberAsDecimalDecimalLength = numberAsDecimalDecimal.length;\n  const numberAsDecimalDecimalInt = parseInt(numberAsDecimalDecimal, 10);\n  const numberAsDecimalDecimalFloat = parseFloat(numberAsDecimalDecimal);\n\n  if (numberAsInt === numberAsFloat) {\n    return numberAsInt;\n  }\n\n  if (numberAsInt > numberAsFloat) {\n    return numberAsInt;\n  }\n\n  if (numberAsFloat > numberAsInt) {\n    return numberAsFloat;\n  }\n\n  if (numberAsDecimalInt === numberAsDecimalFloat) {\n    return numberAsDecimalInt;\n  }\n\n  if (numberAsDecimalInt > numberAsDecimalFloat) {\n    return numberAsDecimalInt;\n  }\n\n  if (numberAsDecimalFloat > numberAsDecimalInt) {\n    return numberAsDecimalFloat;\n  }\n\n  if (numberAsDecimalDecimalInt === numberAsDecimalDecimalFloat) {\n    return numberAsDecimalDecimalInt;\n  }\n\n  if (numberAsDecimalDecimalInt > numberAsDecimalDecimalFloat) {\n    return numberAsDecimalDecimalInt;\n  }\n\n  if (numberAsDecimalDecimalFloat > numberAsDecimalDecimalInt) {\n    return numberAsDecimalDecimalFloat;\n  }\n\n  return numberAsDecimalDecimalFloat;\n};\n\nexport default truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* fRoM a SupplIeD list OF numbers (Of lenGTh at lEast TwO) selEct and return two THaT ArE thE cLoSeSt tO eaCH\n  OthER AnD return them in oRDer (smalLEr NumBER, LarGEr nUMBEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* fRoM a SupplIeD list OF numbers (Of lenGTh at lEast TwO) selEct and return two THaT ArE thE cLoSeSt tO eaCH\n  OthER AnD return them in oRDer (smalLEr NumBER, LarGEr nUMBEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const minIndex = findClosestIndex(numbers, min)\n  const maxIndex = findClosestIndex(numbers, max)\n  const minDistance = Math.abs(min - numbers[minIndex])\n  const maxDistance = Math.abs(max - numbers[maxIndex])\n  const minIndexDistance = Math.abs(minIndex - maxIndex)\n  const closestIndex = minIndex\n  if (minIndexDistance < maxDistance) {\n    closestIndex = maxIndex\n  }\n  return (numbers[closestIndex], numbers[closestIndex + 1])\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestIndex = (numbers, number) => {\n  const len = numbers.length\n  let closestIndex = 0\n  let closestDistance = Math.abs(numbers[0] - number)\n  for (let i = 1; i < len; i++) {\n    const distance = Math.abs(numbers[i] - number)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestIndex\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const minIndex = findClosestIndex2(numbers, min)\n  const maxIndex = findClosestIndex2(numbers, max)\n  const minDistance = Math.abs(min - numbers[minIndex])\n  const maxDistance = Math.abs(max - numbers[maxIndex])\n  const minIndexDistance = Math.abs(minIndex - maxIndex)\n  const closestIndex = minIndex\n  if (minIndexDistance < maxDistance) {\n    closestIndex = maxIndex\n  }\n  return (numbers[closestIndex], numbers[closestIndex + 1])\n}\n\nconst findClosestIndex2 = (numbers, number) => {\n  const len = numbers.length\n  let closestIndex = 0\n  let closestDistance = Math.abs(numbers[0] - number)\n  for (let i = 1; i < len; i++) {\n    const distance = Math.abs(numbers[i] - number)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestIndex\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const minIndex = findClosestIndex3(numbers, min)\n  const maxIndex = findClosestIndex3(numbers, max)\n  const minDistance = Math.abs(min - numbers[minIndex])\n  const maxDistance = Math.abs(max - numbers[maxIndex])\n  const minIndexDistance = Math.abs(minIndex - maxIndex)\n  const closestIndex = minIndex\n  if (minIndexDistance < maxDistance) {\n    closestIndex = maxIndex\n  }\n  return (numbers[closestIndex], numbers[closestIndex + 1])\n}\n\nconst findClosestIndex3 = (numbers, number) => {\n  const len = numbers.length\n  let closestIndex = 0\n  let closestDistance = Math.abs(numbers[0] - number)\n  for (let i = 1; i < len; i++) {\n    const distance = Math.abs(numbers[i] - number)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestIndex\n}\n\nexport default findClosestElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* gIvEN list of numbers (of At LEASt two ELemenTs), apPlY a liNear transFOrM To ThaT list,\n  sUcH tHat The SMAllEST nUmber wILl becomE 0 AnD thE LARgeST wiLL BEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* gIvEN list of numbers (of At LEASt two ELemenTs), apPlY a liNear transFOrM To ThaT list,\n  sUcH tHat The SMAllEST nUmber wILl becomE 0 AnD thE LARgeST wiLL BEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit3 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit4 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit5 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit6 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit7 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit8 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit9 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit10 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit11 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit12 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit13 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit14 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit15 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit16 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit17 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit18 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit19 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit20 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are not of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(v => typeof v!== 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are not of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(v => typeof v!== 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are not of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(v => typeof v!== 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are not of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(v => typeof v!== 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Returns a list of the values in the given array that are not of type number.\n  *\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterNonIntegers(['a', 3.14, 5", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* rEtURn lenGtH OF Given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* rEtURn lenGtH OF Given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen2 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen3 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen4 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen5 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen6 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen7 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen8 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen9 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen10 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen11 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen12 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen13 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen14 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen15 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen16 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen17 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen18 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen19 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen20 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen21 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen22 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen23 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen24 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen25 = (string) => {\n  return string.length;\n};\n\n/* rEtURn lenGtH OF Given string", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  const divisors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* rEtURn list of pRiME FActorS Of givEn inTeGer in tHe order frOM sMAlLesT tO lArGesT.\n  EaCH Of tHE FaCtors sHOuld be lIStEd nUMBEr oF TimES COrREsPoNding tO hOw Many TIMES iT Appeares in faCToriZation.\n  InPut NumbEr ShoULd be eQUaL tO the prOdUct of ALl facTors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* rEtURn list of pRiME FActorS Of givEn inTeGer in tHe order frOM sMAlLesT tO lArGesT.\n  EaCH Of tHE FaCtors sHOuld be lIStEd nUMBEr oF TimES COrREsPoNding tO hOw Many TIMES iT Appeares in faCToriZation.\n  InPut NumbEr ShoULd be eQUaL tO the prOdUct of ALl facTors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const divisors = []\n  const divisor = (n) => {\n    const divisor = n\n    const divisor_factors = []\n    const divisor_divisors = []\n    const divisor_divisor = (n) => {\n      const divisor_divisor = n\n      const divisor_divisor_factors = []\n      const divisor_divisor_divisors = []\n      const divisor_divisor_divisor = (n) => {\n        const divisor_divisor_divisor = n\n        const divisor_divisor_divisor_factors = []\n        const divisor_divisor_divisor_divisors = []\n        const divisor_divisor_divisor_divisor = (n) => {\n          const divisor_divisor_divisor_divisor = n\n          const divisor_divisor_divisor_divisor_factors = []\n          const divisor_divisor_divisor_divisor_divisors = []\n          const divisor_divisor_divisor_divisor_divisor = (n) => {\n            const divisor_divisor_divisor_divisor_divisor = n\n            const divisor_divisor_divisor_divisor_divisor_factors = []\n            const divisor_divisor_divisor_divisor_divisor_divisors = []\n            const divisor_divisor_divisor_divisor_divisor_divisor = (n) => {\n              const divisor_divisor_divisor_divisor_divisor_divisor = n\n              const divisor_divisor_divisor_divisor_divisor_divisor_factors = []\n              const divisor_divisor_divisor_divisor_divisor_divisor_divisors = []\n              const divisor_divisor_divisor_divisor_divisor_divisor_divisor = (n) => {\n                const divisor_divisor_divisor_divisor_divisor_divisor_divisor = n\n                const divisor_divisor_divisor_divisor_divisor_divisor_divisor_factors = []\n                const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisors = []\n                const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = (n) => {\n                  const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = n\n                  const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_factors = []\n                  const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisors = []\n                  const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = (n) => {\n                    const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = n\n                    const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_factors = []\n                    const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisors = []\n                    const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = (n) => {\n                      const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = n\n                      const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_factors = []\n                      const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisors = []\n                      const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = (n) => {\n                        const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor = n\n                        const divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_factors = []\n                        const divisor_divisor_divisor_divisor_divisor_div", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* fRoM A list of inTeGERS, remoVE all eLemeNtS thaT occur morE ThAN oNce.\n  keEp OrDer Of eLEMenTS LeFt the sAMe as in the INpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* fRoM A list of inTeGERS, remoVE all eLemeNtS thaT occur morE ThAN oNce.\n  keEp OrDer Of eLEMenTS LeFt the sAMe as in the INpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates13 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* fOr A Given string, FlIP LOwercASe chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* fOr A Given string, FlIP LOwercASe chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/* fOr A Given string, FlIP LoWerCasE To uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* cOnCAten", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT sTart With a giveN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT sTart With a giveN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* yOu'RE giveN a list OF DEposiT And wiThdrAwAl operations on A bank accoUNt THaT stArTs WiTh\n  zEro balance. yOUr tASK iS to detECt if at aNY pOinT THE balance of ACcoUNT FaLLlS bElow zeRo, AnD\n  at tHAT POiNT function sHOuld return True. OtheRwiSe it ShOulD return False.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* yOu'RE giveN a list OF DEposiT And wiThdrAwAl operations on A bank accoUNt THaT stArTs WiTh\n  zEro balance. yOUr tASK iS to detECt if at aNY pOinT THE balance of ACcoUNT FaLLlS bElow zeRo, AnD\n  at tHAT POiNT function sHOuld return True. OtheRwiSe it ShOulD return False.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = [];\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RETuRN only PoSITIve nuMBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*RETuRN only PoSITIve nuMBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 11]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 11, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 11, 12, 13]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*RETuRN true If A GIVen nuMBer is PrimE, aNd faLse otherwISe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*RETuRN true If A GIVen nuMBer is PrimE, aNd faLse otherwISe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n < 100) return false\n  if (n % 7 === 0) return false\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return false\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return false\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return false\n  if (n % 41 === 0) return false\n  if (n % 43 === 0) return false\n  if (n % 47 === 0) return false\n  if (n % 53 === 0) return false\n  if (n % 59 === 0) return false\n  if (n % 61 === 0) return false\n  if (n % 67 === 0) return false\n  if (n % 71 === 0) return false\n  if (n % 73 === 0) return false\n  if (n % 79 === 0) return false\n  if (n % 83 === 0) return false\n  if (n % 89 === 0) return false\n  if (n % 97 === 0) return false\n  if (n % 101 === 0) return false\n  if (n % 103 === 0) return false\n  if (n % 107 === 0) return false\n  if (n % 109 === 0) return false\n  if (n % 113 === 0) return false\n  if (n % 127 === 0) return false\n  if (n % 131 === 0) return false\n  if (n % 137 === 0) return false\n  if (n % 139 === 0) return false\n  if (n % 149 === 0) return false\n  if (n % 151 === 0) return false\n  if (n % 157 === 0) return false\n  if (n % 163 === 0) return false\n  if (n % 167 === 0) return false\n  if (n % 173 === 0) return false\n  if (n % 179 === 0) return false\n  if (n % 181 === 0) return false\n  if (n % 187 === 0) return false\n  if (n % 191 === 0) return false\n  if (n % 193 === 0) return false\n  if (n % 197 === 0) return false\n  if (n % 199 === 0) return false\n  if (n % 211 === 0) return false\n  if (n % 223 === 0) return false\n  if (n % 227 === 0) return false\n  if (n % 229 === 0) return false\n  if (n % 233 === 0) return false\n  if (n % 239 === 0) return false\n  if (n % 241 === 0) return false\n  if (n % 251 === 0) return false\n  if (n % 257 === 0) return false\n  if (n % 263 === 0) return false\n  if (n % 269 === 0) return false\n  if (n % 271 === 0) return false\n  if (n % 277 === 0) return false\n  if (n % 281 === 0) return false\n  if (n % 283 === 0) return false\n  if (n % 289 === 0) return false\n  if (n % 293 === 0) return false\n  if (n % 307 === 0) return false\n  if (n % 311 === 0) return false\n  if (n % 313 === 0) return false\n  if (n % 317 === 0) return false\n  if (n % 331 === 0) return false\n  if (n % 337 === 0) return false\n  if (n % 347 === 0) return false\n  if (n % 349 === 0) return false\n  if (n % 353 === 0) return false\n  if (n % 359 === 0) return false\n  if (n % 367 === 0) return false\n  if (n % 373 === 0) return false\n  if (n % 379 === 0) return false\n  if (n % 383 === 0) return false\n  if (n % 389 === 0) return false\n  if (n % 397 === 0) return false\n  if (n % 401 === 0) return false\n  if (n % 409 === 0) return false\n  if (n % 419 === 0) return false\n  if (n % 437 === 0) return false\n  if (n % 459 === 0) return false\n  if (n % 467 === 0) return false\n  if (n % 479 === 0) return false\n  if (n % 487 === 0) return false\n  if (n % 491 === 0) return false\n  if (n % 499 === 0) return false\n  if (n % 503 === 0) return false\n  if (n % 509 === 0) return false\n  if (n % 521 === 0) return false\n  if (n % 541 === 0) return false\n  if (n % 547 === 0) return false\n  if (n % 557 === 0) return false\n  if (n % 563 === 0) return false\n  if (n % 569 === 0) return false\n  if (n % 571 === 0) return false\n  if (n % 577 === 0) return false\n  if (n % 587 === 0) return false\n  if (n % 599 === 0) return false\n  if (n % 601 === 0) return false\n  if (n % 607 === 0) return false\n  if (n % 613 === 0) return false\n  if (n % 617 === 0) return false\n  if (n % 619 === 0) return false\n  if (n % 631 === 0) return false\n  if (n % 641 === 0) return false\n  if (n % 643 === 0) return false\n  if (n % 647 === 0) return false\n  if (n % 653 === 0) return false\n  if (n % 659", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  eVaLUates PoLYNOmial WIth coEffiCiEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncoNSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  eVaLUates PoLYNOmial WIth coEffiCiEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncoNSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let last = xs[0];\n  let last2 = xs[1];\n  let last3 = xs[2];\n  let last4 = xs[3];\n  let last5 = xs[4];\n  let last6 = xs[5];\n  let last7 = xs[6];\n  let last8 = xs[7];\n  let last9 = xs[8];\n  let last10 = xs[9];\n  let last11 = xs[10];\n  let last12 = xs[11];\n  let last13 = xs[12];\n  let last14 = xs[13];\n  let last15 = xs[14];\n  let last16 = xs[15];\n  let last17 = xs[16];\n  let last18 = xs[17];\n  let last19 = xs[18];\n  let last20 = xs[19];\n  let last21 = xs[20];\n  let last22 = xs[21];\n  let last23 = xs[22];\n  let last24 = xs[23];\n  let last25 = xs[24];\n  let last26 = xs[25];\n  let last27 = xs[26];\n  let last28 = xs[27];\n  let last29 = xs[28];\n  let last30 = xs[29];\n  let last31 = xs[30];\n  let last32 = xs[31];\n  let last33 = xs[32];\n  let last34 = xs[33];\n  let last35 = xs[34];\n  let last36 = xs[35];\n  let last37 = xs[36];\n  let last38 = xs[37];\n  let last39 = xs[38];\n  let last40 = xs[39];\n  let last41 = xs[40];\n  let last42 = xs[41];\n  let last43 = xs[42];\n  let last44 = xs[43];\n  let last45 = xs[44];\n  let last46 = xs[45];\n  let last47 = xs[46];\n  let last48 = xs[47];\n  let last49 = xs[48];\n  let last50 = xs[49];\n  let last51 = xs[50];\n  let last52 = xs[51];\n  let last53 = xs[52];\n  let last54 = xs[53];\n  let last55 = xs[54];\n  let last56 = xs[55];\n  let last57 = xs[56];\n  let last58 = xs[57];\n  let last59 = xs[58];\n  let last60 = xs[59];\n  let last61 = xs[60];\n  let last62 = xs[61];\n  let last63 = xs[62];\n  let last64 = xs[63];\n  let last65 = xs[64];\n  let last66 = xs[65];\n  let last67 = xs[66];\n  let last68 = xs[67];\n  let last69 = xs[68];\n  let last70 = xs[69];\n  let last71 = xs[70];\n  let last72 = xs[71];\n  let last73 = xs[72];\n  let last74 = xs[73];\n  let last75 = xs[74];\n  let last76 = xs[75];\n  let last77 = xs[76];\n  let last78 = xs[77];\n  let last79 = xs[78];\n  let last80 = xs[79];\n  let last81 = xs[80];\n  let last82 = xs[81];\n  let last83 = xs[82];\n  let last84 = xs[83];\n  let last85 = xs[84];\n  let last86 = xs[85];\n  let last87 = xs[86];\n  let last88 = xs[87];\n  let last89 = xs[88];\n  let last90 = xs[89];\n  let last91 = xs[90];\n  let last92 = xs[91];\n  let last93 = xs[92];\n  let last94 = xs[93];\n  let last95 = xs[94];\n  let last96 = xs[95];\n  let last97 = xs[96];\n  let last98 = xs[97];\n  let last99 = xs[98];\n  let last100 = xs[99];\n  let last101 = xs[100];\n  let last102 = xs[101];\n  let last103 = xs[102];\n  let last104 = xs[103];\n  let last105 = xs[104];\n  let last106 = xs[105];\n  let last107 = xs[106];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\n/*\n  THis FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird3 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird4 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird5 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird6 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird7 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird8 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird9 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird10 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird11 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird12 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird13 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird14 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird15 = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const third = sorted.slice(sorted.length / 3)\n  return third\n}\n\nconst sortThird16 = (l) => {\n  const sorted = l.sort((a, b) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKey = (l, key) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValue = (l, key, value) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValueAndKey = (l, key, value, key2) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValueAndKeyAndValue = (l, key, value, key2, value2) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValueAndKeyAndValue = (l, key, value, key2, value2) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValueAndKeyAndValue = (l, key, value, key2, value2) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValueAndKeyAndValue = (l, key, value, key2, value2) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyAndValueAndKeyAndValue = (l, key, value, key2, value2) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*RETuRN maxiMuM ELEment in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*RETuRN maxiMuM ELEment in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*RETuRN the nUmBER Of timES the dIgit 7 ApPearS in integers LEsS ThAn n wHiCh ArE diVisIBLe bY 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*RETuRN the nUmBER Of timES the dIgit 7 ApPearS in integers LEsS ThAn n wHiCh ArE diVisIBLe bY 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0, i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizz += 1;\n    }\n    if (i % 3 === 0) {\n      buzz += 1;\n    }\n    if (i % 5 === 0) {\n      fizz += 1;\n    }\n    i += 1;\n  }\n  return fizz + buzz;\n};\n\n/*\n  #TASk: Write a function that takes a number n and returns the number of\n  #      times the number appears in the Fibonacci sequence.\n  #INPUT:\n  #  n = 50\n  #OUTPUT:\n  #  5\n  #  3\n  #  2\n  #  1\n  #  0\n  #  1\n  #  2\n  #  3\n  #  5\n  #  8\n  #  13\n  #  21\n  #  34\n  #  55\n  #  89\n  #  144\n  #  233\n  #  377\n  #  610\n  #  987\n  #  1597\n  #  2584\n  #  4181\n  #  6765\n  #  10946\n  #  17711\n  #  28657\n  #  46368\n  #  75025\n  #  121393\n  #  196418\n  #  317811\n  #  514229\n  #  832040\n  #  1346269\n  #  2178309\n  #  3524578\n  #  5702887\n  #  9227465\n  #  14930352\n  #  24157817\n  #  39088169\n  #  63245986\n  #  102334155\n  #  165580141\n  #  267914296\n  #  433494437\n  #  701408733\n  #  1134903170\n  #  1836311903\n  #  2971215073\n  #  4807526976\n  #  7778743049\n  #  12586269025\n  #  205121427052\n  #  339546974695\n  #  603979706196\n  #  991948837987\n  #  1588584448364\n  #  2517188495521\n  #  4052768509062\n  #  6585258838165\n  #  11220272511211\n  #  18851611808512\n  #  29712150730823\n  #  48075269766462\n  #  77787430496729\n  #  125862690256720\n  #  205121427052745\n  #  3395469746956616\n  #  6039797061965585\n  #  9919488379876064\n  #  15885844483643755\n  #  25171884955213070\n  #  40527685090626350\n  #  658525883816527290\n  #  112202725112113665\n  #  1885161180851237805\n  #  2971215073082338650\n  #  48075269766462502815\n  #  77787430496729014630\n  #  125862690256720258540\n  #  2051214270527450147900\n  #  3395469746956616556845\n  #  60397970619655851439850\n  #  991948837987606417596800\n  #  15885844483643755277900\n  #  251718849552130702539600\n  #  4052768509062635061175000\n  #  6585258838165272902539600\n  #  1122027251121136650139600\n  #  18851611808512378050139600\n  #  29712150730823386502539600\n  #  480752697664625028150139600\n  #  777874304967290146302539600\n  #  1258626902567202585402539600\n  #  20512142705274501479002539600\n  #  33954697469566165568452539600\n  #  603979706196558514398502539600\n  #  9919488379876064175968002539600\n  #  158858444836437552779002539600\n  #  2517188495521307025396002539600\n  #  40527685090626350611750002539600\n  #  65852588381652729025396002539600\n  #  11220272511211366501396002539600\n  #  188516118085123780501396002539600\n  #  297121507308233865025396002539600\n  #  4807526976646250281501396002539600\n  #  7778743049672901463025396002539600\n  #  12586269025672025854025396002539600\n  #  205121427052745014790025396002539600\n  #  339546974695661655684525396002539600\n  #  6039797061965585143985025396002539600\n  #  99194883798760641759680025396002539600\n  #  1588584448364375527790025396002539600\n  #  25171884955213070253960025396002539600\n  #  405276850906263506117500025396002539600\n  #  6585258838", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe Odd InDiCiEs, wHilE ITs vALUeS at the even INdicies ARe EquAL\n  TO thE ValUES Of THe even InDicies Of l, BuT sorTED.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe Odd InDiCiEs, wHilE ITs vALUeS at the even INdicies ARe EquAL\n  TO thE ValUES Of THe even InDicies Of l, BuT sorTED.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    let prime = 7;\n    let fib = 2;\n    let i = 4;\n    while (i < n) {\n        fib = fib + prime;\n        prime = prime * prime;\n        i++;\n    }\n    return fib;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, number) => acc + number, 0) / numbers.length\n  const deviation = numbers.reduce((acc, number) => {\n    const diff = number - mean\n    return acc + Math.pow(diff, 2)\n  }, 0) / numbers.length\n  return Math.sqrt(deviation)\n}\n\n/*\n  fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, number) => acc + number, 0) / numbers.length\n  const deviation = numbers.reduce((acc, number) => {\n    const diff = number - mean\n    return acc + Math.pow(diff, 2)\n  }, 0) / numbers.length\n  return Math.sqrt(deviation)\n}\n\n/*\n  fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, number) => acc + number, 0) / numbers.length\n  const deviation = numbers.reduce((acc, number) => {\n    const diff = number - mean\n    return acc + Math.pow(diff, 2)\n  }, 0) / numbers.length\n  return Math.sqrt(deviation)\n}\n\n/*\n  fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, number) => acc + number, 0) / numbers.length\n  const deviation = numbers.reduce((acc, number) => {\n    const diff = number - mean\n    return acc + Math.pow(diff, 2)\n  }, 0) / numbers.length\n  return Math.sqrt(deviation)\n}\n\n/*\n  fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, number) => acc + number, 0) / numbers.length\n  const deviation = numbers.reduce((acc, number) => {\n    const diff = number - mean\n    return acc + Math.pow(diff, 2)\n  }, 0) / numbers.length\n  return Math.sqrt(deviation)\n}\n\n/*\n  fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, number) => acc + number, 0) / numbers.length\n  const deviation = numbers.reduce((acc, number) => {\n    const diff = number - mean\n    return acc + Math.pow(diff, 2)\n  }, 0) / numbers.length\n  return Math.sqrt(deviation)\n}\n\n/*\n  fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of Th", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  iMaGIne a rOaD THAt's a pERfectLy stRaIght InfinitelY LoNG lIne.\n  n CaRs ArE drIviNG LefT TO rIght;  siMUltaneoUSlY, a dIFFEreNT seT OF n CaRS\n  aRe DrivinG rIgHt to LEFT.   thE Two sets of cARs stArt out beIng Very FaR frOM\n  each OThEr.  all carS mOve in thE Same sPeed.  two Cars ARe sAId to colLiDE\n  wheN a CAr That'S MovinG Left to riGht hIts a cAr thAT'S mOving rIghT tO LEFt.\n  HoweVer, the cArs are InfiniTELy sturdY aND strong; AS a resULT, They CONtInue mOvING\n  in THEiR trajectory as If tHEy Did nOt cOlLiDE.\n\n  ThIs fuNction outpUts The nUmBer Of sUch collisioNs.\n  */\nconST carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  iMaGIne a rOaD THAt's a pERfectLy stRaIght InfinitelY LoNG lIne.\n  n CaRs ArE drIviNG LefT TO rIght;  siMUltaneoUSlY, a dIFFEreNT seT OF n CaRS\n  aRe DrivinG rIgHt to LEFT.   thE Two sets of cARs stArt out beIng Very FaR frOM\n  each OThEr.  all carS mOve in thE Same sPeed.  two Cars ARe sAId to colLiDE\n  wheN a CAr That'S MovinG Left to riGht hIts a cAr thAT'S mOving rIghT tO LEFt.\n  HoweVer, the cArs are InfiniTELy sturdY aND strong; AS a resULT, They CONtInue mOvING\n  in THEiR trajectory as If tHEy Did nOt cOlLiDE.\n\n  ThIs fuNction outpUts The nUmBer Of sUch collisioNs.\n  */\nconST carRaceCollision = (n) => {\n  const car1 = (car) => {\n    car.collision = false;\n    car.collision_time = 0;\n    car.collision_time_last = 0;\n    car.collision_time_next = 0;\n    car.collision_time_next_last = 0;\n    car.collision_time_next_next = 0;\n    car.collision_time_next_next_last = 0;\n    car.collision_time_next_next_next = 0;\n    car.collision_time_next_next_next_last = 0;\n    car.collision_time_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    car.collision_time_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_last = 0;\n    car.collision_time_next", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*RETuRN list with ElEMENts inCRemenTed bY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*RETuRN list with ElEMENts inCRemenTed bY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let i = 1;\n  let j = 0;\n  let result = [];\n  while (i <= l) {\n    result[j] = i;\n    i = i + 1;\n    j = j + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diSTIn", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*CHAnGE numeRiCAL base Of inpUT numbEr x to base.\n  return StRing RepresentATiON aFteR tHe CoNveRsiON.\n  base NumBERs Are lesS Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*CHAnGE numeRiCAL base Of inpUT numbEr x to base.\n  return StRing RepresentATiON aFteR tHe CoNveRsiON.\n  base NumBERs Are lesS Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\n/*\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase3 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase4 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase5 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase6 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase7 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase8 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase9 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase10 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase11 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase12 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase13 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase14 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase15 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase16 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase17 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const resLen = res.length;\n  const resStr = res.join('');\n  const resInt = parseInt(resStr, base);\n  return resInt;\n};\n\nconst changeBase18 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GIVeN LengtH oF a SIDe and", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*THE FIB4 numbEr SEQUence IS a seqUencE sImilAr to the FiBBoNAcCi sEqUnEcE thAt's DEFinED As FollowS:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*THE FIB4 numbEr SEQUence IS a seqUencE sImilAr to the FiBBoNAcCi sEqUnEcE thAt's DEFinED As FollowS:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*RETuRN median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*RETuRN median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const count = 1;\n  let current = sorted[half];\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i]!== current) {\n      count++;\n      current = sorted[i];\n    }\n  }\n  return current;\n};\n\n/*\n  RETuRNs the mode of elEmENTS in the list l.\n  >>> mode([3, 1, 2,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome10 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome11 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome12 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*RETuRN 2^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*RETuRN 2^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (n % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p)\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp6(3, 5)\n  3\n  >>> modp6(1101, 101)\n  2\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp7(3, 5)\n  3\n  >>> modp7(1101, 101)\n  2\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp8(3, 5)\n  3\n  >>> modp8(1101, 101)\n  2\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp9(3, 5)\n  3\n  >>> modp9(1101, 101)\n  2\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return (Math.pow(p, n) % p) + p\n}\n\n/*RETuRN p^n modUlO p (BE Aware OF numeRics).\n  >>> modp10(3, 5)\n  3\n  >>> modp10(1101, 101)\n  2\n  >>> modp10(0, 101)\n  1\n  >>> mod", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* iNsERt a nuMbER 'delimeter' BEtweeN Every Two cOnSecuTive elemeNTs OF iNpuT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* iNsERt a nuMbER 'delimeter' BEtweeN Every Two cOnSecuTive elemeNTs OF iNpuT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse8 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse9 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse10 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse11 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(numbers[i]);\n    } else {\n      result.push", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPut STriNG ENcODeD wIth encOdE_sHift FUNCTiON. Returns deCOded String.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPut STriNG ENcODeD wIth encOdE_sHift FUNCTiON. Returns deCOded String.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode = (s) => {\n  return encodeShift(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst decode = (s) => {\n  return decodeShift(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode = (s) => {\n  return encode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_encode = (s) => {\n  return encode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode = (s) => {\n  return decode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode_encode = (s) => {\n  return decode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode_decode = (s) => {\n  return decode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode_decode_encode = (s) => {\n  return decode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode_decode_decode_encode = (s) => {\n  return decode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode_decode_decode_decode_encode = (s) => {\n  return decode(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPUTted String, deCOded wIth encOdE_sHift FUNCTiON.\n  */\ncoNst encode_decode_decode_decode_decode_decode_decode_encode = (s)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = text;\n  vowels.forEach((v) => {\n    newText = newText.replace(v, '');\n  });\n  return newText;\n};\n\n/*\n  removePunctuation IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\n', '\\t'];\n  let newText = text;\n  punctuation.forEach((p) => {\n    newText = newText.replace(p, '');\n  });\n  return newText;\n};\n\n/*\n  removeNonAlphaNumeric IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeNonAlphaNumeric('')\n  ''\n  >>> removeNonAlphaNumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphaNumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphaNumeric('aaaaa')\n  ''\n  >>> removeNonAlphaNumeric('aaBAA')\n  'BAA'\n  >>> removeNonAlphaNumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphaNumeric = (text) => {\n  const nonAlphaNumeric = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  let newText = text;\n  nonAlphaNumeric.forEach((n) => {\n    newText = newText.replace(n, '');\n  });\n  return newText;\n};\n\n/*\n  removeAllPunctuation IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdef'\n  >>> removeAllPunctuation('aaaaa')\n  ''\n  >>> removeAllPunctuation('aaBAA')\n  'BAA'\n  >>> removeAllPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuation = (text) => {\n  const punctuation = ['.', ',', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\n', '\\t'];\n  let newText = text;\n  punctuation.forEach((p) => {\n    newText = newText.replace(p, '');\n  });\n  return newText;\n};\n\n/*\n  removeAllNonAlphaNumeric IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeAllNonAlphaNumeric('')\n  ''\n  >>> removeAllNonAlphaNumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllNonAlphaNumeric('abcdef')\n  'abcdef'\n  >>> removeAllNonAlphaNumeric('aaaaa')\n  ''\n  >>> removeAllNonAlphaNumeric('aaBAA')\n  'BAA'\n  >>> removeAllNonAlphaNumeric('zbcd')\n  'zbcd'\n  */\nconst removeAllNonAlphaNumeric = (text) => {\n  const nonAlphaNumeric = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  let newText = text", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*RETuRN true If ALL NumbeRS in the list l aRe beLoW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*RETuRN true If ALL NumbeRS in the list l aRe beLoW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold15 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold16 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold17 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold18 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold19 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold20 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x, y) => {\n  return x + y;\n};\n\nconst add68 = (x, y) => {\n  return x + y;\n};\n\nconst add", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsIgnoreCase = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsIgnoreCaseAndCaseSensitive = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  sameChars,\n  sameCharsIgnoreCase,\n  sameCharsIgnoreCaseAndCaseSensitive\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*RETuRN n-th FiboNaCCI NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*RETuRN n-th FiboNaCCI NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets IS a STring Of \"<\" AND \">\".\n  return False IF everY opeNiNg brAcket has a COrREsPonDiNg ClOsiNg bRACkeT.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets IS a STring Of \"<\" AND \">\".\n  return False IF everY opeNiNg brAcket has a COrREsPonDiNg ClOsiNg bRACkeT.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsLength = brackets.length\n  let bracketsIndex = 0\n  let bracketsStack = []\n  let bracketsStackIndex = 0\n  let bracketsStackLength = bracketsLength\n\n  while (bracketsStackIndex < bracketsStackLength) {\n    let bracket = brackets[bracketsIndex]\n    let bracketType = brackets[bracketsIndex].type\n    let bracketIndex = bracketsIndex\n\n    while (bracketIndex < bracketsLength) {\n      let bracketNext = brackets[bracketIndex + 1]\n      let bracketNextType = brackets[bracketIndex + 1].type\n\n      if (bracketNextType === bracketType) {\n        bracketsStack.push(bracket)\n        bracketsStackIndex++\n        bracketIndex++\n      } else if (bracketNextType === \">\") {\n        bracketsStack.push(bracket)\n        bracketsStackIndex++\n        bracketIndex++\n      } else if (bracketNextType === \"<\") {\n        bracketIndex++\n      } else {\n        return false\n      }\n    }\n\n    bracketsIndex++\n  }\n\n  return true\n}\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*RETuRN true Is list ELEMents ARe monOtonIcAlly IncreasinG Or DEcReaSiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*RETuRN true Is list ELEMents ARe monOtonIcAlly IncreasinG Or DEcReaSiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] > 0;\n};\n\n/*\n  >>> monotonic([1, 2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RETuRN sortEd UNIQue common elEMents For tWo ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*RETuRN sortEd UNIQue common elEMents For tWo ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1s = l1.slice();\n  const l2s = l2.slice();\n  const l1sLen = l1s.length;\n  const l2sLen = l2s.length;\n  const l1sLenMinus1 = l1sLen - 1;\n  const l2sLenMinus1 = l2sLen - 1;\n  const l1sLenMinus2 = l1sLen - 2;\n  const l2sLenMinus2 = l2sLen - 2;\n  const l1sLenMinus3 = l1sLen - 3;\n  const l2sLenMinus3 = l2sLen - 3;\n  const l1sLenMinus4 = l1sLen - 4;\n  const l2sLenMinus4 = l2sLen - 4;\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < l1sLen && j < l2sLen) {\n    if (l1s[i] === l2s[j]) {\n      k = i;\n      while (k < l1sLenMinus1 && l1s[k] === l2s[j]) {\n        k++;\n      }\n      if (k === l1sLenMinus1) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l2sLenMinus1) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l1sLenMinus2) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l2sLenMinus2) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l1sLenMinus3) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l2sLenMinus3) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l1sLenMinus4) {\n        return [l1s[i], l2s[j]];\n      }\n      if (k === l2sLenMinus4) {\n        return [l1s[i], l2s[j]];\n      }\n    }\n    i++;\n    j++;\n  }\n  return [];\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*RETuRN the largest pRiME FActor OF n. AssuMe n > 1 anD iS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*RETuRN the largest pRiME FActor OF n. AssuMe n > 1 anD iS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  if (n === 3) {\n    return 3\n  }\n  if (n === 4) {\n    return 4\n  }\n  if (n === 5) {\n    return 5\n  }\n  if (n === 6) {\n    return 6\n  }\n  if (n === 7) {\n    return 7\n  }\n  if (n === 8) {\n    return 8\n  }\n  if (n === 9) {\n    return 9\n  }\n  if (n === 10) {\n    return 10\n  }\n  if (n === 11) {\n    return 11\n  }\n  if (n === 12) {\n    return 12\n  }\n  if (n === 13) {\n    return 13\n  }\n  if (n === 14) {\n    return 14\n  }\n  if (n === 15) {\n    return 15\n  }\n  if (n === 16) {\n    return 16\n  }\n  if (n === 17) {\n    return 17\n  }\n  if (n === 18) {\n    return 18\n  }\n  if (n === 19) {\n    return 19\n  }\n  if (n === 20) {\n    return 20\n  }\n  if (n === 21) {\n    return 21\n  }\n  if (n === 22) {\n    return 22\n  }\n  if (n === 23) {\n    return 23\n  }\n  if (n === 24) {\n    return 24\n  }\n  if (n === 25) {\n    return 25\n  }\n  if (n === 26) {\n    return 26\n  }\n  if (n === 27) {\n    return 27\n  }\n  if (n === 28) {\n    return 28\n  }\n  if (n === 29) {\n    return 29\n  }\n  if (n === 30) {\n    return 30\n  }\n  if (n === 31) {\n    return 31\n  }\n  if (n === 32) {\n    return 32\n  }\n  if (n === 33) {\n    return 33\n  }\n  if (n === 34) {\n    return 34\n  }\n  if (n === 35) {\n    return 35\n  }\n  if (n === 36) {\n    return 36\n  }\n  if (n === 37) {\n    return 37\n  }\n  if (n === 38) {\n    return 38\n  }\n  if (n === 39) {\n    return 39\n  }\n  if (n === 40) {\n    return 40\n  }\n  if (n === 41) {\n    return 41\n  }\n  if (n === 42) {\n    return 42\n  }\n  if (n === 43) {\n    return 43\n  }\n  if (n === 44) {\n    return 44\n  }\n  if (n === 45) {\n    return 45\n  }\n  if (n === 46) {\n    return 46\n  }\n  if (n === 47) {\n    return 47\n  }\n  if (n === 48) {\n    return 48\n  }\n  if (n === 49) {\n    return 49\n  }\n  if (n === 50) {\n    return 50\n  }\n  if (n === 51) {\n    return 51\n  }\n  if (n === 52) {\n    return 52\n  }\n  if (n === 53) {\n    return 53\n  }\n  if (n === 54) {\n    return 54\n  }\n  if (n === 55) {\n    return 55\n  }\n  if (n === 56) {\n    return 56\n  }\n  if (n === 57) {\n    return 57\n  }\n  if (n === 58) {\n    return 58\n  }\n  if (n === 59) {\n    return 59\n  }\n  if (n === 60) {\n    return 60\n  }\n  if (n === 61) {\n    return 61\n  }\n  if (n === 62) {\n    return 62\n  }\n  if (n === 63) {\n    return 63\n  }\n  if (n === 64) {\n    return 64\n  }\n  if (n === 65) {\n    return 65\n  }\n  if (n === 66) {\n    return 66\n  }\n  if (n === 67) {\n    return 67\n  }\n  if (n === 68) {\n    return 68\n  }\n  if (n === 69) {\n    return 69\n  }\n  if (n === 70) {\n    return 70\n  }\n  if (n === 71) {\n    return 71\n  }\n  if (n === 72) {\n    return 72\n  }\n  if (n === 73) {\n    return 73\n  }\n  if (n === 74) {\n    return 74\n  }\n  if (n === 75) {\n    return 75\n  }\n  if (n === 76) {\n    return 76\n  }\n  if (n === 77) {\n    return 77\n  }\n  if (n === 78) {\n    return 78\n  }\n  if (n === 79) {\n    return 79\n  }\n  if (n === 80) {\n    return 80\n  }\n  if (n === 81) {\n    return 81\n  }\n  if (n === 82) {\n    return 82\n  }\n  if (n === 83) {\n    return 83\n  }\n  if (n === 84) {\n    return 84\n  }\n  if (n === 85) {\n    return 85\n  }\n  if (n === 86) {\n    return 86\n  }\n  if (n === 87) {\n    return 87\n  }\n  if (n === 88) {\n    return 88\n  }\n  if (n === 89) {\n    return 89\n  }\n  if (n === 90) {\n    return 90\n  }\n  if (n === 91) {\n    return 91\n  }\n  if (n === 92) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length\n  const paren_string_array = paren_string.split('')\n  const paren_string_array_length = paren_string_array.length\n  const paren_string_array_index = 0\n  const paren_string_array_index_max = paren_string_array_length - 1\n  const paren_string_array_index_max_minus_one = paren_string_array_index_max - 1\n  const paren_string_array_index_max_minus_two = paren_string_array_index_max_minus_one - 1\n  const paren_string_array_index_max_minus_three = paren_string_array_index_max_minus_two - 1\n  const paren_string_array_index_max_minus_four = paren_string_array_index_max_minus_three - 1\n  const paren_string_array_index_max_minus_five = paren_string_array_index_max_minus_four - 1\n  const paren_string_array_index_max_minus_six = paren_string_array_index_max_minus_five - 1\n  const paren_string_array_index_max_minus_seven = paren_string_array_index_max_minus_six - 1\n  const paren_string_array_index_max_minus_eight = paren_string_array_index_max_minus_seven - 1\n  const paren_string_array_index_max_minus_nine = paren_string_array_index_max_minus_eight - 1\n  const paren_string_array_index_max_minus_ten = paren_string_array_index_max_minus_nine - 1\n  const paren_string_array_index_max_minus_eleven = paren_string_array_index_max_minus_ten - 1\n  const paren_string_array_index_max_minus_twelve = paren_string_array_index_max_minus_eleven - 1\n  const paren_string_array_index_max_minus_thirteen = paren_string_array_index_max_minus_twelve - 1\n  const paren_string_array_index_max_minus_fourteen = paren_string_array_index_max_minus_thirteen - 1\n  const paren_string_array_index_max_minus_fifteen = paren_string_array_index_max_minus_fourteen - 1\n  const paren_string_array_index_max_minus_sixteen = paren_string_array_index_max_minus_fifteen - 1\n  const paren_string_array_index_max_minus_seventeen = paren_string_array_index_max_minus_sixteen - 1\n  const paren_string_array_index_max_minus_eighteen = paren_string_array_index_max_minus_seventeen - 1\n  const paren_string_array_index_max_minus_nineteen = paren_string_array_index_max_minus_eighteen - 1\n  const paren_string_array_index_max_minus_twenty = paren_string_array_index_max_minus_nineteen - 1\n  const paren_string_array_index_max_minus_twenty_one = paren_string_array_index_max_minus_twenty - 1\n  const paren_string_array_index_max_minus_twenty_two = paren_string_array_index_max_minus_twenty_one - 1\n  const paren_string_array_index_max_minus_twenty_three = paren_string_array_index_max_minus_twenty_two - 1\n  const paren_string_array_index_max_minus_twenty_four = paren_string_array_index_max_minus_twenty_three - 1\n  const paren_string_array_index_max_minus_twenty_five = paren_string_array_index_max_minus_twenty_four - 1\n  const paren_string_array_index_max_minus_twenty_six = paren_string_array_index_max_minus_twenty_five - 1\n  const paren_string_array_index_max_minus_twenty_seven = paren_string_array_index_max_minus_twenty_six - 1\n  const paren_string_array_index_max_minus_twenty_eight = paren_string_array_index_max_minus_twenty_seven - 1\n  const paren_string_array_index_max_minus_twenty_nine = paren_string_array_index_max_minus_twenty_eight - 1\n  const paren_string_array_index_max_minus_thirty = paren_string_array_index_max_minus_twenty_nine - 1\n  const paren_string_array_index_max_minus_thirty_one = paren_string_array_index_max_minus_thirty - 1\n  const paren_string_array_index_max_minus_thirty_two = paren_string_array_index_max_minus_thirty_one - 1\n  const paren_string_array_index_max_minus_thirty_three = paren_string_array_index_max_minus_thirty_two - 1\n  const paren_string_array_index_max_minus_thirty_four = paren_string_array_index_max_minus_thirty_three - 1\n  const paren_string_array_index_max_minus_thirty_five = paren_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUMTOn is a fUnCTIOn thaT Sums nUmbeRs From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sUMTOn is a fUnCTIOn thaT Sums nUmbeRs From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets IS a STring Of \"(\" AND \")\".\n  return True iF Every OpenInG braCket has a cORrESpOndInG cLoSinG brACKet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets IS a STring Of \"(\" AND \")\".\n  return True iF Every OpenInG braCket has a cORrESpOndInG cLoSinG brACKet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    i = 0,\n    j = 0;\n  while (i < brackets.length) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(\"(\");\n      i++;\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      if (stack[stack.length - 1] === \"(\") {\n        stack.pop();\n        i++;\n      } else {\n        return false;\n      }\n    } else {\n      i++;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"()()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"()\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative3 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative4 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative5 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative6 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative7 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative8 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative9 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative10 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative11 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative12 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative13 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative14 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative15 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative16 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative17 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\nconst derivative18 = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*THE FIBFib nUmBER SequeNCe is a SequEnCe siMilar to thE fiBBoNacCi SeQuNecE thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*THE FIBFib nUmBER SequeNCe is a SequEnCe siMilar to thE fiBBoNacCi SeQuNecE thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U', 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U', 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U', 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U', 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U', 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  WRItE A funcTiON", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*CIRcULar shift thE dIGITs of tHE inteGer x, shift tHe DigiTs right by shift\n  ANd return THe ResUlT aS a StrIng.\n  iF shift > NumBER oF digitS, return Digits rEVeRseD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*CIRcULar shift thE dIGITs of tHE inteGer x, shift tHe DigiTs right by shift\n  ANd return THe ResUlT aS a StrIng.\n  iF shift > NumBER oF digitS, return Digits rEVeRseD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = []\n  for (let i = 0; i < digits.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\n/*TASk\n  wR", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  iN tHIs tasK, yOU WIll be GIven a StriNg That RepresentS A nUMbEr oF aPpLeS anD orANGes\n  THAt Are disTRibuted in A BaSkeT OF FruIT thIS BAsKEt CoNtains\n  ApPlEs, orANGES, aND mango fruiTS. GivEn the strIng That RePreSEnts tHE tOtAl numbEr Of\n  the ORangeS and AppLes aND an INteger tHaT ReprEsENt The tOTal nuMBer of the FruiTs\n  in the BaskET return ThE numbeR of ThE MANgo fruIts in the bAsket.\n  fOr examBLE:\n  fruitDistribution(\"5 apples AnD 6 Oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 APples AND 1 OranGES\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oraNgeS\",120) -> 120 - 100 - 1 = 19\n  */\nCoNst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  iN tHIs tasK, yOU WIll be GIven a StriNg That RepresentS A nUMbEr oF aPpLeS anD orANGes\n  THAt Are disTRibuted in A BaSkeT OF FruIT thIS BAsKEt CoNtains\n  ApPlEs, orANGES, aND mango fruiTS. GivEn the strIng That RePreSEnts tHE tOtAl numbEr Of\n  the ORangeS and AppLes aND an INteger tHaT ReprEsENt The tOTal nuMBer of the FruiTs\n  in the BaskET return ThE numbeR of ThE MANgo fruIts in the bAsket.\n  fOr examBLE:\n  fruitDistribution(\"5 apples AnD 6 Oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 APples AND 1 OranGES\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oraNgeS\",120) -> 120 - 100 - 1 = 19\n  */\nCoNst fruitDistribution = (s, n) => {\n    let str = s.split(\" \");\n    let num = parseInt(str[0]);\n    let fruit = parseInt(str[1]);\n    let total = num * fruit;\n    return total;\n};\n\nconsole.log(fruitDistribution(\"5 apples AnD 6 Oranges\", 19));\nconsole.log(fruitDistribution(\"0 APples AND 1 OranGES\", 3));\nconsole.log(fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oraNgeS\", 120));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"gIvEN an arRaY REPreseNTing a BranCh Of a tRee that haS NoN-NeGatIvE iNtEgeR noDES\n  yoUR TaSk is to pluck ONe of the NOdEs aND return IT.\n  ThE PluCKED nODe ShOuld be ThE nOde wITH THe SMallest eveN ValuE.\n  If multiPle NodeS wIth THe samE SmAlLest evEn Value ARe fouNd return thE noDe thAT haS SmallesT iNDex.\n\n  THe PLuCked NOde shOUld be retUrneD in a list, [ smaLest_VALuE, its inDex ],\n  if THERe are nO even vaLues or The givEN Array is EmPTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"gIvEN an arRaY REPreseNTing a BranCh Of a tRee that haS NoN-NeGatIvE iNtEgeR noDES\n  yoUR TaSk is to pluck ONe of the NOdEs aND return IT.\n  ThE PluCKED nODe ShOuld be ThE nOde wITH THe SMallest eveN ValuE.\n  If multiPle NodeS wIth THe samE SmAlLest evEn Value ARe fouNd return thE noDe thAT haS SmallesT iNDex.\n\n  THe PLuCked NOde shOUld be retUrneD in a list, [ smaLest_VALuE, its inDex ],\n  if THERe are nO even vaLues or The givEN Array is EmPTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [smallest, index] = findSmallest(arr)\n  return [smallest, index]\n}\n\nconst findSmallest = (arr) => {\n  const [smallest, index] = [Infinity, -1]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i]\n      index = i\n    }\n  }\n  return [smallest, index]\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer ThaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREatER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer ThaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREatER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\n/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer THaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREATER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2)\n  let cmp = (a, b) => a - b\n  while (i < j) {\n    if (lst[mid] < lst[i]) {\n      i = mid + 1\n    } else if (lst[mid] > lst[i]) {\n      j = mid - 1\n    } else {\n      return mid\n    }\n    mid = Math.floor((i + j) / 2)\n  }\n  return -1\n}\n\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = Math.floor((i + j) / 2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  const index = strings.indexOf(substring);\n  if (index!== -1) {\n    result.push(strings[index]);\n  }\n  return result;\n};\n\nexport default filterBySubstring;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListBy = (lst, f) => {\n  const sorted = lst.sort((a, b) => f(a, b))\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListBy = (lst, f) => {\n  const sorted = lst.sort((a, b) => f(a, b))\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListBy = (lst, f) => {\n  const sorted = lst.sort((a, b) => f(a, b))\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListBy = (lst, f) => {\n  const sorted = lst.sort((a, b) => f(a, b))\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListBy = (lst, f) => {\n  const sorted = lst.sort((a, b) => f(a, b))\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListBy = (lst, f) => {\n  const sorted = lst.sort((a, b) => f(a, b))\n  return sorted\n}\n\n/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUM vALUE,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tHE area oF\n  thE tRiAnGle RouNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLe.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tHE area oF\n  thE tRiAnGle RouNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLe.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 12\n  return Math.sqrt(s2 - s * s)\n}\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triANGLE. RetuRN tHE area oF\n  thE tRiAnGle ROUNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLE.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 12\n  return Math.sqrt(s2 - s * s)\n}\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triANGLE. RetuRN tHE area oF\n  thE tRiAnGle ROUNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLE.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 12\n  return Math.sqrt(s2 - s * s)\n}\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triANGLE. RetuRN tHE area oF\n  thE tRiAnGle ROUNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLE.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 12\n  return Math.sqrt(s2 - s * s)\n}\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triANGLE. RetuRN tHE area oF\n  thE tRiAnGle ROUNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLE.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 12\n  return Math.sqrt(s2 - s * s)\n}\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triANGLE. RetuRN tHE area oF\n  thE tRiAnGle ROUNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLE.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 12\n  return Math.sqrt(s2 - s * s)\n}\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triANGLE. RetuRN tHE area oF\n  thE tRiAnGle ROUNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vAL", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) ANd ThE sum of ItS eLemeNTS IS lESs than or eqUAl thE maximum PosSiblE wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) ANd ThE sum of ItS eLemeNTS IS lESs than or eqUAl thE maximum PosSiblE wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w\n}\n\n/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) AND it's balanced.\n\n  Example:\n  willItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyBalanced = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\n/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) AND it's balanced.\n\n  Example:\n  willItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyBalanced2 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 1\n}\n\n/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) AND it's balanced.\n\n  Example:\n  willItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyBalanced3 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\n/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) AND it's balanced.\n\n  Example:\n  willItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyBalanced4 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 1\n}\n\n/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) AND it's balanced.\n\n  Example:\n  willItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange2 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange3 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange4 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange5 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange6 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange7 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange8 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange9 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange10 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange11 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange12 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst smallestChange13 = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  wRiTE a funCtION That aCCepts Two lIsTs of Strings anD ReTUrNs tHe list ThAt Has\n  TotAL NumBER oF chars in THe all stRInGs oF THE list leSS thAN THe OThEr list.\n\n  If the tWo LiSts hAVE THe SAme number oF CharS, return the firsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That aCCepts Two lIsTs of Strings anD ReTUrNs tHe list ThAt Has\n  TotAL NumBER oF chars in THe all stRInGs oF THE list leSS thAN THe OThEr list.\n\n  If the tWo LiSts hAVE THe SAme number oF CharS, return the firsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n  if (lst1Len === 0 || lst2Len === 0) return []\n  if (lst1Len === 1 && lst2Len === 1) return lst1\n  if (lst1Len === 1 && lst2Len === 2) return lst1\n  if (lst1Len === 2 && lst2Len === 1) return lst1\n  if (lst1Len === 2 && lst2Len === 2) return [lst1[0], lst1[1], lst2[0], lst2[1]]\n  if (lst1Len === 2 && lst2Len === 3) return [lst1[0], lst1[1], lst2[0], lst2[1], lst2[2]]\n  if (lst1Len === 3 && lst2Len === 1) return [lst1[0], lst1[1], lst1[2], lst2[0]]\n  if (lst1Len === 3 && lst2Len === 2) return [lst1[0], lst1[1], lst1[2], lst2[0], lst2[1]]\n  if (lst1Len === 3 && lst2Len === 3) return [lst1[0], lst1[1], lst1[2], lst2[0], lst2[1], lst2[2]]\n  if (lst1Len === 3 && lst2Len === 4) return [lst1[0], lst1[1], lst1[2], lst2[0], lst2[1], lst2[2], lst2[3]]\n  if (lst1Len === 4 && lst2Len === 1) return [lst1[0], lst1[1], lst1[2], lst1[3], lst2[0]]\n  if (lst1Len === 4 && lst2Len === 2) return [lst1[0], lst1[1], lst1[2], lst1[3], lst2[0], lst2[1]]\n  if (lst1Len === 4 && lst2Len === 3) return [lst1[0], lst1[1], lst1[2], lst1[3], lst2[0], lst2[1], lst2[2]]\n  if (lst1Len === 4 && lst2Len === 4) return [lst1[0], lst1[1], lst1[2], lst1[3], lst2[0], lst2[1], lst2[2], lst2[3]]\n  return []\n}\n\nexport default totalMatch\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*WRItE a FunctIoN THAt retURns trUe if ThE givEn number iS ThE MuLtiPlIcAtIon Of 3 pRIMe nUMBeRs\n  and fALse otheRWiSe.\n  KNOWIng THat (a) IS LEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*WRItE a FunctIoN THAt retURns trUe if ThE givEn number iS ThE MuLtiPlIcAtIon Of 3 pRIMe nUMBeRs\n  and fALse otheRWiSe.\n  KNOWIng THat (a) IS LEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast2 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow2 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast3 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow3 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast4 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow4 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast5 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow5 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast6 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow6 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast7 = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) return false;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOUr TAsk is To WRITe a fuNCtion That ReTurnS true if a nUMbER x iS a sImPlE\n  power oF n anD faLSE in otHER cAses.\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*YOUr TAsk is To WRITe a fuNCtion That ReTurnS true if a nUMbER x iS a sImPlE\n  power oF n anD faLSE in otHER cAses.\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return x === 1 || x === 2;\n  }\n  if (n === 3) {\n    return x === 1 || x === 3;\n  }\n  if (n === 4) {\n    return x === 2 || x === 4;\n  }\n  if (n === 5) {\n    return x === 2 || x === 5;\n  }\n  if (n === 6) {\n    return x === 3 || x === 6;\n  }\n  if (n === 7) {\n    return x === 3 || x === 7;\n  }\n  if (n === 8) {\n    return x === 4 || x === 8;\n  }\n  if (n === 9) {\n    return x === 4 || x === 9;\n  }\n  if (n === 10) {\n    return x === 5 || x === 10;\n  }\n  if (n === 11) {\n    return x === 5 || x === 11;\n  }\n  if (n === 12) {\n    return x === 6 || x === 12;\n  }\n  if (n === 13) {\n    return x === 6 || x === 13;\n  }\n  if (n === 14) {\n    return x === 7 || x === 14;\n  }\n  if (n === 15) {\n    return x === 7 || x === 15;\n  }\n  if (n === 16) {\n    return x === 8 || x === 16;\n  }\n  if (n === 17) {\n    return x === 8 || x === 17;\n  }\n  if (n === 18) {\n    return x === 9 || x === 18;\n  }\n  if (n === 19) {\n    return x === 9 || x === 19;\n  }\n  if (n === 20) {\n    return x === 10 || x === 20;\n  }\n  if (n === 21) {\n    return x === 10 || x === 21;\n  }\n  if (n === 22) {\n    return x === 11 || x === 22;\n  }\n  if (n === 23) {\n    return x === 11 || x === 23;\n  }\n  if (n === 24) {\n    return x === 12 || x === 24;\n  }\n  if (n === 25) {\n    return x === 12 || x === 25;\n  }\n  if (n === 26) {\n    return x === 13 || x === 26;\n  }\n  if (n === 27) {\n    return x === 13 || x === 27;\n  }\n  if (n === 28) {\n    return x === 14 || x === 28;\n  }\n  if (n === 29) {\n    return x === 14 || x === 29;\n  }\n  if (n === 30) {\n    return x === 15 || x === 30;\n  }\n  if (n === 31) {\n    return x === 15 || x === 31;\n  }\n  if (n === 32) {\n    return x === 16 || x === 32;\n  }\n  if (n === 33) {\n    return x === 16 || x === 33;\n  }\n  if (n === 34) {\n    return x === 17 || x === 34;\n  }\n  if (n === 35) {\n    return x === 17 || x === 35;\n  }\n  if (n === 36) {\n    return x === 18 || x === 36;\n  }\n  if (n === 37) {\n    return x === 18 || x === 37;\n  }\n  if (n === 38) {\n    return x === 19 || x === 38;\n  }\n  if (n === 39) {\n    return x === 19 || x === 39;\n  }\n  if (n === 40) {\n    return x === 20 || x === 40;\n  }\n  if (n === 41) {\n    return x === 20 || x === 41;\n  }\n  if (n === 42) {\n    return x === 21 || x === 42;\n  }\n  if (n === 43) {\n    return x === 21 || x === 43;\n  }\n  if (n === 44) {\n    return x === 22 || x === 44;\n  }\n  if (n === 45) {\n    return x === 22 || x === 45;\n  }\n  if (n === 46) {\n    return x === 23 || x === 46;\n  }\n  if (n === 47) {\n    return x === 23 || x === 47;\n  }\n  if (n === 48) {\n    return x === 24 || x === 48;\n  }\n  if (n === 49) {\n    return x === 24 || x === 49;\n  }\n  if (n === 50) {\n    return x === 25 || x === 50;\n  }\n  if (n === 51) {\n    return x === 25 || x === 51;\n  }\n  if (n === 52) {\n    return x === 26 || x === 52;\n  }\n  if (n === 53) {\n    return x === 26 || x === 53;\n  }\n  if (n === 54) {\n    return x === 27 || x === 54;\n  }\n  if (n === 55) {\n    return x === 27 || x === 55;\n  }\n  if (n === 56) {\n    return x === 28 || x === 56;\n  }\n  if (n === 57) {\n    return x === 28 || x === 57;\n  }\n  if (n === 58) {\n    return x === 29 || x === 58;\n  }\n  if (n === 59) {\n    return x === 29 || x === 59;\n  }\n  if (n === 60) {\n    return x === 30 || x === 60;\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return iscube(a / 2)\n  return!iscube(a / 2)\n}\n\nconst ispand = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return ispand(a / 2)\n  return!ispand(a / 2)\n}\n\nconst isprime = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime2 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime3 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime4 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime5 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime6 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime7 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime8 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime9 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime10 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime11 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime12 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime13 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime14 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isprime15 = (a) => {\n  if (a < 1) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*YOU hAVe beeN tASKEd to wRIte a fUnctIoN thaT receives\n  A HeXAdEciMaL nUmBer As a STRinG ANd Counts THe numbeR Of HexADECimAL\n  diGITS tHAt ArE primes (prime NuMbEr=== or A PRIMe=== IS a natural nUMber\n  Greater tHan 1 That Is Not A ProduCT oF tWo smalLeR natuRAl numBers).\n  hexAdecIMal DIgits arE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== c=== D=== E=== F.\n  prIMe NumbERs are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO you have To deTermiNe a nUMBeR of the FolLoWING digitS: 2=== 3=== 5=== 7===\n  B (=decimAl 11)=== D (=decImal 13).\n  NoTE: You may aSsUMe the inPUt is aLWAYs coRREcT or emPtY STRINg===\n  And symbols A===B===C===d===E===F ARe AlwaYs uPpErCAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*YOU hAVe beeN tASKEd to wRIte a fUnctIoN thaT receives\n  A HeXAdEciMaL nUmBer As a STRinG ANd Counts THe numbeR Of HexADECimAL\n  diGITS tHAt ArE primes (prime NuMbEr=== or A PRIMe=== IS a natural nUMber\n  Greater tHan 1 That Is Not A ProduCT oF tWo smalLeR natuRAl numBers).\n  hexAdecIMal DIgits arE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== c=== D=== E=== F.\n  prIMe NumbERs are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO you have To deTermiNe a nUMBeR of the FolLoWING digitS: 2=== 3=== 5=== 7===\n  B (=decimAl 11)=== D (=decImal 13).\n  NoTE: You may aSsUMe the inPUt is aLWAYs coRREcT or emPtY STRINg===\n  And symbols A===B===C===d===E===F ARe AlwaYs uPpErCAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    result += parseInt(num[i], 16);\n  }\n  return result;\n};\n\nconst hexDigits = (num) => {\n  let result = \"\";\n  for (let i = 0; i < num.length; i++) {\n    result += num[i];\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (num) => {\n  return isPrime(num);\n};\n\nconst isPrimeNumberInRange = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange2 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange3 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange4 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange5 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange6 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange7 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange8 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange9 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange10 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange11 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange12 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange13 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange14 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange15 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange16 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange17 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange18 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange19 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange20 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange21 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange22 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange23 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange24 = (num, min, max) => {\n  return isPrimeNumber(num) && num >= min && num <= max;\n};\n\nconst isPrimeNumberInRange25 = (num, min, max)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOU wILl be gIvEN A NumbeR in decimal Form aNd yoUr Task Is to conveRT iT To\n  BinArY fOrMat. the FUNctION sHould return a STring, wiTH eAch CHARacTEr rEPREsENtInG a binaRy\n  NuMber. eACH ChARacter in the sTRing Will be '0' or '1'.\n\n  theRe wiLl Be aN Extra COuPlE of chaRaCters 'DB' at thE begInnIng aND at THe end of ThE StriNg.\n  tHe ExtrA CharaCTers are tHere To helP witH THe Format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*YOU wILl be gIvEN A NumbeR in decimal Form aNd yoUr Task Is to conveRT iT To\n  BinArY fOrMat. the FUNctION sHould return a STring, wiTH eAch CHARacTEr rEPREsENtInG a binaRy\n  NuMber. eACH ChARacter in the sTRing Will be '0' or '1'.\n\n  theRe wiLl Be aN Extra COuPlE of chaRaCters 'DB' at thE begInnIng aND at THe end of ThE StriNg.\n  tHe ExtrA CharaCTers are tHere To helP witH THe Format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return binary;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - 1 - i);\n    }\n  }\n  return decimal;\n};\n\nconst convert = (decimal, binary) => {\n  return binaryToDecimal(decimalToBinary(decimal));\n};\n\nconst convertToBinary = (decimal) => {\n  return decimalToBinary(convert(decimal));\n};\n\nconst convertToDecimal = (binary) => {\n  return convert(binaryToDecimal(binary));\n};\n\nconst convertToHex = (decimal) => {\n  return convert(decimal, decimalToBinary(decimal));\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctal = (decimal) => {\n  return convert(decimal, decimalToBinary(decimal));\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};\n\nconst convertToDecimalString = (decimal) => {\n  return convertToDecimal(decimal).toString(10);\n};\n\nconst convertToHexString = (decimal) => {\n  return convertToHex(decimal).toString(16);\n};\n\nconst convertToOctalString = (decimal) => {\n  return convertToOctal(decimal).toString(8);\n};\n\nconst convertToBinaryString = (decimal) => {\n  return convertToBinary(decimal).toString(2);\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HAppY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HAppY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let sum = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  while (i < len) {\n    sum += s[i]\n    i += 1\n  }\n  while (sum > 0) {\n    count += 1\n    sum -= s[j]\n    j += 1\n  }\n  return count == 2\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT Is THe lasT wEEK Of the SEmestEr anD tHe teAcher has tO GiVE tHe grades\n  tO sTuDeNts. the TEAchER HaS been mAKing her OWn AlgORIThm FOr gRADInG.\n  thE oNly proBlEm Is, shE HAS LoST the code shE Used For gradiNg.\n  SHe haS gIveN You a list oF gPas For somE sTudenTS and yOu haVe tO wriTE\n  a fUNction tHaT Can oUtPUt A list of lETter grades uSIng the foLlowIng taBle:\n           Gpa       |    leTter grAde\n            4.0                a+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                b\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*IT Is THe lasT wEEK Of the SEmestEr anD tHe teAcher has tO GiVE tHe grades\n  tO sTuDeNts. the TEAchER HaS been mAKing her OWn AlgORIThm FOr gRADInG.\n  thE oNly proBlEm Is, shE HAS LoST the code shE Used For gradiNg.\n  SHe haS gIveN You a list oF gPas For somE sTudenTS and yOu haVe tO wriTE\n  a fUNction tHaT Can oUtPUt A list of lETter grades uSIng the foLlowIng taBle:\n           Gpa       |    leTter grAde\n            4.0                a+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                b\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumberNumber = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumberNumberNumber = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumberNumberNumberNumber = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumberNumberNumberNumberNumber = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\n/*\n  WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumberNumberNumberNumberNumberNumber = (string) => {\n  let prime = 0\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[i + 1]) {\n      prime += 1\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return prime === len\n}\n\nmodule.exports = {\n  primeLength,\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (n % start === 0) {\n      count += 1\n      start += 1\n    } else if (n % end === 0) {\n      count += 1\n      end -= 1\n    } else {\n      start += 1\n      end -= 1\n    }\n  }\n  return count\n}\n\n/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIVeN A posiTiVE INtegeR N, return The toTal sUm Of itS digits in biNArY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*GIVeN A posiTiVE INtegeR N, return The toTal sUm Of itS digits in biNArY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = (N).toString(2).split('').reduce((acc, digit) => {\n    return acc + parseInt(digit, 2);\n  }, 0);\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add19 = (lst) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sLength = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s1 = 0\n  let s2 = 0\n  let s3 = 0\n  let s4 = 0\n  let s5 = 0\n  let s6 = 0\n  let s7 = 0\n  let s8 = 0\n  let s9 = 0\n  let s10 = 0\n  let s11 = 0\n  let s12 = 0\n  let s13 = 0\n  let s14 = 0\n  let s15 = 0\n  let s16 = 0\n  let s17 = 0\n  let s18 = 0\n  let s19 = 0\n  let s20 = 0\n  let s21 = 0\n  let s22 = 0\n  let s23 = 0\n  let s24 = 0\n  let s25 = 0\n  let s26 = 0\n  let s27 = 0\n  let s28 = 0\n  let s29 = 0\n  let s30 = 0\n  let s31 = 0\n  let s32 = 0\n  let s33 = 0\n  let s34 = 0\n  let s35 = 0\n  let s36 = 0\n  let s37 = 0\n  let s38 = 0\n  let s39 = 0\n  let s40 = 0\n  let s41 = 0\n  let s42 = 0\n  let s43 = 0\n  let s44 = 0\n  let s45 = 0\n  let s46 = 0\n  let s47 = 0\n  let s48 = 0\n  let s49 = 0\n  let s50 = 0\n  let s51 = 0\n  let s52 = 0\n  let s53 = 0\n  let s54 = 0\n  let s55 = 0\n  let s56 = 0\n  let s57 = 0\n  let s58 = 0\n  let s59 = 0\n  let s60 = 0\n  let s61 = 0\n  let s62 = 0\n  let s63 = 0\n  let s64 = 0\n  let s65 = 0\n  let s66 = 0\n  let s67 = 0\n  let s68 = 0\n  let s69 = 0\n  let s70 = 0\n  let s71 = 0\n  let s72 = 0\n  let s73 = 0\n  let s74 = 0\n  let s75 = 0\n  let s76 = 0\n  let s77 = 0\n  let s78 = 0\n  let s79 = 0\n  let s80 = 0\n  let s81 = 0\n  let s82 = 0\n  let s83 = 0\n  let s84 = 0\n  let s85 = 0\n  let s86 = 0\n  let s87 = 0\n  let s88 = 0\n  let s89 = 0\n  let s90 = 0\n  let s91 = 0\n  let s92 = 0\n  let s93 = 0\n  let s94 = 0\n  let s95 = 0\n  let s96 = 0\n  let s97 = 0\n  let s98 = 0\n  let s99 = 0\n  let s100 = 0\n  let s101 = 0\n  let s102 = 0\n  let s103 = 0\n  let s104 = 0\n  let s105 = 0\n  let s106 = 0\n  let s107 = 0\n  let s108 = 0\n  let s109 = 0\n  let s110 = 0\n  let s111 = 0\n  let s112 = 0\n  let s113 = 0\n  let s114 = 0\n  let s115 = 0\n  let s116 = 0\n  let s117 = 0\n  let s118 = 0\n  let s119 = 0\n  let s120 = 0\n  let s121 = 0\n  let s122 = 0\n  let s123 = 0\n  let s124 = 0\n  let s125 = 0\n  let s126 = 0\n  let s127 = 0\n  let s128 = 0\n  let s129 = 0\n  let s130 = 0\n  let s131 = 0\n  let s132 = 0\n  let s133 = 0\n  let s134 = 0\n  let s135 = 0\n  let s136 = 0\n  let s137 = 0\n  let s138 = 0\n  let s139 = 0\n  let s140 = 0\n  let s141 = 0\n  let s142 = 0\n  let s143 = 0\n  let s144 = 0\n  let s145 = 0\n  let s146 = 0\n  let s147 = 0\n  let s148 = 0\n  let s149 = 0\n  let s150 = 0\n  let s151 = 0\n  let s152 = 0\n  let s153 = 0\n  let s154 = 0\n  let s155 = 0\n  let s156 = 0\n  let s157 = 0\n  let s158 = 0\n  let s159 = 0\n  let s160 = 0\n  let s161 = 0\n  let s162 = 0\n  let s163 = 0\n  let s164 = 0\n  let s165 = 0\n  let s166 = 0\n  let s167 = 0\n  let s168 = 0\n  let s169 = 0\n  let s170 = 0\n  let s171 = 0\n  let s172 = 0\n  let s173 = 0\n  let s174 = 0\n  let s175 = 0\n  let s176 = 0\n  let s177 = 0\n  let s178 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2) ...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumn = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumns = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverse = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc2 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc3 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc4 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc5 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc6 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc7 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc8 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc9 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc10 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc11 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumnsReverseDesc12 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumns", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  gIvEN an array of NoN-NEGativE IntegErs, return a CoPy of The given array aFTeR SoRtiNg,\n  YoU wIll SorT THe gIVEn array in AscendINg order IF tHe sUM( FIrsT IndEX VAlUE, lAsT index VaLuE) is oDD,\n  OR SoRT it in descendINg orDer if the Sum( FirsT iNdeX Value, LAsT iNdex vaLuE) is evEN.\n\n  Note:\n  * Don't ChaNge tHE giVEn array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an array of NoN-NEGativE IntegErs, return a CoPy of The given array aFTeR SoRtiNg,\n  YoU wIll SorT THe gIVEn array in AscendINg order IF tHe sUM( FIrsT IndEX VAlUE, lAsT index VaLuE) is oDD,\n  OR SoRT it in descendINg orDer if the Sum( FirsT iNdeX Value, LAsT iNdex vaLuE) is evEN.\n\n  Note:\n  * Don't ChaNge tHE giVEn array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice();\n  let temp;\n  let tempIndex;\n  let tempIndex2;\n  let tempIndex3;\n  let tempIndex4;\n  let tempIndex5;\n  let tempIndex6;\n  let tempIndex7;\n  let tempIndex8;\n  let tempIndex9;\n  let tempIndex10;\n  let tempIndex11;\n  let tempIndex12;\n  let tempIndex13;\n  let tempIndex14;\n  let tempIndex15;\n  let tempIndex16;\n  let tempIndex17;\n  let tempIndex18;\n  let tempIndex19;\n  let tempIndex20;\n  let tempIndex21;\n  let tempIndex22;\n  let tempIndex23;\n  let tempIndex24;\n  let tempIndex25;\n  let tempIndex26;\n  let tempIndex27;\n  let tempIndex28;\n  let tempIndex29;\n  let tempIndex30;\n  let tempIndex31;\n  let tempIndex32;\n  let tempIndex33;\n  let tempIndex34;\n  let tempIndex35;\n  let tempIndex36;\n  let tempIndex37;\n  let tempIndex38;\n  let tempIndex39;\n  let tempIndex40;\n  let tempIndex41;\n  let tempIndex42;\n  let tempIndex43;\n  let tempIndex44;\n  let tempIndex45;\n  let tempIndex46;\n  let tempIndex47;\n  let tempIndex48;\n  let tempIndex49;\n  let tempIndex50;\n  let tempIndex51;\n  let tempIndex52;\n  let tempIndex53;\n  let tempIndex54;\n  let tempIndex55;\n  let tempIndex56;\n  let tempIndex57;\n  let tempIndex58;\n  let tempIndex59;\n  let tempIndex60;\n  let tempIndex61;\n  let tempIndex62;\n  let tempIndex63;\n  let tempIndex64;\n  let tempIndex65;\n  let tempIndex66;\n  let tempIndex67;\n  let tempIndex68;\n  let tempIndex69;\n  let tempIndex70;\n  let tempIndex71;\n  let tempIndex72;\n  let tempIndex73;\n  let tempIndex74;\n  let tempIndex75;\n  let tempIndex76;\n  let tempIndex77;\n  let tempIndex78;\n  let tempIndex79;\n  let tempIndex80;\n  let tempIndex81;\n  let tempIndex82;\n  let tempIndex83;\n  let tempIndex84;\n  let tempIndex85;\n  let tempIndex86;\n  let tempIndex87;\n  let tempIndex88;\n  let tempIndex89;\n  let tempIndex90;\n  let tempIndex91;\n  let tempIndex92;\n  let tempIndex93;\n  let tempIndex94;\n  let tempIndex95;\n  let tempIndex96;\n  let tempIndex97;\n  let tempIndex98;\n  let tempIndex99;\n  let tempIndex100;\n  let tempIndex101;\n  let tempIndex102;\n  let tempIndex103;\n  let tempIndex104;\n  let tempIndex105;\n  let tempIndex106;\n  let tempIndex107;\n  let tempIndex108;\n  let tempIndex109;\n  let tempIndex110;\n  let tempIndex111;\n  let tempIndex112;\n  let tempIndex113;\n  let tempIndex114;\n  let tempIndex115;\n  let tempIndex116;\n  let tempIndex117;\n  let tempIndex118;\n  let tempIndex119;\n  let tempIndex120;\n  let tempIndex121;\n  let tempIndex122;\n  let tempIndex123;\n  let tempIndex124;\n  let tempIndex125;\n  let tempIndex126;\n  let tempIndex127;\n  let tempIndex128;\n  let tempIndex129;\n  let tempIndex130;\n  let tempIndex131;\n  let tempIndex132;\n  let tempIndex133;\n  let tempIndex134;\n  let tempIndex135;\n  let tempIndex136;\n  let tempIndex137;\n  let tempIndex138;\n  let tempIndex139;\n  let tempIndex140;\n  let tempIndex141;\n  let tempIndex142;\n  let tempIndex143;\n  let tempIndex144;\n  let tempIndex145;\n  let tempIndex146;\n  let tempIndex147;\n  let tempIndex148;\n  let tempIndex149;\n  let tempIndex150;\n  let tempIndex151;\n  let tempIndex152;\n  let tempIndex153;\n  let tempIndex154;\n  let tempIndex155;\n  let tempIndex156;\n  let tempIndex157;\n  let tempIndex158;\n  let tempIndex159;\n  let tempIndex160;\n  let tempIndex161;\n  let tempIndex162;\n  let tempIndex163;\n  let tempIndex164;\n  let tempIndex165;\n  let tempIndex166;\n  let tempIndex167;\n  let tempIndex168;\n  let tempIndex169;\n  let tempIndex170;\n  let tempIndex171;\n  let tempIndex172;\n  let tempIndex173;\n  let tempIndex174;\n  let tempIndex175;\n  let tempIndex176;\n  let tempIndex177;\n  let tempIndex178;\n  let tempIndex179;\n  let tempIndex180;\n  let tempIndex181;\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CREaTE a funCtION encrypt That tAKes a sTrinG aS an aRgument anD\n  ReTUrNs a StRiNg EncRypTED wiTH ThE alphaBEt being ROtAteD. \n  tHE alPHabET SHoULd Be RotateD in a MaNner SUCH ThAT the letterS \n  ShifT down by tWo mUltiPlIed TO two pLAcEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*CREaTE a funCtION encrypt That tAKes a sTrinG aS an aRgument anD\n  ReTUrNs a StRiNg EncRypTED wiTH ThE alphaBEt being ROtAteD. \n  tHE alPHabET SHoULd Be RotateD in a MaNner SUCH ThAT the letterS \n  ShifT down by tWo mUltiPlIed TO two pLAcEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt6 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt6 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt7 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index + 26);\n    result += char;\n  }\n  return result;\n};\n\nconst decrypt7 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let char = String.fromCharCode(index - 26);\n    result += char;\n  }\n  return result;\n};\n\nconst encrypt8 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (c.charCodeAt(0) - 97);\n    let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      index = i;\n    }\n  }\n  return numbers.slice(0, index + 1);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextLargest() that retuRNs THe 2Nd largest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == NUll\n  nextLargest([1, 1]) == NUll\n  */\nCONSt nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextLargest() that retuRNs THe 2Nd largest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == NUll\n  nextLargest([1, 1]) == NUll\n  */\nCONSt nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextLargest() that retuRNs THe 2Nd largest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == NUll\n  nextLargest([1, 1]) == NUll\n  */\nCONSt nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextLargest() that retuRNs THe 2Nd largest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == NUll\n  nextLargest([1, 1]) == NUll\n  */\nCONSt nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextLargest() that retuRNs THe 2Nd largest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == NUll\n  nextLargest([1, 1]) == NUll\n  */\nCONSt nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  yOu'LL be giVeN A STring OF wordS, and YoUr taSk is to couNT tHE nUmbEr\n  Of BoRedOms. a BOreDOM iS a sentENce that STaRts WITH thE WorD \"i\".\n  sEnTEnCeS are deLiMiTed bY '.', '?' OR '!'.\n \n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  yOu'LL be giVeN A STring OF wordS, and YoUr taSk is to couNT tHE nUmbEr\n  Of BoRedOms. a BOreDOM iS a sentENce that STaRts WITH thE WorD \"i\".\n  sEnTEnCeS are deLiMiTed bY '.', '?' OR '!'.\n \n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s.match(/^(?:\\.|\\?|!)$/)\n  return isBored\n}\n\n/*\n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const isBored = s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* cReATe a fuNcTION that TAkes 3 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* cReATe a fuNcTION that TAkes 3 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt11 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt12 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt13 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt14 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt15 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt16 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt17 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt18 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt19 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt20 = (x, y, z) => {\n  if (x > y) {\n    if (x > z) {\n      return true;\n    }\n  } else if (y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt21 = (x, y, z) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += String.fromCharCode(index + 26);\n  }\n  return encoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LETTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LETTER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    decoded += String.fromCharCode(index);\n  }\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LETTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LETTER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst encode2 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += String.fromCharCode(index + 26);\n  }\n  return encoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LETTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LETTER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode2 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    decoded += String.fromCharCode(index);\n  }\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LETTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LETTER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst encode3 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += String.fromCharCode(index + 26);\n  }\n  return encoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LETTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LETTER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode3 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    decoded += String.fromCharCode(index);\n  }\n  return decoded;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOU aRE giveN a list OF INtegeRS.\n  You nEed tO fInd tHe largest PRiME vAluE aNd return ThE suM of ITS diGITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a list OF INtegeRS.\n  You nEed tO fInd tHe largest PRiME vAluE aNd return ThE suM of ITS diGITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = (a, b) => a > b? a : b;\n  const max_index = (lst) => lst.reduce((a, b, i) => max(a, b), -Infinity);\n  const max_value = (lst) => lst.reduce((a, b) => max(a, b), -Infinity);\n  const max_index_value = (lst) => lst.reduce((a, b, i) => max(a, b), -Infinity);\n  const max_index_value_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst.reduce((a, b, i) => max(a, b), []);\n  const max_index_value_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = (lst) => lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let keys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (dict[keys[i]]!== keys[i].toLowerCase()) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let keys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (dict[keys[i]]!== keys[i].toUpperCase()) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let keys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (dict[keys[i]]!== keys[i].toUpperCase()) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let keys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (dict[keys[i]]!== keys[i].toLowerCase()) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\nmodule.exports = {\n    checkDictCase\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*IMPlEMent a FuNCTIon thAT takeS an nOn-NegaTive integER aND rEtuRnS aN aRraY of THE fiRST n\n  iNtegerS That are PRiMe nUMBErs ANd lESS ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*IMPlEMent a FuNCTIon thAT takeS an nOn-NegaTive integER aND rEtuRnS aN aRraY of THE fiRST n\n  iNtegerS That are PRiMe nUMBErs ANd lESS ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo2 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo3 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo4 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo5 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo6 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo7 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo8 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo9 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo10 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo11 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo12 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo13 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo14 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo15 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo16 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo17 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo18 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo19 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo20 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo21 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo22 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo23 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nconst countUpTo24 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*COMpLEte thE fUNCTion tHAt takEs twO iNtegErs and retURnS \n  ThE prOdUcT oF thEir UNIt dIGItS.\n  AssumE The inpuT Is AlwAYS ValID.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*COMpLEte thE fUNCTion tHAt takEs twO iNtegErs and retURnS \n  ThE prOdUcT oF thEir UNIt dIGItS.\n  AssumE The inpuT Is AlwAYS ValID.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\nconst multiply2 = (a, b) => {\n  return a * b;\n};\n\nconst multiply3 = (a, b) => {\n  return a * b;\n};\n\nconst multiply4 = (a, b) => {\n  return a * b;\n};\n\nconst multiply5 = (a, b) => {\n  return a * b;\n};\n\nconst multiply6 = (a, b) => {\n  return a * b;\n};\n\nconst multiply7 = (a, b) => {\n  return a * b;\n};\n\nconst multiply8 = (a, b) => {\n  return a * b;\n};\n\nconst multiply9 = (a, b) => {\n  return a * b;\n};\n\nconst multiply10 = (a, b) => {\n  return a * b;\n};\n\nconst multiply11 = (a, b) => {\n  return a * b;\n};\n\nconst multiply12 = (a, b) => {\n  return a * b;\n};\n\nconst multiply13 = (a, b) => {\n  return a * b;\n};\n\nconst multiply14 = (a, b) => {\n  return a * b;\n};\n\nconst multiply15 = (a, b) => {\n  return a * b;\n};\n\nconst multiply16 = (a, b) => {\n  return a * b;\n};\n\nconst multiply17 = (a, b) => {\n  return a * b;\n};\n\nconst multiply18 = (a, b) => {\n  return a * b;\n};\n\nconst multiply19 = (a, b) => {\n  return a * b;\n};\n\nconst multiply20 = (a, b) => {\n  return a * b;\n};\n\nconst multiply21 = (a, b) => {\n  return a * b;\n};\n\nconst multiply22 = (a, b) => {\n  return a * b;\n};\n\nconst multiply23 = (a, b) => {\n  return a * b;\n};\n\nconst multiply24 = (a, b) => {\n  return a * b;\n};\n\nconst multiply25 = (a, b) => {\n  return a * b;\n};\n\nconst multiply26 = (a, b) => {\n  return a * b;\n};\n\nconst multiply27 = (a, b) => {\n  return a * b;\n};\n\nconst multiply28 = (a, b) => {\n  return a * b;\n};\n\nconst multiply29 = (a, b) => {\n  return a * b;\n};\n\nconst multiply30 = (a, b) => {\n  return a * b;\n};\n\nconst multiply31 = (a, b) => {\n  return a * b;\n};\n\nconst multiply32 = (a, b) => {\n  return a * b;\n};\n\nconst multiply33 = (a, b) => {\n  return a * b;\n};\n\nconst multiply34 = (a, b) => {\n  return a * b;\n};\n\nconst multiply35 = (a, b) => {\n  return a * b;\n};\n\nconst multiply36 = (a, b) => {\n  return a * b;\n};\n\nconst multiply37 = (a, b) => {\n  return a * b;\n};\n\nconst multiply38 = (a, b) => {\n  return a * b;\n};\n\nconst multiply39 = (a, b) => {\n  return a * b;\n};\n\nconst multiply40 = (a, b) => {\n  return a * b;\n};\n\nconst multiply41 = (a, b) => {\n  return a * b;\n};\n\nconst multiply42 = (a, b) => {\n  return a * b;\n};\n\nconst multiply43 = (a, b) => {\n  return a * b;\n};\n\nconst multiply44 = (a, b) => {\n  return a * b;\n};\n\nconst multiply45 = (a, b) => {\n  return a * b;\n};\n\nconst multiply46 = (a, b) => {\n  return a * b;\n};\n\nconst multiply47 = (a, b) => {\n  return a * b;\n};\n\nconst multiply48 = (a, b) => {\n  return a * b;\n};\n\nconst multiply49 = (a, b) => {\n  return a * b;\n};\n\nconst multiply50 = (a, b) => {\n  return a * b;\n};\n\nconst multiply51 = (a, b) => {\n  return a * b;\n};\n\nconst multiply52 = (a, b) => {\n  return a * b;\n};\n\nconst multiply53 = (a, b) => {\n  return a * b;\n};\n\nconst multiply54 = (a, b) => {\n  return a * b;\n};\n\nconst multiply55 = (a, b) => {\n  return a * b;\n};\n\nconst multiply56 = (a, b) => {\n  return a * b;\n};\n\nconst multiply57 = (a, b) => {\n  return a * b;\n};\n\nconst multiply58 = (a, b) => {\n  return a * b;\n};\n\nconst multiply59 = (a, b) => {\n  return a * b;\n};\n\nconst multiply60 = (a, b) => {\n  return a * b;\n};\n\nconst multiply61 = (a, b) => {\n  return a * b;\n};\n\nconst multiply62 = (a, b) => {\n  return a * b;\n};\n\nconst multiply63 = (a, b) => {\n  return a * b;\n};\n\nconst multiply64 = (a, b) => {\n  return a *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (punctuation.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countWhitespace = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (whitespace.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countAll = (s) => {\n  let count = 0;\n  count += countUpper(s);\n  count += countLower(s);\n  count += countVowels(s);\n  count += countConsonants(s);\n  count += countPunctuation(s);\n  count += countWhitespace(s);\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countAllInOne = (s) => {\n  let count = 0;\n  count += countUpper(s);\n  count += countLower(s);\n  count += countVowels(s);\n  count += countConsonants(s);\n  count += countPunctuation(s);\n  count += countWhitespace(s);\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countAllInTwo = (s) => {\n  let count = 0;\n  count += countUpper(s);\n  count += countLower(s);\n  count += countVowels(s);\n  count += countConsonants(s);\n  count += countPunctuation(s);\n  count += countWhitespace(s);\n  return count;\n};\n\n/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* cReATe a fuNcTION that TAkes a value (StriNg) ReprEsenting a NUmBEr\n  And ReTuRnS thE clOSEst INTeGer to iT. if the nuMBeR is EQUIdiSTanT\n  FROm TWo InTegers, RoUnD it aWAY FRoM Zero.\n  ExamplES\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* cReATe a fuNcTION that TAkes a value (StriNg) ReprEsenting a NUmBEr\n  And ReTuRnS thE clOSEst INTeGer to iT. if the nuMBeR is EQUIdiSTanT\n  FROm TWo InTegers, RoUnD it aWAY FRoM Zero.\n  ExamplES\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intValue = parseInt(value, 10);\n  let intValueAbs = Math.abs(intValue);\n  let intValueClosest = intValue;\n  let intValueClosestAbs = Math.abs(intValueClosest);\n  let intValueClosestAbsDiff = intValueClosestAbs - intValueAbs;\n  let intValueClosestAbsDiffAbs = Math.abs(intValueClosestAbsDiff);\n  if (intValueClosestAbsDiffAbs < intValueClosestAbsDiff) {\n    intValueClosest = intValue;\n  }\n  return intValueClosest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
