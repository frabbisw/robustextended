{"task_id": "JavaScript/0", "prompt": "/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = sort(numbers);\n  const length = sorted.length;\n  const i = 0;\n  const j = length - 1;\n  const diff = sorted[j] - sorted[i];\n  while (i < j) {\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\n/*\n  Inputt o this function is a string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup2 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup3 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup4 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup5 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup6 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup7 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup8 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup9 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup10 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/);\n  const paren_groups_flat = paren_groups.map(paren_group => paren_group.split(/\\s*\\)\\s*/));\n  return paren_groups_flat.filter(paren_group => paren_group.length > 1);\n};\n\nconst getParenGroup11 = (paren_string) => {\n  const paren_groups = paren_string.split", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if  gniven strig is apalindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if  gniven strig is apalindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result = makePalindrome(string);\n  return result == string;\n}\n\n/* Test if  given string is a palindrome */\nconst isPalindrome = (string) => {\n  let result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givena  positive integer n , you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even .\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile16 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile17 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile18 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile19 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile20 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile21 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile22 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile23 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile24 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile25 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile26 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile27 = (n) => {\n  const pile = []", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You wil l be given an array of words. Your task is to return an array of the words\n  that are not in the array.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x , y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x, y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = [];\n  for (let i = x; i <= y; i++) {\n    arr.push(i);\n  }\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  });\n  return max;\n};\n\nconst chooseNum15 = (x, y)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You aregiven two positiveintegers n and m, and your task is to compute the averageof  theintegers from n throu ghm (includi ng n and m). \n Round the answer to the nearest integer an d convert thatto b inary.  If n is greater thanm,return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You aregiven two positiveintegers n and m, and your task is to compute the averageof  theintegers from n throu ghm (includi ng n and m). \n Round the answer to the nearest integer an d convert thatto b inary.  If n is greater thanm,return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n_m -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort()\n}\n\nconst uniqueDigits2 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits3 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits4 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits5 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits6 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits7 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits8 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits9 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits10 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits11 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits12 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits13 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits14 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits15 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n    if (num > 0 && num < 10) {\n      list.push(num)\n    }\n  }\n  return list.sort((a, b) => a - b)\n}\n\nconst uniqueDigits16 = (x) => {\n  const list = []\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString())\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givena n array of integers , sort the integers that are between 1 and9 inclu si ve,\n  reve rse t he resulting array, a ndthen repla ce each digit b y its corresponding name from\n  \"One\", \"Two \", \"Three\", \"Four\",  \"Five\" , \"Six\", \"Seven\", \"Eigh t\",  \"Nine\" .\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Givena n array of integers, sort the integers that are between 1 and9 inclu si ve,\n  reve rse t he resulting array, a ndthen repla ce each digit b y its corresponding name from\n  \"One\", \"Two \", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eigh t\",  \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength10 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength11 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength12 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i]\n    const name = names[num - 1]\n    result.push(name)\n  }\n  return result\n}\n\nconst byLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 *  ... * i) .\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst g = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst h = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst i = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst j = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst k = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst l = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst m = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst n = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst o = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst p = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst q = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst r = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst s = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst t = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst u = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst v = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst w = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst x = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst y = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst z = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst aa = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst ab = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst ac = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst ad = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst ae = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst af = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst ag = (n) => {\n  const l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\nconst ah = (n) => {\n  const l = []\n  for (let i = 1; i <= n;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givena  positive integer n , return a tuple that has the number ofeven and o dd \n  integer  pali ndromes that fall wit hin  the range (1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  positive integer n, return a tuple that has the number ofeven and o dd \n  integer  pali ndromes that fall wit hin  the range (1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n};\n\nconst isPalindrome = (n) => {\n    let str = n.toString();\n    let reversed = str.split('').reverse().join('');\n    return str === reversed;\n};\n\nconst test = () => {\n    let n = 12;\n    console.log(evenOddPalindrome(n));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e .g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (sum > 0) {\n      count++;\n    }\n    sum -= arr[i];\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 1, 2, 3]));\nconsole.log(countNums([-1, 1, 2, 3, 4]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We havean array 'arr'of N  integers arr[1], arr[2], ..., arr[N].The\n number sin the arr ay wi ll be randomly ordere d.Your taskis to determine  if\n  it is possible to get an array sorted  in non-decreasingorder b y performing \n  the fol low ing ope rationon the given array:\n      You are allowed to perform  ri ght s hift oper ation any number of times.\n  \n  One right shift operatio n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We havean array 'arr'of N  integers arr[1], arr[2],..., arr[N].The\n number sin the arr ay wi ll be randomly ordere d.Your taskis to determine  if\n  it is possible to get an array sorted  in non-decreasingorder b y performing \n  the fol low ing ope rationon the given array:\n      You are allowed to perform  ri ght s hift oper ation any number of times.\n  \n  One right shift operatio n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        return false;\n      }\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] >", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += String.fromCharCode(aArray[i] ^ bArray[i]);\n  }\n  return result;\n};\n\n/*\n  Input a string a and b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += String.fromCharCode(aArray[i] & bArray[i]);\n  }\n  return result;\n};\n\n/*\n  Input a string a and b consisting only of 1s and 0s.\n  Perform binary  X NOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringNor('010', '110')\n  '110'\n  */\nconst stringNor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += String.fromCharCode(aArray[i] | bArray[i]);\n  }\n  return result;\n};\n\n/*\n  Input a string a and b consisting only of 1s and 0s.\n  Perform binary  X NAND on thes e inp uts and return result  al soas a st ring.\n  >>> stringNand('010', '110')\n  '110'\n  */\nconst stringNand = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += String.fromCharCode(aArray[i] & ~bArray[i]);\n  }\n  return result;\n};\n\n/*\n  Input a string a and b consisting only of 1s and 0s.\n  Perform binary  X XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += String.fromCharCode(aArray[i] ^ bArray[i]);\n  }\n  return result;\n};\n\n/*\n  Input a string a and b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  let result = '';\n  for (let i = 0; i < aLength; i++) {\n    result += String.fromCharCode(aArray[i] & bArray[i]);\n  }\n  return result;\n};\n\n/*\n  Input a string a and b consisting only of 1s and 0s.\n  Perform binary  X NOR on thes e inp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  let lst1_even = lst1.filter(n => n % 2 === 0);\n  let lst2_even = lst2.filter(n => n % 2 === 0);\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return 'NO';\n  }\n  let lst1_odd = lst1.filter(n => n % 2!== 0);\n  let lst2_odd = lst2.filter(n => n % 2!== 0);\n  if (lst1_odd.length === 0 || lst2_odd.length === 0) {\n    return 'NO';\n  }\n  let lst1_exch = lst1_even.concat(lst1_odd);\n  let lst2_exch = lst2_even.concat(lst2_odd);\n  return lst1_exch.every(n => lst2_exch.indexOf(n)!== -1)? 'YES' : 'NO';\n};\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\nconst letterHistogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\nconst letterHistogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\nconst letterHistogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\nconst letterHistogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\nconst letterHistogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\nconst letterHistogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const letters = test.split('')\n  const count = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n W e are given two str ings s and c, you have to deleted all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task\n W e are given two str ings s and c, you have to deleted all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let result = '';\n    let i = 0;\n    let j = s.length - 1;\n    while (i < j) {\n        if (s[i] === c[j]) {\n            j--;\n        } else {\n            result += s[i];\n            i++;\n        }\n    }\n    return [result, s.length === result.length];\n};\n\nconst isPalindrome = (s) => {\n    let [result, isPalindrome] = reverseDelete(s, s);\n    return isPalindrome;\n};\n\nconsole.log(isPalindrome('abcdef'));\nconsole.log(isPalindrome('abcdedcba'));\nconsole.log(isPalindrome('abcde'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome('a'));\nconsole.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const oddCount = (str) => {\n      const oddCount = (str) => {\n        const oddCount = (str) => {\n          const oddCount = (str) => {\n            const oddCount = (str) => {\n              const oddCount = (str) => {\n                const oddCount = (str) => {\n                  const oddCount = (str) => {\n                    const oddCount = (str) => {\n                      const oddCount = (str) => {\n                        const oddCount = (str) => {\n                          const oddCount = (str) => {\n                            const oddCount = (str) => {\n                              const oddCount = (str) => {\n                                const oddCount = (str) => {\n                                  const oddCount = (str) => {\n                                    const oddCount = (str) => {\n                                      const oddCount = (str) => {\n                                        const oddCount = (str) => {\n                                          const oddCount = (str) => {\n                                            const oddCount = (str) => {\n                                              const oddCount = (str) => {\n                                                const oddCount = (str) => {\n                                                  const oddCount = (str) => {\n                                                    const oddCount = (str) => {\n                                                      const oddCount = (str) => {\n                                                        const oddCount = (str) => {\n                                                          const oddCount = (str) => {\n                                                           const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givena n array of integers  nums, findthe minimum sum of any non-empty sub-a rr ay\n  ofnu ms.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Givena n array of integers  nums, findthe minimum sum of any non-empty sub-a rr ay\n  ofnu ms.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = sum;\n  const minSumIndex = 0;\n  const minSumIndex2 = 0;\n  const minSumIndex3 = 0;\n  const minSumIndex4 = 0;\n  const minSumIndex5 = 0;\n  const minSumIndex6 = 0;\n  const minSumIndex7 = 0;\n  const minSumIndex8 = 0;\n  const minSumIndex9 = 0;\n  const minSumIndex10 = 0;\n  const minSumIndex11 = 0;\n  const minSumIndex12 = 0;\n  const minSumIndex13 = 0;\n  const minSumIndex14 = 0;\n  const minSumIndex15 = 0;\n  const minSumIndex16 = 0;\n  const minSumIndex17 = 0;\n  const minSumIndex18 = 0;\n  const minSumIndex19 = 0;\n  const minSumIndex20 = 0;\n  const minSumIndex21 = 0;\n  const minSumIndex22 = 0;\n  const minSumIndex23 = 0;\n  const minSumIndex24 = 0;\n  const minSumIndex25 = 0;\n  const minSumIndex26 = 0;\n  const minSumIndex27 = 0;\n  const minSumIndex28 = 0;\n  const minSumIndex29 = 0;\n  const minSumIndex30 = 0;\n  const minSumIndex31 = 0;\n  const minSumIndex32 = 0;\n  const minSumIndex33 = 0;\n  const minSumIndex34 = 0;\n  const minSumIndex35 = 0;\n  const minSumIndex36 = 0;\n  const minSumIndex37 = 0;\n  const minSumIndex38 = 0;\n  const minSumIndex39 = 0;\n  const minSumIndex40 = 0;\n  const minSumIndex41 = 0;\n  const minSumIndex42 = 0;\n  const minSumIndex43 = 0;\n  const minSumIndex44 = 0;\n  const minSumIndex45 = 0;\n  const minSumIndex46 = 0;\n  const minSumIndex47 = 0;\n  const minSumIndex48 = 0;\n  const minSumIndex49 = 0;\n  const minSumIndex50 = 0;\n  const minSumIndex51 = 0;\n  const minSumIndex52 = 0;\n  const minSumIndex53 = 0;\n  const minSumIndex54 = 0;\n  const minSumIndex55 = 0;\n  const minSumIndex56 = 0;\n  const minSumIndex57 = 0;\n  const minSumIndex58 = 0;\n  const minSumIndex59 = 0;\n  const minSumIndex60 = 0;\n  const minSumIndex61 = 0;\n  const minSumIndex62 = 0;\n  const minSumIndex63 = 0;\n  const minSumIndex64 = 0;\n  const minSumIndex65 = 0;\n  const minSumIndex66 = 0;\n  const minSumIndex67 = 0;\n  const minSumIndex68 = 0;\n  const minSumIndex69 = 0;\n  const minSumIndex70 = 0;\n  const minSumIndex71 = 0;\n  const minSumIndex72 = 0;\n  const minSumIndex73 = 0;\n  const minSumIndex74 = 0;\n  const minSumIndex75 = 0;\n  const minSumIndex76 = 0;\n  const minSumIndex77 = 0;\n  const minSumIndex78 = 0;\n  const minSumIndex79 = 0;\n  const minSumIndex80 = 0;\n  const minSumIndex81 = 0;\n  const minSumIndex82 = 0;\n  const minSumIndex83 = 0;\n  const minSumIndex84 = 0;\n  const minSumIndex85 = 0;\n  const minSumIndex86 = 0;\n  const minSumIndex87 = 0;\n  const minSumIndex88 = 0;\n  const minSumIndex89 = 0;\n  const minSumIndex90 = 0;\n  const minSumIndex91 = 0;\n  const minSumIndex92 = 0;\n  const minSumIndex93 = 0;\n  const minSumIndex94 = 0;\n  const minSumIndex95 = 0;\n  const minSumIndex96 = 0;\n  const minSumIndex97 = 0;\n  const minSumIndex98 = 0;\n  const minSumIndex99 = 0;\n  const minSumIndex100 = 0;\n  const minSumIndex101 = 0;\n  const minSumIndex102 = 0;\n  const minSumIndex103 = 0;\n  const minSumIndex104 = 0;\n  const minSumIndex105 = 0;\n  const minSumIndex106 = 0;\n  const minSumIndex107 = 0;\n  const minSumIndex108 = 0;\n  const minSumIndex109 = 0;\n  const minSumIndex110 = 0;\n  const minSumIndex111 = 0;\n  const minSumIndex112 = 0;\n  const minSumIndex113 = 0;\n  const minSumIndex114 = 0;\n  const minSumIndex115 = 0;\n  const minSumIndex116 = 0;\n  const minSumIndex117 = 0;\n  const minSumIndex118 = 0;\n  const minSumIndex119 = 0;\n  const minSumIndex120 = 0;\n  const minSumIndex121 = 0;\n  const minSumIndex122 = 0;\n  const minSumIndex123 = 0;\n  const minSumIndex124 = 0;\n  const minSumIndex125 = 0;\n  const minSumIndex126 = 0;\n  const minSumIndex127 = 0;\n  const minSumIndex128 = 0;\n  const minSumIndex129 = 0;\n  const minSumIndex130 = 0;\n  const minSumIndex131 = 0;\n  const minSumIndex132 = 0;\n  const minSumIndex133 = 0;\n  const minSumIndex134 = 0;\n  const minSumIndex135 = 0;\n  const minSumIndex136 = 0;\n  const minSumIndex137 = 0;\n  const minSumIndex138 = 0;\n  const minSumIndex139 = 0;\n  const minSumIndex140 = 0;\n  const minSumIndex141 = 0;\n  const min", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are  given a rectangula r grid of wells. Each row represents a single well ,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const buckets = new Array(n)\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0\n    }\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1\n        count++\n      }\n    }\n  }\n  let result = 0\n  while (count > 0) {\n    let count = 0\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        if (buckets[i][j] > 0) {\n          buckets[i][j]--\n          count++\n        }\n      }\n    }\n    result++\n  }\n  return result\n}\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`)\n  console.log(`capacity: ${capacity}`)\n  console.log(`result: ${maxFill(grid, capacity)}`)\n}\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\ntest([[0,0,0], [0,0,0]], 5)\ntest([[0,0,0], [0,0,0]], 0)\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this  Kata, you have tosort an array of non-negative integers according t o  number o f one s in their binary rep res entation i n ascending ord er.\n  For similar number of ones, sort base d on decimal value. \n\n  Itmust be implemented lik e t his:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this  Kata, you have tosort an array of non-negative integers according t o  number o f one s in their binary rep res entation i n ascending ord er.\n  For similar number of ones, sort base d on decimal value. \n\n  Itmust be implemented lik e t his:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray2 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray3 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray4 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray5 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray6 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray7 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray8 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray9 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray10 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray11 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray12 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray13 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray14 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray15 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray16 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray17 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray18 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray19 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray20 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray21 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray22 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray23 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray24 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray25 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray26 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray27 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray28 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray29 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray30 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray31 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray32 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray33 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray34 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray35 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArray36 = (arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given astring s and anatu ral number n, you have been tasked to implement \n a  functionthatreturns a list of all  wo rds from s tring s that co ntain exactly \n  n consonants, in order the se words appear inthe str ing s.\n  If the strings i s empty then the function should return an empty list.\n  Note: you  ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given astring s and anatu ral number n, you have been tasked to implement \n a  functionthatreturns a list of all  wo rds from s tring s that co ntain exactly \n  n consonants, in order the se words appear inthe str ing s.\n  If the strings i s empty then the function should return an empty list.\n  Note: you  ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords2 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords3 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords4 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords5 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords6 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords7 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords8 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords9 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords10 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords11 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords12 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === 1).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst selectWords13 = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You aregiven a word. Yourtask is to find the closest vowel that stands betw ee n \n  two c onson ants from the right s ide  of the wo rd (case sensit ive).\n  \n  Vowels in the beginning and endi ng doesn't count. R eturn e mpty string if you didn 't  findanyvowel met the above condition. \n\n You may assume thatthe give n stringcontains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You aregiven a word. Yourtask is to find the closest vowel that stands betw ee n \n  two c onson ants from the right s ide  of the wo rd (case sensit ive).\n  \n  Vowels in the beginning and endi ng doesn't count. R eturn e mpty string if you didn 't  findanyvowel met the above condition. \n\n You may assume thatthe give n stringcontains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel7 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    for (let j = i + 1; j < word.length; j++) {\n      const distance = Math.abs(vowels.indexOf(word[i]) - vowels.indexOf(word[j]))\n      if (distance < closestDistance) {\n        closestVowel = word[j]\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel8 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are  given a list of tw o strings, both strings consist of open  parenthe se s '(' or c loseparentheses ')' only. \n Your job i s to check if i t is possible to concatenate the two string s in\n  some order,that th e resulting string will  be  good. Astring S is considered to be good if and only if all pa ren these s in S\n are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are  given a list of tw o strings, both strings consist of open  parenthe se s '(' or c loseparentheses ')' only. \n Your job i s to check if i t is possible to concatenate the two string s in\n  some order,that th e resulting string will  be  good. Astring S is considered to be good if and only if all pa ren these s in S\n are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens2 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens3 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens4 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens5 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens6 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens7 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens8 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens9 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens10 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens11 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens12 = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out oflist of strings, re turn the longest one. Return the first onein case  o f multiple \n  st rings of the same len gth . Return n ull in case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out oflist of strings, re turn the longest one. Return the first onein case  o f multiple \n  st rings of the same len gth. Return n ull in case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givena n array arr ofinte gers and a positive integer k, return asorted lis t\n  of leng th kwith the maximum k nu mbe rsin arr. \n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Givena n array arr ofinte gers and a positive integer k, return asorted lis t\n  of leng th kwith the maximum k nu mbe rsin arr. \n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[maxIndex]);\n    index++;\n    maxIndex++;\n    if (maxIndex >= arr.length) {\n      break;\n    }\n  }\n  return result;\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givena  non-empty array of  integers arr and an integer k, return\n the sum o fthe elemen ts wi th at most two digits  fr omthe fir st k elements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  non-empty array of  integers arr and an integer k, return\n the sum o fthe elemen ts wi th at most two digits  fr omthe fir st k elements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 = (arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givena  positive integer n , return a sorted list that has the oddnumbers in  c ollatz seq uence .\n\n  The Collatz conj ect ure is a c onjecture in ma thematics that concerns a sequence defined  as follows: start  with a ny positive integer n.The n eachterm is obtained from the \n  previous term as follows: if t heprevi ous termis even, the next term is one halfof \n  the previous te rm. If the previous term is odd, the next termis 3 times theprevious\n  term plus 1. The conjecture is that  no matter what value of n, thesequence will a lways re ach 1.\n\n Note: \n      1. Collatz (1) is [1].\n      2.returned l ists orted i n increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  positive integer n, return a sorted list that has the oddnumbers in  c ollatz seq uence.\n\n  The Collatz conj ect ure is a c onjecture in ma thematics that concerns a sequence defined  as follows: start  with a ny positive integer n.The n eachterm is obtained from the \n  previous term as follows: if t heprevi ous termis even, the next term is one halfof \n  the previous te rm. If the previous term is odd, the next termis 3 times theprevious\n  term plus 1. The conjecture is that  no matter what value of n, thesequence will a lways re ach 1.\n\n Note: \n      1. Collatz (1) is [1].\n      2.returned l ists orted i n increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz2 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz3 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz4 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz5 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz6 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz7 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz8 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz9 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz10 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz11 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz12 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz13 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i) + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getOddCollatz14 = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = (3 * i)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have  to write a functio n which validates a given date string and\n return strue ifth e dat e is valid otherwisefal se.\n  Thedate is valid i f all of the following rules are satisfied: \n  1. The datestri ng is n ot empty.\n  2. The numb erof days isnot less than 1 or higher than 31 days for months 1,3,5 ,7, 8,10, 12. And t he number of days isnot less than1 or higher than 30 d ays for months 4,6,9,11. And, the numberof day s is not less than 1 or higher than 29 for the month 2.\n  3.The months should not be less th an 1 or higherthan 12. \n  4. Thedate should be in the f ormat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have  to write a functio n which validates a given date string and\n return strue ifth e dat e is valid otherwisefal se.\n  Thedate is valid i f all of the following rules are satisfied: \n  1. The datestri ng is n ot empty.\n  2. The numb erof days isnot less than 1 or higher than 31 days for months 1,3,5,7, 8,10, 12. And t he number of days isnot less than1 or higher than 30 d ays for months 4,6,9,11. And, the numberof day s is not less than 1 or higher than 29 for the month 2.\n  3.The months should not be less th an 1 or higherthan 12. \n  4. Thedate should be in the f ormat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconst date = '03-11-2000';\nconsole.log(validDate(date));\n\nconst date = '15-01-2012';\nconsole.log(validDate(date));\n\nconst date = '04-0-2040';\nconsole.log(validDate(date));\n\nconst date = '06-04-2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n\nconst date = '06/04/2020';\nconsole.log(validDate(date));\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Givena  string of words, r eturn a list of words split on whitespace,if no w hi tespaces e xists  in the text you\n  sh oul d split on commas ',' ifno commas exists you should return the numb er of lower-case le tters w ith odd order in the\n alp habet,ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Givena  string of words, r eturn a list of words split on whitespace,if no w hi tespaces e xists  in the text you\n  sh oul d split on commas ',' ifno commas exists you should return the numb er of lower-case le tters w ith odd order in the\n alp habet,ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\nconst isLowerCase = (word) => word.toLowerCase() === word;\n\nconst isUpperCase = (word) => word.toUpperCase() === word;\n\nconst isNumber = (word) => /^\\d+$/.test(word);\n\nconst isAlpha = (word) => /^[a-zA-Z]+$/.test(word);\n\nconst isAlphanumeric = (word) => /^[a-zA-Z0-9]+$/.test(word);\n\nconst isAlphanumericOrSpace = (word) => /^[a-zA-Z0-9\\s]+$/.test(word);\n\nconst isAlphanumericOrHyphen = (word) => /^[a-zA-Z0-9\\-]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpace = (word) => /^[a-zA-Z0-9\\-\\s]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrComma = (word) => /^[a-zA-Z0-9\\-\\s,]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriod = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpace = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrComma = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriod = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpace = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrComma = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriod = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpace = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrComma = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpace = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrComma = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpace = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+$/.test(word);\n\nconst isAlphanumericOrHyphenOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrCommaOrPeriodOrSpaceOrComma = (word) => /^[a-zA-Z0-9\\-\\s,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,\\.]+\\s+[,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Givena  list of numbers, r eturn whether or not they are sorted\n  in ascendin gorder. Iflisthas more than 1 dupli cat e of the s ame\n  number, r eturn false. Assume no negative numbers and  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Givena  list of numbers, r eturn whether or not they are sorted\n  in ascendin gorder. Iflisthas more than 1 dupli cat e of the s ame\n  number, r eturn false. Assume no negative numbers and  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Given a list of numbers, r eturn the smallest number in the list.\n  If the list has no elements, r eturn null.\n  Examples\n  min([1, 2, 3]) ➞ 1\n  min([1, 2, 3, 4]) ➞ 1\n  min([1, 2, 3, 4, 5]) ➞ 1\n  min([1, 2, 3, 4, 5, 6]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 1\n  min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You aregiven two intervals ,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You aregiven two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\";\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  const prime = isPrime(length);\n  if (prime) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst test = () => {\n  const [interval1, interval2] = [\n    [1, 2],\n    [2, 3],\n    [-1, 1],\n    [0, 4],\n    [-3, -1],\n    [-5, 5]\n  ];\n  console.log(intersection(interval1, interval2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0 .\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\nconst prodSigns2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * 1;\n    }\n  }\n  return sum;\n};\n\nconst prodSigns15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givena  grid with N rows a nd N columns (N >= 2) and a positive integer k, \n e ach cell o f the  grid contains a valu e.Every inte ger in the rang e [1, N * N]\n  inclusive appears exactly on ce on the cells ofthe gri d.\n\n  You have to findthe  minimu m pathof length k in the grid. You can start\n  from any ce ll, andin each s tep you can move to any of the neighbor cells,\n  in othe r words, you can go to cells which sharean edg e with you current\n  cell.\n  Please note that a path of lengt h k means visiting exactly k cel ls (not\n  neces sarily d istinct).  You CANNOT go off the grid.\n  A path A (of  length k)  isc onsider edless than a path B (of len gth k) if  after making the ordered lists  ofthe valueson the ce llsthat A and B go \n  through (let's callthem lst_A and lst_B), lst_A is lexicogra phically less\n  than lst_B, in ot her words, t he reexist an  integer indexi (1 <= i <= k)\n  such that ls t_A[i] < lst_B[i] and for any j(1 <=j < i) w e have\n  lst_A[j ] = lst_B[j].\n  It is gu aranteed that the answeris unique.\n  Return an ordered list of the values on the cells thatthe  minimum path go thr ou gh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  grid with N rows a nd N columns (N >= 2) and a positive integer k, \n e ach cell o f the  grid contains a valu e.Every inte ger in the rang e [1, N * N]\n  inclusive appears exactly on ce on the cells ofthe gri d.\n\n  You have to findthe  minimu m pathof length k in the grid. You can start\n  from any ce ll, andin each s tep you can move to any of the neighbor cells,\n  in othe r words, you can go to cells which sharean edg e with you current\n  cell.\n  Please note that a path of lengt h k means visiting exactly k cel ls (not\n  neces sarily d istinct).  You CANNOT go off the grid.\n  A path A (of  length k)  isc onsider edless than a path B (of len gth k) if  after making the ordered lists  ofthe valueson the ce llsthat A and B go \n  through (let's callthem lst_A and lst_B), lst_A is lexicogra phically less\n  than lst_B, in ot her words, t he reexist an  integer indexi (1 <= i <= k)\n  such that ls t_A[i] < lst_B[i] and for any j(1 <=j < i) w e have\n  lst_A[j ] = lst_B[j].\n  It is gu aranteed that the answeris unique.\n  Return an ordered list of the values on the cells thatthe  minimum path go thr ou gh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m);\n  dp[0] = 1;\n  for (let i = 1; i < n * m; i++) {\n    dp[i] = Number.MAX_SAFE_INTEGER;\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      dp[i * m + j] = 1;\n      for (let k = 1; k <= k; k++) {\n        const next = dp[(i - 1) * m + j] + dp[i * m + j + k] + dp[(i + 1) * m + j] + dp[i * m + j - k] + dp[i * m + j + 1] + dp[(i - 1) * m + j - k] + dp[(i + 1) * m + j - k] + dp[(i - 1) * m + j + 1] + dp[i * m + j + 2] + dp[(i + 1) * m + j + 1] + dp[(i - 1) * m + j + 2];\n        if (next < dp[i * m + j]) {\n          dp[i * m + j] = next;\n        }\n      }\n    }\n  }\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      result.push(dp[i * m + j]);\n    }\n  }\n  return result;\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(minPath(grid, 3));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/13", "prompt": "/* Returna greatest common d ivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Returna greatest common d ivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  while (a!== 1) {\n    const tmp = a;\n    a = b % a;\n    b = tmp;\n  }\n  return b;\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm2 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm3 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm4 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm5 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm6 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm7 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm8 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm9 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm10 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm11 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm12 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm13 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm14 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm15 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return a number of the form a * b / c\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  */\nconst numberOfForm16 = (a, b, c) => {\n  return a * b / c;\n};\n\n/**\n  * Return", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/130", "prompt": "/*Everyone  knows Fibonacci se quence, it was studied deeply by mathematicians in    the last  coup le centuries. However , w hat people don't know isTribonacci sequence.\n  Tribonacci sequenceis defined by the r ecurren ce:\n  tri(1) = 3\n  tri( n)= 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + t ri( n+ 1 ), if n i s odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone  knows Fibonacci se quence, it was studied deeply by mathematicians in    the last  coup le centuries. However, w hat people don't know isTribonacci sequence.\n  Tribonacci sequenceis defined by the r ecurren ce:\n  tri(1) = 3\n  tri( n)= 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + t ri( n+ 1 ), if n i s odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri2 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri3 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri4 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri5 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri6 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri7 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri8 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri9 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri10 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri11 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri12 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri13 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri14 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri15 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri16 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri17 = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given apositive integer n,  return theproduct of the odd digits.\n Return 0if  all digit s are  even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given apositive integer n,  return theproduct of the odd digits.\n Return 0if  all digit s are  even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return digits(n) % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return!isOdd(n);\n};\n\nconst product = (n) => {\n  if (isEven(n)) {\n    return 0;\n  }\n  return n;\n};\n\nconst main = () => {\n  let n = 1;\n  while (n < 1000) {\n    if (isOdd(n)) {\n      console.log(product(n));\n    }\n    n++;\n  }\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  const stack = []\n  const brackets = /\\[\\[|\\]\\]/g\n  const brackets2 = /\\[\\[|\\]\\]/g\n  const brackets3 = /\\[\\[|\\]\\]/g\n  const brackets4 = /\\[\\[|\\]\\]/g\n  const brackets5 = /\\[\\[|\\]\\]/g\n  const brackets6 = /\\[\\[|\\]\\]/g\n  const brackets7 = /\\[\\[|\\]\\]/g\n  const brackets8 = /\\[\\[|\\]\\]/g\n  const brackets9 = /\\[\\[|\\]\\]/g\n  const brackets10 = /\\[\\[|\\]\\]/g\n  const brackets11 = /\\[\\[|\\]\\]/g\n  const brackets12 = /\\[\\[|\\]\\]/g\n  const brackets13 = /\\[\\[|\\]\\]/g\n  const brackets14 = /\\[\\[|\\]\\]/g\n  const brackets15 = /\\[\\[|\\]\\]/g\n  const brackets16 = /\\[\\[|\\]\\]/g\n  const brackets17 = /\\[\\[|\\]\\]/g\n  const brackets18 = /\\[\\[|\\]\\]/g\n  const brackets19 = /\\[\\[|\\]\\]/g\n  const brackets20 = /\\[\\[|\\]\\]/g\n  const brackets21 = /\\[\\[|\\]\\]/g\n  const brackets22 = /\\[\\[|\\]\\]/g\n  const brackets23 = /\\[\\[|\\]\\]/g\n  const brackets24 = /\\[\\[|\\]\\]/g\n  const brackets25 = /\\[\\[|\\]\\]/g\n  const brackets26 = /\\[\\[|\\]\\]/g\n  const brackets27 = /\\[\\[|\\]\\]/g\n  const brackets28 = /\\[\\[|\\]\\]/g\n  const brackets29 = /\\[\\[|\\]\\]/g\n  const brackets30 = /\\[\\[|\\]\\]/g\n  const brackets31 = /\\[\\[|\\]\\]/g\n  const brackets32 = /\\[\\[|\\]\\]/g\n  const brackets33 = /\\[\\[|\\]\\]/g\n  const brackets34 = /\\[\\[|\\]\\]/g\n  const brackets35 = /\\[\\[|\\]\\]/g\n  const brackets36 = /\\[\\[|\\]\\]/g\n  const brackets37 = /\\[\\[|\\]\\]/g\n  const brackets38 = /\\[\\[|\\]\\]/g\n  const brackets39 = /\\[\\[|\\]\\]/g\n  const brackets40 = /\\[\\[|\\]\\]/g\n  const brackets41 = /\\[\\[|\\]\\]/g\n  const brackets42 = /\\[\\[|\\]\\]/g\n  const brackets43 = /\\[\\[|\\]\\]/g\n  const brackets44 = /\\[\\[|\\]\\]/g\n  const brackets45 = /\\[\\[|\\]\\]/g\n  const brackets46 = /\\[\\[|\\]\\]/g\n  const brackets47 = /\\[\\[|\\]\\]/g\n  const brackets48 = /\\[\\[|\\]\\]/g\n  const brackets49 = /\\[\\[|\\]\\]/g\n  const brackets50 = /\\[\\[|\\]\\]/g\n  const brackets51 = /\\[\\[|\\]\\]/g\n  const brackets52 = /\\[\\[|\\]\\]/g\n  const brackets53 = /\\[\\[|\\]\\]/g\n  const brackets54 = /\\[\\[|\\]\\]/g\n  const brackets55 = /\\[\\[|\\]\\]/g\n  const brackets56 = /\\[\\[|\\]\\]/g\n  const brackets57 = /\\[\\[|\\]\\]/g\n  const brackets58 = /\\[\\[|\\]\\]/g\n  const brackets59 = /\\[\\[|\\]\\]/g\n  const brackets60 = /\\[\\[|\\]\\]/g\n  const brackets61 = /\\[\\[|\\]\\]/g\n  const brackets62 = /\\[\\[|\\]\\]/g\n  const brackets63 = /\\[\\[|\\]\\]/g\n  const brackets64 = /\\[\\[|\\]\\]/g\n  const brackets65 = /\\[\\[|\\]\\]/g\n  const brackets66 = /\\[\\[|\\]\\]/g\n  const brackets67 = /\\[\\[|\\]\\]/g\n  const brackets68 = /\\[\\[|\\]\\]/g\n  const brackets69 = /\\[\\[|\\]\\]/g\n  const brackets70 = /\\[\\[|\\]\\]/g\n  const brackets71 = /\\[\\[|\\]\\]/g\n  const brackets72 = /\\[\\[|\\]\\]/g\n  const brackets73 = /\\[\\[|\\]\\]/g\n  const brackets74 = /\\[\\[|\\]\\]/g\n  const brackets75 = /\\[\\[|\\]\\]/g\n  const brackets76 = /\\[\\[|\\", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.round(lst[i]), 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  return isALetter && isNotALetter;\n};\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  return isALetter && isNotALetter;\n};\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  return isALetter && isNotALetter;\n};\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  return isALetter && isNotALetter;\n};\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  return isALetter && isNotALetter;\n};\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isALetter;\n  return isALetter && isNotALetter;\n};\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i];\n        index = i;\n      }\n    }\n  }\n  return index;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (largest === null || largest < num) {\n      largest = num;\n    }\n    if (smallest === null || smallest > num) {\n      smallest = num;\n    }\n  }\n  return largest === null? null : [largest, smallest];\n};\n\n/*\n  Create a function that returns the largest of the two numbers.\n  Examples:\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([2, 4, 1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Createa function that tak es integers, floats, or strings representing\n  rea lnumbers, a nd re turns the larger vari abl e in its g iven variable t ype.\n  Return null if the values are equal. \n  Note: If a realnumberis represented as a str ing , the f loating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n co mpare One(1, \"2 ,3\") ➞\"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne (\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b)=> {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Createa function that tak es integers, floats, or strings representing\n  rea lnumbers, a nd re turns the larger vari abl e in its g iven variable t ype.\n  Return null if the values are equal. \n  Note: If a realnumberis represented as a str ing, the f loating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n co mpare One(1, \"2,3\") ➞\"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne (\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b)=> {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare2 = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare3 = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare4 = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare5 = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare6 = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9.]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[^0-9.]/g, '');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? b : a;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare7 = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[^0-9", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1 || sum % 2 === 2;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1 || sum % 2 === 2 || sum % 2 === 3;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1 || sum % 2 === 2 || sum % 2 === 3 || sum % 2 === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1 || sum % 2 === 2 || sum % 2 === 3 || sum % 2 === 4 || sum % 2 === 5;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1 || sum % 2 === 2 || sum % 2 === 3 || sum % 2 === 4 || sum % 2 === 5 || sum % 2 === 6;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1 || sum % 2 === 2 || sum % 2 === 3 || sum % 2 === 4 || sum % 2 === 5 || sum % 2 === 6 || sum % 2 === 7;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 || sum % 2 === 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Braz ilian factorial isdefined as:  brazilian_factorial(n) = n! * (n-1)!  *  (n-2)!*... *  1!\n  where n > 0\n\n For  example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Braz ilian factorial isdefined as:  brazilian_factorial(n) = n! * (n-1)!  *  (n-2)!*... *  1!\n  where n > 0\n\n For  example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\nexport default specialFactorial;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* Returnlist of all prefixe s from shortest to longest of the inputstring\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* Returnlist of all prefixe s from shortest to longest of the inputstring\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentPrefixLength = 0;\n  let currentPrefixIndex = 0;\n  let currentPrefixLengthIndex = 0;\n  let currentPrefixLengthIndex2 = 0;\n  let currentPrefixLengthIndex3 = 0;\n  let currentPrefixLengthIndex4 = 0;\n  let currentPrefixLengthIndex5 = 0;\n  let currentPrefixLengthIndex6 = 0;\n  let currentPrefixLengthIndex7 = 0;\n  let currentPrefixLengthIndex8 = 0;\n  let currentPrefixLengthIndex9 = 0;\n  let currentPrefixLengthIndex10 = 0;\n  let currentPrefixLengthIndex11 = 0;\n  let currentPrefixLengthIndex12 = 0;\n  let currentPrefixLengthIndex13 = 0;\n  let currentPrefixLengthIndex14 = 0;\n  let currentPrefixLengthIndex15 = 0;\n  let currentPrefixLengthIndex16 = 0;\n  let currentPrefixLengthIndex17 = 0;\n  let currentPrefixLengthIndex18 = 0;\n  let currentPrefixLengthIndex19 = 0;\n  let currentPrefixLengthIndex20 = 0;\n  let currentPrefixLengthIndex21 = 0;\n  let currentPrefixLengthIndex22 = 0;\n  let currentPrefixLengthIndex23 = 0;\n  let currentPrefixLengthIndex24 = 0;\n  let currentPrefixLengthIndex25 = 0;\n  let currentPrefixLengthIndex26 = 0;\n  let currentPrefixLengthIndex27 = 0;\n  let currentPrefixLengthIndex28 = 0;\n  let currentPrefixLengthIndex29 = 0;\n  let currentPrefixLengthIndex30 = 0;\n  let currentPrefixLengthIndex31 = 0;\n  let currentPrefixLengthIndex32 = 0;\n  let currentPrefixLengthIndex33 = 0;\n  let currentPrefixLengthIndex34 = 0;\n  let currentPrefixLengthIndex35 = 0;\n  let currentPrefixLengthIndex36 = 0;\n  let currentPrefixLengthIndex37 = 0;\n  let currentPrefixLengthIndex38 = 0;\n  let currentPrefixLengthIndex39 = 0;\n  let currentPrefixLengthIndex40 = 0;\n  let currentPrefixLengthIndex41 = 0;\n  let currentPrefixLengthIndex42 = 0;\n  let currentPrefixLengthIndex43 = 0;\n  let currentPrefixLengthIndex44 = 0;\n  let currentPrefixLengthIndex45 = 0;\n  let currentPrefixLengthIndex46 = 0;\n  let currentPrefixLengthIndex47 = 0;\n  let currentPrefixLengthIndex48 = 0;\n  let currentPrefixLengthIndex49 = 0;\n  let currentPrefixLengthIndex50 = 0;\n  let currentPrefixLengthIndex51 = 0;\n  let currentPrefixLengthIndex52 = 0;\n  let currentPrefixLengthIndex53 = 0;\n  let currentPrefixLengthIndex54 = 0;\n  let currentPrefixLengthIndex55 = 0;\n  let currentPrefixLengthIndex56 = 0;\n  let currentPrefixLengthIndex57 = 0;\n  let currentPrefixLengthIndex58 = 0;\n  let currentPrefixLengthIndex59 = 0;\n  let currentPrefixLengthIndex60 = 0;\n  let currentPrefixLengthIndex61 = 0;\n  let currentPrefixLengthIndex62 = 0;\n  let currentPrefixLengthIndex63 = 0;\n  let currentPrefixLengthIndex64 = 0;\n  let currentPrefixLengthIndex65 = 0;\n  let currentPrefixLengthIndex66 = 0;\n  let currentPrefixLengthIndex67 = 0;\n  let currentPrefixLengthIndex68 = 0;\n  let currentPrefixLengthIndex69 = 0;\n  let currentPrefixLengthIndex70 = 0;\n  let currentPrefixLengthIndex71 = 0;\n  let currentPrefixLengthIndex72 = 0;\n  let currentPrefixLengthIndex73 = 0;\n  let currentPrefixLengthIndex74 = 0;\n  let currentPrefixLengthIndex75 = 0;\n  let currentPrefixLengthIndex76 = 0;\n  let currentPrefixLengthIndex77 = 0;\n  let currentPrefixLengthIndex78 = 0;\n  let currentPrefixLengthIndex79 = 0;\n  let currentPrefixLengthIndex80 = 0;\n  let currentPrefixLengthIndex81 = 0;\n  let currentPrefixLengthIndex82 = 0;\n  let currentPrefixLengthIndex83 = 0;\n  let currentPrefixLengthIndex84 = 0;\n  let currentPrefixLengthIndex85 = 0;\n  let currentPrefixLengthIndex86 = 0;\n  let currentPrefixLengthIndex87 = 0;\n  let currentPrefixLengthIndex88 = 0;\n  let currentPrefixLengthIndex89 = 0;\n  let currentPrefixLengthIndex90 = 0;\n  let currentPrefixLengthIndex91 = 0;\n  let currentPrefixLengthIndex92 = 0;\n  let currentPrefixLengthIndex93 = 0;\n  let currentPrefixLengthIndex94 = 0;\n  let currentPrefixLengthIndex95 = 0;\n  let currentPrefixLengthIndex96 = 0;\n  let currentPrefixLengthIndex97 = 0;\n  let currentPrefixLengthIndex98 = 0;\n  let currentPrefixLengthIndex99 = 0;\n  let currentPrefixLengthIndex100 = 0;\n  let currentPrefixLengthIndex101 = 0;\n  let currentPrefixLengthIndex102 = 0;\n  let currentPrefixLengthIndex103 = 0;\n  let currentPrefixLengthIndex104 = 0;\n  let currentPrefixLengthIndex105 = 0;\n  let currentPrefixLengthIndex106 = 0;\n  let currentPrefixLengthIndex107 = 0;\n  let currentPrefixLengthIndex108 = 0;\n  let currentPrefixLengthIndex109 = 0;\n  let currentPrefixLengthIndex110 = 0;\n  let currentPrefixLengthIndex111 = 0;\n  let currentPrefixLengthIndex112 = 0;\n  let currentPrefixLengthIndex113 = 0;\n  let currentPrefixLengthIndex114 = 0;\n  let currentPrefixLengthIndex115 = 0;\n  let currentPrefixLengthIndex116 = 0;\n  let currentPrefixLengthIndex117 = 0;\n  let currentPrefixLengthIndex118 = 0;\n  let currentPrefixLengthIndex119 = 0;\n  let currentPrefixLengthIndex120 = 0;\n  let currentPrefixLengthIndex121", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givena  string text, repla ce all spaces in it with underscores, \n and if ast ring has m ore t han 2 consecutive spa ces ,   thenreplace all con secutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  string text, repla ce all spaces in it with underscores, \n and if ast ring has m ore t han 2 consecutive spa ces,   thenreplace all con secutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces2 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces3 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces4 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces5 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces6 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces7 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces8 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces9 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last = result.lastIndexOf('_');\n    count++;\n  }\n  return result;\n};\n\nconst fixSpaces10 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf('_') === -1) {\n    return result;\n  }\n  let last = result.lastIndexOf('_');\n  let count = 1;\n  while (last!== -1) {\n    if (count % 2 === 0) {\n      result = result.replace(/\\s+/g, '-');\n    }\n    last", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Createa  function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid , and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name .\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty , and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe' , 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Createa  function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid, and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name.\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if(file_name.length > 3) {\n    if(file_name.indexOf(\".\") > -1) {\n      if(file_name.indexOf(\".\") > 0) {\n        if(file_name.substring(0, file_name.indexOf(\".\"))!= \"\") {\n          if(file_name.substring(0, file_name.indexOf(\".\"))[0].match(/[a-zA-Z]/)) {\n            if(file_name.substring(file_name.indexOf(\".\") + 1).match(/[0-9]/)) {\n              return \"Yes\";\n            }\n          }\n        }\n      }\n    }\n  }\n  return \"No\";\n}\n\n/*\n  Createa function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid, and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name.\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if(file_name.length > 3) {\n    if(file_name.indexOf(\".\") > -1) {\n      if(file_name.indexOf(\".\") > 0) {\n        if(file_name.substring(0, file_name.indexOf(\".\"))!= \"\") {\n          if(file_name.substring(0, file_name.indexOf(\".\"))[0].match(/[a-zA-Z]/)) {\n            if(file_name.substring(file_name.indexOf(\".\") + 1).match(/[0-9]/)) {\n              return \"Yes\";\n            }\n          }\n        }\n      }\n    }\n  }\n  return \"No\";\n}\n\n/*\n  Createa function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid, and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name.\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  if(file_name.length > 3) {\n    if(file_name.indexOf(\".\") > -1) {\n      if(file_name.indexOf(\".\") > 0) {\n        if(file_name.substring(0, file_name.indexOf(\".\"))!= \"\") {\n          if(file_name.substring(0, file_name.indexOf(\".\"))[0].match(/[a-zA-Z]/)) {\n            if(file_name.substring(file_name.indexOf(\".\") + 1).match(/[0-9]/)) {\n              return \"Yes\";\n            }\n          }\n        }\n      }\n    }\n  }\n  return \"No\";\n}\n\n/*\n  Createa function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid, and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name.\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a lat", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n  change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n  change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n  change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n  change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n  change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(' ');\n    let newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let newWord = '';\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (char.match(/[a-zA-Z]/)) {\n                newWord += char;\n            }\n        }\n        newWords.push(newWord);\n    }\n    return newWords;\n}\n\nconst isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\nconst isPrimeNumber = (n) => {\n    return isPrime(n) && n > 1;\n}\n\nconst isPrimeNumberInSentence = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence2 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence3 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence4 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence5 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence6 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence7 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence8 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence9 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence10 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSentence11 = (sentence, words) => {\n    let newWords = wordsInSentence(sentence);\n    for (let i = 0; i < newWords.length; i++) {\n        let newWord = newWords[i];\n        if (isPrimeNumber(newWord.length) && newWord!=='') {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrimeNumberInSent", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let x_num = x.split(\"/\")[0];\n  let x_den = x.split(\"/\")[1];\n  let n_num = n.split(\"/\")[0];\n  let n_den = n.split(\"/\")[1];\n  if (x_num === n_num) {\n    return true;\n  }\n  if (x_den === n_den) {\n    return false;\n  }\n  if (x_den === \"1\") {\n    return true;\n  }\n  if (x_num === \"1\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"1\") {\n    return true;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\") {\n    return false;\n  }\n  if (x_num === \"0\") {\n    return false;\n  }\n  if (x_den === \"0\")", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writea  function which sor ts the given list of integers\n  in ascending order  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list .\n  For e xample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function which sor ts the given list of integers\n  in ascending order  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  const sortedSum = sorted.reduce((a, b) => a + b, 0)\n  const sortedIndex = sorted.map((x, i) => i)\n  return sortedIndex.map((i, j) => sorted[j])\n}\n\n/*\n  Write a function which returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(123) == 3\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(10) == 1\n  >>> sumDigits(100) == 2\n  >>> sumDigits(1000) == 3\n  >>> sumDigits(10000) == 4\n  >>> sumDigits(100000) == 5\n  >>> sumDigits(1000000) == 6\n  >>> sumDigits(10000000) == 7\n  >>> sumDigits(100000000) == 8\n  >>> sumDigits(1000000000) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 10\n    num = num / 10\n  }\n  return sum\n}\n\n/*\n  Write a function which returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(123) == 3\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(10) == 1\n  >>> sumDigits(100) == 2\n  >>> sumDigits(1000) == 3\n  >>> sumDigits(10000) == 4\n  >>> sumDigits(100000) == 5\n  >>> sumDigits(1000000) == 6\n  >>> sumDigits(10000000) == 7\n  >>> sumDigits(100000000) == 8\n  >>> sumDigits(1000000000) == 9\n  */\nconst sumDigits2 = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 10\n    num = num / 10\n  }\n  return sum\n}\n\n/*\n  Write a function which returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(123) == 3\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(10) == 1\n  >>> sumDigits(100) == 2\n  >>> sumDigits(1000) == 3\n  >>> sumDigits(10000) == 4\n  >>> sumDigits(100000) == 5\n  >>> sumDigits(1000000) == 6\n  >>> sumDigits(10000000) == 7\n  >>> sumDigits(100000000) == 8\n  >>> sumDigits(1000000000) == 9\n  */\nconst sumDigits3 = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 100\n    num = num / 100\n  }\n  return sum\n}\n\n/*\n  Write a function which returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(123) == 3\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(10) == 1\n  >>> sumDigits(100) == 2\n  >>> sumDigits(1000) == 3\n  >>> sumDigits(10000) == 4\n  >>> sumDigits(100000) == 5\n  >>> sumDigits(1000000) == 6\n  >>> sumDigits(10000000) == 7\n  >>> sumDigits(100000000) == 8\n  >>> sumDigits(1000000000) == 9\n  */\nconst sumDigits4 = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 1000\n    num = num / 1000\n  }\n  return sum\n}\n\n/*\n  Write a function which returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(123) == 3\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(10) == 1\n  >>> sumDigits(100) == 2\n  >>> sumDigits(1000) == 3\n  >>> sumDigits(10000) == 4\n  >>> sumDigits(100000) == 5\n  >>> sumDigits(1000000) == 6\n  >>> sumDigits(10000000) == 7\n  >>> sumDigits(100000000) == 8\n  >>> sumDigits(1000000000) == 9\n  */\nconst sumDigits5 = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 10000\n    num = num / 10000\n  }\n  return sum\n}\n\n/*\n  Write a function which returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(123) == 3\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(10) == 1\n  >>> sumDigits(100) == 2\n  >>> sumDigits(1000) == 3\n  >>> sumDigits(10000) == 4\n  >>> sumDigits(100000) == 5\n  >>> sumDigits(1000000) == 6\n  >>> sumDigits(10000000) == 7\n  >>> sumDigits(100000000) == 8\n  >>> sumDigits(1000000000) == 9\n  */\nconst sumDigits6 = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 10000000\n    num = num / 10000000\n  }\n  return sum\n}\n\n/*\n  Write", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* Therea re eight planets in  our solar system: the closerst to the Sun  is Me rc ury, the n ext o ne is Venus, then Ear th,  Mars, Jup iter, Saturn,\n Uranus, Neptune.\n  Write a function that t akes two planet nam es as s trings planet1 and plan et2 .\n  The function should return a tuple containing all planets whos e o rbits  are\n  lo cated between the orbit of planet1and the orbit of plan et2, sorted by\n  the proximity to the sun.\n  Th e function should return an empty tuple if planet1 or planet2 \n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* Therea re eight planets in  our solar system: the closerst to the Sun  is Me rc ury, the n ext o ne is Venus, then Ear th,  Mars, Jup iter, Saturn,\n Uranus, Neptune.\n  Write a function that t akes two planet nam es as s trings planet1 and plan et2.\n  The function should return a tuple containing all planets whos e o rbits  are\n  lo cated between the orbit of planet1and the orbit of plan et2, sorted by\n  the proximity to the sun.\n  Th e function should return an empty tuple if planet1 or planet2 \n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parseInt(x, 10));\n  let planet1bits = planet1.split(\" \").map(x => parseInt(x, 10));\n  let planet2bits = planet2.split(\" \").map(x => parse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it ,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers ,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  while (i < len) {\n    sum += lst[i]\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n      i++\n    } else {\n      sorted.push(lst[j])\n      j++\n      sum = 0\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_and_alphabetical_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let i = 0\n  let j = 0\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/15", "prompt": "/* Returna string containing  space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Returna string containing  space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> range(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst range = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> range(10, 20)\n  '10 11 12 13 14 15 16 17 18 19 20'\n  */\nconst range = (n, m) => {\n  let s = '';\n  for (let i = n; i < m; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 2)\n  '0 2 4 6 8 10'\n  >>> range(10, 20, 2)\n  '10 12 14 16 18 20'\n  */\nconst range = (n, m, k) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3)\n  '0 3 6 9'\n  >>> range(10, 20, 3)\n  '10 13 16 19'\n  */\nconst range = (n, m, k) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2, 1)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2, 1)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l, r) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2, 1, 2)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2, 1, 2)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l, r) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2, 1, 2, 1)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2, 1, 2, 1)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l, r, t) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2, 1, 2, 1, 2)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2, 1, 2, 1, 2)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l, r, t) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2, 1, 2, 1, 2, 1)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2, 1, 2, 1, 2, 1)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l, r, t, u) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1 to n.\n  >>> range(0, 10, 3, 2, 1, 2, 1, 2, 1, 2)\n  '0 3 6 9'\n  >>> range(10, 20, 3, 2, 1, 2, 1, 2, 1, 2)\n  '10 13 16 19'\n  */\nconst range = (n, m, k, l, r, t, u) => {\n  let s = '';\n  for (let i = n; i < m; i += k) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY31 = (n, x, y) => {\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Givena  list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers .\n  doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe rence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Givena  list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe rence = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  const sum = rence(lst);\n  return sum;\n};\n\nconst doubleThe", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I thinkw e all rememberthat  feeling when the result of some long-awaited\n  ev en t is final ly kn own. The feelings and  th oughts you have at that m oment are\n  definitely worth noting down an d comparing.\n Your  task i s to determine if a per son  correc tlyguessed the results of a number ofmatches.\n  You are g ive ntwo  arrays o f scores and guessesof equal length, where each index s hows a match. \n  Return an array of thesame le ngth denoting how far off each guess was. If they have guesse d correctly,  the value is 0, a nd if not, thevalue is  the absolute difference betweenthe guess and the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I thinkw e all rememberthat  feeling when the result of some long-awaited\n  ev en t is final ly kn own. The feelings and  th oughts you have at that m oment are\n  definitely worth noting down an d comparing.\n Your  task i s to determine if a per son  correc tlyguessed the results of a number ofmatches.\n  You are g ive ntwo  arrays o f scores and guessesof equal length, where each index s hows a match. \n  Return an array of thesame le ngth denoting how far off each guess was. If they have guesse d correctly,  the value is 0, a nd if not, thevalue is  the absolute difference betweenthe guess and the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare2 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare3 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare4 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare5 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare6 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare7 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare8 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare9 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare10 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare11 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare12 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare13 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare14 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare15 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare16 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare17 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare18 = (game, guess) => {\n  let result = [];\n  for (let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will  be given the nameof a class (a string) and a list of extensions.\n Th e extensio ns ar e to be used to loadadd itional cl asses to the cl ass. The\n  strength of the extension is asfollows: Let CAP be  the nu mber of the uppercase\n le tters i n the extension's name, and let SM be the number of lowerca selette rs\n  in t he extension's name,the strength is given by the fracti on CAP - SM.\n  You should find the strongest ex tension and return a string in this\n  format: ClassName.Stron gestExtensionName.\n  If there ar e two or more e xtension s with the same strength, you sho uld\n  choose the onethat comes  firs t in th e list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will  be given the nameof a class (a string) and a list of extensions.\n Th e extensio ns ar e to be used to loadadd itional cl asses to the cl ass. The\n  strength of the extension is asfollows: Let CAP be  the nu mber of the uppercase\n le tters i n the extension's name, and let SM be the number of lowerca selette rs\n  in t he extension's name,the strength is given by the fracti on CAP - SM.\n  You should find the strongest ex tension and return a string in this\n  format: ClassName.Stron gestExtensionName.\n  If there ar e two or more e xtension s with the same strength, you sho uld\n  choose the onethat comes  firs t in th e list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(extension => {\n    const cap = extension.toUpperCase();\n    const strength_of_extension = strength[cap] || 0;\n    strength[cap] = strength_of_extension + 1;\n  });\n  const strongest_extension = Object.keys(strength)\n   .sort((a, b) => strength[a] - strength[b])\n   .pop();\n  return `${class_name}.${strongest_extension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let a_str = a.split(\" \");\n  let b_str = b.split(\" \");\n  let a_str_len = a_str.length;\n  let b_str_len = b_str.length;\n  let i = 0;\n  let j = 0;\n  let flag = false;\n  while (i < a_str_len && j < b_str_len) {\n    if (a_str[i] === b_str[j]) {\n      i++;\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len - 1 && j < b_str_len - 1) {\n      i++;\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len - 1 && j < b_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      i++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len) {\n      j++;\n    } else if (a_str[i] === b_str[j] && i < a_str_len", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    let even = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = num / 2;\n    }\n    return [odd, even];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givena  positive integer,obtain its roman numeral equivalent as a string,\n a nd returnit in  lowercase.\n  Restric tio ns: 1 <= n um <= 1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  positive integer,obtain its roman numeral equivalent as a string,\n a nd returnit in  lowercase.\n  Restric tio ns: 1 <= n um <= 1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const nums = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result.push(nums[num / 10]);\n      num = num % 10;\n    } else if (num % 10 === 1) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 2) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 3) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 4) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 5) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 6) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 7) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 8) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    } else if (num % 10 === 9) {\n      result.push(nums[num / 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      result.push(nums[num % 10]);\n      num = num % 10;\n    }\n  }\n  return result.join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Givent he lengths of the t hree sides of a triangle. Return true if the three \n sides for m a r ight-angled triangle,  fa lse otherw ise.\n  A right- angled triangle is a triangle in which oneangle is rightangl e or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Givent he lengths of the t hree sides of a triangle. Return true if the three \n sides for m a r ight-angled triangle,  fa lse otherw ise.\n  A right- angled triangle is a triangle in which oneangle is rightangl e or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return b < c;\n  }\n  if (b === c) {\n    return a < c;\n  }\n  if (a === b) {\n    return a < c;\n  }\n  return false;\n};\n\n/*\n Givent the lengths of the t hree sides of a triangle. Return the area of the \n triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2, 3) == 0\n  areaOfTriangle(1, 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  const max = words.length > 1? words[0] : words[0];\n  const maxCount = words.length > 1? words[0].length : words[0].length;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxCount) {\n      max = words[i];\n      maxCount = words[i].length;\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {\n  const max = numbers.length > 1? numbers[0] : numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that returns the largest number in a list of numbers.\n  If the list contains more than one largest number, return the largest number\n  that is not larger than the largest number in the list.\n*/\ncon st largestNumber = (numbers) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'rea hungry rabbit, an d you already have eaten a certain number of carro ts ,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You'rea hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= 0) {\n    return [0, number];\n  }\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Givena  string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Givena  string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givent wo lists operator,and operand. The first list has basic algebra oper at ions, and\n  th e second list is a li stofinteger s. Use the twogiven lists to build the algebric \n  expres sion and return the  evalua tion of this expression .\n  The b asic algebra operations:\n  Addition ( + ) \n  Subtraction (- )   M ultiplica tion (* ) \n  Floor division ( // ) \n  Exponentiation (** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Givent wo lists operator,and operand. The first list has basic algebra oper at ions, and\n  th e second list is a li stofinteger s. Use the twogiven lists to build the algebric \n  expres sion and return the  evalua tion of this expression.\n  The b asic algebra operations:\n  Addition ( + ) \n  Subtraction (- )   M ultiplica tion (* ) \n  Floor division ( // ) \n  Exponentiation (** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2) {\n    throw new Error('Operand and operator lists are not equal length')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2) {\n    throw new Error('Operand and operator lists are not equal length')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2) {\n    throw new Error('Operand and operator lists are not equal length')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2) {\n    throw new Error('Operand and operator lists are not equal length')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2) {\n    throw new Error('Operand and operator lists are not equal length')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You aregiven a strings.\n if s[i] isa letter, reverse its case from lowerto  upper orviseversa, \n  otherwise k eep  it as itis.\n  If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You aregiven a strings.\n if s[i] isa letter, reverse its case from lowerto  upper orviseversa, \n  otherwise k eep  it as itis.\n  If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let res = \"\";\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      res += s[i].toLowerCase();\n    } else {\n      res += s[i].toUpperCase();\n    }\n  }\n  return res;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givena  string 'text', ret urn its md5hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  string 'text', ret urn its md5hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givent wo positive integer s a and b, return the even digits between a\n  andb,  in ascend ing o rder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Givent wo positive integer s a and b, return the even digits between a\n  andb,  in ascend ing o rder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Inputt o this function isa string representing musical notes in a special A SC II format. \n  Yo ur task is to parse t his  string an d return list o f integers corresponding to how many beatsdoes each\n  not las t.\n\n  H ere is a legend:\n  'o'- w hole no te,lasts four beats  'o|' - half note, lasts two beats\n '.| '- q uater not e, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Inputt o this function isa string representing musical notes in a special A SC II format. \n  Yo ur task is to parse t his  string an d return list o f integers corresponding to how many beatsdoes each\n  not las t.\n\n  H ere is a legend:\n  'o'- w hole no te,lasts four beats  'o|' - half note, lasts two beats\n '.| '- q uater not e, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i].split('|')\n    const beats_in_this_note = note[1].split(' ')\n    for (let j = 0; j < beats_in_this_note.length; j++) {\n      beats.push(parseNote(beats_in_this_note[j]))\n    }\n  }\n  return beats\n}\n\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ')\n  const beats = note[1].split(' ')\n  const note_number = parseInt(note[0])\n  const beats_in_this_note = beats[0].split(' ')\n  const beats_in_this_note_length = beats_in_this_note[1].split(' ')\n  const beats_in_this_note_length_length = beats_in_this_note_length[1].split(' ')\n  const beats_in_this_note_length_length_length = beats_in_this_note_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length = beats_in_this_note_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length = beats_in_this_note_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length[1].split(' ')\n  const beats_in_this_note_length_length_length_length_length_length_length_length_length_length_length_length_length_length = beats_in_this_note_length_length_length_length_length_length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find ho w many times agive n substringcan be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find ho w many times agive n substringcan be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that can be made from the original string.\n  >>> longestSubstring('abc')\n  'abc'\n  >>> longestSubstring('a')\n  'a'\n  >>> longestSubstring('aa')\n  'aa'\n  >>> longestSubstring('aaaa')\n  'aaaa'\n  >>> longestSubstring('ab')\n  'ab'\n  >>> longestSubstring('aab')\n  'aab'\n  >>> longestSubstring('aabb')\n  'aabb'\n  >>> longestSubstring('aabbcc')\n  'aabb'\n  >>> longestSubstring('aabbccdd')\n  'aabbccdd'\n  >>> longestSubstring('aabbccddee')\n  'aabbccddee'\n  >>> longestSubstring('aabbccddeeff')\n  'aabbccddeeff'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabbccddeeffg')\n  'aabbccddeeffg'\n  >>> longestSubstring('aabb", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four' , 'five', 'six' , 'seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    const aNum = parseInt(a);\n    const bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Givena  positive floatingpoint number, it can be decomposed into  and inte ge r part (la rgest  integer smaller than  gi ven number ) and decimals  (leftover part always smaller than 1).\n\n Return the decimal  part o f the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Givena  positive floatingpoint number, it can be decomposed into  and inte ge r part (la rgest  integer smaller than  gi ven number ) and decimals  (leftover part always smaller than 1).\n\n Return the decimal  part o f the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal2 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal3 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal4 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal5 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal6 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal7 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal8 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal9 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal10 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal11 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal12 = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into an integere part (the largest integer smaller than the number) and a decimal part (the leftover part).\n Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncate", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From asupplied list of nu mbers (of length at least two) select and return t wo  that arethe c losest to each\n  othe r a ndreturnthem in order ( smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From asupplied list of nu mbers (of length at least two) select and return t wo  that arethe c losest to each\n  othe r a ndreturnthem in order ( smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Givenl ist of numbers(ofat least two elements), apply a linear transform t othat list, \n  su ch that the smallestnum ber will b ecome 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Givenl ist of numbers(ofat least two elements), apply a linear transform t othat list, \n  su ch that the smallestnum ber will b ecome 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  return numbers.map(x => (x - min) / range)\n}\n\n/* Given a list of numbers, return a list of their logarithms */\nconst log = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of their exponents */\nconst exp = (numbers) => {\n  return numbers.map(x => Math.exp(x))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst sqrt = (numbers) => {\n  return numbers.map(x => Math.sqrt(x))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/2))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root2 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/3))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root3 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/4))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root4 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/5))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root5 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/6))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root6 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/7))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root7 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/8))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root8 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/9))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root9 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/10))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root10 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/11))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root11 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/12))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root12 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/13))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root13 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/14))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root14 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/15))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root15 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/16))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root16 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/17))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root17 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/18))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root18 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/19))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root19 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/20))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root20 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/21))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root21 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/22))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root22 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/23))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root23 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/24))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root24 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1/25))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst root25 = (numbers) => {\n  return numbers.map(x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filtergiven list of any p ython values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* Filtergiven list of any p ython values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => typeof x === 'number' && x % 1 === 0);\n};\n\n// Filter out all the non-numeric values\nconst filterNumbers = (values) => {\n  return values.filter(x => typeof x === 'number');\n};\n\n// Filter out all the non-string values\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n};\n\n// Filter out all the non-object values\nconst filterObjects = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n// Filter out all the non-array values\nconst filterArrays = (values) => {\n  return values.filter(x => Array.isArray(x));\n};\n\n// Filter out all the non-boolean values\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean');\n};\n\n// Filter out all the non-function values\nconst filterFunctions = (values) => {\n  return values.filter(x => typeof x === 'function');\n};\n\n// Filter out all the non-null values\nconst filterNulls = (values) => {\n  return values.filter(x => x!== null);\n};\n\n// Filter out all the non-undefined values\nconst filterUndefineds = (values) => {\n  return values.filter(x => typeof x!== 'undefined');\n};\n\n// Filter out all the non-null values\nconst filterAll = (values) => {\n  return values.filter(x => x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNone = (values) => {\n  return values.filter(x => x === null);\n};\n\n// Filter out all the non-null values\nconst filterAny = (values) => {\n  return values.filter(x => x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllStrings = (values) => {\n  return values.filter(x => typeof x ==='string' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNoneStrings = (values) => {\n  return values.filter(x => typeof x ==='string' && x === null);\n};\n\n// Filter out all the non-null values\nconst filterAnyStrings = (values) => {\n  return values.filter(x => typeof x ==='string' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllNumbers = (values) => {\n  return values.filter(x => typeof x === 'number' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNoneNumbers = (values) => {\n  return values.filter(x => typeof x === 'number' && x === null);\n};\n\n// Filter out all the non-null values\nconst filterAnyNumbers = (values) => {\n  return values.filter(x => typeof x === 'number' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNoneBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean' && x === null);\n};\n\n// Filter out all the non-null values\nconst filterAnyBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllFunctions = (values) => {\n  return values.filter(x => typeof x === 'function' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNoneFunctions = (values) => {\n  return values.filter(x => typeof x === 'function' && x === null);\n};\n\n// Filter out all the non-null values\nconst filterAnyFunctions = (values) => {\n  return values.filter(x => typeof x === 'function' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllNulls = (values) => {\n  return values.filter(x => x === null);\n};\n\n// Filter out all the non-null values\nconst filterNoneNulls = (values) => {\n  return values.filter(x => x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAnyNulls = (values) => {\n  return values.filter(x => x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllUndefineds = (values) => {\n  return values.filter(x => typeof x === 'undefined' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNoneUndefineds = (values) => {\n  return values.filter(x => typeof x === 'undefined' && x === null);\n};\n\n// Filter out all the non-null values\nconst filterAnyUndefineds = (values) => {\n  return values.filter(x => typeof x === 'undefined' && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllArrays = (values) => {\n  return values.filter(x => Array.isArray(x) && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterNoneArrays = (values) => {\n  return values.filter(x => Array.isArray(x) && x === null);\n};\n\n// Filter out all the non-null values\nconst filterAnyArrays = (values) => {\n  return values.filter(x => Array.isArray(x) && x!== null);\n};\n\n// Filter out all the non-null values\nconst filterAllObjects = (values) => {\n  return values.filter(x => typeof x ===", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Returnlength of given str ing\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Returnlength of given str ing\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return the index of the first occurence of the given char in the given string\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'z')\n  -1\n  >>> strindex('abc', 'a', 1)\n  1\n  >>> strindex('abc', 'a', 2)\n  -1\n  >>> strindex('abc', 'a', 3)\n  -1\n  >>> strindex('abc', 'a', 4)\n  -1\n  >>> strindex('abc', 'a', 5)\n  -1\n  >>> strindex('abc', 'a', 6)\n  -1\n  >>> strindex('abc', 'a', 7)\n  -1\n  >>> strindex('abc', 'a', 8)\n  -1\n  >>> strindex('abc', 'a', 9)\n  -1\n  >>> strindex('abc', 'a', 10)\n  -1\n  >>> strindex('abc', 'a', 11)\n  -1\n  >>> strindex('abc', 'a', 12)\n  -1\n  >>> strindex('abc', 'a', 13)\n  -1\n  >>> strindex('abc', 'a', 14)\n  -1\n  >>> strindex('abc', 'a', 15)\n  -1\n  >>> strindex('abc', 'a', 16)\n  -1\n  >>> strindex('abc', 'a', 17)\n  -1\n  >>> strindex('abc', 'a', 18)\n  -1\n  >>> strindex('abc', 'a', 19)\n  -1\n  >>> strindex('abc', 'a', 20)\n  -1\n  >>> strindex('abc', 'a', 21)\n  -1\n  >>> strindex('abc', 'a', 22)\n  -1\n  >>> strindex('abc', 'a', 23)\n  -1\n  >>> strindex('abc', 'a', 24)\n  -1\n  >>> strindex('abc', 'a', 25)\n  -1\n  >>> strindex('abc', 'a', 26)\n  -1\n  >>> strindex('abc', 'a', 27)\n  -1\n  >>> strindex('abc', 'a', 28)\n  -1\n  >>> strindex('abc', 'a', 29)\n  -1\n  >>> strindex('abc', 'a', 30)\n  -1\n  >>> strindex('abc', 'a', 31)\n  -1\n  >>> strindex('abc', 'a', 32)\n  -1\n  >>> strindex('abc', 'a', 33)\n  -1\n  >>> strindex('abc', 'a', 34)\n  -1\n  >>> strindex('abc', 'a', 35)\n  -1\n  >>> strindex('abc', 'a', 36)\n  -1\n  >>> strindex('abc', 'a', 37)\n  -1\n  >>> strindex('abc', 'a', 38)\n  -1\n  >>> strindex('abc', 'a', 39)\n  -1\n  >>> strindex('abc', 'a', 40)\n  -1\n  >>> strindex('abc', 'a', 41)\n  -1\n  >>> strindex('abc', 'a', 42)\n  -1\n  >>> strindex('abc', 'a', 43)\n  -1\n  >>> strindex('abc', 'a', 44)\n  -1\n  >>> strindex('abc', 'a', 45)\n  -1\n  >>> strindex('abc', 'a', 46)\n  -1\n  >>> strindex('abc', 'a', 47)\n  -1\n  >>> strindex('abc', 'a', 48)\n  -1\n  >>> strindex('abc', 'a', 49)\n  -1\n  >>> strindex('abc', 'a', 50)\n  -1\n  >>> strindex('abc', 'a', 51)\n  -1\n  >>> strindex('abc', 'a', 52)\n  -1\n  >>> strindex('abc', 'a', 53)\n  -1\n  >>> strindex('abc', 'a', 54)\n  -1\n  >>> strindex('abc', 'a', 55)\n  -1\n  >>> strindex('abc', 'a', 56)\n  -1\n  >>> strindex('abc', 'a', 57)\n  -1\n  >>> strindex('abc', 'a', 58)\n  -1\n  >>> strindex('abc', 'a', 59)\n  -1\n  >>> strindex('abc', 'a', 60)\n  -1\n  >>> strindex('abc', 'a', 61)\n  -1\n  >>> strindex('abc', 'a', 62)\n  -1\n  >>> strindex('abc', 'a', 63)\n  -1\n  >>> strindex('abc', 'a', 64)\n  -1\n  >>> strindex('abc', 'a', 65)\n  -1\n  >>> strindex('abc', 'a', 66)\n  -1\n  >>> strindex('abc', 'a', 67)\n  -1\n  >>> strindex('abc', 'a', 68)\n  -1\n  >>> strindex('abc', 'a', 69)\n  -1\n  >>> strindex('abc', 'a', 70)\n  -1\n  >>> strindex('abc', 'a', 71)\n  -1\n  >>> strindex('abc', 'a', 72)\n  -1\n  >>> strindex('abc', 'a', 73)\n  -1\n  >>> strindex('abc', 'a', 74)\n  -1\n  >>> strindex('abc', 'a', 75)\n  -1\n  >>> strindex('abc', 'a', 76)\n  -1\n  >>> strindex('abc', 'a', 77)\n  -1\n  >>> strindex('abc', 'a', 78)\n  -1\n  >>> strindex('abc', 'a', 79)\n  -1\n  >>> strindex('abc', 'a', 80)\n  -1\n  >>> strindex('abc', 'a', 81)\n  -1\n  >>> strindex('abc', 'a', 82)\n  -1\n  >>> strindex('abc', 'a', 83)\n  -1\n  >>> strindex('abc', 'a', 84)\n  -1\n  >>> strindex('abc', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor2 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor3 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor4 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor5 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor6 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  For ag iven number n,find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returnlist of prime facto rs of giveninteger in the order from smallest tola rgest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Returnlist of prime facto rs of giveninteger in the order from smallest tola rgest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from smallest to largest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from largest to smallest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from smallest to largest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseReverseReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from smallest to largest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseReverseReverseReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from smallest to largest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseReverseReverseReverseReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from smallest to largest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseReverseReverseReverseReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Returnlist of prime facto rs of giveninteger in the order from smallest to largest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For ag iven string, flip l owercase characters to uppercase and uppercase tolo werc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concate nate list of string s into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concate nate list of string s into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filteran input list of st rings only for ones that start with a given prefix .\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filteran input list of st rings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length\n  let currentBalance = 0\n  let i = 0\n  while (i < operationsLength) {\n    currentBalance += operations[i]\n    if (currentBalance < 0) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nexport default belowZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Returno nly positive number s in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Returno nly positive number s in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Returnt rue if a givennumb er is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Returnt rue if a givennumb er is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  * Return the number of primes less than or equal to n.\n  *\n  * @param {Number} n\n  * @return {Number}\n  * @example\n  *\n  *   isPrime(6)\n  *   // => false\n  *   isPrime(101)\n  *   // => true\n  *   isPrime(11)\n  *   // => true\n  *   isPrime(13441)\n  *   // => true\n  *   isPrime(61)\n  *   // => true\n  *   isPrime(4)\n  *   // => false\n  *   isPrime(1)\n  *   // => false\n  */\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count++\n    }\n  }\n  return count\n}\n\nexport default countPrimes\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 + .... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  } , 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let k = xs[3];\n  let m = xs[4];\n  let p = xs[5];\n  let q = xs[6];\n  let r = xs[7];\n  let s = xs[8];\n  let t = xs[9];\n  let u = xs[10];\n  let v = xs[11];\n  let w = xs[12];\n  let x0 = xs[13];\n  let x1 = xs[14];\n  let x2 = xs[15];\n  let x3 = xs[16];\n  let x4 = xs[17];\n  let x5 = xs[18];\n  let x6 = xs[19];\n  let x7 = xs[20];\n  let x8 = xs[21];\n  let x9 = xs[22];\n  let x10 = xs[23];\n  let x11 = xs[24];\n  let x12 = xs[25];\n  let x13 = xs[26];\n  let x14 = xs[27];\n  let x15 = xs[28];\n  let x16 = xs[29];\n  let x17 = xs[30];\n  let x18 = xs[31];\n  let x19 = xs[32];\n  let x20 = xs[33];\n  let x21 = xs[34];\n  let x22 = xs[35];\n  let x23 = xs[36];\n  let x24 = xs[37];\n  let x25 = xs[38];\n  let x26 = xs[39];\n  let x27 = xs[40];\n  let x28 = xs[41];\n  let x29 = xs[42];\n  let x30 = xs[43];\n  let x31 = xs[44];\n  let x32 = xs[45];\n  let x33 = xs[46];\n  let x34 = xs[47];\n  let x35 = xs[48];\n  let x36 = xs[49];\n  let x37 = xs[50];\n  let x38 = xs[51];\n  let x39 = xs[52];\n  let x40 = xs[53];\n  let x41 = xs[54];\n  let x42 = xs[55];\n  let x43 = xs[56];\n  let x44 = xs[57];\n  let x45 = xs[58];\n  let x46 = xs[59];\n  let x47 = xs[60];\n  let x48 = xs[61];\n  let x49 = xs[62];\n  let x50 = xs[63];\n  let x51 = xs[64];\n  let x52 = xs[65];\n  let x53 = xs[66];\n  let x54 = xs[67];\n  let x55 = xs[68];\n  let x56 = xs[69];\n  let x57 = xs[70];\n  let x58 = xs[71];\n  let x59 = xs[72];\n  let x60 = xs[73];\n  let x61 = xs[74];\n  let x62 = xs[75];\n  let x63 = xs[76];\n  let x64 = xs[77];\n  let x65 = xs[78];\n  let x66 = xs[79];\n  let x67 = xs[80];\n  let x68 = xs[81];\n  let x69 = xs[82];\n  let x70 = xs[83];\n  let x71 = xs[84];\n  let x72 = xs[85];\n  let x73 = xs[86];\n  let x74 = xs[87];\n  let x75 = xs[88];\n  let x76 = xs[89];\n  let x77 = xs[90];\n  let x78 = xs[91];\n  let x79 = xs[92];\n  let x80 = xs[93];\n  let x81 = xs[94];\n  let x82 = xs[95];\n  let x83 = xs[96];\n  let x84 = xs[97];\n  let x85 = xs[98];\n  let x86 = xs[99];\n  let x87 = xs[100];\n  let x88 = xs[101];\n  let x89 = xs[102];\n  let x90 = xs[103];\n  let x91 = xs[104];\n  let x92 = xs[105];\n  let x93 = xs[106];\n  let x94 = xs[107];\n  let x95 = xs[108];\n  let x96 = xs[109];\n  let x97 = xs[110];\n  let x98 = xs[111];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sorted2 = [...l].sort((a, b) => b - a);\n  const sorted3 = [...l].sort((a, b) => a - b);\n  const sorted4 = [...l].sort((a, b) => b - a);\n  const sorted5 = [...l].sort((a, b) => a - b);\n  const sorted6 = [...l].sort((a, b) => b - a);\n  const sorted7 = [...l].sort((a, b) => a - b);\n  const sorted8 = [...l].sort((a, b) => b - a);\n  const sorted9 = [...l].sort((a, b) => a - b);\n  const sorted10 = [...l].sort((a, b) => b - a);\n  const sorted11 = [...l].sort((a, b) => a - b);\n  const sorted12 = [...l].sort((a, b) => b - a);\n  const sorted13 = [...l].sort((a, b) => a - b);\n  const sorted14 = [...l].sort((a, b) => b - a);\n  const sorted15 = [...l].sort((a, b) => a - b);\n  const sorted16 = [...l].sort((a, b) => b - a);\n  const sorted17 = [...l].sort((a, b) => a - b);\n  const sorted18 = [...l].sort((a, b) => b - a);\n  const sorted19 = [...l].sort((a, b) => a - b);\n  const sorted20 = [...l].sort((a, b) => b - a);\n  const sorted21 = [...l].sort((a, b) => a - b);\n  const sorted22 = [...l].sort((a, b) => b - a);\n  const sorted23 = [...l].sort((a, b) => a - b);\n  const sorted24 = [...l].sort((a, b) => b - a);\n  const sorted25 = [...l].sort((a, b) => a - b);\n  const sorted26 = [...l].sort((a, b) => b - a);\n  const sorted27 = [...l].sort((a, b) => a - b);\n  const sorted28 = [...l].sort((a, b) => b - a);\n  const sorted29 = [...l].sort((a, b) => a - b);\n  const sorted30 = [...l].sort((a, b) => b - a);\n  const sorted31 = [...l].sort((a, b) => a - b);\n  const sorted32 = [...l].sort((a, b) => b - a);\n  const sorted33 = [...l].sort((a, b) => a - b);\n  const sorted34 = [...l].sort((a, b) => b - a);\n  const sorted35 = [...l].sort((a, b) => a - b);\n  const sorted36 = [...l].sort((a, b) => b - a);\n  const sorted37 = [...l].sort((a, b) => a - b);\n  const sorted38 = [...l].sort((a, b) => b - a);\n  const sorted39 = [...l].sort((a, b) => a - b);\n  const sorted40 = [...l].sort((a, b) => b - a);\n  const sorted41 = [...l].sort((a, b) => a - b);\n  const sorted42 = [...l].sort((a, b) => b - a);\n  const sorted43 = [...l].sort((a, b) => a - b);\n  const sorted44 = [...l].sort((a, b) => b - a);\n  const sorted45 = [...l].sort((a, b) => a - b);\n  const sorted46 = [...l].sort((a, b) => b - a);\n  const sorted47 = [...l].sort((a, b) => a - b);\n  const sorted48 = [...l].sort((a, b) => b - a);\n  const sorted49 = [...l].sort((a, b) => a - b);\n  const sorted50 = [...l].sort((a, b) => b - a);\n  const sorted51 = [...l].sort((a, b) => a - b);\n  const sorted52 = [...l].sort((a, b) => b - a);\n  const sorted53 = [...l].sort((a, b) => a - b);\n  const sorted54 = [...l].sort((a, b) => b - a);\n  const sorted55 = [...l].sort((a, b) => a - b);\n  const sorted56 = [...l].sort((a, b) => b - a);\n  const sorted57 = [...l].sort((a, b) => a - b);\n  const sorted58 = [...l].sort((a, b) => b - a);\n  const sorted59 = [...l].sort((a, b) => a - b);\n  const sorted60 = [...l].sort((a, b) => b - a);\n  const sorted61 = [...l].sort((a, b) => a - b);\n  const sorted62 = [...l].sort((a, b) => b - a);\n  const sorted63 = [...l].sort((a, b) => a - b);\n  const sorted64 = [...l].sort((a, b) => b - a);\n  const sorted65 = [...l].sort((a, b) => a - b);\n  const sorted66 = [...l].sort((a, b) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Returns orted unique elemen ts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Returns orted unique elemen ts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList2 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList3 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList4 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList5 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList6 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList7 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList8 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList9 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList10 = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\n/*\n  Returns a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Returnm aximum elementin t he list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Returnm aximum elementin t he list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Returnt he number of timesthe digit 7appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Returnt he number of timesthe digit 7appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  const l5 = l.slice();\n  const l6 = l.slice();\n  const l7 = l.slice();\n  const l8 = l.slice();\n  const l9 = l.slice();\n  const l10 = l.slice();\n  const l11 = l.slice();\n  const l12 = l.slice();\n  const l13 = l.slice();\n  const l14 = l.slice();\n  const l15 = l.slice();\n  const l16 = l.slice();\n  const l17 = l.slice();\n  const l18 = l.slice();\n  const l19 = l.slice();\n  const l20 = l.slice();\n  const l21 = l.slice();\n  const l22 = l.slice();\n  const l23 = l.slice();\n  const l24 = l.slice();\n  const l25 = l.slice();\n  const l26 = l.slice();\n  const l27 = l.slice();\n  const l28 = l.slice();\n  const l29 = l.slice();\n  const l30 = l.slice();\n  const l31 = l.slice();\n  const l32 = l.slice();\n  const l33 = l.slice();\n  const l34 = l.slice();\n  const l35 = l.slice();\n  const l36 = l.slice();\n  const l37 = l.slice();\n  const l38 = l.slice();\n  const l39 = l.slice();\n  const l40 = l.slice();\n  const l41 = l.slice();\n  const l42 = l.slice();\n  const l43 = l.slice();\n  const l44 = l.slice();\n  const l45 = l.slice();\n  const l46 = l.slice();\n  const l47 = l.slice();\n  const l48 = l.slice();\n  const l49 = l.slice();\n  const l50 = l.slice();\n  const l51 = l.slice();\n  const l52 = l.slice();\n  const l53 = l.slice();\n  const l54 = l.slice();\n  const l55 = l.slice();\n  const l56 = l.slice();\n  const l57 = l.slice();\n  const l58 = l.slice();\n  const l59 = l.slice();\n  const l60 = l.slice();\n  const l61 = l.slice();\n  const l62 = l.slice();\n  const l63 = l.slice();\n  const l64 = l.slice();\n  const l65 = l.slice();\n  const l66 = l.slice();\n  const l67 = l.slice();\n  const l68 = l.slice();\n  const l69 = l.slice();\n  const l70 = l.slice();\n  const l71 = l.slice();\n  const l72 = l.slice();\n  const l73 = l.slice();\n  const l74 = l.slice();\n  const l75 = l.slice();\n  const l76 = l.slice();\n  const l77 = l.slice();\n  const l78 = l.slice();\n  const l79 = l.slice();\n  const l80 = l.slice();\n  const l81 = l.slice();\n  const l82 = l.slice();\n  const l83 = l.slice();\n  const l84 = l.slice();\n  const l85 = l.slice();\n  const l86 = l.slice();\n  const l87 = l.slice();\n  const l88 = l.slice();\n  const l89 = l.slice();\n  const l90 = l.slice();\n  const l91 = l.slice();\n  const l92 = l.slice();\n  const l93 = l.slice();\n  const l94 = l.slice();\n  const l95 = l.slice();\n  const l96 = l.slice();\n  const l97 = l.slice();\n  const l98 = l.slice();\n  const l99 = l.slice();\n  const l100 = l.slice();\n  const l101 = l.slice();\n  const l102 = l.slice();\n  const l103 = l.slice();\n  const l104 = l.slice();\n  const l105 = l.slice();\n  const l106 = l.slice();\n  const l107 = l.slice();\n  const l108 = l.slice();\n  const l109 = l.slice();\n  const l110 = l.slice();\n  const l111 = l.slice();\n  const l112 = l.slice();\n  const l113 = l.slice();\n  const l114 = l.slice();\n  const l115 = l.slice();\n  const l116 = l.slice();\n  const l117 = l.slice();\n  const l118 = l.slice();\n  const l119 = l.slice();\n  const l120 = l.slice();\n  const l121 = l.slice();\n  const l122 = l.slice();\n  const l123 = l.slice();\n  const l124 = l.slice();\n  const l125 = l.slice();\n  const l126 = l.slice();\n  const l127 = l.slice();\n  const l128 = l.slice();\n  const l129 = l.slice();\n  const l130 = l.slice();\n  const l131 = l.slice();\n  const l132 = l.slice();\n  const l133 = l.slice();\n  const l134 = l.slice();\n  const l135 = l.slice();\n  const l136 = l.slice();\n  const l137 = l.slice();\n  const l138 = l.slice();\n  const l139 = l.slice();\n  const l140 = l.slice();\n  const l141 = l.slice();\n  const l142 = l.slice();", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns  encoded string bycycling groups of three characters.\n  */\nconst enc od eCyclic=(s) = > {\n  var groups = [] , g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup .leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2 .join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nc onst dec odeCyclic= (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns  encoded string bycycling groups of three characters.\n  */\nconst enc od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nc onst dec odeCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic2= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic3= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic4= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic5= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic6= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst decod eCyclic7= (s) => {\n  var groups = []", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFi b returns n-thnumb er that is a Fibonacci number and it's also prime. \n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFi b returns n-thnumb er that is a Fibonacci number and it's also prime. \n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 2, c = 3, d = 5, e = 13, f = 89, g = 233, h = 547, i = 787, j = 1229, k = 1741, l = 2189, m = 2933, n = 3025, o = 3457, p = 4481, q = 5683, r = 6709, s = 7809, t = 8981, u = 9883, v = 10885, w = 11897, x = 12997, y = 14097, z = 15181, aa = 16193, bb = 17341, cc = 18661, dd = 19809, ee = 20233, ff = 21289, gg = 22537, hh = 23753, ii = 24989, jj = 26217, kk = 27457, ll = 28689, mm = 29891, nn = 31117, oo = 32437, pp = 34689, qq = 36137, rr = 37661, ss = 38989, tt = 40217, uu = 42257, vv = 43729, ww = 45953, xx = 46989, yy = 49221, zz = 50329, aaa = 51741, bbb = 53953, ccc = 56317, ddd = 58749, eee = 60901, fff = 62293, ggg = 64597, hhh = 66789, iii = 68881, jjj = 70913, kkk = 72397, lll = 73989, mmm = 75321, nnn = 76789, ooo = 78881, ppp = 80913, qqq = 82397, rrr = 83789, sss = 84921, ttt = 85901, uuu = 86953, vvv = 87917, www = 89897, xxx = 90913, yyy = 92397, zzz = 93789, aaaa = 94921, bbbb = 95953, cccc = 96317, dddd = 96789, eeee = 96901, ffff = 97293, gggg = 97797, hhhh = 98881, iiii = 99113, jjjj = 100329, kkkk = 101329, llll = 101941, mmmm = 103353, nnnn = 103789, oooo = 103981, pppp = 104193, qqqq = 104597, rrrr = 104789, ssss = 104921, tttt = 105901, uuuu = 106953, vvvv = 107917, wwwww = 108897, xxxxx = 109113, yyyyy = 111297, zzzzz = 112329, aaaab = 112941, bbbbb = 113353, ccccc = 113789, ddddd = 113981, eeeee = 114193, fffff = 114597, ggggg = 114789, hhhhh = 114921, iiiii = 115113, jjjjj = 115329, kkkkk = 115941, lllll = 116301, mmmmm = 116789, nnnnn = 116953, ooooo = 117917, ppppp = 118193, qqqqq = 118301, rrrrr = 118701, sssss = 118913, ttttt = 119901, uuuuu = 120153, vvvvv = 121397, wwwwww = 121789, xxxxxx = 121901, yyyyyy = 122301, zzzzzz = 122789, aaaaaa = 122953, bbbbbb = 123301, cccccc = 123789, dddddd = 123981, eeeeee = 124193, ffffff = 124597, gggggg = 124789, hhhhhh = 124921, iiiiii = 125113, jjjjjj = 125329, kkkkkk = 125597, llllll = 125789, mmmmmm = 125901, nnnnnn = 126193, oooooo = 126301, pppppp = 126789, qqqqqq = 126953, rrrrrr = 127301, ssssss = 127789, tttttt = 127901, uuuuuu = 127953, vvvvvv = 128301, wwwwwww = 128701, xxxxxxx = 128913, yyyyyyy = 129301, zzzzzzz = 129701, aaaaaaa = 129953, bbbbbbb = 130201, ccccccc = 130521, ddddddd = 130729, eeeeeee = 130941, fffffff = 131153, ggggggg = 131397, hhhhhhhh = 131789, iiiiiii = 131901, jjjjjjj = 132301, kkkkkkk = 132789, lllllll = 132981, mmmmmm = 133301, nnnnnnn = 133789, ooooooo = 133981, ppppppp = 134301, qqqqqqq = 134789, rrrrrrr = 134921, sssssss = 135101, ttttttt = 135201, uuuuuuu = 135653, vvvvvvv = 135797, wwwwwwww = 135989, xxxxxxxx = 136193, yyyyyyyy = 136301, zzzzzzzz = 136789, aaaaaaaa = 136953, bbbbbbbb = 137301, cccccccc = 137789, dddddddd = 137981, eeeeeeee = 138301, ffffffff = 138701, gggggggg = 138913, hhhhhhhhh = 139301, iiiiiiii = 139521, jjjjjjjj = 139729, kkkkkkkk = 139997, llllllll = 140189, mmmmmm = 140501, nnnnnnnn = 140789, oooooooo = 140981, pppppppp", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/4", "prompt": "/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = numbers.map(number => Math.abs(number - mean));\n  return mean(deviation);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate Standard Deviation  aroun dthe mean o f thi s dataset.\n  Standard Deviation = sqrt(sum(x^2) - (sum(x)^2)/n)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(sum(deviation) - sum(deviation) / numbers.length);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate Variance  aroun dthe mean o f thi s dataset.\n  Variance = sum(x^2) - (sum(x)^2)/n\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = numbers.map(number => Math.pow(number - mean, 2));\n  return sum(deviation) - sum(deviation) / numbers.length;\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Standard Error  aroun dthe mean o f thi s dataset.\n  Standard Error = sqrt(variance/n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  return Math.sqrt(variance(numbers) / numbers.length);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Coefficient of Variation  aroun dthe mean o f thi s dataset.\n  Coefficient of Variation = Standard Error / Mean\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  return standardError(numbers) / mean(numbers);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Coefficient of Determination  aroun dthe mean o f thi s dataset.\n  Coefficient of Determination = (1 - Coefficient of Variation)^2\n  >>> coefficientOfDetermination([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfDetermination = (numbers) => {\n  return 1 - coefficientOfVariation(numbers) * coefficientOfVariation(numbers);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the R Squared  aroun dthe mean o f thi s dataset.\n  R Squared = 1 - (1 - Coefficient of Determination)^2\n  >>> rSquared([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rSquared = (numbers) => {\n  return 1 - (1 - coefficientOfDetermination(numbers)) * (1 - coefficientOfDetermination(numbers));\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Pearson Correlation Coefficient  aroun dthe mean o f thi s dataset.\n  Pearson Correlation Coefficient = (1 - R Squared)^2\n  >>> pearsonCorrelationCoefficient([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst pearsonCorrelationCoefficient = (numbers) => {\n  return 1 - rSquared(numbers);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Absolute Deviation = MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = numbers.map(number => Math.abs(number - mean));\n  return mean(deviation);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Standard Deviation  aroun dthe mean o f thi s dataset.\n  Standard Deviation = sqrt(sum(x^2) - (sum(x)^2)/n)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(sum(deviation) - sum(deviation) / numbers.length);\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Variance  aroun dthe mean o f thi s dataset.\n  Variance = sum(x^2) - (sum(x)^2)/n\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = numbers.map(number => Math.pow(number - mean, 2));\n  return sum(deviation) - sum(deviation) / numbers.length;\n};\n\n/*\n  For ag iven list of inputnumbers, calculate the Standard Error  aroun dthe mean o f thi s dataset.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a l ist of integers as an input.\n  it returns true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine  a road that'sa pe rfectly straight infinitely long line.\n ncars ar edrivingle ft to  right;  simultaneous ly,  adiffere nt set of n car s\n  are driving right to left.   The two se ts of cars start ou t being  very far from\n  each o the r.  All cars move in the same speed.  Two cars are said to collide \n whena car tha t's moving left to right hits a car that's moving rightto left.\n  However, the cars are infinitely stu rdy and strong; as a result, they continue moving\n in theirtrajectory as if they did not co llide.\n\n  Thisfunction  outputs thenumber of such colli sions.\n  */\nconst car RaceCollis ion=  (n) =>  {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine  a road that'sa pe rfectly straight infinitely long line.\n ncars ar edrivingle ft to  right;  simultaneous ly,  adiffere nt set of n car s\n  are driving right to left.   The two se ts of cars start ou t being  very far from\n  each o the r.  All cars move in the same speed.  Two cars are said to collide \n whena car tha t's moving left to right hits a car that's moving rightto left.\n  However, the cars are infinitely stu rdy and strong; as a result, they continue moving\n in theirtrajectory as if they did not co llide.\n\n  Thisfunction  outputs thenumber of such colli sions.\n  */\nconst car RaceCollis ion=  (n) =>  {\n  const car = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    ax: 0,\n    ay: 0,\n    speed: 0\n  }\n  const cars = [car]\n  cars.push(car)\n  for (let i = 0; i < n; i++) {\n    cars.push(car)\n  }\n  cars.push(car)\n  cars.forEach(car => {\n    car.x = Math.random() * 100\n    car.y = Math.random() * 100\n    car.vx = Math.random() * 10\n    car.vy = Math.random() * 10\n    car.ax = Math.random() * 10\n    car.ay = Math.random() * 10\n    car.speed = Math.random() * 10\n  })\n  cars.forEach(car => {\n    car.x += car.vx\n    car.y += car.vy\n    car.vx += car.ax\n    car.vy += car.ay\n  })\n  cars.forEach(car => {\n    if (car.x < 0) {\n      car.x = 0\n    }\n    if (car.x > 100) {\n      car.x = 100\n    }\n    if (car.y < 0) {\n      car.y = 0\n    }\n    if (car.y > 100) {\n      car.y = 100\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < 0) {\n      car.vx = 0\n    }\n    if (car.vx > 10) {\n      car.vx = 10\n    }\n    if (car.vy < 0) {\n      car.vy = 0\n    }\n    if (car.vy > 10) {\n      car.vy = 10\n    }\n  })\n  cars.forEach(car => {\n    if (car.ax < 0) {\n      car.ax = 0\n    }\n    if (car.ax > 10) {\n      car.ax = 10\n    }\n    if (car.ay < 0) {\n      car.ay = 0\n    }\n    if (car.ay > 10) {\n      car.ay = 10\n    }\n  })\n  cars.forEach(car => {\n    if (car.speed < 0) {\n      car.speed = 0\n    }\n    if (car.speed > 10) {\n      car.speed = 10\n    }\n  })\n  cars.forEach(car => {\n    if (car.x < car.vx) {\n      car.vx = car.x\n    }\n    if (car.x > car.vx) {\n      car.vx = car.x\n    }\n    if (car.y < car.vy) {\n      car.vy = car.y\n    }\n    if (car.y > car.vy) {\n      car.vy = car.y\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vx > car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vy < car.ay) {\n      car.ay = car.vy\n    }\n    if (car.vy > car.ay) {\n      car.ay = car.vy\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vx > car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vy < car.ay) {\n      car.ay = car.vy\n    }\n    if (car.vy > car.ay) {\n      car.ay = car.vy\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vx > car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vy < car.ay) {\n      car.ay = car.vy\n    }\n    if (car.vy > car.ay) {\n      car.ay = car.vy\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vx > car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vy < car.ay) {\n      car.ay = car.vy\n    }\n    if (car.vy > car.ay) {\n      car.ay = car.vy\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vx > car.ax) {\n      car.ax = car.vx\n    }\n    if (car.vy < car.ay) {\n      car.ay = car.vy\n    }\n    if (car.vy > car.ay) {\n      car.ay = car.vy\n    }\n  })\n  cars.forEach(car => {\n    if (car.vx < car.ax) {\n      car.ax = car.vx\n    }\n    if (car.v", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let incr = (l) => {\n    let newList = []\n    for (let j = 0; j < l.length; j++) {\n      newList[j] = l[j] + 1\n    }\n    return newList\n  }\n  return incr(l)\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Changen umerical base of in put number x to base.\n  return string representati on  after the  conv ersion.\n  base number s a reless th an 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Changen umerical base of in put number x to base.\n  return string representati on  after the  conv ersion.\n  base number s a reless th an 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const result = []\n  let i = x\n  let j = 0\n  while (i > 0) {\n    result.unshift(baseDigits[j])\n    i = i / base\n    j++\n  }\n  return result.join('')\n}\n\n/*\n  Convert a number to base 10.\n  >>> convertToBase10(8)\n  8\n  >>> convertToBase10(8, 2)\n  4\n  >>> convertToBase10(8, 3)\n  2\n  >>> convertToBase10(8, 4)\n  1\n  >>> convertToBase10(8, 5)\n  0\n  >>> convertToBase10(8, 6)\n  0\n  >>> convertToBase10(8, 7)\n  0\n  >>> convertToBase10(8, 8)\n  0\n  >>> convertToBase10(8, 9)\n  0\n  >>> convertToBase10(8, 10)\n  0\n  >>> convertToBase10(8, 11)\n  0\n  >>> convertToBase10(8, 12)\n  0\n  >>> convertToBase10(8, 13)\n  0\n  >>> convertToBase10(8, 14)\n  0\n  >>> convertToBase10(8, 15)\n  0\n  >>> convertToBase10(8, 16)\n  0\n  >>> convertToBase10(8, 17)\n  0\n  >>> convertToBase10(8, 18)\n  0\n  >>> convertToBase10(8, 19)\n  0\n  >>> convertToBase10(8, 20)\n  0\n  >>> convertToBase10(8, 21)\n  0\n  >>> convertToBase10(8, 22)\n  0\n  >>> convertToBase10(8, 23)\n  0\n  >>> convertToBase10(8, 24)\n  0\n  >>> convertToBase10(8, 25)\n  0\n  >>> convertToBase10(8, 26)\n  0\n  >>> convertToBase10(8, 27)\n  0\n  >>> convertToBase10(8, 28)\n  0\n  >>> convertToBase10(8, 29)\n  0\n  >>> convertToBase10(8, 30)\n  0\n  >>> convertToBase10(8, 31)\n  0\n  >>> convertToBase10(8, 32)\n  0\n  >>> convertToBase10(8, 33)\n  0\n  >>> convertToBase10(8, 34)\n  0\n  >>> convertToBase10(8, 35)\n  0\n  >>> convertToBase10(8, 36)\n  0\n  >>> convertToBase10(8, 37)\n  0\n  >>> convertToBase10(8, 38)\n  0\n  >>> convertToBase10(8, 39)\n  0\n  >>> convertToBase10(8, 40)\n  0\n  >>> convertToBase10(8, 41)\n  0\n  >>> convertToBase10(8, 42)\n  0\n  >>> convertToBase10(8, 43)\n  0\n  >>> convertToBase10(8, 44)\n  0\n  >>> convertToBase10(8, 45)\n  0\n  >>> convertToBase10(8, 46)\n  0\n  >>> convertToBase10(8, 47)\n  0\n  >>> convertToBase10(8, 48)\n  0\n  >>> convertToBase10(8, 49)\n  0\n  >>> convertToBase10(8, 50)\n  0\n  >>> convertToBase10(8, 51)\n  0\n  >>> convertToBase10(8, 52)\n  0\n  >>> convertToBase10(8, 53)\n  0\n  >>> convertToBase10(8, 54)\n  0\n  >>> convertToBase10(8, 55)\n  0\n  >>> convertToBase10(8, 56)\n  0\n  >>> convertToBase10(8, 57)\n  0\n  >>> convertToBase10(8, 58)\n  0\n  >>> convertToBase10(8, 59)\n  0\n  >>> convertToBase10(8, 60)\n  0\n  >>> convertToBase10(8, 61)\n  0\n  >>> convertToBase10(8, 62)\n  0\n  >>> convertToBase10(8, 63)\n  0\n  >>> convertToBase10(8, 64)\n  0\n  >>> convertToBase10(8, 65)\n  0\n  >>> convertToBase10(8, 66)\n  0\n  >>> convertToBase10(8, 67)\n  0\n  >>> convertToBase10(8, 68)\n  0\n  >>> convertToBase10(8, 69)\n  0\n  >>> convertToBase10(8, 70)\n  0\n  >>> convertToBase10(8, 71)\n  0\n  >>> convertToBase10(8, 72)\n  0\n  >>> convertToBase10(8, 73)\n  0\n  >>> convertToBase10(8, 74)\n  0\n  >>> convertToBase10(8, 75)\n  0\n  >>> convertToBase10(8, 76)\n  0\n  >>> convertToBase10(8, 77)\n  0\n  >>> convertToBase10(8, 78)\n  0\n  >>> convertToBase10(8, 79)\n  0\n  >>> convertToBase10(8, 80)\n  0\n  >>> convertToBase10(8, 81)\n  0\n  >>> convertToBase10(8, 82)\n  0\n  >>> convertToBase10(8, 83)\n  0\n  >>> convertToBase10(8, 84)\n  0\n  >>> convertToBase10(8, 85)\n  0\n  >>> convertToBase10(8, 86)\n  0\n  >>> convertToBase10(8, 87)\n  0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given le ngth of a sideandhigh returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given le ngth of a sideandhigh returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a triangle and a point return the distance of the point from the triangle.\n  >>> triangleDistance(triangle([1, 2, 3]), [2, 4, 5])\n  2\n  */\nconst triangleDistance = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return Math.abs(triangleArea(a, b) - triangleArea(a, c) + triangleArea(b, c) - triangleArea(a, x) - triangleArea(b, x) + triangleArea(c, x)) / 2;\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea(b, x) - triangleArea(c, x);\n};\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(triangle([1, 2, 3]), [2, 4, 5])\n  7.5\n  */\nconst triangleArea = (triangle, point) => {\n  const [a, b, c] = triangle;\n  const [x, y] = point;\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, x) - triangleArea", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4  number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib4(0) -> 0 \n fib4(1) -> 0\n  fib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) +fib4(n-2) + fib4(n- 3) + fi b4(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib4 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4  number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib4(0) -> 0 \n fib4(1) -> 0\n  fib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) +fib4(n-2) + fib4(n- 3) + fi b4(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib4 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length;\n  if (len === 0) {\n    return undefined;\n  }\n  const half = len / 2;\n  const left = l.slice(0, half);\n  const right = l.slice(half);\n  if (left.length === 0) {\n    return right[0];\n  }\n  if (right.length === 0) {\n    return left[left.length - 1];\n  }\n  return (left[left.length - 1] + right[0]) / 2;\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return2 ^n modulo p (be awa re of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return2 ^n modulo p (be awa re of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp14 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp15 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp16 = (n, p) => {\n  return (n % p)\n}\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Inserta number 'delimeter ' between every two consecutive elements of inputli st `number s'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Inserta number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    i = j\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], '*')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], '*', 2)\n  [1, 2, 3, 2, 3]\n  >>> intersperse([1, 2, 3], '*', 3)\n  [1, 2, 3, 3, 2]\n  >>> intersperse([1, 2, 3], '*', 4)\n  [1, 2, 3, 3, 2, 3]\n  >>> intersperse([1, 2, 3], '*', 5)\n  [1, 2, 3, 3, 2, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 6)\n  [1, 2, 3, 3, 2, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 7)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 8)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 9)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 10)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 11)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 12)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 13)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 14)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 15)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 16)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 17)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 18)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 19)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 20)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 21)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 22)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 23)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 24)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 25)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> intersperse([1, 2, 3], '*', 26)\n  [1, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> inters", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns  encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s .split(\"\") .map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) + 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )) .join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns  encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) + 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\" \").map(ch => String.fromCharCode", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeV owels is a function  that takesstring and returns string without vowe ls .\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeV owels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels8 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Returnt rue if all numbersin the listl are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Returnt rue if all numbersin the listl are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold15 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold16 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold17 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold18 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold19 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold20 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add twonumbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Add twonumbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars7 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) {\n    return false\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzdd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Returnn -th Fibonacci numbe r.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*Returnn -th Fibonacci numbe r.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* bracket s is a string of \"< \" and \">\".\n return false if every openingbracket  h as a corre spond ing closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* bracket s is a string of \"< \" and \">\".\n return false if every openingbracket  h as a corre spond ing closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== '<') {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n Given a string, return a string with every opening bracket\n replaced by a closing bracket.\n\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<\")\n'<'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBrackets(\"<>\")\n'><'\n>>> replaceBr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Returnt rue is list element s are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Returnt rue is list element s are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return last === sorted[0] || last === sorted[sorted.length - 1] || sorted[0] === sorted[sorted.length - 1]? true : false;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Returns orted unique common  elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Returns orted unique common  elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])!== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Returnt he largest prime fa ctor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Returnt he largest prime fa ctor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Inputt o this function isa string represented multiple groups for nested pa re nthesesse parat ed by spaces.\n  For e ach  of the gr oup, output the  deepest level of nesting of parentheses.\n E.g. (()()) has ma ximum t wo levels of nesting wh ile  ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Inputt o this function isa string represented multiple groups for nested pa re nthesesse parat ed by spaces.\n  For e ach  of the gr oup, output the  deepest level of nesting of parentheses.\n E.g. (()()) has ma ximum t wo levels of nesting wh ile  ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const stack_max_length = 0\n  const stack_max_level = 0\n  const stack_level = 0\n  const stack_level_max = 0\n  const stack_level_max_level = 0\n  const stack_level_max_length = 0\n  const stack_level_max_level_length = 0\n  const stack_level_max_length_length = 0\n  const stack_level_max_level_length_length = 0\n  const stack_level_max_length_length_length = 0\n  const stack_level_max_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  const stack_level_max_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToNi s a function that s ums numbersfrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToNi s a function that s ums numbersfrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== '(') {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs repr esent coefficientsof a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2  +  ....\n  R eturn  derivative of this p oly nomial inthe same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs repr esent coefficientsof a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2  + ....\n  R eturn  derivative of this p oly nomial inthe same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const d_i = (i) => {\n    if (i === 0) {\n      return 1\n    } else if (i === len - 1) {\n      return 0\n    } else {\n      return xs[i - 1]\n    }\n  }\n  const d_i_1 = (i) => {\n    if (i === 0) {\n      return 0\n    } else if (i === len - 1) {\n      return 1\n    } else {\n      return xs[i + 1]\n    }\n  }\n  const d_i_2 = (i) => {\n    if (i === 0) {\n      return 0\n    } else if (i === len - 1) {\n      return -1\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_3 = (i) => {\n    if (i === 0) {\n      return -1\n    } else if (i === len - 1) {\n      return 0\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_4 = (i) => {\n    if (i === 0) {\n      return -1\n    } else if (i === len - 1) {\n      return 1\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_5 = (i) => {\n    if (i === 0) {\n      return 1\n    } else if (i === len - 1) {\n      return -1\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_6 = (i) => {\n    if (i === 0) {\n      return 0\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_7 = (i) => {\n    if (i === 0) {\n      return -2\n    } else if (i === len - 1) {\n      return 0\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_8 = (i) => {\n    if (i === 0) {\n      return -2\n    } else if (i === len - 1) {\n      return 2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_9 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_10 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_11 = (i) => {\n    if (i === 0) {\n      return -2\n    } else if (i === len - 1) {\n      return 2\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_12 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_13 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_14 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_15 = (i) => {\n    if (i === 0) {\n      return -2\n    } else if (i === len - 1) {\n      return 2\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_16 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_17 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] + xs[i + 1]\n    }\n  }\n  const d_i_18 = (i) => {\n    if (i === 0) {\n      return 2\n    } else if (i === len - 1) {\n      return -2\n    } else {\n      return xs[i - 1] - xs[i + 1]\n    }\n  }\n  const d_i_19 = (i)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibF ib number sequenceis a sequence similar to the Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibF ib number sequenceis a sequence similar to the Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write afunction vowelsCoun t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write afunction vowelsCoun t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverse = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString2 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString3 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString4 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString5 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString6 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString7 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString8 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n};\n\n/*\n  Write a function that takes a string as input and returns a string with the\n  characters in the string reversed.\n  Example:\n  >>> reverse(\"abc\")\n  'cba'\n  >>> reverse(\"abcd\")\n  'dcba'\n  >>> reverse(\"\")\n  ''\n  */\nconst reverseString9 = (s) => {\n  let reversed = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular  shift the digits o f the integer x, shift the digits rightbyshift\n a nd returnthe r esult as a string.\n Ifshift > nu mber of digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular  shift the digits o f the integer x, shift the digits rightbyshift\n a nd returnthe r esult as a string.\n Ifshift > nu mber of digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  if (shift >= len) {\n    return x.split('').reverse().join('')\n  }\n  const result = x.split('')\n  const start = len - shift\n  const end = len\n  const reversed = result.slice(start, end).reverse()\n  return reversed.join('')\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber2 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber3 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber4 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber5 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber6 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber7 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *  Given a string, return the number of characters in the string.\n *  If the string is empty, return 0.\n *  If the string contains non-numeric characters, return -1.\n *  >>> isNumber(\"123\")\n  True\n  >>> isNumber(\"\")\n  True\n  >>> isNumber(\"a\")\n  False\n  >>> isNumber(\"a1\")\n  False\n  >>> isNumber(\"1a\")\n  False\n  */\nconst isNumber8 = (str) => {\n  if (str === '') {\n    return 0\n  }\n  if (str.match(/[^0-9]/)) {\n    return -1\n  }\n  return str.length\n}\n\n/*\n *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  upper cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  upper cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as input and returns the number of times the string contains the substring.\n\n  Examples:\n      contains(\"abAB\", \"AB\") => 2\n      contains(\"abAB\", \"a\") => 1\n      contains(\"abAB\", \"b\") => 1\n      contains(\"abAB\", \"c\") => 0\n      contains(\"abAB\", \"d\") => 0\n      contains(\"abAB\", \"e\") => 0\n      contains(\"abAB\", \"f\") => 0\n      contains(\"abAB\", \"g\") => 0\n      contains(\"abAB\", \"h\") => 0\n      contains(\"abAB\", \"i\") => 0\n      contains(\"abAB\", \"j\") => 0\n      contains(\"abAB\", \"k\") => 0\n      contains(\"abAB\", \"l\") => 0\n      contains(\"abAB\", \"m\") => 0\n      contains(\"abAB\", \"n\") => 0\n      contains(\"abAB\", \"o\") => 0\n      contains(\"abAB\", \"p\") => 0\n      contains(\"abAB\", \"q\") => 0\n      contains(\"abAB\", \"r\") => 0\n      contains(\"abAB\", \"s\") => 0\n      contains(\"abAB\", \"t\") => 0\n      contains(\"abAB\", \"u\") => 0\n      contains(\"abAB\", \"v\") => 0\n      contains(\"abAB\", \"w\") => 0\n      contains(\"abAB\", \"x\") => 0\n      contains(\"abAB\", \"y\") => 0\n      contains(\"abAB\", \"z\") => 0\n      contains(\"abAB\", \"A\") => 1\n      contains(\"abAB\", \"B\") => 1\n      contains(\"abAB\", \"C\") => 1\n      contains(\"abAB\", \"D\") => 1\n      contains(\"abAB\", \"E\") => 1\n      contains(\"abAB\", \"F\") => 1\n      contains(\"abAB\", \"G\") => 1\n      contains(\"abAB\", \"H\") => 1\n      contains(\"abAB\", \"I\") => 1\n      contains(\"abAB\", \"J\") => 1\n      contains(\"abAB\", \"K\") => 1\n      contains(\"abAB\", \"L\") => 1\n      contains(\"abAB\", \"M\") => 1\n      contains(\"abAB\", \"N\") => 1\n      contains(\"abAB\", \"O\") => 1\n      contains(\"abAB\", \"P\") => 1\n      contains(\"abAB\", \"Q\") => 1\n      contains(\"abAB\", \"R\") => 1\n      contains(\"abAB\", \"S\") => 1\n      contains(\"abAB\", \"T\") => 1\n      contains(\"abAB\", \"U\") => 1\n      contains(\"abAB\", \"V\") => 1\n      contains(\"abAB\", \"W\") => 1\n      contains(\"abAB\", \"X\") => 1\n      contains(\"abAB\", \"Y\") => 1\n      contains(\"abAB\", \"Z\") => 1\n      contains(\"abAB\", \"0\") => 1\n      contains(\"abAB\", \"1\") => 1\n      contains(\"abAB\", \"2\") => 1\n      contains(\"abAB\", \"3\") => 1\n      contains(\"abAB\", \"4\") => 1\n      contains(\"abAB\", \"5\") => 1\n      contains(\"abAB\", \"6\") => 1\n      contains(\"abAB\", \"7\") => 1\n      contains(\"abAB\", \"8\") => 1\n      contains(\"abAB\", \"9\") => 1\n      contains(\"abAB\", \" \") => 1\n      contains(\"abAB\", \"\") => 1\n      contains(\"abAB\", \"a\") => 1\n      contains(\"abAB\", \"b\") => 1\n      contains(\"abAB\", \"c\") => 1\n      contains(\"abAB\", \"d\") => 1\n      contains(\"abAB\", \"e\") => 1\n      contains(\"abAB\", \"f\") => 1\n      contains(\"abAB\", \"g\") => 1\n      contains(\"abAB\", \"h\") => 1\n      contains(\"abAB\", \"i\") => 1\n      contains(\"abAB\", \"j\") => 1\n      contains(\"abAB\", \"k\") => 1\n      contains(\"abAB\", \"l\") => 1\n      contains(\"abAB\", \"m\") => 1\n      contains(\"abAB\", \"n\") => 1\n      contains(\"abAB\", \"o\") => 1\n      contains(\"abAB\", \"p\") => 1\n      contains(\"abAB\", \"q\") => 1\n      contains(\"abAB\", \"r\") => 1\n      contains(\"abAB\", \"s\") => 1\n      contains(\"abAB\", \"t\") => 1\n      contains(\"abAB\", \"u\") => 1\n      contains(\"abAB\", \"v\") => 1\n      contains(\"abAB\", \"w\") => 1\n      contains(\"abAB\", \"x\") => 1\n      contains(\"abAB\", \"y\") => 1\n      contains(\"abAB\", \"z\") => 1\n      contains(\"abAB\", \"A\") => 1\n      contains(\"abAB\", \"B\") => 1\n      contains(\"abAB\", \"C\") => 1\n      contains(\"abAB\", \"D\") => 1\n      contains(\"abAB\", \"E\") => 1\n      contains(\"abAB\", \"F\") => 1\n      contains(\"abAB\", \"G\") => 1\n      contains(\"abAB\", \"H\") => 1\n      contains(\"abAB\", \"I\") => 1\n      contains(\"abAB\", \"J\") => 1\n      contains(\"abAB\", \"K\") => 1\n      contains(\"abAB\", \"L\") => 1\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this  task, you will begiven a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this  task, you will begiven a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let t = s.split(\" \")\n  let t = t.length\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1\n  let t = t - 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givenan array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest even val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex .\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no evenvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"Givenan array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest even val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex.\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no evenvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arr = arr.sort((a, b) => a - b);\n  let result = [];\n  let index = 0;\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  result.push([min, min_index]);\n  return result;\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i]\n    if (cur > 0 && cur > max) {\n      max = cur\n    }\n  }\n  return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filteran input list of st rings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filteran input list of st rings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givenl ist of integers, re turn list in strange order.\n  Strange sorting, iswh en you sta rt wi th the minimum value, \n then maxim um of the remai ning integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Givenl ist of integers, re turn list in strange order.\n  Strange sorting, iswh en you sta rt wi th the minimum value, \n then maxim um of the remai ning integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sorted = lst.slice().sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givent he lengths of the t hree sides of a triangle. Return the area of\n  the  t rianglero unded  to 2 decimal pointsifthe threesides form a va lid triangle.\n  Otherwise return -1\n  Three  sides make a valid  triang le when the sum of anytwo  sidesis greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Givent he lengths of the t hree sides of a triangle. Return the area of\n  the  t rianglero unded  to 2 decimal pointsifthe threesides form a va lid triangle.\n  Otherwise return -1\n  Three  sides make a valid  triang le when the sum of anytwo  sidesis greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea10 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea11 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea12 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea13 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea14 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea15 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea16 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea17 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea18 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea19 = (a, b, c) => {\n  if (a + b > c && a +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that retunrs true if the object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthe maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[q.length - i - 1];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that retunrs true if the object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthe maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[q.length - i - 1];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that retunrs true if the object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthe maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that retunrs true if the object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthe maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[q.length - i - 1];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that retunrs true if the object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthe maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givena n array arr ofinte gers, find the minimum number of elements that\n  n ee d to bech anged  to make the array pa lin dromic. Apalindromic arr ay is an array that\n  is read the same back wards and forwards.  In one  change, you can change  on e eleme nt to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Givena n array arr ofinte gers, find the minimum number of elements that\n  n ee d to bech anged  to make the array pa lin dromic. Apalindromic arr ay is an array that\n  is read the same back wards and forwards.  In one  change, you can change  on e eleme nt to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i]!== min) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars , return the first list .\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) {\n    return lst2\n  }\n  if (len2 === 0) {\n    return lst1\n  }\n  if (len1!== len2) {\n    return []\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns the largest number in the list.\n  If the list is empty, return 0.\n  */\nconst largest = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  return Math.max.apply(null, nums)\n}\n\n/*\n  Write a function that takes a list of numbers and returns the smallest number in the list.\n  If the list is empty, return 0.\n  */\nconst smallest = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  return Math.min.apply(null, nums)\n}\n\n/*\n  Write a function that takes a list of numbers and returns the sum of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst sum = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  return nums.reduce((a, b) => a + b)\n}\n\n/*\n  Write a function that takes a list of numbers and returns the average of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst average = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  return sum(nums) / nums.length\n}\n\n/*\n  Write a function that takes a list of numbers and returns the median of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst median = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  const sorted = nums.sort()\n  const half = Math.floor(nums.length / 2)\n  if (nums.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  }\n  return sorted[half]\n}\n\n/*\n  Write a function that takes a list of numbers and returns the mode of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst mode = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  const sorted = nums.sort()\n  const max = sorted[0]\n  const count = 1\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++\n    } else {\n      max = sorted[i]\n      count = 1\n    }\n  }\n  return max\n}\n\n/*\n  Write a function that takes a list of numbers and returns the mode of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst mode2 = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  const sorted = nums.sort()\n  const max = sorted[0]\n  const count = 1\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++\n    } else {\n      max = sorted[i]\n      count = 1\n    }\n  }\n  return max\n}\n\n/*\n  Write a function that takes a list of numbers and returns the mode of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst mode3 = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  const sorted = nums.sort()\n  const max = sorted[0]\n  const count = 1\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++\n    } else {\n      max = sorted[i]\n      count = 1\n    }\n  }\n  return max\n}\n\n/*\n  Write a function that takes a list of numbers and returns the mode of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst mode4 = (nums) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  const sorted = nums.sort()\n  const max = sorted[0]\n  const count = 1\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++\n    } else {\n      max = sorted[i]\n      count = 1\n    }\n  }\n  return max\n}\n\n/*\n  Write a function that takes a list of numbers and returns the mode of the numbers in the list.\n  If the list is empty, return 0.\n  */\nconst mode5 = (nums)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber13 = (n) => {\n  if (n === 2) {\n    return true;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  return false\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  return false\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  return false\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  return false\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  if (x % n === 5) return true\n  return false\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  if (x % n === 5) return true\n  if (x % n === 6) return true\n  return false\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  if (x % n === 5) return true\n  if (x % n === 6) return true\n  if (x % n === 7) return true\n  return false\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  if (x % n === 5) return true\n  if (x % n === 6) return true\n  if (x % n === 7) return true\n  if (x % n === 8) return true\n  if (x % n === 9) return true\n  return false\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  if (x % n === 5) return true\n  if (x % n === 6) return true\n  if (x % n === 7) return true\n  if (x % n === 8) return true\n  if (x % n === 9) return true\n  if (x % n === 10) return true\n  return false\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x % n === 3) return true\n  if (x % n === 4) return true\n  if (x % n === 5) return true\n  if (x % n === 6) return true\n  if (x % n === 7) return true\n  if (x % n === 8) return true\n  if (x % n === 9) return true\n  if (x % n === 10) return true\n  if (x % n === 11) return true\n  return false\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  if (x % n === 1) return true\n  if (x % n === 2) return true\n  if (x %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Writea  function thattake s an integer a and returns true\n  if this ingegeris  a cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function thattake s an integer a and returns true\n  if this ingegeris  a cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a > 0 && a % a === 0\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of  this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube2 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube3 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube4 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube5 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube6 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube7 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube8 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube9 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube10 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube11 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube12 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube13 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube14 = (a) => {\n  return a * a * a\n}\n\n/*\n  Write a function that takes an integer a and returns the number\n  of  the  cube  of this  integer.\n  Examples:\n  cube(1) ==> 1\n  cube(2) ==> 2\n  cube(3) ==> 6\n  cube(4) ==> 24\n  */\nconst cube15 = (a) => {\n  return a * a * a\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have  been tasked to wri te a function that receives\n  a hexadecimal number  a s a string  andcounts the number ofhex adecimal\ndigits that ar e primes (prime number=== or a prime=== isa natural number\n greater  than 1 that is not a p rod uct oftwosmaller natural numbers).\n  Hexadecimal digits are 0===  1= == 2= == 3=== 4 === 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers are 2=== 3=== 5=== 7===11===13=== 17===...  So you have to determine a number of the fol lowing digits: 2=== 3=== 5=== 7= ==\n  B (=decima l 11)===  D (=decimal13).\n  Note: you may assume the input isalways cor rector empt y string===\n  and symbols A== =B===C===D ===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have  been tasked to wri te a function that receives\n  a hexadecimal number  a s a string  andcounts the number ofhex adecimal\ndigits that ar e primes (prime number=== or a prime=== isa natural number\n greater  than 1 that is not a p rod uct oftwosmaller natural numbers).\n  Hexadecimal digits are 0===  1= == 2= == 3=== 4 === 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers are 2=== 3=== 5=== 7===11===13=== 17===...  So you have to determine a number of the fol lowing digits: 2=== 3=== 5=== 7= ==\n  B (=decima l 11)===  D (=decimal13).\n  Note: you may assume the input isalways cor rector empt y string===\n  and symbols A== =B===C===D ===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    let digit = num[i];\n    if (digit >= 'A' && digit <= 'F') {\n      digit = digit.toUpperCase().charCodeAt(0) - 'A' + 10;\n    } else if (digit >= '0' && digit <= '9') {\n      digit = digit.toUpperCase().charCodeAt(0) - '0' + 10;\n    } else if (digit === 'X') {\n      digit = 10;\n    } else if (digit === 'Y') {\n      digit = 11;\n    } else if (digit === 'Z') {\n      digit = 12;\n    } else if (digit === 'A') {\n      digit = 13;\n    } else if (digit === 'B') {\n      digit = 14;\n    } else if (digit === 'C') {\n      digit = 15;\n    } else if (digit === 'D') {\n      digit = 16;\n    } else if (digit === 'E') {\n      digit = 17;\n    } else if (digit === 'F') {\n      digit = 18;\n    }\n    result += digit * Math.pow(16, i);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst countPrime = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime2 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime3 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime4 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime5 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime6 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime7 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime8 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime9 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime10 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime11 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime12 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime13 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst countPrime14 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will  be given a numberin decimal form and your task is to convert it to binary for mat.The function should r etu rna strin g, with each ch aracter representing a binary\n  number. Eac h character inthestringwill be '0' or '1'.\n\n The re will beanextra couple of characters 'db'at the beginning and  at theend of th e string.\n  The extra characters are there to help withthe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will  be given a numberin decimal form and your task is to convert it to binary for mat.The function should r etu rna strin g, with each ch aracter representing a binary\n  number. Eac h character inthestringwill be '0' or '1'.\n\n The re will beanextra couple of characters 'db'at the beginning and  at theend of th e string.\n  The extra characters are there to help withthe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return `db${binary}db`;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, the function will return the decimal number.\n  The function will r etu rna strin g, with each ch aracter representing a binary number.\n  Eac h character inthestringwill be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of intege rs, return a list of the sum of all the even numbers in the list.\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [4, 6, 8]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [4, 6, 8, 10]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [4, 6, 8, 10, 12]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [4, 6, 8, 10, 12, 14]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [4, 6, 8, 10, 12, 14, 16]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [4, 6, 8, 10, 12, 14, 16, 18]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You aregiven a strings.\n Your task is to check if the string ishappy or n ot .\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You aregiven a strings.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n  let s166 = 0;\n  let s167 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is th e last week ofthesemester and the teacher has to give the grades\n to  students.  Theteacher has been maki ngher own al gorithm for gra ding.\n  The only problem is, she has lost t he code she used fo r gradi ng.\n  She has given you  alist of GPAs for some students and you have to write\n  a functiontha tcan  output a  list of letter grades using the following table:\n          GPA       |    Letter grade\n          4. 0               A+\n          > 3.7                A\n         > 3.3               A-\n         > 3.0              B+\n        > 2.7              B\n          > 2.3            B-\n       > 2.0            C+          > 1.7                C\n         >1.3              C -\n         > 1.0              D+\n        > 0.7               D\n         > 0. 0               D-\n            0 .0            E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is th e last week ofthesemester and the teacher has to give the grades\n to  students.  Theteacher has been maki ngher own al gorithm for gra ding.\n  The only problem is, she has lost t he code she used fo r gradi ng.\n  She has given you  alist of GPAs for some students and you have to write\n  a functiontha tcan  output a  list of letter grades using the following table:\n          GPA       |    Letter grade\n          4. 0               A+\n          > 3.7                A\n         > 3.3               A-\n         > 3.0              B+\n        > 2.7              B\n          > 2.3            B-\n       > 2.0            C+          > 1.7                C\n         >1.3              C -\n         > 1.0              D+\n        > 0.7               D\n         > 0. 0               D-\n            0.0            E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4\n  }\n  const grades = Array.isArray(grades)? grades : [grades]\n  const gradesLength = grades.length\n  const gradesSum = grades.reduce((a, b) => a + b, 0)\n  const gradesAvg = gradesSum / gradesLength\n  const gradesAvgPercent = (gradesAvg * 100).toFixed(2)\n  const gradesAvgPercentString = `${gradesAvgPercent}%`\n  const gradesAvgPercentStringLength = gradesAvgPercentString.length\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  const gradesAvgPercentString = `${gradesAvgPercentString}%`\n  const gradesAvgPercentString = gradesAvgPercentString.substr(0, gradesAvgPercentStringLength - 1)\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write afunction that takes  a string and returns true if the string\n lengthis  a prime n umber  or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write afunction that takes  a string and returns true if the string\n lengthis  a prime n umber  or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const len = string.length\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  if (len === 1) {\n    return true\n  }\n  if (len === 2) {\n    return isPrime(2)\n  }\n  if (len === 3) {\n    return isPrime(3)\n  }\n  if (len === 4) {\n    return isPrime(4)\n  }\n  if (len === 5) {\n    return isPrime(5)\n  }\n  if (len === 6) {\n    return isPrime(6)\n  }\n  if (len === 7) {\n    return isPrime(7)\n  }\n  if (len === 8) {\n    return isPrime(8)\n  }\n  if (len === 9) {\n    return isPrime(9)\n  }\n  if (len === 10) {\n    return isPrime(10)\n  }\n  if (len === 11) {\n    return isPrime(11)\n  }\n  if (len === 12) {\n    return isPrime(12)\n  }\n  if (len === 13) {\n    return isPrime(13)\n  }\n  if (len === 14) {\n    return isPrime(14)\n  }\n  if (len === 15) {\n    return isPrime(15)\n  }\n  if (len === 16) {\n    return isPrime(16)\n  }\n  if (len === 17) {\n    return isPrime(17)\n  }\n  if (len === 18) {\n    return isPrime(18)\n  }\n  if (len === 19) {\n    return isPrime(19)\n  }\n  if (len === 20) {\n    return isPrime(20)\n  }\n  if (len === 21) {\n    return isPrime(21)\n  }\n  if (len === 22) {\n    return isPrime(22)\n  }\n  if (len === 23) {\n    return isPrime(23)\n  }\n  if (len === 24) {\n    return isPrime(24)\n  }\n  if (len === 25) {\n    return isPrime(25)\n  }\n  if (len === 26) {\n    return isPrime(26)\n  }\n  if (len === 27) {\n    return isPrime(27)\n  }\n  if (len === 28) {\n    return isPrime(28)\n  }\n  if (len === 29) {\n    return isPrime(29)\n  }\n  if (len === 30) {\n    return isPrime(30)\n  }\n  if (len === 31) {\n    return isPrime(31)\n  }\n  if (len === 32) {\n    return isPrime(32)\n  }\n  if (len === 33) {\n    return isPrime(33)\n  }\n  if (len === 34) {\n    return isPrime(34)\n  }\n  if (len === 35) {\n    return isPrime(35)\n  }\n  if (len === 36) {\n    return isPrime(36)\n  }\n  if (len === 37) {\n    return isPrime(37)\n  }\n  if (len === 38) {\n    return isPrime(38)\n  }\n  if (len === 39) {\n    return isPrime(39)\n  }\n  if (len === 40) {\n    return isPrime(40)\n  }\n  if (len === 41) {\n    return isPrime(41)\n  }\n  if (len === 42) {\n    return isPrime(42)\n  }\n  if (len === 43) {\n    return isPrime(43)\n  }\n  if (len === 44) {\n    return isPrime(44)\n  }\n  if (len === 45) {\n    return isPrime(45)\n  }\n  if (len === 46) {\n    return isPrime(46)\n  }\n  if (len === 47) {\n    return isPrime(47)\n  }\n  if (len === 48) {\n    return isPrime(48)\n  }\n  if (len === 49) {\n    return isPrime(49)\n  }\n  if (len === 50) {\n    return isPrime(50)\n  }\n  if (len === 51) {\n    return isPrime(51)\n  }\n  if (len === 52) {\n    return isPrime(52)\n  }\n  if (len === 53) {\n    return isPrime(53)\n  }\n  if (len === 54) {\n    return isPrime(54)\n  }\n  if (len === 55) {\n    return isPrime(55)\n  }\n  if (len === 56) {\n    return isPrime(56)\n  }\n  if (len === 57) {\n    return isPrime(57)\n  }\n  if (len === 58) {\n    return isPrime(58)\n  }\n  if (len === 59) {\n    return isPrime(59)\n  }\n  if (len === 60) {\n    return isPrime(60)\n  }\n  if (len === 61) {\n    return isPrime(61)\n  }\n  if (len === 62) {\n    return isPrime(62)\n  }\n  if (len === 63) {\n    return isPrime(63)\n  }\n  if (len === 64) {\n    return isPrime(64)\n  }\n  if (len === 65) {\n    return isPrime(65)\n  }\n  if (len === 66) {\n    return isPrime(66)\n  }\n  if (len === 67) {\n    return isPrime(67)\n  }\n  if (len === 68) {\n    return isPrime(68)\n  }\n  if (len === 69) {\n    return isPrime(69)\n  }\n  if (len === 70) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givena  positive integer n , return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds14 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds15 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds16 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds17 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds18 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds19 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds20 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds21 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds22 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds23 = (n) => {\n  let count = 0;\n  for (let i = 1; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given apositive integer N,  return thetotal sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given apositive integer N,  return thetotal sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 2? digit : 0);\n  return digits.reduce((acc, digit) => acc + digit, 0);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add3 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add4 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add5 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add6 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add7 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add8 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add9 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add10 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add11 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add12 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add13 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add14 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add15 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add16 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add17 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add18 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add19 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add20 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add21 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add22 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add23 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add24 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add25 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add26 = (lst)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writea  function thattake s a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function thattake s a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle2 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle3 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle4 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle5 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle6 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle7 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle8 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle9 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle10 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle11 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle12 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars.join('')\n}\n\nconst shuffle13 = (s) => {\n  const chars = s.split('')\n  const newChars = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const newChar = char.charCodeAt(0)\n    const newChars.push(newChar)\n  }\n  return newChars", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2) ...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [rows, cols] = lst.length\n  const [row, col] = lst[x]\n  const [r, c] = row.length\n  const [r1, c1] = col.length\n  const [r2, c2] = col.length\n  const [r3, c3] = row.length\n  const [r4, c4] = col.length\n  const [r5, c5] = row.length\n  const [r6, c6] = col.length\n  const [r7, c7] = row.length\n  const [r8, c8] = col.length\n  const [r9, c9] = row.length\n  const [r10, c10] = col.length\n  const [r11, c11] = row.length\n  const [r12, c12] = col.length\n  const [r13, c13] = row.length\n  const [r14, c14] = col.length\n  const [r15, c15] = row.length\n  const [r16, c16] = col.length\n  const [r17, c17] = row.length\n  const [r18, c18] = col.length\n  const [r19, c19] = row.length\n  const [r20, c20] = col.length\n  const [r21, c21] = row.length\n  const [r22, c22] = col.length\n  const [r23, c23] = row.length\n  const [r24, c24] = col.length\n  const [r25, c25] = row.length\n  const [r26, c26] = col.length\n  const [r27, c27] = row.length\n  const [r28, c28] = col.length\n  const [r29, c29] = row.length\n  const [r30, c30] = col.length\n  const [r31, c31] = row.length\n  const [r32, c32] = col.length\n  const [r33, c33] = row.length\n  const [r34, c34] = col.length\n  const [r35, c35] = row.length\n  const [r36, c36] = col.length\n  const [r37, c37] = row.length\n  const [r38, c38] = col.length\n  const [r39, c39] = row.length\n  const [r40, c40] = col.length\n  const [r41, c41] = row.length\n  const [r42, c42] = col.length\n  const [r43, c43] = row.length\n  const [r44, c44] = col.length\n  const [r45, c45] = row.length\n  const [r46, c46] = col.length\n  const [r47, c47] = row.length\n  const [r48, c48] = col.length\n  const [r49, c49] = row.length\n  const [r50, c50] = col.length\n  const [r51, c51] = row.length\n  const [r52, c52] = col.length\n  const [r53, c53] = row.length\n  const [r54, c54] = col.length\n  const [r55, c55] = row.length\n  const [r56, c56] = col.length\n  const [r57, c57] = row.length\n  const [r58, c58] = col.length\n  const [r59, c59] = row.length\n  const [r60, c60] = col.length\n  const [r61, c61] = row.length\n  const [r62, c62] = col.length\n  const [r63, c63] = row.length\n  const [r64, c64] = col.length\n  const [r65, c65] = row.length\n  const [r66, c66] = col.length\n  const [r67, c67] = row.length\n  const [r68, c68] = col.length\n  const [r69, c69] = row.length\n  const [r70, c70] = col.length\n  const [r71, c71] = row.length\n  const [r72, c72] = col.length\n  const [r73, c73] = row.length\n  const [r74, c74] = col.length\n  const [r75, c75] = row.length\n  const [r76, c76] = col.length\n  const [r77, c77] = row.length\n  const [r78, c78] = col.length\n  const [r79, c79] = row.length\n  const [r80, c80] = col.length\n  const [r81, c81] = row.length\n  const [r82, c82] = col.length\n  const [r83, c83] = row.length\n  const [r84, c84] = col.length\n  const [r85, c85] = row.length\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givena n array of non-nega tive integers, return a copy of the given array af te r sorting, \n  yo u will sort the given  ar ray in asc ending order if  the sum( first index value, last index val ue) is odd,\n  or so rt it i n descending order if t hesum( fi rstindex value, last index value) is even.\n\n  Note:\n  * do n't chan ge the gi ven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Givena n array of non-nega tive integers, return a copy of the given array af te r sorting, \n  yo u will sort the given  ar ray in asc ending order if  the sum( first index value, last index val ue) is odd,\n  or so rt it i n descending order if t hesum( fi rstindex value, last index value) is even.\n\n  Note:\n  * don't chan ge the gi ven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Createa  function encrypt t hat takes astring as an argument and\n returns ast ring encry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Createa  function encrypt t hat takes astring as an argument and\n returns ast ring encry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2 + 1;\n  });\n  let result = rotated.join('');\n  return result;\n};\n\nconst encrypt_decrypt_rotate_reverse_reverse_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = s.split('');\n  let rotated = rot.map((x) => {\n    return alphabet.indexOf(x) * 2;\n  });\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(0, maxIndex + 1);\n};\n\n/* From agiven list of integ ers, generate a list of rolling minimumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 3]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  return numbers.slice(0, minIndex + 1);\n};\n\n/* From agiven list of integ ers, generate a list of rolling mean element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 2.5, 3.5, 3.5, 3.5, 4.5, 4.5]\n  */\nconst rollingMean = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/* From agiven list of integ ers, generate a list of rolling median element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 2.5, 3.5, 3.5, 3.5, 4.5, 4.5]\n  */\nconst rollingMedian = (numbers) => {\n  let sorted = numbers.sort();\n  let middle = sorted.length / 2;\n  return sorted[middle];\n};\n\n/* From agiven list of integ ers, generate a list of rolling mode element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [2, 2, 2, 2, 3, 3, 3]\n  */\nconst rollingMode = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let mode = numbers[maxIndex];\n  let count = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === mode) {\n      count++;\n    }\n  }\n  return mode;\n};\n\n/* From agiven list of integ ers, generate a list of rolling sum of squares element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingSumOfSquares([1, 2, 3, 2, 3, 4, 2])\n  [1, 4, 9, 16, 25, 36, 49]\n  */\nconst rollingSumOfSquares = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i], 2);\n  }\n  return sum;\n};\n\n/* From agiven list of integ ers, generate a list of rolling variance element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [0.5, 1.5, 2.5, 2.5, 3.5, 3.5, 3.5]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let mean = rollingMean(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2);\n  }\n  return sum / (numbers.length - 1);\n};\n\n/* From agiven list of integ ers, generate a list of rolling skewness element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingSkewness([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rollingSkewness = (numbers) => {\n  let sum = 0;\n  let mean = rollingMean(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 3);\n  }\n  return sum / (numbers.length - 1);\n};\n\n/* From agiven list of integ ers, generate a list of rolling kurtosis element fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rollingKurtosis = (numbers) => {\n  let sum = 0;\n  let mean = rollingMean(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 4);\n  }\n  return sum / (numbers.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist .\n Return null if thereis no such element.\n  \n  nextSmallest([1, 2 , 3, 4, 5]) ==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) ==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n    let min = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\nc ons tnextSmallest = (lst) => {\n    if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored3 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored4 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored5 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored6 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored7 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored8 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored9 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored10 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored11 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored12 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored13 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored14 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored15 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored16 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconst isBored17 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x < y) {\n    return x + y === z;\n  }\n  if (x > y) {\n    return x + y === z;\n  }\n  if (x < z) {\n    return x + z === y;\n  }\n  if (x > z) {\n    return x + z === y;\n  }\n  if (y < z) {\n    return y + z === x;\n  }\n  if (y > z) {\n    return y + z === x;\n  }\n  return false;\n};\n\n/* Create a function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x < y) {\n    return x + y === z;\n  }\n  if (x > y) {\n    return x + y === z;\n  }\n  if (x < z) {\n    return x + z === y;\n  }\n  if (x > z) {\n    return x + z === y;\n  }\n  if (y < z) {\n    return y + z === x;\n  }\n  if (y > z) {\n    return y + z === x;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x < y) {\n    return x + y === z;\n  }\n  if (x > y) {\n    return x + y === z;\n  }\n  if (x < z) {\n    return x + z === y;\n  }\n  if (x > z) {\n    return x + z === y;\n  }\n  if (y < z) {\n    return y + z === x;\n  }\n  if (y > z) {\n    return y + z === x;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x < y) {\n    return x + y === z;\n  }\n  if (x > y) {\n    return x + y === z;\n  }\n  if (x < z) {\n    return x + z === y;\n  }\n  if (x > z) {\n    return x + z === y;\n  }\n  if (y < z) {\n    return y + z === x;\n  }\n  if (y > z) {\n    return y + z === x;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x < y) {\n    return x + y === z;\n  }\n  if (x > y) {\n    return x + y === z;\n  }\n  if (x < z) {\n    return x + z === y;\n  }\n  if (x > z) {\n    return x + z === y;\n  }\n  if (y < z) {\n    return y + z === x;\n  }\n  if (y > z) {\n    return y + z === x;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n  }\n  if (y ===", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writea  function thattake s a message, and encodes in such a \n  way that itsw aps case o f all  letters, replaces al l v owels in  the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Writea  function thattake s a message, and encodes in such a \n  way that itsw aps case o f all  letters, replaces al l v owels in  the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' && nextLetter === 'e') {\n      encoded += 'T';\n    } else if (letter === 'e' && nextLetter === 'i') {\n      encoded += 'S';\n    } else if (letter === 'i' && nextLetter === 'o') {\n      encoded += 'K';\n    } else if (letter === 'o' && nextLetter === 'u') {\n      encoded += 'S';\n    } else if (letter === 'u' && nextLetter === 'y') {\n      encoded += 'S';\n    } else if (letter === 'y' && nextLetter === 'i') {\n      encoded += 'S';\n    } else {\n      encoded += letter;\n    }\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a string and returns a string with all the vowels replaced by the letter that appears two places ahead of the vowel in the English alphabet.\n  Examples:\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  */\nconst encode2 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y') {\n      encoded += message[i + 1];\n    } else {\n      encoded += letter;\n    }\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a string and returns a string with all the vowels replaced by the letter that appears two places ahead of the vowel in the English alphabet.\n  Examples:\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  */\nconst encode3 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y') {\n      encoded += message[i + 1];\n    } else {\n      encoded += message[i];\n    }\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a string and returns a string with all the vowels replaced by the letter that appears two places ahead of the vowel in the English alphabet.\n  Examples:\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  */\nconst encode4 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y') {\n      encoded += message[i + 1];\n    } else {\n      encoded += message[i];\n    }\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a string and returns a string with all the vowels replaced by the letter that appears two places ahead of the vowel in the English alphabet.\n  Examples:\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  */\nconst encode5 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y') {\n      encoded += message[i + 1];\n    } else {\n      encoded += message[i];\n    }\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a string and returns a string with all the vowels replaced by the letter that appears two places ahead of the vowel in the English alphabet.\n  Examples:\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  */\nconst encode6 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y') {\n      encoded += message[i + 1];\n    } else {\n      encoded += message[i];\n    }\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a string and returns a string with all the vowels replaced by the letter that appears two places ahead of the vowel in the English alphabet.\n  Examples:\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  >>> encode('This is a message')\n  'TES IS A MSG'\n  */\nconst encode7 = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    let currDigits = curr.toString().split('').reverse().join('');\n    let currDigitsInt = parseInt(currDigits);\n    if (currDigitsInt > max) {\n      max = currDigitsInt;\n    }\n  }\n  return max;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string, return true if all the characters in the string are lowercase.\n  Examples:\n  checkLowerCase(\"abc\") should return true.\n  checkLowerCase(\"ABC\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc\") should return false.\n  checkLowerCase(\"aBc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo3 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo4 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo5 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo6 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo7 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete  the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete  the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply13 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply14 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply15 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply16 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply17 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply18 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply19 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply20 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply21 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply22 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply23 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result += a;\n    a = a * 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply24 = (a, b) => {\n  let result = 0;\n  while (b > 0) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givena  string s, count th e number ofuppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Givena  string s, count th e number ofuppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in the string.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(number) - Math.abs(Math.floor(number));\n  return Math.abs(Math.floor(number)) + (closest > 0? 1 : -1);\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
