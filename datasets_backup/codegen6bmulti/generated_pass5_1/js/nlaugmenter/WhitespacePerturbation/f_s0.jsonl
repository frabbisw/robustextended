{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = Math.min(numbers[0], numbers[1])\n  const max = Math.max(numbers[0], numbers[1])\n  for (let i = 2; i < len; i++) {\n    if (Math.abs(numbers[i] - min) < threshold && Math.abs(numbers[i] - max) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\nmodule.exports = hasCloseElements\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack_length = paren_list.length\n  const paren_stack_index_max = paren_stack_length - 1\n  const paren_stack_index_min = 0\n  const paren_stack_index_current = paren_stack_index\n  const paren_stack_index_next = paren_stack_index + 1\n  const paren_stack_index_prev = paren_stack_index - 1\n  const paren_stack_index_next_max = paren_stack_index_max\n  const paren_stack_index_next_min = paren_stack_index_min\n  const paren_stack_index_current_max = paren_stack_index_max\n  const paren_stack_index_current_min = paren_stack_index_min\n\n  while (paren_stack_index_current < paren_stack_index_next) {\n    if (paren_stack_index_current < paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min + 1\n    }\n    if (paren_stack_index_current > paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max + 1\n    }\n    if (paren_stack_index_current < paren_stack_index_next) {\n      paren_stack_index_next = paren_stack_index_next + 1\n    }\n    if (paren_stack_index_current > paren_stack_index_next) {\n      paren_stack_index_next = paren_stack_index_next - 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next) {\n      paren_stack_index_current_max = paren_stack_index_next\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next) {\n      paren_stack_index_current_min = paren_stack_index_next\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min + 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max + 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max + 1\n    }\n    if (paren_stack_index_current_min < paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min + 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min + 1\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min - 1\n    }\n    if (paren_stack_index_current_max > paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    if (paren_stack_index_current_max > paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    if (paren_stack_index_current_min < paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min - 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min - 1\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next_min) {\n      paren_stack_index_next_min = paren_stack_index_next_min - 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    if (paren_stack_index_current_max < paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    if (paren_stack_index_current_min > paren_stack_index_next_max) {\n      paren_stack_index_next_max = paren_stack_index_next_max - 1\n    }\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let suffix = '';\n  let prefix = '';\n  let str = string;\n  let len = string.length;\n  let i = 0;\n  while (i < len) {\n    suffix = string.slice(i, len);\n    prefix = string.slice(0, i);\n    if (onst(suffix) && onst(prefix)) {\n      break;\n    }\n    i++;\n  }\n  if (i == len) {\n    return string;\n  }\n  return prefix + string.slice(i, len).split('').reverse().join('') + suffix;\n}\n\n/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let suffix = '';\n  let prefix = '';\n  let str = string;\n  let len = string.length;\n  let i = 0;\n  while (i < len) {\n    suffix = string.slice(i, len);\n    prefix = string.slice(0, i);\n    if (onst(suffix) && onst(prefix)) {\n      break;\n    }\n    i++;\n  }\n  if (i == len) {\n    return string;\n  }\n  return prefix + string.slice(i, len).split('').reverse().join('') + suffix;\n}\n\n/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let suffix = '';\n  let prefix = '';\n  let str = string;\n  let len = string.length;\n  let i = 0;\n  while (i < len) {\n    suffix = string.slice(i, len);\n    prefix = string.slice(0, i);\n    if (onst(suffix) && onst(prefix)) {\n      break;\n    }\n    i++;\n  }\n  if (i == len) {\n    return string;\n  }\n  return prefix + string.slice(i, len).split('').reverse().join('') + suffix;\n}\n\n/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let suffix = '';\n  let prefix = '';\n  let str = string;\n  let len = string.length;\n  let i = 0;\n  while (i < len) {\n    suffix = string.slice(i, len);\n    prefix = string.slice(0, i);\n    if (onst(suffix) && onst(prefix)) {\n      break;\n    }\n    i++;\n  }\n  if (i == len) {\n    return string;\n  }\n  return prefix + string.slice(i, len).split('').reverse().join('') + suffix;\n}\n\n/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> make", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter capitalized.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, Two, Three, Four, Five, Six\"\n  */\nconst wordsCapitalized = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toUpperCase() + rest;\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter lowercase.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"hi, my name is john\"\n  wordsString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst wordsLowercase = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toLowerCase() + rest;\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter uppercase.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, Two, Three, Four, Five, Six\"\n  */\nconst wordsUppercase = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toUpperCase() + rest;\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter in lowercase and the rest in uppercase.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst wordsCapitalizedUppercase = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toUpperCase() + rest.toUpperCase();\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter in uppercase and the rest in lowercase.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is john\"\n  wordsString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst wordsCapitalizedLowercase = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toUpperCase() + rest.toLowerCase();\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter in lowercase and the rest in uppercase.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst wordsLowercaseUppercase = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toLowerCase() + rest.toUpperCase();\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter in uppercase and the rest in lowercase.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is john\"\n  wordsString(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst wordsUppercaseLowercase = (s) => {\n  let words = s.split(/\\s+/);\n  let capitalized = words.map((word) => {\n    let firstLetter = word.charAt(0);\n    let rest = word.slice(1);\n    return firstLetter.toUpperCase() + rest.toLowerCase();\n  });\n  return capitalized.join(\" \");\n}\n\n/*\n  Given a string of words, return a string of the words in order, but with the\n  first letter in lower", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum21 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum22 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum23 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = []\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10\n    if (digit % 2 === 0) {\n      unique.push(x)\n    }\n    x = Math.floor(x / 10)\n  }\n  return unique\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\nconsole.log(uniqueDigits([152, 323, 1422, 10]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a.length - b.length;\n  });\n  const reversedArr = sortedArr.reverse();\n  const sortedArrLength = sortedArr.length;\n  const reversedArrLength = reversedArr.length;\n  const sortedArrArray = sortedArr.map(x => x.toString());\n  const reversedArrArray = reversedArr.map(x => x.toString());\n  const sortedArrArrayLength = sortedArrArray.length;\n  const reversedArrArrayLength = reversedArrArray.length;\n  const sortedArrArrayArray = sortedArrArray.slice(0, sortedArrArrayLength - 1);\n  const reversedArrArrayArray = reversedArrArray.slice(0, reversedArrArrayLength - 1);\n  const sortedArrArrayArrayArray = sortedArrArrayArray.slice(0, sortedArrArrayArrayLength - 1);\n  const reversedArrArrayArrayArray = reversedArrArrayArray.slice(0, reversedArrArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArray = sortedArrArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice(0, sortedArrArrayArrayArrayLength - 1);\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let f = 1;\n    for (let i = 1; i <= n; i++) {\n      f = f * i;\n    }\n    return f;\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = [], even = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n  }\n  return [...odd,...even];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 11, -11, 1, 1, 2]));\nconsole.log(countNums([-1, 11, -11, 1, 1, 2, -1, 11, -11, 1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Even = lst1.every(x => x % 2 === 0);\n  const lst2Even = lst2.every(x => x % 2 === 0);\n  if (lst1Even && lst2Even) {\n    return 'YES';\n  }\n  return 'NO';\n};\n\nconst test = () => {\n  const lst1 = [1, 2, 3, 4];\n  const lst2 = [1, 5, 3, 4];\n  console.log(exchange(lst1, lst2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst test = 'a b c a b a b a b b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return result.join('');\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n  console.log(reverseDelete(t[0], t[1]));\n});\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCount = {};\n  for (let i = 0; i < lst.length; i++) {\n    let s = lst[i];\n    let count = 0;\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] % 2 === 1) {\n        count++;\n      }\n    }\n    oddCount[i] = count;\n  }\n  return oddCount;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumIndex = nums.findIndex((x) => x > 0)\n  return minSumIndex === -1? sum : minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        result += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).length;\n    const bInt = b.toString(2).length;\n    const aIntInt = aInt * bInt;\n    const bIntInt = bInt * aInt;\n    return aIntInt - bIntInt;\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement a function that returns a list of all the strings that are a substring of p.\n\nExamples:\n\nselectSubStrings(\"Hello world\", \"lo\") ==> [\"Hello\", \"ello\", \"ld\", \"world\"]\nselectSubStrings(\"Hello world\", \"ll\") ==> [\"Hello\", \"ello\", \"world\"]\nselectSubStrings(\"Hello world\", \"Hello\") ==> [\"Hello\", \"ello\", \"world\"]\nselectSubStrings(\"Hello world\", \"d\") ==> [\"Hello\", \"ello\", \"world\"]\nselectSubStrings(\"Hello world\", \"\") ==> [\"Hello\", \"ello\", \"world\"]\nselectSubStrings(\"Hello world\", \"Hello world\") ==> [\"Hello world\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello\") ==> [\"Hello world\", \"Hello\"]\nselectSubStrings(\"Hello world\", \"Hello world, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello, Hello,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordStart = word.length - 1\n  const wordEnd = 0\n  const closestVowel = ''\n  const closestVowelDistance = Number.MAX_VALUE\n  const closestVowelIndex = -1\n  const closestVowelDistanceIndex = -1\n  const closestVowelIndex = -1\n  const closestVowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex = -1\n  const vowelDistance = Number.MAX_VALUE\n  const vowelIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nexport default matchParens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const arrLength = arr.length\n  const kLength = k\n\n  const sortedArr = arr.slice(0, kLength).sort((a, b) => a - b)\n  const sortedArrLength = sortedArr.length\n\n  if (sortedArrLength === kLength) {\n    return sortedArr\n  }\n\n  const diff = kLength - sortedArrLength\n  const left = arr.slice(0, diff)\n  const right = arr.slice(diff)\n\n  return [...left,...sortedArr,...right]\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  return sum.toString().slice(0, k);\n};\n\nconst addElements27 = (arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = [n];\n    const even = [n];\n    while (n!== 1) {\n      if (n % 2 === 0) {\n        odd.push(n / 2);\n      } else {\n        odd.push(3 * n + 1);\n      }\n      even.push(n / 2);\n      n = Math.floor(n / 2);\n    }\n    return odd.concat(even);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) return false;\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[3]);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > daysInMonth[month - 1]) return false;\n  if (month == 2 && year % 4 == 0 && year % 100!= 0 || year % 400 == 0) {\n    if (day > 29) return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) return false;\n  }\n  return true;\n};\n\nconst date = '06-04-2020';\nconsole.log(validDate(date));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of the words in the string, sorted in alphabetical order.\n  Examples\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"world!\"]\n  sortWords(\"Hello world!\") �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return lst.every(a => a === sorted[sorted.indexOf(a) + 1]);\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in descending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return lst.every(a => a === sorted[sorted.indexOf(a) - 1]);\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return lst.every(a => a === sorted[sorted.indexOf(a) + 1]);\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in descending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return lst.every(a => a === sorted[sorted.indexOf(a) - 1]);\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return lst.every(a => a === sorted[sorted.indexOf(a) + 1]);\n};\n\n/* Given a list of numbers, return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n//     return 'NO';\n//   }\n//   const start = Math.max(interval1[0], interval2[0]);\n//   const end = Math.min(interval1[1], interval2[1]);\n//   const length = end - start;\n//   if (length % 2 === 0) {\n//     return 'NO';\n//   }\n//   return 'YES';\n// };\n\n// const intersection = (interval1, interval2) => {\n//   if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n//     return 'NO';\n//   }\n//   const start = Math.max(interval1[0], interval2[0]);\n//   const end = Math.min(interval1[1], interval2[1]);\n//   const length = end - start;\n//   if (length % 2 === 0) {\n//     return 'NO';\n//   }\n//   return 'YES';\n// };\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  return sum;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = grid[i][j]\n    }\n  }\n  const ans = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j] === undefined) {\n        continue\n      }\n      const path = []\n      const curr = dp[i][j]\n      let k = 1\n      while (k < k && j + k < m) {\n        path.push(dp[i][j + k])\n        k++\n      }\n      let min = k\n      for (let k = 1; k < k && j - k >= 0; k++) {\n        if (dp[i][j - k] < dp[i][j]) {\n          min = dp[i][j - k]\n        }\n      }\n      if (min < dp[i][j]) {\n        dp[i][j] = min\n      }\n      ans.push(dp[i][j])\n    }\n  }\n  return ans\n}\n\nconsole.log(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))\nconsole.log(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\nconst gcd = greatestCommonDivisor;\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    result.push(j)\n    i++\n    j = 1 + (2 * j)\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  const arr = str.split('')\n  const len = arr.length\n  const i = 0\n  const j = len - 1\n  const k = 0\n  const n = 0\n  const m = 0\n  const flag = 0\n  const flag1 = 0\n  const flag2 = 0\n  const flag3 = 0\n  const flag4 = 0\n  const flag5 = 0\n  const flag6 = 0\n  const flag7 = 0\n  const flag8 = 0\n  const flag9 = 0\n  const flag10 = 0\n  const flag11 = 0\n  const flag12 = 0\n  const flag13 = 0\n  const flag14 = 0\n  const flag15 = 0\n  const flag16 = 0\n  const flag17 = 0\n  const flag18 = 0\n  const flag19 = 0\n  const flag20 = 0\n  const flag21 = 0\n  const flag22 = 0\n  const flag23 = 0\n  const flag24 = 0\n  const flag25 = 0\n  const flag26 = 0\n  const flag27 = 0\n  const flag28 = 0\n  const flag29 = 0\n  const flag30 = 0\n  const flag31 = 0\n  const flag32 = 0\n  const flag33 = 0\n  const flag34 = 0\n  const flag35 = 0\n  const flag36 = 0\n  const flag37 = 0\n  const flag38 = 0\n  const flag39 = 0\n  const flag40 = 0\n  const flag41 = 0\n  const flag42 = 0\n  const flag43 = 0\n  const flag44 = 0\n  const flag45 = 0\n  const flag46 = 0\n  const flag47 = 0\n  const flag48 = 0\n  const flag49 = 0\n  const flag50 = 0\n  const flag51 = 0\n  const flag52 = 0\n  const flag53 = 0\n  const flag54 = 0\n  const flag55 = 0\n  const flag56 = 0\n  const flag57 = 0\n  const flag58 = 0\n  const flag59 = 0\n  const flag60 = 0\n  const flag61 = 0\n  const flag62 = 0\n  const flag63 = 0\n  const flag64 = 0\n  const flag65 = 0\n  const flag66 = 0\n  const flag67 = 0\n  const flag68 = 0\n  const flag69 = 0\n  const flag70 = 0\n  const flag71 = 0\n  const flag72 = 0\n  const flag73 = 0\n  const flag74 = 0\n  const flag75 = 0\n  const flag76 = 0\n  const flag77 = 0\n  const flag78 = 0\n  const flag79 = 0\n  const flag80 = 0\n  const flag81 = 0\n  const flag82 = 0\n  const flag83 = 0\n  const flag84 = 0\n  const flag85 = 0\n  const flag86 = 0\n  const flag87 = 0\n  const flag88 = 0\n  const flag89 = 0\n  const flag90 = 0\n  const flag91 = 0\n  const flag92 = 0\n  const flag93 = 0\n  const flag94 = 0\n  const flag95 = 0\n  const flag96 = 0\n  const flag97 = 0\n  const flag98 = 0\n  const flag99 = 0\n  const flag100 = 0\n  const flag101 = 0\n  const flag102 = 0\n  const flag103 = 0\n  const flag104 = 0\n  const flag105 = 0\n  const flag106 = 0\n  const flag107 = 0\n  const flag108 = 0\n  const flag109 = 0\n  const flag110 = 0\n  const flag111 = 0\n  const flag112 = 0\n  const flag113 = 0\n  const flag114 = 0\n  const flag115 = 0\n  const flag116 = 0\n  const flag117 = 0\n  const flag118 = 0\n  const flag119 = 0\n  const flag120 = 0\n  const flag121 = 0\n  const flag122 = 0\n  const flag123 = 0\n  const flag124 = 0\n  const flag125 = 0\n  const flag126 = 0\n  const flag127 = 0\n  const flag128 = 0\n  const flag129 = 0\n  const flag130 = 0\n  const flag131 = 0\n  const flag132 = 0\n  const flag133 = 0\n  const flag134 = 0\n  const flag135 = 0\n  const flag136 = 0\n  const flag137 = 0\n  const flag138 = 0\n  const flag139 = 0\n  const flag140 = 0\n  const flag141 = 0\n  const flag142 = 0\n  const flag143 = 0\n  const flag144 = 0\n  const flag145 = 0\n  const flag146 = 0\n  const flag147 = 0\n  const flag148 = 0\n  const flag149 = 0\n  const flag150 = 0\n  const flag151 = 0\n  const flag152 = 0\n  const flag153 = 0\n  const flag154 = 0\n  const flag155 = 0\n  const flag156 = 0\n  const flag157 = 0\n  const flag158 = 0\n  const flag159 = 0\n  const flag160 = 0\n  const flag161 = 0\n  const flag162 = 0\n  const flag163 = 0\n  const flag164 = 0\n  const flag165 = 0\n  const flag166 = 0\n  const flag167 = 0\n  const flag168 = 0\n  const flag169 = 0\n  const flag170 = 0\n  const flag171 = 0\n  const flag172 = 0\n  const flag173 = 0\n  const flag174 = 0\n  const flag175 = 0\n  const flag176 = 0\n  const flag177 = 0\n  const flag178 = 0\n  const flag179 = 0\n  const flag180 = 0\n  const flag181 = 0\n  const flag182 = 0\n  const flag183 = 0\n  const flag184 = 0\n  const flag185 = 0\n  const flag", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem * elem, 0);\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\n/*\n  Create a function that returns true if the first character of a given string is an alphabetical character and is not a par t of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  const firstChar = txt.slice(0, 1);\n  const isALetter = /[a-zA-Z]/.test(firstChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(1));\n};\n\n/*\n  Create a function that returns true if the first two characters of a given string are an alphabetical character and are not a par t of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstTwoCharsAreALetter(\"apple pie\") ➞ true\n  checkIfFirstTwoCharsAreALetter(\"apple pi e\") ➞ false\n  checkIfFirstTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfFirstTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfFirstTwoCharsAreALetter = (txt) => {\n  const firstTwoChars = txt.slice(0, 2);\n  const isALetter = /[a-zA-Z]/.test(firstTwoChars);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(2));\n};\n\n/*\n  Create a function that returns true if the first three characters of a given string are an alphabetical character and are not a par t of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstThreeCharsAreALetter(\"apple pie\") ➞ true\n  checkIfFirstThreeCharsAreALetter(\"apple pi e\") ➞ false\n  checkIfFirstThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfFirstThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfFirstThreeCharsAreALetter = (txt) => {\n  const firstThreeChars = txt.slice(0, 3);\n  const isALetter = /[a-zA-Z]/.test(firstThreeChars);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(3));\n};\n\n/*\n  Create a function that returns true if the first four characters of a given string are an alphabetical character and are not a par t of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstFourCharsAreALetter(\"apple pie\") ➞ true\n  checkIfFirstFourCharsAreALetter(\"apple pi e\") ➞ false\n  checkIfFirstFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfFirstFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfFirstFourCharsAreALetter = (txt) => {\n  const firstFourChars = txt.slice(0, 4);\n  const isALetter = /[a-zA-Z]/.test(firstFourChars);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(4));\n};\n\n/*\n  Create a function that returns true if the first five characters of a given string are an alphabetical character and are not a par t of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstFiveCharsAreALetter(\"apple pie\") ➞ true\n  checkIfFirstFiveCharsAreALetter(\"apple pi e\") ➞ false\n  checkIfFirstFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfFirstFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfFirstFiveCharsAreALetter = (txt) => {\n  const firstFiveChars = txt.slice(0, 5);\n  const isALetter = /[a-zA-Z]/.test(firstFiveChars);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(5));\n};\n\n/*\n  Create a function that returns true if the first six characters of a given string are an alphabetical character and are not a par t of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstSixCharsAreALetter(\"apple pie\") ➞ true\n  checkIfFirstSixCharsAreALetter(\"apple pi e\") ➞ false\n  checkIfFirstSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfFirstSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfFirstSixCharsAreALetter = (txt", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let arrLength = arr.length\n  while (i < arrLength && j >= 0) {\n    if (arr[i] <= arr[j]) {\n      k = i\n      i++\n    } else {\n      j--\n    }\n  }\n  return k\n}\n\n/*\n  Given a sorted array, return the index of the element that is not less than\n  the given element. If no such element exists, return -1.\n\n  Examples:\n  canFind([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([0]));\nconsole.log(largestSmallestIntegers([]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconstcompare = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compare = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareTwo = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareThree = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareFour = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareFive = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareSix = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareSeven = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareEight = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareNine = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n    return a;\n  }\n  if (typeof b ==='string') {\n    return b;\n  }\n  return a > b? a : b;\n};\n\nconst compareTen = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualTo", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  let result = 1;\n  for (let i =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '_$1');\n}\n\nconst getSpaces = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1');\n}\n\nconst getSpacesCount = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount2 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount3 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount4 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount5 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount6 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount7 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount8 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount9 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount10 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount11 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount12 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount13 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount14 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount15 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount16 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount17 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount18 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount19 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount20 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount21 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount22 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount23 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount24 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount25 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount26 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount27 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount28 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst getSpacesCount29 = (text) => {\n  return text.replace(/([A-Za-z0-9\\s])/g, '$1').length;\n}\n\nconst get", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_2 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_3 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_4 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_5 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_6 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_7 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_8 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_9 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_10 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_11 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_12 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_13 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_14 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_15 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file_name_regex_16 = /^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*[.][a-zA-Z0-9]*$/;\n  const file", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = ''\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j]\n      if (isPrime(char)) {\n        newWord += char\n      }\n    }\n    newWords.push(newWord)\n  }\n  for (let i = 0; i < newWords.length; i++) {\n    newSentence += newWords[i]\n    if (i < newWords.length - 1) {\n      newSentence +=''\n    }\n  }\n  return newSentence\n}\n\nfunction isPrime(num) {\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n    if (x.charAt(0) === '-') {\n        return false;\n    }\n    if (n.charAt(0) === '-') {\n        return false;\n    }\n    if (x.charAt(0) === '0') {\n        return false;\n    }\n    if (n.charAt(0) === '0') {\n        return false;\n    }\n    if (x.charAt(0) === '1') {\n        return false;\n    }\n    if (n.charAt(0) === '1') {\n        return false;\n    }\n    if (x.charAt(0) === '-') {\n        return false;\n    }\n    if (n.charAt(0) === '-') {\n        return false;\n    }\n    if (x.charAt(0) === '+') {\n        return false;\n    }\n    if (n.charAt(0) === '+') {\n        return false;\n    }\n    if (x.charAt(0) === '-') {\n        return false;\n    }\n    if (n.charAt(0) === '-') {\n        return false;\n    }\n    if (x.charAt(0) === '*') {\n        return false;\n    }\n    if (n.charAt(0) === '*') {\n        return false;\n    }\n    if (x.charAt(0) === '/') {\n        return false;\n    }\n    if (n.charAt(0) === '/') {\n        return false;\n    }\n    if (x.charAt(0) === '%') {\n        return false;\n    }\n    if (n.charAt(0) === '%') {\n        return false;\n    }\n    if (x.charAt(0) === '^') {\n        return false;\n    }\n    if (n.charAt(0) === '^') {\n        return false;\n    }\n    if (x.charAt(0) === '+') {\n        return false;\n    }\n    if (n.charAt(0) === '+') {\n        return false;\n    }\n    if (x.charAt(0) === '-') {\n        return false;\n    }\n    if (n.charAt(0) === '-') {\n        return false;\n    }\n    if (x.charAt(0) === '=') {\n        return false;\n    }\n    if (n.charAt(0) === '=') {\n        return false;\n    }\n    if (x.charAt(0) === '<') {\n        return false;\n    }\n    if (n.charAt(0) === '<') {\n        return false;\n    }\n    if (x.charAt(0) === '>') {\n        return false;\n    }\n    if (n.charAt(0) === '>') {\n        return false;\n    }\n    if (x.charAt(0) === '!') {\n        return false;\n    }\n    if (n.charAt(0) === '!') {\n        return false;\n    }\n    if (x.charAt(0) === '&') {\n        return false;\n    }\n    if (n.charAt(0) === '&') {\n        return false;\n    }\n    if (x.charAt(0) === '|') {\n        return false;\n    }\n    if (n.charAt(0) === '|') {\n        return false;\n    }\n    if (x.charAt(0) === '?') {\n        return false;\n    }\n    if (n.charAt(0) === '?') {\n        return false;\n    }\n    if (x.charAt(0) === '~') {\n        return false;\n    }\n    if (n.charAt(0) === '~') {\n        return false;\n    }\n    if (x.charAt(0) === ':') {\n        return false;\n    }\n    if (n.charAt(0) === ':') {\n        return false;\n    }\n    if (x.charAt(0) === '.') {\n        return false;\n    }\n    if (n.charAt(0) === '.') {\n        return false;\n    }\n    if (x.charAt(0) === ',') {\n        return false;\n    }\n    if (n.charAt(0) === ',') {\n        return false;\n    }\n    if (x.charAt(0) === '(') {\n        return false;\n    }\n    if (n.charAt(0) === '(') {\n        return false;\n    }\n    if (x.charAt(0) === ')') {\n        return false;\n    }\n    if (n.charAt(0) === ')') {\n        return false;\n    }\n    if (x.charAt(0) === '{') {\n        return false;\n    }\n    if (n.charAt(0) === '{') {\n        return false;\n    }\n    if (x.charAt(0) === '}') {\n        return false;\n    }\n    if (n.charAt(0) === '}') {\n        return false;\n    }\n    if (x.charAt(0) === '(') {\n        return false;\n    }\n    if (n.charAt(0) === '(') {\n        return false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = [1, 3, 7, 13, 21];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    max = Math.max(max, a[i] + a[j] + a[k]);\n                }\n            }\n        }\n    }\n    return max;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  const planet1Orbit = planet1Index < planet2Index? planet1Index : planet2Index\n  const planet2Orbit = planet1Index < planet2Index? planet2Index : planet1Index\n  const planet1OrbitIndex = planets.indexOf(planet1Orbit)\n  const planet2OrbitIndex = planets.indexOf(planet2Orbit)\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet1OrbitIndex : planet2OrbitIndex\n  const planet2OrbitLength = planet1OrbitIndex < planet2OrbitIndex? planet2OrbitIndex : planet1OrbitIndex\n  const planet1OrbitLength = planet1OrbitIndex < planet2OrbitIndex?", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort_by_length = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort_by_length_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => b - a);\n};\n\nconst list_sort_by_length_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => b - a);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => b - a);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => b - a);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => a - b);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length; i++) {\n      sum += word[i];\n    }\n    result.push(sum);\n  });\n  return result.sort((a, b) => b - a);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let result = [];\n  lst.forEach(word => {\n    let sum = 0;\n    for (let i = 0; i < word.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 4)\n  '0 1 2 3'\n  >>> stringSequence(5, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence(5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence(5, 7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence(5, 8)\n  '0 1 2 3 4 5 6 7 8'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(5, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> stringSequence(5, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 11)\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  >>> stringSequence(5, 11)\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 12)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12'\n  >>> stringSequence(5, 12)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12'\n  */\nconst stringSequence = (n, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY31 = (n, x, y) => {\n  if (n % 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n    const  sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const  n = lst[i];\n        if (n < 0 ||!isInt(n)) {\n            continue;\n        }\n        sum += n * n;\n    }\n    return sum;\n};\n\nconst  doubleTheDifference = (lst) => {\n    const  sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const  n = lst[i];\n        if (n < 0 ||!isInt(n)) {\n            continue;\n        }\n        sum += n * n;\n    }\n    return sum;\n};\n\nconst  isInt = (n) => {\n    return n % 1 === 0;\n};\n\nconst  isOdd = (n) => {\n    return n % 2 === 1;\n};\n\nconst  isEven = (n) => {\n    return n % 2 === 0;\n};\n\nconst  isPositive = (n) => {\n    return n > 0;\n};\n\nconst  isNegative = (n) => {\n    return n < 0;\n};\n\nconst  isEvenOdd = (n) => {\n    return isEven(n) || isOdd(n);\n};\n\nconst  isPositiveNegative = (n) => {\n    return isPositive(n) && isNegative(n);\n};\n\nconst  isPositiveNegativeOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeEven = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n);\n};\n\nconst  isPositiveNegativeOddEven = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenEven = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isEven(n);\n};\n\nconst  isPositiveNegativeOddEvenOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOddOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOddOddOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n) && isOdd(n);\n};\n\nconst  isPositiveNegativeOddEvenOddOddOddOddOddOddOddOddOddOddOdd = (n) => {\n    return isPositive(n) && isNegative(n) && isEven(n) && isOdd(n) && isOdd(n)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i] - guess[j])\n      }\n    }\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    result.push(0)\n  }\n  for (let i = 0; i < gameLength; i++) {\n    for (let j = 0; j < guessLength; j++) {\n      if (game[i] === guess[j]) {\n        result[i] = 0\n      } else {\n        result[i] = Math.abs(game[i]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return `${class_name}.${cap}${strength > 0? '.' + extensions[strength] : ''}`;\n};\n\nconst getExtension = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? extensions[strength] : '';\n};\n\nconst getClass = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? class_name.substring(0, strength) : '';\n};\n\nconst getClassName = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? class_name.substring(0, strength) : class_name;\n};\n\nconst getClassNameWithExtension = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? `${class_name}.${cap}${strength > 0? '.' + extensions[strength] : ''}` : class_name;\n};\n\nconst getClassNameWithExtensionAndClass = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? `${class_name}.${cap}${strength > 0? '.' + extensions[strength] : ''}` : class_name;\n};\n\nconst getClassNameWithExtensionAndClassAndExtension = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? `${class_name}.${cap}${strength > 0? '.' + extensions[strength] : ''}` : class_name;\n};\n\nconst getClassNameWithExtensionAndClassAndExtensionAndClass = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x => x.split('.').map(x => x.charAt(0).toLowerCase()).join('')).reduce((a, b) => {\n    return a - b;\n  }, -1);\n  return strength > 0? `${class_name}.${cap}${strength > 0? '.' + extensions[strength] : ''}` : class_name;\n};\n\nconst getClassNameWithExtensionAndClassAndExtensionAndClass = (class_name, extensions) => {\n  const cap = class_name.split('.').map(x => x.charAt(0).toUpperCase()).join('');\n  const strength = extensions.map(x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aReverse = a.split('').reverse().join('');\n  const bReverse = b.split('').reverse().join('');\n  if (aReverse.indexOf(bReverse)!== -1) {\n    return true;\n  }\n  if (bReverse.indexOf(aReverse)!== -1) {\n    return true;\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (aReverse.indexOf(bReverse.substring(i, i + bLen))!== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst nCheck = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aReverse = a.split('').reverse().join('');\n  const bReverse = b.split('').reverse().join('');\n  if (aReverse.indexOf(bReverse)!== -1) {\n    return true;\n  }\n  if (bReverse.indexOf(aReverse)!== -1) {\n    return true;\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (aReverse.indexOf(bReverse.substring(i, i + bLen))!== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst cycpa = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aReverse = a.split('').reverse().join('');\n  const bReverse = b.split('').reverse().join('');\n  if (aReverse.indexOf(bReverse)!== -1) {\n    return true;\n  }\n  if (bReverse.indexOf(aReverse)!== -1) {\n    return true;\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (aReverse.indexOf(bReverse.substring(i, i + bLen))!== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst tternCheck = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aReverse = a.split('').reverse().join('');\n  const bReverse = b.split('').reverse().join('');\n  if (aReverse.indexOf(bReverse)!== -1) {\n    return true;\n  }\n  if (bReverse.indexOf(aReverse)!== -1) {\n    return true;\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (aReverse.indexOf(bReverse.substring(i, i + bLen))!== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst t = cycpa(\"abcdefg\", \"abcdefg\");\nconsole.log(t);\n\nconst t2 = nCheck(\"abcdefg\", \"abcdefg\");\nconsole.log(t2);\n\nconst t3 = cycpatternCheck(\"abcdefg\", \"abcdefg\");\nconsole.log(t3);\n\nconst t4 = tternCheck(\"abcdefg\", \"abcdefg\");\nconsole.log(t4);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'i';\n    } else if (digit == 2) {\n      result += 'ii';\n    } else if (digit == 3) {\n      result += 'iii';\n    } else if (digit == 4) {\n      result += 'iv';\n    } else if (digit == 5) {\n      result += 'v';\n    } else if (digit == 6) {\n      result += 'vi';\n    } else if (digit == 7) {\n      result += 'vii';\n    } else if (digit == 8) {\n      result += 'viii';\n    } else if (digit == 9) {\n      result += 'ix';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'I';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    } else if (digit == 6) {\n      result += 'VI';\n    } else if (digit == 7) {\n      result += 'VII';\n    } else if (digit == 8) {\n      result += 'VIII';\n    } else if (digit == 9) {\n      result += 'IX';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'I';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    } else if (digit == 6) {\n      result += 'VI';\n    } else if (digit == 7) {\n      result += 'VII';\n    } else if (digit == 8) {\n      result += 'VIII';\n    } else if (digit == 9) {\n      result += 'IX';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'I';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    } else if (digit == 6) {\n      result += 'VI';\n    } else if (digit == 7) {\n      result += 'VII';\n    } else if (digit == 8) {\n      result += 'VIII';\n    } else if (digit == 9) {\n      result += 'IX';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'I';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    if (word.length > max.length) {\n      max = word;\n    }\n    unique.add(word);\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const unique = new Set();\n  const max = words[0];\n  for (let i = 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, need - number];\n  }\n};\n\nconst [number, remaining] = eat(5, 6, 10);\nconsole.log(number, remaining);\n\nconst [number, remaining] = eat(4, 8, 9);\nconsole.log(number, remaining);\n\nconst [number, remaining] = eat(1, 10, 10);\nconsole.log(number, remaining);\n\nconst [number, remaining] = eat(2, 11, 5);\nconsole.log(number, remaining);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const lowerCase = char.toLowerCase();\n    if (!map.has(lowerCase)) {\n      map.set(lowerCase, 1);\n    } else {\n      map.set(lowerCase, map.get(lowerCase) + 1);\n    }\n  }\n  return map.size;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    let sum = 0\n    for (let j = 0; j < operandLength; j++) {\n      sum += operand[j] * operator[i][j]\n    }\n    result.push(sum)\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      res += s[i].toLowerCase();\n    } else {\n      res += s[i].toUpperCase();\n    }\n  }\n  return res;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSalt = (text, salt) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSalt = (text, salt1, salt2) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSalt = (text, salt1, salt2, salt3) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2 + salt3).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2 + salt3 + salt4).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2 + salt3 + salt4 + salt5).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5, salt6) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2 + salt3 + salt4 + salt5 + salt6).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5, salt6, salt7) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2 + salt3 + salt4 + salt5 + salt6 + salt7).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5, salt6, salt7, salt8) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text + salt1 + salt2 + salt3 + salt4 + salt5 + salt6 + salt7 + salt8).digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5, salt6, salt7, salt8, salt9) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(1);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(3);\n    } else if (notes[i] === '|') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|o') {\n      notes_list.push(5);\n    } else if (notes[i] === 'o|o|') {\n      notes_list.push(6);\n    } else if (notes[i] === 'o|o|o') {\n      notes_list.push(7);\n    } else if (notes[i] === 'o|o|o|') {\n      notes_list.push(8);\n    }\n  }\n  return notes_list;\n};\n\n/*\n  Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(1);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(3);\n    } else if (notes[i] === '|') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|o') {\n      notes_list.push(5);\n    } else if (notes[i] === 'o|o|') {\n      notes_list.push(6);\n    } else if (notes[i] === 'o|o|o') {\n      notes_list.push(7);\n    } else if (notes[i] === 'o|o|o|') {\n      notes_list.push(8);\n    }\n  }\n  return notes_list;\n};\n\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(1);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(3);\n    } else if (notes[i] === '|') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|o') {\n      notes_list.push(5);\n    } else if (notes[i] === 'o|o|') {\n      notes_list.push(6);\n    } else if (notes[i] === 'o|o|o') {\n      notes_list.push(7);\n    } else if (notes[i] === 'o|o|o|') {\n      notes_list.push(8);\n    }\n  }\n  return notes_list;\n};\n\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(1);\n    } else if (notes[i] === 'o|') {\n      notes_list.push(2);\n    } else if (notes[i] === '.') {\n      notes_list.push(3);\n    } else if (notes[i] === '|') {\n      notes_list.push(4);\n    } else if (notes[i] === 'o|o') {\n      notes_list.push(5);\n    } else if (notes[i] === 'o|o|') {\n      notes_list.push(6);\n    } else if (notes[i] === 'o|o|o') {\n      notes_list.push(7);\n    } else if (notes[i] === 'o|o|o|') {\n      notes_list.push(8);\n    }\n  }\n  return notes_list;\n};\n\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      notes_list.push(1);\n    } else if (notes[i] === 'o|')", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.sort((a, b) => a - b).join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.sort((a, b) => a - b).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.sort((a, b) => a - b).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.sort((a, b) => a - b).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.sort((a, b) => a - b).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  return sortedNumbers.sort((a, b) => a - b).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integer", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements7 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements8 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements9 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondCl", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst logarithms = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst exponentials = (numbers) => {\n  return numbers.map(x => Math.exp(x))\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst logarithmsToBase = (numbers, base) => {\n  return numbers.map(x => Math.log(x) / Math.log(base))\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst exponentialsToBase = (numbers, base) => {\n  return numbers.map(x => Math.exp(x) / base)\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst logarithmsToBase2 = (numbers, base) => {\n  return numbers.map(x => Math.log(x) / Math.log(2))\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst exponentialsToBase2 = (numbers, base) => {\n  return numbers.map(x => Math.exp(x) / 2)\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst logarithmsToBase10 = (numbers, base) => {\n  return numbers.map(x => Math.log(x) / Math.log(10))\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst exponentialsToBase10 = (numbers, base) => {\n  return numbers.map(x => Math.exp(x) / base)\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst logarithmsToBase100 = (numbers, base) => {\n  return numbers.map(x => Math.log(x) / Math.log(100))\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003]\n  */\nconst exponentialsToBase100 = (numbers, base) => {\n  return numbers.map(x => Math.exp(x) / base)\n}\n\n/* Given a list of numbers, return a list of the logarithms of the numbers\n  >>> logar", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python valu es on ly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python valu es on ly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python valu es on ly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python valu es on ly for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python valu es on ly for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python valu es on ly for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python valu es on ly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python valu es on ly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python valu es on ly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python valu es on ly for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python valu es on ly for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python valu es on ly for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python valu es on ly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python valu es on ly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python valu es on ly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python valu es on ly for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python valu es on ly for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python valu es on ly for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python valu es on ly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python valu es on ly for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python valu es on ly for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return index of first occurrence of given string\n  * @param {string} string\n  * @param {string} substr\n  * @returns {number}\n  * @example\n  * strindex('')\n  * // => -1\n  * strindex('abc')\n  * // => 0\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -1\n  * strindex('abc', 'ab')\n  * // => -1\n  * strindex('abc', 'bc')\n  * // => -1\n  * strindex('abc', 'cd')\n  * // => -1\n  * strindex('abc', 'abcd')\n  * // => -1\n  * strindex('abc', 'abcde')\n  * // => -1\n  * strindex('abc', 'abcdef')\n  * // => -1\n  * strindex('abc', 'abcdefg')\n  * // => -1\n  * strindex('abc', 'abcdefgh')\n  * // => -1\n  * strindex('abc', 'abcdefghi')\n  * // => -1\n  * strindex('abc', 'abcdefghij')\n  * // => -1\n  * strindex('abc', 'abcdefghijk')\n  * // => -1\n  * strindex('abc', 'abcdefghijkl')\n  * // => -1\n  * strindex('abc', 'abcdefghijklm')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmn')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmno')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnop')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopq')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqr')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrst')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstu')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuv')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvw')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwx')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxy')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyz')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyza')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzab')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabc')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcde')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdef')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefg')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefgh')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghi')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghij')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijk')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijkl')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklm')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmn')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmno')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnop')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstu')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv')\n  * // => -1\n  * strindex('abc', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255]\n  let i = 0\n  let j = divisors.length - 1\n  while (i < j) {\n    const k = (i + j) / 2\n    if (n % divisors[k] === 0) {\n      j = k\n    } else {\n      i = k + 1\n    }\n  }\n  return divisors[i]\n}\n\n/*\n  For a given number n, find the smallest st nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255]\n  let i = 0\n  let j = divisors.length - 1\n  while (i < j) {\n    const k = (i + j) / 2\n    if (n % divisors[k] === 0) {\n      i = k + 1\n    } else {\n      j = k\n    }\n  }\n  return divisors[j]\n}\n\n/*\n  For a given number n, find the largest st nu mber that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  9\n  */\nconst largestDivisor2 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255]\n  let i = 0\n  let j = divisors.length - 1\n  while (i < j) {\n    const k = (i + j) / 2\n    if (n % divisors[k] === 0) {\n      j = k\n    } else {\n      i = k + 1\n    }\n  }\n  return divisors[j]\n}\n\n/*\n  For a given number n, find the smallest st nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor2 = (n) => {\n  const divisors = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of give n int eger in theorder from largest to smallest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of give n int eger in theorder from smallest to largest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of give n int eger in theorder from smallest to largest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of give n int eger in theorder from largest to smallest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of give n int eger in theorder from largest to smallest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse5 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of give n int eger in theorder from largest to smallest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse6 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences2 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences3 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences4 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences5 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences6 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences7 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences8 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences9 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) + 1;\n  }\n  return counts;\n};\n\n/*\n  Given a list of integers, return the number of times that each number occurs in the list.\n  >>> countOccurrences([1, 2, 3, 2, 4])\n  {1: 2, 2: 2, 3: 1, 4: 1}\n  */\nconst countOccurrences10 = (numbers) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counts[numbers[i]] = (counts[numbers[i]] || 0) +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix2 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix3 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix4 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix5 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix6 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix7 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix8 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix9 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix10 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix11 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix12 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix13 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  * Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByPrefix14 = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  const sqrt = Math.sqrt(n)\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  20\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      count += 2\n      if (i === n) count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  20\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      count += 2\n      if (i === n) count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  20\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      count += 2\n      if (i === n) count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  20\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      count += 2\n      if (i === n) count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  20\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      count += 2\n      if (i === n) count += 1\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  20\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      count += 2\n      if (i === n) count += 1\n    }\n  }\n  return count\n}\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x0 = 0;\n  let x1 = 0;\n  let x2 = 0;\n  let x3 = 0;\n  let x4 = 0;\n  let x5 = 0;\n  let x6 = 0;\n  let x7 = 0;\n  let x8 = 0;\n  let x9 = 0;\n  let x10 = 0;\n  let x11 = 0;\n  let x12 = 0;\n  let x13 = 0;\n  let x14 = 0;\n  let x15 = 0;\n  let x16 = 0;\n  let x17 = 0;\n  let x18 = 0;\n  let x19 = 0;\n  let x20 = 0;\n  let x21 = 0;\n  let x22 = 0;\n  let x23 = 0;\n  let x24 = 0;\n  let x25 = 0;\n  let x26 = 0;\n  let x27 = 0;\n  let x28 = 0;\n  let x29 = 0;\n  let x30 = 0;\n  let x31 = 0;\n  let x32 = 0;\n  let x33 = 0;\n  let x34 = 0;\n  let x35 = 0;\n  let x36 = 0;\n  let x37 = 0;\n  let x38 = 0;\n  let x39 = 0;\n  let x40 = 0;\n  let x41 = 0;\n  let x42 = 0;\n  let x43 = 0;\n  let x44 = 0;\n  let x45 = 0;\n  let x46 = 0;\n  let x47 = 0;\n  let x48 = 0;\n  let x49 = 0;\n  let x50 = 0;\n  let x51 = 0;\n  let x52 = 0;\n  let x53 = 0;\n  let x54 = 0;\n  let x55 = 0;\n  let x56 = 0;\n  let x57 = 0;\n  let x58 = 0;\n  let x59 = 0;\n  let x60 = 0;\n  let x61 = 0;\n  let x62 = 0;\n  let x63 = 0;\n  let x64 = 0;\n  let x65 = 0;\n  let x66 = 0;\n  let x67 = 0;\n  let x68 = 0;\n  let x69 = 0;\n  let x70 = 0;\n  let x71 = 0;\n  let x72 = 0;\n  let x73 = 0;\n  let x74 = 0;\n  let x75 = 0;\n  let x76 = 0;\n  let x77 = 0;\n  let x78 = 0;\n  let x79 = 0;\n  let x80 = 0;\n  let x81 = 0;\n  let x82 = 0;\n  let x83 = 0;\n  let x84 = 0;\n  let x85 = 0;\n  let x86 = 0;\n  let x87 = 0;\n  let x88 = 0;\n  let x89 = 0;\n  let x90 = 0;\n  let x91 = 0;\n  let x92 = 0;\n  let x93 = 0;\n  let x94 = 0;\n  let x95 = 0;\n  let x96 = 0;\n  let x97 = 0;\n  let x98 = 0;\n  let x99 = 0;\n  let x100 = 0;\n  let x101 = 0;\n  let x102 = 0;\n  let x103 = 0;\n  let x104 = 0;\n  let x105 = 0;\n  let x106 = 0;\n  let x107 = 0;\n  let x108 = 0;\n  let x109 = 0;\n  let x110 = 0;\n  let x111 = 0;\n  let x112 = 0;\n  let x113 = 0;\n  let x114 = 0;\n  let x115 = 0;\n  let x116 = 0;\n  let x117 = 0;\n  let x118 = 0;\n  let x119 = 0;\n  let x120 = 0;\n  let x121 = 0;\n  let x122 = 0;\n  let x123 = 0;\n  let x124 = 0;\n  let x125 = 0;\n  let x126 = 0;\n  let x127 = 0;\n  let x128 = 0;\n  let x129 = 0;\n  let x130 = 0;\n  let x131 = 0;\n  let x132 = 0;\n  let x133 = 0;\n  let x134 = 0;\n  let x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird2 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird3 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird4 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird5 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird6 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird7 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird8 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird9 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird10 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird11 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird12 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird13 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird14 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird15 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\nconst sortThird16 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  const list = l.slice();\n  for (let i = 0; i < list.length; i++) {\n    for (let j = i + 1; j < list.length; j++) {\n      if (list[i] === list[j]) {\n        list.splice(j, 1);\n        j--;\n      }\n    }\n  }\n  return list;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = divisors[Math.floor(Math.random() * divisors.length)]\n  const result = n / divisor\n  const remainder = n % divisor\n  if (remainder === 0) {\n    return result\n  }\n  if (remainder === divisor) {\n    return result + 1\n  }\n  return result\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic2 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic3 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic4 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic5 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic6 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic7 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic8 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic9 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic10 = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = [1, 2];\n  let i = 3;\n  while (i <= n) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n    i += 2;\n  }\n  return fib[n];\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    }\n    if (sum === 0) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === sum) {\n            count++;\n        }\n    }\n    if (count === 3) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    }\n    if (sum === 0) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === sum) {\n            count++;\n        }\n    }\n    if (count === 3) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero3 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    }\n    if (sum === 0) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === sum) {\n            count++;\n        }\n    }\n    if (count === 3) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero4 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    }\n    if (sum === 0) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === sum) {\n            count++;\n        }\n    }\n    if (count === 3) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero5 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    }\n    if (sum === 0) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === sum) {\n            count++;\n        }\n    }\n    if (count === 3) {\n        return true;\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    int i = 0;\n    while (i < n) {\n      int j = i + 1;\n      while (j < n) {\n        if (carRaceCollision(car1, car2)) {\n          collisions++;\n        }\n        j++;\n      }\n      i++;\n    }\n  }\n  return collisions;\n}\n\nint main() {\n  int n = 0;\n  cin >> n;\n  vector<Car> cars(n);\n  for (int i = 0; i < n; i++) {\n    cin >> cars[i].x >> cars[i].y;\n  }\n  int collisions = carRaceCollisions(cars);\n  cout << collisions << endl;\n  return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum > 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum > 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum > 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const baseDigitsLen = baseDigits.length\n  const digits = []\n  let i = 0\n  while (x > 0) {\n    digits[i] = x % base\n    x = Math.floor(x / base)\n    i++\n  }\n  const result = digits.reverse().join('')\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  if (sorted.length % 2 === 0) {\n    return (sorted[Math.floor(sorted.length / 2)] + sorted[Math.floor(sorted.length / 2) - 1]) / 2;\n  } else {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nexport default isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*Return n^2 modulo p (be aware of nume rics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  11\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n * n) % p\n}\n\n/*Return n^3 modulo p (be aware of nume rics).\n  >>> modp3(3, 5)\n  27\n  >>> modp3(1101, 101)\n  11\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n) % p\n}\n\n/*Return n^4 modulo p (be aware of nume rics).\n  >>> modp4(3, 5)\n  27\n  >>> modp4(1101, 101)\n  11\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n) % p\n}\n\n/*Return n^5 modulo p (be aware of nume rics).\n  >>> modp5(3, 5)\n  27\n  >>> modp5(1101, 101)\n  11\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n) % p\n}\n\n/*Return n^6 modulo p (be aware of nume rics).\n  >>> modp6(3, 5)\n  27\n  >>> modp6(1101, 101)\n  11\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n) % p\n}\n\n/*Return n^7 modulo p (be aware of nume rics).\n  >>> modp7(3, 5)\n  27\n  >>> modp7(1101, 101)\n  11\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n) % p\n}\n\n/*Return n^8 modulo p (be aware of nume rics).\n  >>> modp8(3, 5)\n  27\n  >>> modp8(1101, 101)\n  11\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^9 modulo p (be aware of nume rics).\n  >>> modp9(3, 5)\n  27\n  >>> modp9(1101, 101)\n  11\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^10 modulo p (be aware of nume rics).\n  >>> modp10(3, 5)\n  27\n  >>> modp10(1101, 101)\n  11\n  >>> modp10(0, 101)\n  1\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^11 modulo p (be aware of nume rics).\n  >>> modp11(3, 5)\n  27\n  >>> modp11(1101, 101)\n  11\n  >>> modp11(0, 101)\n  1\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^12 modulo p (be aware of nume rics).\n  >>> modp12(3, 5)\n  27\n  >>> modp12(1101, 101)\n  11\n  >>> modp12(0, 101)\n  1\n  >>> modp12(3, 11)\n  8\n  >>> modp12(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^13 modulo p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length) {\n    if (j < numbers.length - 1) {\n      result.push(numbers[i]);\n      k++;\n      i++;\n      j++;\n    } else {\n      result.push(numbers[i]);\n      result.push(delimeter);\n      i++;\n      k++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n\nconst encode =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n\nconst decode =(s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n\nconst encode_shift_decode =(s) =>{\n  return decodeShift(encodeShift(s));\n}\n\nconst decode_shift_encode =(s) =>{\n  return encodeShift(decodeShift(s));\n}\n\nconst encode_decode =(s) =>{\n  return decode(encode(s));\n}\n\nconst decode_encode =(s) =>{\n  return encode(decode(s));\n}\n\nconst encode_decode_encode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst decode_encode_decode =(s) =>{\n  return encode_decode(decode_encode(s));\n}\n\nconst encode_decode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_decode =(s) =>{\n  return decode_encode(encode_decode(s));\n}\n\nconst encode_decode_decode_encode_decode_encode_dec", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\n/*\n  removePunctuation is a function that take s str ing and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '\\'s', '\\'S', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'d', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '\\'s', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum <= t\n}\n\n/*\n  Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum > t\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold2 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold3 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold4 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold5 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold6 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold7 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true if all numbers in the lis t l a re between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 11)\n  false\n  */\nconst betweenThreshold8 = (l, t, u) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  return sum >= t && sum <= u\n}\n\n/*\n  Return true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Calculate the factorial of a number\n  *\n  * Factorial of 0 is 1\n  * Factorial of 1 is 1\n  * Factorial of 2 is 2\n  * Factorial of 3 is 6\n  * Factorial of 4 is 24\n  * Factorial of 5 is 120\n  * Factorial of 6 is 720\n  * Factorial of 7 is 5040\n  * Factorial of 8 is 40320\n  * Factorial of 9 is 362880\n  * Factorial of 10 is 3628800\n  * Factorial of 11 is 39916800\n  * Factorial of 12 is 479001600\n  * Factorial of 13 is 6227020800\n  * Factorial of 14 is 87178291200\n  * Factorial of 15 is 1307674368000\n  * Factorial of 16 is 20922789888000\n  * Factorial of 17 is 355687428096000\n  * Factorial of 18 is 6402373705728000\n  * Factorial of 19 is 121645100408832000\n  * Factorial of 20 is 2432902008176640000\n  * Factorial of 21 is 51090942171709440000\n  * Factorial of 22 is 1124000727777607680000\n  * Factorial of 23 is 25852016738884976640000\n  * Factorial of 24 is 620448401733239439360000\n  * Factorial of 25 is 15511210043330985984000000\n  * Factorial of 26 is 403291461126605635584000000\n  * Factorial of 27 is 10888869450418352160768000000\n  * Factorial of 28 is 304888344611713860501504000000\n  * Factorial of 29 is 6217829128885560156167040800000\n  * Factorial of 30 is 125829128885560156167040800000\n  * Factorial of 31 is 2517004821760684588817840016000000\n  * Factorial of 32 is 5359004738777914496385528448000000\n  * Factorial of 33 is 11805916207174113034243640844800000\n  * Factorial of 34 is 23058430092136939513046723040000000\n  * Factorial of 35 is 46116860184273879041826086951600000000\n  * Factorial of 36 is 922741897357364564152069235428800000\n  * Factorial of 37 is 18446744073709551616\n  * Factorial of 38 is 368934881474191032337460108480000000\n  * Factorial of 39 is 734003217269340686035895027584375000000\n  * Factorial of 40 is 1469261113344262278604164966660937500000\n  * Factorial of 41 is 2980352790873597883725894875984375000000\n  * Factorial of 42 is 596098873733755102059670261752929687500000\n  * Factorial of 43 is 119622220901663616872687305938284375000000\n  * Factorial of 44 is 2376418446744073709551616\n  * Factorial of 45 is 472964718531518646020547265760\n  * Factorial of 46 is 9479007428188653387827579081023\n  * Factorial of 47 is 19074507428188653387827579081023\n  * Factorial of 48 is 382146226468173023267857049680\n  * Factorial of 49 is 78813009128889432331405478640\n  * Factorial of 50 is 158856407864332623158736540\n  * Factorial of 51 is 30702090651066643968484513030\n  * Factorial of 52 is 6234332667651475343830459840\n  * Factorial of 53 is 12479007157851209859160680\n  * Factorial of 54 is 24950063157851209859160680\n  * Factorial of 55 is 499901231239257801357216000\n  * Factorial of 56 is 8990063157851209859160680\n  * Factorial of 57 is 179001267435200\n  * Factorial of 58 is 359001267435200\n  * Factorial of 59 is 59001267435200\n  * Factorial of 60 is 118001267435200\n  * Factorial of 61 is 238001267435200\n  * Factorial of 62 is 478001267435200\n  * Factorial of 63 is 959001267435200\n  * Factorial of 64 is 1919001267435200\n  * Factorial of 65 is 3838001267435200\n  * Factorial of 66 is 7678001267435200\n  * Factorial of 67 is 15578001267435200\n  * Factorial of 68 is 314600081267435200\n  * Factorial of 69 is 629400081267435200\n  * Factorial of 70 is 1258800081267435200\n  * Factorial of 71 is 251760081267435200\n  * Factorial of 72 is 5035200161267435200\n  * Factorial of 73 is 10070400161267435200\n  * Factorial of 74 is 201326400161267435200\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) return false;\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\nexport default sameChars;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength === 0) {\n    return true\n  }\n  const bracketsOpening = brackets.charAt(0)\n  const bracketsClosing = brackets.charAt(bracketsLength - 1)\n  const bracketsOpeningLength = bracketsOpening.length\n  const bracketsClosingLength = bracketsClosing.length\n  const bracketsOpeningIndex = brackets.indexOf(bracketsOpening)\n  const bracketsClosingIndex = brackets.indexOf(bracketsClosing)\n  if (bracketsOpeningIndex === -1 || bracketsClosingIndex === -1) {\n    return false\n  }\n  if (bracketsOpeningIndex === bracketsClosingIndex) {\n    return bracketsOpeningIndex === bracketsLength - 1\n  }\n  return bracketsOpeningIndex < bracketsClosingIndex\n}\n\n/*\n  Given a string, return a new string with the brackets removed. \n  If the string does not contain any brackets, return the string unchanged. \n\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<\")\n  \"<\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2];\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1l = l1s.length;\n  const l2l = l2s.length;\n  const common = [];\n  for (let i = 0; i < l1l; i++) {\n    const i1 = l1s[i];\n    for (let j = 0; j < l2l; j++) {\n      const i2 = l2s[j];\n      if (i1 === i2) {\n        common.push(i1);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((max, prime) => {\n    return prime > max? prime : max\n  }, 1)\n}\n\n/*Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((min, prime) => {\n    return prime < min? prime : min\n  }, n)\n}\n\n/*Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((min, prime) => {\n    return prime < min? prime : min\n  }, n)\n}\n\n/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((max, prime) => {\n    return prime > max? prime : max\n  }, 1)\n}\n\n/*Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((min, prime) => {\n    return prime < min? prime : min\n  }, n)\n}\n\n/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((max, prime) => {\n    return prime > max? prime : max\n  }, 1)\n}\n\n/*Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((min, prime) => {\n    return prime < min? prime : min\n  }, n)\n}\n\n/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return primeFactors.reduce((max, prime) => {\n    return prime > max? prime : max\n  }, 1)\n}\n\n/*Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_size = 0\n  const stack_max_size = 10\n  const stack_max_level = 3\n  const stack_level = 0\n  const stack_level_max = stack_max_level\n  const stack_level_max_size = stack_max_size\n  const stack_level_max_level = stack_max_level\n  const stack_level_max_level_size = stack_max_level_size\n  const stack_level_max_level_size_size = stack_max_level_size_size\n  const stack_level_max_level_size_size_size = stack_max_level_size_size_size\n  const stack_level_max_level_size_size_size_size = stack_max_level_size_size_size_size_size\n  const stack_level_max_level_size_size_size_size_size_size = stack_max_level_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  const open = brackets.charAt(0)\n  const close = brackets.charAt(brackets.length - 1)\n  stack.push(open)\n  for (let i = 1; i < brackets.length - 1; i++) {\n    if (brackets.charAt(i) === open) {\n      stack.push(open)\n    } else if (brackets.charAt(i) === close) {\n      if (stack.pop() === open) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  Given a string, return a string with every opening bracket\n  replaced with a closing bracket.\n  \n  >>> bracketsToClosingBrackets(\"(())\")\n  '()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"()\")\n  '()'\n  >>> bracketsToClosingBrackets(\"()\")\n  '()'\n  >>> bracketsToClosingBrackets(\"(()\")\n  '()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"()\")\n  '()'\n  >>> bracketsToClosingBrackets(\"()\")\n  '()'\n  >>> bracketsToClosingBrackets(\"()\")\n  '()'\n  >>> bracketsToClosingBrackets(\"(()\")\n  '()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  '()()()'\n  >>> bracketsToClosingBrackets(\"(()())\")\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots2 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots3 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots4 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots5 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots6 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, 1]\n  >>> roots([1, 2, 3])\n  [-1, 1, 2]\n  */\nconst roots7 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    const x = -d[i] / d[i + 1]\n    roots.push(x)\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n/*\n  The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib2(n - 1) + fibfib2(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib3(n - 1) + fibfib3(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib4(n - 1) + fibfib4(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib5(n - 1) + fibfib5(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib6(n - 1) + fibfib6(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nexport default vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (shift > 0) {\n    result = result.split('').reverse().join('');\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.indexOf(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the input.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 2\n      digitSum(\"aAaaaXa", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    let count = 0;\n    let total = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i1 = 0;\n    let j1 = 0;\n    let k1 = 0;\n    let l1 = 0;\n    let m1 = 0;\n    let n1 = 0;\n    let o1 = 0;\n    let p1 = 0;\n    let q1 = 0;\n    let r1 = 0;\n    let s1 = 0;\n    let t1 = 0;\n    let u1 = 0;\n    let v1 = 0;\n    let w1 = 0;\n    let x1 = 0;\n    let y1 = 0;\n    let z1 = 0;\n    let a1 = 0;\n    let b1 = 0;\n    let c1 = 0;\n    let d1 = 0;\n    let e1 = 0;\n    let f1 = 0;\n    let g1 = 0;\n    let h1 = 0;\n    let i2 = 0;\n    let j2 = 0;\n    let k2 = 0;\n    let l2 = 0;\n    let m2 = 0;\n    let n2 = 0;\n    let o2 = 0;\n    let p2 = 0;\n    let q2 = 0;\n    let r2 = 0;\n    let s2 = 0;\n    let t2 = 0;\n    let u2 = 0;\n    let v2 = 0;\n    let w2 = 0;\n    let x2 = 0;\n    let y2 = 0;\n    let z2 = 0;\n    let a2 = 0;\n    let b2 = 0;\n    let c2 = 0;\n    let d2 = 0;\n    let e2 = 0;\n    let f2 = 0;\n    let g2 = 0;\n    let h2 = 0;\n    let i3 = 0;\n    let j3 = 0;\n    let k3 = 0;\n    let l3 = 0;\n    let m3 = 0;\n    let n3 = 0;\n    let o3 = 0;\n    let p3 = 0;\n    let q3 = 0;\n    let r3 = 0;\n    let s3 = 0;\n    let t3 = 0;\n    let u3 = 0;\n    let v3 = 0;\n    let w3 = 0;\n    let x3 = 0;\n    let y3 = 0;\n    let z3 = 0;\n    let a3 = 0;\n    let b3 = 0;\n    let c3 = 0;\n    let d3 = 0;\n    let e3 = 0;\n    let f3 = 0;\n    let g3 = 0;\n    let h3 = 0;\n    let i4 = 0;\n    let j4 = 0;\n    let k4 = 0;\n    let l4 = 0;\n    let m4 = 0;\n    let n4 = 0;\n    let o4 = 0;\n    let p4 = 0;\n    let q4 = 0;\n    let r4 = 0;\n    let s4 = 0;\n    let t4 = 0;\n    let u4 = 0;\n    let v4 = 0;\n    let w4 = 0;\n    let x4 = 0;\n    let y4 = 0;\n    let z4 = 0;\n    let a4 = 0;\n    let b4 = 0;\n    let c4 = 0;\n    let d4 = 0;\n    let e4 = 0;\n    let f4 = 0;\n    let g4 = 0;\n    let h4 = 0;\n    let i5 = 0;\n    let j5 = 0;\n    let k5 = 0;\n    let l5 = 0;\n    let m5 = 0;\n    let n5 = 0;\n    let o5 = 0;\n    let p5 = 0;\n    let q5 = 0;\n    let r5 = 0;\n    let s5 = 0;\n    let t5 = 0;\n    let u5 = 0;\n    let v5 = 0;\n    let w5 = 0;\n    let x5 = 0;\n    let y5 = 0;\n    let z5 = 0;\n    let a5 = 0;\n    let b5 = 0;\n    let c5 = 0;\n    let d5 = 0;\n    let e5 = 0;\n    let f5 = 0;\n    let g5 = 0;\n    let h5 = 0;\n    let i6 = 0;\n    let j6 = 0;\n    let k6 = 0;\n    let l6 = 0;\n    let m6 = 0;\n    let n6 = 0;\n    let o6 = 0;\n    let p6 = 0;\n    let q6", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let result = [];\n    let min = arr[0];\n    let minIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push([min, minIndex]);\n    return result;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search2 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search3 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search4 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search5 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search6 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search7 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search8 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search9 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search10 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search11 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search12 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search13 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search14 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search15 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search16 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search17 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search18 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search19 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    while (i < len && lst[i] < min) {\n      i++\n    }\n    while (j >= 0 && lst[j] > max) {\n      j--\n    }\n    if (i < j) {\n      const temp = lst[i]\n      lst[i] = lst[j]\n      lst[j] = temp\n      i++\n      j--\n    }\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qs = q.slice(0)\n  const qw = qs.reduce((a, b) => a + b, 0)\n  if (qw === w) return true\n  if (qw > w) return false\n  if (qw < w) return true\n  return qw === w && qs.every(x => x === qs.reverse().join(''))\n}\n\nconst q = [3, 2, 3]\nconsole.log(willItFly(q, 5))\nconsole.log(willItFly(q, 9))\nconsole.log(willItFly(q, 1))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let min = arr[0]\n  let count = 0\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      count++\n      min = Math.min(min, arr[i])\n      i++\n    } else {\n      count++\n      min = Math.min(min, arr[j])\n      j--\n    }\n  }\n  return count\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch9 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch10 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch11 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch12 = (lst1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    return n > 1 && n < 100\n  }\n  const isPrime = (n) => {\n    if (n === 2) return true\n    if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n  }\n  return false;\n};\n\nconsole.log(iscube(64));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.toString(16);\n  const dec = num.toString(10);\n  const prime = [2, 3, 5, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = decimal / 2;\n    i++;\n  }\n  return `db${binary}db`;\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst main = () => {\n  const decimal = parseInt(prompt('Enter a decimal number: '));\n  const binary = decimalToBinary(decimal);\n  console.log(`The decimal number is ${decimal} and its binary representation is ${binary}`);\n  const binary2 = binaryToDecimal(binary);\n  console.log(`The binary number is ${binary2} and its decimal representation is ${decimal}`);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let sum = 0\n  while (i < len) {\n    sum += s[i]\n    i += 1\n  }\n  return sum % 3 === 0\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    return letterGrade;\n  });\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n\n/*\n  This is the first week of the semester a nd th e teacher has to give the grades to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    return letterGrade;\n  });\n};\n\nconsole.log(letterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  const isPrime = (number) => {\n    return prime.test(number);\n  };\n  const isPrimeLength = (number) => {\n    return number.length > 1 && isPrime(number.substring(0, 2)) && isPrime(number.substring(number.length - 2));\n  };\n  return isPrimeLength(string);\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t end sOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t endEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t startEndsOne= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t endEndsOne= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t startEndsOne= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t endEndsOne= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t startEndsTwo= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 2\n  }\n  return count\n}\n\ncon s t endEndsTwo= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 2\n  }\n  return count\n}\n\ncon s t startEndsTwo= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 2\n  }\n  return count\n}\n\ncon s t endEndsTwo= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 2\n  }\n  return count\n}\n\ncon s t startEndsThree= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    end -= 3\n  }\n  return count\n}\n\ncon s t endEndsThree= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if (start === end) {\n      count += 1\n    }\n    start += 3\n  }\n  return count\n}\n\ncon s t startEndsThree= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start === 1) {\n      count += 1\n    }\n    if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve2 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve3 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve4 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve5 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve6 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve7 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve8 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve9 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve10 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve11 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve12 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve13 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve14 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve15 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve16 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve17 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve18 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve19 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve20 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve21 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve22 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve23 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve24 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve25 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve26 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconst solve27 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*Given a non-empty", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(/[^a-zA-Z0-9 ]/g, '')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        row.splice(j, 1)\n        return row\n      }\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    for (let j = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.slice(0);\n  sorted.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 1) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const alphabetRotation = alphabet.split('').reverse().join('');\n  const alphabetRotationLength = alphabetRotation.length;\n  const alphabetRotationReverse = alphabetRotation.split('').reverse().join('');\n  const alphabetRotationReverseLength = alphabetRotationReverse.length;\n  const alphabetRotationReverseReverse = alphabetRotationReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseLength = alphabetRotationReverseReverse.length;\n  const alphabetRotationReverseReverseReverse = alphabetRotationReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseLength = alphabetRotationReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverse = alphabetRotationReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  const alphabetRotationReverseReverseReverseReverseReverseLength = alphabetRotationReverseReverseReverseReverseReverse.length;\n  const alphabetRotationReverseReverseReverseReverseReverse = alphabetRotationReverseReverseRever", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return [max, maxIndex];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n - 1];\n  return nextSmallest < next? nextSmallest : next;\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const n = lst.length - 1;\n  const next = lst[n];\n  const nextSmallest = lst[n -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word, index) => {\n    if (word === 'I') {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0;\n};\n\nconst anyInt37 = (x,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const messageLength = message.length;\n  const encodedMessage = '';\n  for (let i = 0; i < messageLength; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter ==='') {\n      encodedMessage +='';\n    } else if (letter === nextLetter) {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n};\n\nconst decode = (message) => {\n  const message = message.toUpperCase();\n  const messageLength = message.length;\n  const decodedMessage = '';\n  for (let i = 0; i < messageLength; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter ==='') {\n      decodedMessage +='';\n    } else if (letter === nextLetter) {\n      decodedMessage += letter;\n    } else {\n      decodedMessage += letter.toLowerCase();\n    }\n  }\n  return decodedMessage;\n};\n\nconst test = () => {\n  const message = 'This is a message';\n  const encodedMessage = encode(message);\n  const decodedMessage = decode(encodedMessage);\n  console.log(`${message} -> ${encodedMessage} -> ${decodedMessage}`);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const prime_sum = (n) => {\n    let i = 2;\n    let sum = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        sum += i;\n      }\n      i++;\n    }\n    return sum;\n  };\n  return prime_sum(lst[lst.length - 1]);\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\n/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n  The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase6 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase7 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase8 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase9 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase10 = (dict) => {\n  const keys = Object.keys(dict)\n  const upperKeys = keys.map(key => key.toUpperCase())\n  const lowerKeys = keys.map(key => key.toLowerCase())\n  return upperKeys.every(key => dict[key] === dict[key.toUpperCase()]) ||\n    lowerKeys.every(key => dict[key] === dict[key.toLowerCase()])\n}\n\nconst checkDictCase11", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_unit.reduce((acc, curr, i) => acc * b_unit[i], 1);\n  return product;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = Math.abs(num);\n  let closest_int = Math.floor(closest);\n  let closest_frac = closest - closest_int;\n  if (closest_frac > 0.5) {\n    closest_int++;\n  }\n  return closest_int;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
