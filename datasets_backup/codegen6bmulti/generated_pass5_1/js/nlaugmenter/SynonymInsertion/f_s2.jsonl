{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements10 = (numbers, threshold) => {\n  const elements = numbers.filter(x => x!== 0);\n  const distances = elements.map(x => Math.abs(x - threshold));\n  const hasClose = distances.some(x => x < 0.01);\n  return hasClose;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  const paren_group = [];\n  const paren_group_open = false;\n  const paren_group_closed = false;\n  const paren_group_open_count = 0;\n  const paren_group_closed_count = 0;\n  const paren_group_open_index = 0;\n  const paren_group_closed_index = 0;\n  const paren_group_open_index_end = 0;\n  const paren_group_closed_index_end = 0;\n  const paren_group_open_index_start = 0;\n  const paren_group_closed_index_start = 0;\n  const paren_group_open_index_end_end = 0;\n  const paren_group_closed_index_end_end = 0;\n  const paren_group_open_index_end_start = 0;\n  const paren_group_closed_index_end_start = 0;\n  const paren_group_open_index_start_end = 0;\n  const paren_group_closed_index_start_end = 0;\n  const paren_group_open_index_start_start = 0;\n  const paren_group_closed_index_start_start = 0;\n  const paren_group_open_index_start_end_end = 0;\n  const paren_group_closed_index_start_end_end = 0;\n  const paren_group_open_index_start_end_start = 0;\n  const paren_group_closed_index_start_end_start = 0;\n  const paren_group_open_index_start_start_end = 0;\n  const paren_group_closed_index_start_start_end = 0;\n  const paren_group_open_index_start_start_start = 0;\n  const paren_group_closed_index_start_start_start = 0;\n  const paren_group_open_index_start_start_end_end = 0;\n  const paren_group_closed_index_start_start_end_end = 0;\n  const paren_group_open_index_start_start_end_start = 0;\n  const paren_group_closed_index_start_start_end_start = 0;\n  const paren_group_open_index_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start = 0;\n  const paren_group_closed_index_start_start_start_start = 0;\n  const paren_group_open_index_start_start_start_end_end = 0;\n  const paren_group_closed_index_start_start_start_end_end = 0;\n  const paren_group_open_index_start_start_start_end_start = 0;\n  const paren_group_closed_index_start_start_start_end_start = 0;\n  const paren_group_open_index_start_start_start_end_start = 0;\n  const paren_group_closed_index_start_start_start_end_start = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start_start_start_end = 0;\n  const paren_group_open_index_start_start_start_start_end = 0;\n  const paren_group_closed_index_start_start", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - suffix.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? 1 : n === 2? 2 : n === 3? 3 : n === 4? 4 : n === 5? 5 : n === 6? 6 : n === 7? 7 : n === 8? 8 : n === 9? 9 : n === 10? 10 : n === 11? 11 : n === 12? 12 : n === 13? 13 : n === 14? 14 : n === 15? 15 : n === 16? 16 : n === 17? 17 : n === 18? 18 : n === 19? 19 : n === 20? 20 : n === 21? 21 : n === 22? 22 : n === 23? 23 : n === 24? 24 : n === 25? 25 : n === 26? 26 : n === 27? 27 : n === 28? 28 : n === 29? 29 : n === 30? 30 : n === 31? 31 : n === 32? 32 : n === 33? 33 : n === 34? 34 : n === 35? 35 : n === 36? 36 : n === 37? 37 : n === 38? 38 : n === 39? 39 : n === 40? 40 : n === 41? 41 : n === 42? 42 : n === 43? 43 : n === 44? 44 : n === 45? 45 : n === 46? 46 : n === 47? 47 : n === 48? 48 : n === 49? 49 : n === 50? 50 : n === 51? 51 : n === 52? 52 : n === 53? 53 : n === 54? 54 : n === 55? 55 : n === 56? 56 : n === 57? 57 : n === 58? 58 : n === 59? 59 : n === 60? 60 : n === 61? 61 : n === 62? 62 : n === 63? 63 : n === 64? 64 : n === 65? 65 : n === 66? 66 : n === 67? 67 : n === 68? 68 : n === 69? 69 : n === 70? 70 : n === 71? 71 : n === 72? 72 : n === 73? 73 : n === 74? 74 : n === 75? 75 : n === 76? 76 : n === 77? 77 : n === 78? 78 : n === 79? 79 : n === 80? 80 : n === 81? 81 : n === 82? 82 : n === 83? 83 : n === 84? 84 : n === 85? 85 : n === 86? 86 : n === 87? 87 : n === 88? 88 : n === 89? 89 : n === 90? 90 : n === 91? 91 : n === 92? 92 : n === 93? 93 : n === 94? 94 : n === 95? 95 : n === 96? 96 : n === 97? 97 : n === 98? 98 : n === 99? 99 : n === 100? 100 : n === 101? 101 : n === 102? 102 : n === 103? 103 : n === 104? 104 : n === 105? 105 : n === 106? 106 : n === 107? 107 : n === 108? 108 : n === 109? 109 : n === 110? 110 : n === 111? 111 : n === 112? 112 : n === 113? 113 : n === 114? 114 : n === 115? 115 : n === 116? 116 : n === 117? 117 : n === 118? 118 : n === 119? 119 : n === 120? 120 : n === 121? 121 : n === 122? 122 : n === 123? 123 : n === 124? 124 : n === 125? 125 : n === 126? 126 : n === 127? 127 : n === 128? 128 : n === 129? 129 : n === 130? 130 : n === 131? 131 : n === 132? 132 : n === 133? 133 : n === 134? 134 : n === 135? 135 : n === 136? 136 : n === 137? 137 : n === 138? 138 : n === 139? 139 : n === 140? 140 : n === 141? 141 : n === 142? 142 : n === 143? 143 : n === 144? 144 : n === 145? 145 : n === 146? 146 : n === 147? 147 : n === 148? 148 : n === 149? 149 : n === 150? 150 : n === 151? 151 : n === 152? 152 : n === 153? 153 : n === 154? 154 : n === 155? 155 : n === 156? 156 : n === 157? 157 : n === 158? 158 : n === 159? 159 : n === 160? 160 : n === 161? 161 : n === 162? 162 : n === 163? 163 : n === 164? 164 : n === 165? 165 : n === 166? 166 : n === 167? 167 : n === 168? 168 : n === 169? 169 : n === 170? 170 : n === 171? 171 : n === 172? 172 : n === 173? 173 : n === 174? 174 : n === 175? 175 : n === 176? 176 : n === 177? 177 : n === 178? 178 : n === 179? 179 : n === 180? 180 : n === 181? 181 : n === 182? 182 : n === 183? 183 : n === 184? 184 : n === 185? 185 : n === 186? 186 : n === 187? 187 : n === 188? 188 : n === 189? 189 : n === 190? 190 : n === 191? 191 : n === 192? 192 : n === 193? 193 : n === 194? 194 : n === 195? 195 : n === 196? 196 : n === 197? 197 : n === 198? 198 : n === 199? 199 : n === 200? 200 : n === 201? 201 : n === 202? 202 : n === 203? 203 : n === 204? 204 : n === 205? 205 : n === 206? 206 : n === 207? 207 : n === 208? 208 : n === 209? 209 : n === 210? 210 : n === 211? 211 : n === 212? 212 : n === 213? 213 : n === 214? 214 : n === 215? 215 : n === 216? 216 : n === 217? 217 : n === 218? 218 : n === 219?", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\nconst chooseNum16 = (x, y) => {\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i >= min) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i--;\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return Math.round(result / (m - n + 1));\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = x % 10;\n    if (digits % 2 === 0) {\n      uniqueDigits.push(x);\n    }\n    x = Math.floor(x / 10);\n  }\n  return uniqueDigits;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength2 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength3 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength4 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength5 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength6 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength7 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength8 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength9 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength10 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength11 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength12 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedNames = reversedArr.map(x => names[x])\n  return reversedNames\n}\n\nconst byLength13 = (arr) => {\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const sortedArr = arr.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n      k++;\n    } else {\n      j--;\n    }\n  }\n  return k === arr.length - 1;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      temp = arr[i];\n      arr[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor2 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor3 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor4 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor5 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor6 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor7 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_char = b[i];\n    if (a_char === b_char) {\n      result += a_char;\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('01010101', '10101010')\n  '10101010'\n  */\nconst stringXor8 = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let result = '';\n  for (let i = 0; i < a_len; i++) {\n    let a_char = a[i];\n    let b_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_even = lst1.filter(x => x % 2 === 0);\n  let lst2_even = lst2.filter(x => x % 2 === 0);\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); //=> \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); //=> \"NO\"\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i]\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter]++\n    }\n  }\n  return histogram\n}\n\nconst test = 'a b c a b'\nconsole.log(histogram(test))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const cLength = c.length;\n  const sLength = s.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < sLength && j < cLength) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      result.push(s[i]);\n      i++;\n    }\n  }\n  if (j === cLength) {\n    return [result.join(''), true];\n  }\n  return [result.join(''), false];\n};\n\nconst test = [\n  [\"abcde\", \"ae\"],\n  [\"abcdef\", \"b\"],\n  [\"abcdedcba\", \"ab\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"abcdefghijklmnopqrstuvwxyz", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (lst) => {\n    const oddCount = (lst) => {\n      const oddCount = (lst) => {\n        const oddCount = (lst) => {\n          const oddCount = (lst) => {\n            const oddCount = (lst) => {\n              const oddCount = (lst) => {\n                const oddCount = (lst) => {\n                  const oddCount = (lst) => {\n                    const oddCount = (lst) => {\n                      const oddCount = (lst) => {\n                        const oddCount = (lst) => {\n                          const oddCount = (lst) => {\n                            const oddCount = (lst) => {\n                              const oddCount = (lst) => {\n                                const oddCount = (lst) => {\n                                  const oddCount = (lst) => {\n                                    const oddCount = (lst) => {\n                                      const oddCount = (lst) => {\n                                        const oddCount = (lst) => {\n                                          const oddCount = (lst) => {\n                                            const oddCount = (lst) => {\n                                              const oddCount = (lst) => {\n                                                const oddCount = (lst) => {\n                                                  const oddCount = (lst) => {\n                                                    const oddCount = (lst) => {\n                                                      const oddCount = (lst) => {\n                                                        const oddCount = (lst) => {\n                                                          const oddCount = (lst) => {\n                                                           const oddCount = (lst) => {\n                                                            const oddCount = (lst) => {\n                                                              const oddCount = (lst) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return oddCount(lst)\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums.reduce((prev, curr) => prev + curr, 0)\n  let minSumIndex = 0\n  let minSumIndex2 = 0\n  let minSumIndex3 = 0\n  let minSumIndex4 = 0\n  let minSumIndex5 = 0\n  let minSumIndex6 = 0\n  let minSumIndex7 = 0\n  let minSumIndex8 = 0\n  let minSumIndex9 = 0\n  let minSumIndex10 = 0\n  let minSumIndex11 = 0\n  let minSumIndex12 = 0\n  let minSumIndex13 = 0\n  let minSumIndex14 = 0\n  let minSumIndex15 = 0\n  let minSumIndex16 = 0\n  let minSumIndex17 = 0\n  let minSumIndex18 = 0\n  let minSumIndex19 = 0\n  let minSumIndex20 = 0\n  let minSumIndex21 = 0\n  let minSumIndex22 = 0\n  let minSumIndex23 = 0\n  let minSumIndex24 = 0\n  let minSumIndex25 = 0\n  let minSumIndex26 = 0\n  let minSumIndex27 = 0\n  let minSumIndex28 = 0\n  let minSumIndex29 = 0\n  let minSumIndex30 = 0\n  let minSumIndex31 = 0\n  let minSumIndex32 = 0\n  let minSumIndex33 = 0\n  let minSumIndex34 = 0\n  let minSumIndex35 = 0\n  let minSumIndex36 = 0\n  let minSumIndex37 = 0\n  let minSumIndex38 = 0\n  let minSumIndex39 = 0\n  let minSumIndex40 = 0\n  let minSumIndex41 = 0\n  let minSumIndex42 = 0\n  let minSumIndex43 = 0\n  let minSumIndex44 = 0\n  let minSumIndex45 = 0\n  let minSumIndex46 = 0\n  let minSumIndex47 = 0\n  let minSumIndex48 = 0\n  let minSumIndex49 = 0\n  let minSumIndex50 = 0\n  let minSumIndex51 = 0\n  let minSumIndex52 = 0\n  let minSumIndex53 = 0\n  let minSumIndex54 = 0\n  let minSumIndex55 = 0\n  let minSumIndex56 = 0\n  let minSumIndex57 = 0\n  let minSumIndex58 = 0\n  let minSumIndex59 = 0\n  let minSumIndex60 = 0\n  let minSumIndex61 = 0\n  let minSumIndex62 = 0\n  let minSumIndex63 = 0\n  let minSumIndex64 = 0\n  let minSumIndex65 = 0\n  let minSumIndex66 = 0\n  let minSumIndex67 = 0\n  let minSumIndex68 = 0\n  let minSumIndex69 = 0\n  let minSumIndex70 = 0\n  let minSumIndex71 = 0\n  let minSumIndex72 = 0\n  let minSumIndex73 = 0\n  let minSumIndex74 = 0\n  let minSumIndex75 = 0\n  let minSumIndex76 = 0\n  let minSumIndex77 = 0\n  let minSumIndex78 = 0\n  let minSumIndex79 = 0\n  let minSumIndex80 = 0\n  let minSumIndex81 = 0\n  let minSumIndex82 = 0\n  let minSumIndex83 = 0\n  let minSumIndex84 = 0\n  let minSumIndex85 = 0\n  let minSumIndex86 = 0\n  let minSumIndex87 = 0\n  let minSumIndex88 = 0\n  let minSumIndex89 = 0\n  let minSumIndex90 = 0\n  let minSumIndex91 = 0\n  let minSumIndex92 = 0\n  let minSumIndex93 = 0\n  let minSumIndex94 = 0\n  let minSumIndex95 = 0\n  let minSumIndex96 = 0\n  let minSumIndex97 = 0\n  let minSumIndex98 = 0\n  let minSumIndex99 = 0\n  let minSumIndex100 = 0\n  let minSumIndex101 = 0\n  let minSumIndex102 = 0\n  let minSumIndex103 = 0\n  let minSumIndex104 = 0\n  let minSumIndex105 = 0\n  let minSumIndex106 = 0\n  let minSumIndex107 = 0\n  let minSumIndex108 = 0\n  let minSumIndex109 = 0\n  let minSumIndex110 = 0\n  let minSumIndex111 = 0\n  let minSumIndex112 = 0\n  let minSumIndex113 = 0\n  let minSumIndex114 = 0\n  let minSumIndex115 = 0\n  let minSumIndex116 = 0\n  let minSumIndex117 = 0\n  let minSumIndex118 = 0\n  let minSumIndex119 = 0\n  let minSumIndex120 = 0\n  let minSumIndex121 = 0\n  let minSumIndex122 = 0\n  let minSumIndex123 = 0\n  let minSumIndex124 = 0\n  let minSumIndex125 = 0\n  let minSumIndex126 = 0\n  let minSumIndex127 = 0\n  let minSumIndex128 = 0\n  let minSumIndex129 = 0\n  let minSumIndex130 = 0\n  let minSumIndex131 = 0\n  let minSumIndex132 = 0\n  let minSumIndex133 = 0\n  let minSumIndex134 = 0\n  let minSumIndex135 = 0\n  let minSumIndex136 = 0\n  let minSumIndex137 = 0\n  let minSumIndex138 = 0\n  let minSumIndex139 = 0\n  let minSumIndex140 = 0\n  let minSumIndex141 = 0\n  let minSumIndex142 = 0\n  let minSumIndex143 = 0\n  let minSumIndex144 = 0\n  let minSumIndex145 = 0\n  let minSumIndex146 = 0\n  let minSumIndex147 = 0\n  let minSumIndex148 = 0\n  let minSumIndex149 = 0\n  let minSumIndex150 = 0\n  let minSumIndex151 = 0\n  let minSumIndex152 = 0\n  let minSumIndex153 = 0\n  let minSumIndex154 = 0\n  let minSumIndex155 = 0\n  let minSumIndex156 = 0\n  let minSumIndex157 = 0\n  let minSumIndex158 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = new Array(rows).fill(0)\n  const buckets_used = new Array(rows).fill(0)\n  const buckets_left = new Array(rows).fill(0)\n  const buckets_left_used = new Array(rows).fill(0)\n  const buckets_left_left = new Array(rows).fill(0)\n  const buckets_left_left_used = new Array(rows).fill(0)\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i] += 1\n        buckets_used[i] += 1\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (buckets[i] > 0) {\n        buckets_left[i] += 1\n        buckets_left_used[i] += 1\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (buckets[i] > 0) {\n        buckets_left_left[i] += 1\n        buckets_left_left_used[i] += 1\n      }\n    }\n  }\n\n  let num = 0\n  for (let i = 0; i < rows; i++) {\n    if (buckets[i] > 0) {\n      num += Math.min(buckets_used[i], capacity)\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    if (buckets_left[i] > 0) {\n      num += Math.min(buckets_left_used[i], capacity)\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    if (buckets_left_left[i] > 0) {\n      num += Math.min(buckets_left_left_used[i], capacity)\n    }\n  }\n\n  return num\n}\n\nconst grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nconst capacity = 1\n\nconsole.log(numeral(grid, capacity))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    const aBits = a.toString(2).split('').reverse().join('');\n    const bBits = b.toString(2).split('').reverse().join('');\n    const aDecimal = parseInt(aBits, 2);\n    const bDecimal = parseInt(bBits, 2);\n    return aDecimal - bDecimal;\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const letters = s.split('');\n  let i = 0;\n  while (i < letters.length) {\n    const word = letters.slice(i, i + n).join('');\n    if (word.length > 0) {\n      words.push(word", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestVowelIndex = -1;\n  const wordLength = word.length;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i];\n    const vowelIndex = vowels.indexOf(vowel);\n    if (vowelIndex!== -1) {\n      const consonant = word[i + 1];\n      const consonantIndex = consonants.indexOf(consonant);\n      if (consonantIndex!== -1) {\n        const distance = Math.abs(vowelIndex - consonantIndex);\n        if (distance < closestVowelIndex) {\n          closestVowel = vowel;\n          closestVowelIndex = distance;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result.push(lst[i])\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  return result.length === 0\n}\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['())', ')']));\nconsole.log(matchParens(['())', ')()']));\nconsole.log(matchParens(['())', ')()']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK2 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK3 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK4 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK5 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK6 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK7 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK8 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK9 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK10 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK11 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK12 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK13 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK14 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK15 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK16 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK17 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(sorted[i]);\n    i++;\n  }\n  return result;\n};\n\nconst maximumK18 = (arr, k) => {\n  const sorted = arr.slice().sort();\n  const result = [];\n  let i = 0;\n  while (i < k) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((acc, x) => acc + (x % 2 === 0? x : 0), 0);\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  let sum = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz2 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz3 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz4 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz5 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz6 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz7 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz8 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz9 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz10 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz11 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz12 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz13 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz14 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz15 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz16 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count <= n) {\n    if (count % 2 === 1) {\n      list.push(count);\n    }\n    count = count * 3 + 1;\n  }\n  return list;\n};\n\nconst getOddCollatz17 = (n) => {\n  let list = [];\n  let count = 1;\n  while (count", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = new Date(year, month - 1, day);\n  const daysInMonth = days.getDate();\n  const daysInYear = days.getMonth() + 1;\n  const daysInMonthMax = 31;\n  const daysInYearMax = daysInMonthMax + 1;\n  const daysInMonthMin = 1;\n  const daysInYearMin = 1;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < daysInMonthMin || day > daysInMonthMax) {\n    return false;\n  }\n  if (month == 2 && day > daysInYearMax) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > daysInYearMax) {\n      return false;\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day > daysInYearMax) {\n      return false;\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day < daysInYearMin) {\n      return false;\n    }\n  }\n  if (day > 29) {\n    return false;\n  }\n  if (month == 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords23 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords24 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords25 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords26 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords27 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n}\n\nconst splitWords28 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => a - b);\n    return sorted === lst;\n  };\n  return isSorted(lst);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted === lst;\n};\n\nconst isSorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2) {\n    return \"NO\"\n  }\n  if (start2 > end1) {\n    return \"NO\"\n  }\n  if (start1 === end2) {\n    return \"YES\"\n  }\n  if (start1 === start2) {\n    return \"YES\"\n  }\n  if (start1 === end1) {\n    return \"YES\"\n  }\n  if (start2 === end1) {\n    return \"YES\"\n  }\n  if (start1 === start2) {\n    return \"YES\"\n  }\n  if (start1 === end2) {\n    return \"YES\"\n  }\n  if (start2 === end1) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconst isPrime = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (number) => {\n  if (number === 1) {\n    return false\n  }\n  if (number === 2) {\n    return true\n  }\n  if (number %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n\n  const arrLen = arr.length;\n  let product = 1;\n  let sum = 0;\n\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i];\n    }\n  }\n\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] > 0) {\n      product *= arr[i];\n    } else if (arr[i] < 0) {\n      product *= -arr[i];\n    }\n  }\n\n  return sum * product;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n).fill(0);\n  const visited = new Array(n).fill(0);\n  const dp_min = new Array(n).fill(0);\n  const dp_min_index = new Array(n).fill(0);\n  const dp_min_value = new Array(n).fill(0);\n  const dp_min_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = new Array(n).fill(0);\n  const dp_min_value_index_value_index_value_index_value_index_value_index_value_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a % b === 0) {\n    return b;\n  }\n  return greatestCommonDivisor(a % b, b);\n};\n\n/* Return a least common multiple of two integers integer a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the number of primes less than integer n\n  >>> numberOfPrimes(10)\n  4\n  >>> numberOfPrimes(100)\n  10\n  >>> numberOfPrimes(1000)\n  10\n  >>> numberOfPrimes(10000)\n  10\n  >>> numberOfPrimes(100000)\n  10\n  >>> numberOfPrimes(1000000)\n  10\n  >>> numberOfPrimes(10000000)\n  10\n  >>> numberOfPrimes(100000000)\n  10\n  >>> numberOfPrimes(1000000000)\n  10\n  >>> numberOfPrimes(10000000000)\n  10\n  >>> numberOfPrimes(100000000000)\n  10\n  >>> numberOfPrimes(1000000000000)\n  10\n  >>> numberOfPrimes(10000000000000)\n  10\n  >>> numberOfPrimes(100000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPrimes(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  10\n  >>> numberOfPr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  for (let i = 1; i <= n; i++) {\n    tri.push(1);\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2]);\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n    }\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i < n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n  const valid = /^\\[\\[\\]\\]$/;\n  const validNested = /^\\[\\[\\]\\]$/;\n  const validNested2 = /^\\[\\[\\]\\]$/;\n  const validNested3 = /^\\[\\[\\]\\]$/;\n  const validNested4 = /^\\[\\[\\]\\]$/;\n  const validNested5 = /^\\[\\[\\]\\]$/;\n  const validNested6 = /^\\[\\[\\]\\]$/;\n  const validNested7 = /^\\[\\[\\]\\]$/;\n  const validNested8 = /^\\[\\[\\]\\]$/;\n  const validNested9 = /^\\[\\[\\]\\]$/;\n  const validNested10 = /^\\[\\[\\]\\]$/;\n  const validNested11 = /^\\[\\[\\]\\]$/;\n  const validNested12 = /^\\[\\[\\]\\]$/;\n  const validNested13 = /^\\[\\[\\]\\]$/;\n  const validNested14 = /^\\[\\[\\]\\]$/;\n  const validNested15 = /^\\[\\[\\]\\]$/;\n  const validNested16 = /^\\[\\[\\]\\]$/;\n  const validNested17 = /^\\[\\[\\]\\]$/;\n  const validNested18 = /^\\[\\[\\]\\]$/;\n  const validNested19 = /^\\[\\[\\]\\]$/;\n  const validNested20 = /^\\[\\[\\]\\]$/;\n  const validNested21 = /^\\[\\[\\]\\]$/;\n  const validNested22 = /^\\[\\[\\]\\]$/;\n  const validNested23 = /^\\[\\[\\]\\]$/;\n  const validNested24 = /^\\[\\[\\]\\]$/;\n  const validNested25 = /^\\[\\[\\]\\]$/;\n  const validNested26 = /^\\[\\[\\]\\]$/;\n  const validNested27 = /^\\[\\[\\]\\]$/;\n  const validNested28 = /^\\[\\[\\]\\]$/;\n  const validNested29 = /^\\[\\[\\]\\]$/;\n  const validNested30 = /^\\[\\[\\]\\]$/;\n  const validNested31 = /^\\[\\[\\]\\]$/;\n  const validNested32 = /^\\[\\[\\]\\]$/;\n  const validNested33 = /^\\[\\[\\]\\]$/;\n  const validNested34 = /^\\[\\[\\]\\]$/;\n  const validNested35 = /^\\[\\[\\]\\]$/;\n  const validNested36 = /^\\[\\[\\]\\]$/;\n  const validNested37 = /^\\[\\[\\]\\]$/;\n  const validNested38 = /^\\[\\[\\]\\]$/;\n  const validNested39 = /^\\[\\[\\]\\]$/;\n  const validNested40 = /^\\[\\[\\]\\]$/;\n  const validNested41 = /^\\[\\[\\]\\]$/;\n  const validNested42 = /^\\[\\[\\]\\]$/;\n  const validNested43 = /^\\[\\[\\]\\]$/;\n  const validNested44 = /^\\[\\[\\]\\]$/;\n  const validNested45 = /^\\[\\[\\]\\]$/;\n  const validNested46 = /^\\[\\[\\]\\]$/;\n  const validNested47 = /^\\[\\[\\]\\]$/;\n  const validNested48 = /^\\[\\[\\]\\]$/;\n  const validNested49 = /^\\[\\[\\]\\]$/;\n  const validNested50 = /^\\[\\[\\]\\]$/;\n  const validNested51 = /^\\[\\[\\]\\]$/;\n  const validNested52 = /^\\[\\[\\]\\]$/;\n  const validNested53 = /^\\[\\[\\]\\]$/;\n  const validNested54 = /^\\[\\[\\]\\]$/;\n  const validNested55 = /^\\[\\[\\]\\]$/;\n  const validNested56 = /^\\[\\[\\]\\]$/;\n  const validNested57 = /^\\[\\[\\]\\]$/;\n  const validNested58 = /^\\[\\[\\]\\]$/;\n  const validNested59 = /^\\[\\[\\]\\]$/;\n  const validNested60 = /^\\[\\[\\]\\]$/;\n  const validNested61 = /^\\[\\[\\]\\]$/;\n  const validNested62 = /^\\[\\[\\]\\]$/;\n  const validNested63 = /^\\[\\[\\]\\]$/;\n  const validNested64 = /^\\[\\[\\]\\]$/;\n  const valid", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const squaredSum = lst.reduce((a, b) => a + b * b, 0);\n  return squaredSum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isALetter && isNotALetter\n}\n\n/*\n  Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a letter and is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length\n  const arrCopy = arr.slice()\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arrLength; i++) {\n    const current = arr[i]\n    const index = arrCopy.indexOf(current)\n    if (index === -1) {\n      return -1\n    }\n    if (index > max) {\n      max = index\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Create a function which returns the largest bombastic index exponent of an element which \n  is not greater than or equal adequate to the element immediately preceding it. If \n  no such element chemical element exists then return -1. The given array will not contain \n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  const arrLength = arr.length\n  const arrCopy = arr.slice()\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arrLength; i++) {\n    const current = arr[i]\n    const index = arrCopy.indexOf(current)\n    if (index === -1) {\n      return -1\n    }\n    if (index > max) {\n      max = index\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Create a function which returns the largest bombastic index exponent of an element which \n  is not greater than or equal adequate to the element immediately preceding it. If \n  no such element chemical element exists then return -1. The given array will not contain \n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  const arrLength = arr.length\n  const arrCopy = arr.slice()\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arrLength; i++) {\n    const current = arr[i]\n    const index = arrCopy.indexOf(current)\n    if (index === -1) {\n      return -1\n    }\n    if (index > max) {\n      max = index\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Create a function which returns the largest bombastic index exponent of an element which \n  is not greater than or equal adequate to the element immediately preceding it. If \n  no such element chemical element exists then return -1. The given array will not contain \n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  const arrLength = arr.length\n  const arrCopy = arr.slice()\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arrLength; i++) {\n    const current = arr[i]\n    const index = arrCopy.indexOf(current)\n    if (index === -1) {\n      return -1\n    }\n    if (index > max) {\n      max = index\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Create a function which returns the largest bombastic index exponent of an element which \n  is not greater than or equal adequate to the element immediately preceding it. If \n  no such element chemical element exists then return -1. The given array will not contain \n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  const arrLength = arr.length\n  const arrCopy = arr.slice()\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arrLength; i++) {\n    const current = arr[i]\n    const index = arrCopy.indexOf(current)\n    if (index === -1) {\n      return -1\n    }\n    if (index > max) {\n      max = index\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Create a function which returns the largest bombastic index exponent of an element which \n  is not greater than or equal adequate to the element immediately preceding it. If \n  no such element chemical element exists then return -1. The given array will not contain \n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  const arrLength = arr.length\n  const arrCopy = arr.slice()\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < arrLength; i++) {\n    const current = arr[i]\n    const index = arrCopy.indexOf(current)\n    if (index === -1) {\n      return -1\n    }\n    if (index > max) {\n      max = index\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  Create a function which returns the largest bombastic index exponent of an element which \n  is not greater than or equal adequate to the element immediately preceding it. If \n  no such element chemical element exists then return -1. The given array will not contain \n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst)\n  const smallest = smallestSmallest(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallest(lst)\n  }\n  return largestSmallest(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallest = (lst) => {\n  const largest = largest(lst)\n  const smallest = smallest(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallest(lst)\n  }\n  return largestSmallest(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largest = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  return largest(lst.slice(1))\n}\n\nconst smallest = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  return smallest(lst.slice(1))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallestIntegers(lst)\n  }\n  return largestSmallestIntegers(lst.filter(x => x!== largest && x!== smallest))\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst)\n  const smallest = smallestSmallestIntegers(lst)\n  if (largest === null || smallest === null", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// compareTwo(1, 2.5) ➞ 2.5 \n// compareTwo(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareTwo(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareTwo(\"1\", 1) ➞ null nothing \nconst compareTwo = (a, b) = > {\n  if (a < b) {\n    return b;\n  } else {\n    return a;\n  }\n}\n\n// compareThree(1, 2.5) ➞ 2.5 \n// compareThree(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareThree(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareThree(\"1\", 1) ➞ null nothing \nconst compareThree = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// compareFour(1, 2.5) ➞ 2.5 \n// compareFour(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareFour(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareFour(\"1\", 1) ➞ null nothing \nconst compareFour = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else {\n    return a;\n  }\n}\n\n// compareFive(1, 2.5) ➞ 2.5 \n// compareFive(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareFive(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareFive(\"1\", 1) ➞ null nothing \nconst compareFive = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// compareSix(1, 2.5) ➞ 2.5 \n// compareSix(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareSix(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareSix(\"1\", 1) ➞ null nothing \nconst compareSix = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// compareSeven(1, 2.5) ➞ 2.5 \n// compareSeven(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareSeven(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareSeven(\"1\", 1) ➞ null nothing \nconst compareSeven = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// compareEight(1, 2.5) ➞ 2.5 \n// compareEight(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareEight(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareEight(\"1\", 1) ➞ null nothing \nconst compareEight = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// compareNine(1, 2.5) ➞ 2.5 \n// compareNine(1, \" 2,3 \") ➞ \" 2,3 \" \n// compareNine(\"5,1\", \" 6 \") ➞ \" 6 \" \n// compareNine(\"1\", 1) ➞ null nothing \nconst compareNine = (a, b) = > {\n  if (a < b) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 5 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 6 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 7 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 8 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 9 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 10 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(20) == false\n  */\nconst isEqualToSumEven10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 11 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumEven11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 12 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(20) == true\n  isEqualToSumEven(22) == true\n  isEqualToSumEven(24) == false\n  */\nconst isEqualToSumEven12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum +=", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial = factorial * i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial20", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = 0; i < string.length; i++) {\n    prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = ''\n  for (let i = 0; i < string.length; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suff", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '_')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces2 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re,'')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces3 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '-')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces4 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '_')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces5 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '-')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces6 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '_')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces7 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '-')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces8 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '_')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces9 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '-')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces10 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '_')\n}\n\n/*\n  Given a string text, replace all back-to-back spaces with a single space, \n   and if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d{1,3}[a-zA-Z]\\d", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordLengths = words.map(word => word.length)\n  const primes = primes(wordLengths)\n  const wordLengthsPrime = wordLengths.filter(x => primes.indexOf(x)!== -1)\n  const wordLengthsPrimeSorted = wordLengthsPrime.sort((a, b) => a - b)\n  const wordLengthsPrimeSortedString = wordLengthsPrimeSorted.join(' ')\n  const wordLengthsPrimeSortedStringReversed = wordLengthsPrimeSortedString.split(' ').reverse().join(' ')\n  return wordLengthsPrimeSortedStringReversed\n}\n\nconst primes = (numbers) => {\n  const primes = []\n  for (let i = 2; i < numbers.length; i++) {\n    if (numbers.indexOf(i) === -1) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst test = () => {\n  const sentence = \"This is a test\"\n  console.log(wordsInSentence(sentence))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n   let x = x.toString();\n   let n = n.toString();\n   let x_len = x.length;\n   let n_len = n.length;\n   let x_num = parseInt(x.slice(0, x_len - n_len));\n   let x_den = parseInt(x.slice(x_len - n_len));\n   let n_num = parseInt(n.slice(0, n_len - x_len));\n   let n_den = parseInt(n.slice(n_len - x_len));\n   if (x_num === n_num && x_den === n_den) {\n     return true;\n   } else {\n     return false;\n   }\n }\n */\n\nfunction simplify(x, n) {\n  let x_len = x.length;\n  let n_len = n.length;\n  let x_num = parseInt(x.slice(0, x_len - n_len));\n  let x_den = parseInt(x.slice(x_len - n_len));\n  let n_num = parseInt(n.slice(0, n_len - x_len));\n  let n_den = parseInt(n.slice(n_len - x_len));\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sortedDigits;\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedPoints = sorted.map(x => x * 10);\n  const sortedDigits = sortedPoints.map(x => x.toString().split('').reverse().join(''));\n  return sorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = a.reduce((acc, curr, i) => {\n    const j = i + 1\n    const k = n - 1\n    const sum = curr + a[j] + a[k]\n    if (sum % 3 === 0) {\n      acc.push([curr, a[j], a[k]])\n    }\n    return acc\n  }, [])\n  return result.length\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitSphere = sphere(planet1Orbit);\n  const planet2OrbitSphere = sphere(planet2Orbit);\n  const planet1OrbitSphereIntersect = intersect(planet1OrbitSphere, planet2OrbitSphere);\n  const planet1OrbitSphereIntersectSphere = sphere(planet1OrbitSphereIntersect);\n  const planet2OrbitSphereIntersectSphere = sphere(planet2OrbitSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersect = intersect(planet1OrbitSphereIntersectSphere, planet2OrbitSphereIntersectSphere);\n  const planet1OrbitSphereIntersectSphereIntersectSphere = sphere(planet1OrbitSphereIntersectSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersect = intersect(planet1OrbitSphereIntersectSphereIntersectSphere, planet2OrbitSphereIntersectSphereIntersectSphere);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphere = sphere(planet1OrbitSphereIntersectSphereIntersectSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersect = intersect(planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphere, planet2OrbitSphereIntersectSphereIntersectSphereIntersectSphere);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphere = sphere(planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect = intersect(planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphere, planet2OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphere);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect = sphere(planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect = intersect(planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphere, planet2OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect = sphere(planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersect);\n  const planet1OrbitSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereIntersectSphereInter", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_2 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_3 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_4 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_5 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_6 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_7 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_8 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_9 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_10 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.reduce((a, b) => a + b, 0);\n  return sortedList.filter(x => x.length % 2 === 0);\n};\n\nconst list_sort_11 = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return -1;\n    return 0;\n  });\n  const sum = sortedList.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','')\n  '0'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} ${i} ${delimiter2} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','','')\n  '0'\n  >>> stringSequence(5, '-','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} ${i} ${delimiter2} ${i} ${delimiter3} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','','','')\n  '0'\n  >>> stringSequence(5, '-','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} ${i} ${delimiter2} ${i} ${delimiter3} ${i} ${delimiter4} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} ${i} ${delimiter2} ${i} ${delimiter3} ${i} ${delimiter4} ${i} ${delimiter5} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} ${i} ${delimiter2} ${i} ${delimiter3} ${i} ${delimiter4} ${i} ${delimiter5} ${i} ${delimiter6} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','','','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6, delimiter7) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${delimiter} ${i} ${delimiter2} ${i} ${delimiter3} ${i} ${delimiter4} ${i} ${delimiter5} ${i} ${delimiter6} ${i} ${delimiter7} `;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, '-','','','','','','','')\n  '0'\n  >>> stringSequence(5, '-','','','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6, delimiter7, delimiter8) => {\n  let str = '';\n  for (let i = 0; i < n; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   for (let i = 0; i < lst.length; i++) {\n     let num = lst[i]\n     if (num % 2) {\n       sum += num * num\n     }\n   }\n   return sum\n }\n */\n\nfunction doubleTheDifference(lst) {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 2) {\n      sum += num * num\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare2 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare3 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare4 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare5 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare6 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare7 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare8 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare9 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare10 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\nconst compare11 = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, 0);\n  return class_name + '.' + extensions[0].substr(0, strength);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.toLowerCase()\n   let b = b.toLowerCase()\n   let a_len = a.length\n   let b_len = b.length\n   let i = 0\n   let j = 0\n   while (i < a_len && j < b_len) {\n     if (a[i] === b[j]) {\n       i++\n       j++\n     } else {\n       if (a[i] === b[j]) {\n         i++\n       } else {\n         j++\n       }\n     }\n   }\n   if (i === a_len && j === b_len) {\n     return true\n   }\n   return false\n }\n*/\n\n/*\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst cycpatternCheck = (a, b) => {\n  let a_len = a.length\n  let b_len = b.length\n  let i = 0\n  let j = 0\n  while (i < a_len && j < b_len) {\n    if (a[i] === b[j]) {\n      i++\n      j++\n    } else {\n      if (a[i] === b[j]) {\n        i++\n      } else {\n        j++\n      }\n    }\n  }\n  if (i === a_len && j === b_len) {\n    return true\n  }\n  return false\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"))\nconsole.log(cycpatternCheck(\"hello\",\"ell\"))\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"))\nconsole.log(cycpatternCheck(\"abab\",\"baa\"))\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"))\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount2 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount3 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount4 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount5 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount6 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount7 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount8 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount9 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount10 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount11 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount12 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount13 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount14 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount15 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount16 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst evenOddCount17 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let roman = '',\n        n = number,\n        i = 1;\n\n    while (n > 0) {\n        if (n >= i * 10) {\n            roman += i * 10;\n            n -= i * 10;\n        } else if (n >= i * 5) {\n            roman += i * 5;\n            n -= i * 5;\n        } else if (n >= i) {\n            roman += i;\n            n -= i;\n        } else if (n >= i / 2) {\n            roman += i / 2;\n            n -= i / 2;\n        } else {\n            roman += 'i';\n            n--;\n        }\n        i++;\n    }\n\n    return roman;\n};\n\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (a / b)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (b / c)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (c / a)) - Math.PI / 3) < 0.001);\n};\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (a / b)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (b / c)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (c / a)) - Math.PI / 3) < 0.001);\n};\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (a / b)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (b / c)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (c / a)) - Math.PI / 3) < 0.001);\n};\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (a / b)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (b / c)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (c / a)) - Math.PI / 3) < 0.001);\n};\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (a / b)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (b / c)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (c / a)) - Math.PI / 3) < 0.001);\n};\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (a / b)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (b / c)) - Math.PI / 3) < 0.001) &&\n    (Math.abs(Math.acos(Math.cos(Math.PI / 3) * (c / a)) - Math.PI / 3) < 0.001);\n};\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const max = words.length\n   const maxUnique = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUniqueChar = words.length\n   const maxUnique", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining];\n  }\n  const eaten = number - need;\n  const left = remaining - eaten;\n  return [eaten, left];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operator", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(0, index));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    const index = num.indexOf('.');\n    if (index!== -1) {\n      result.push(num.substring(index + 1));\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole note, lasts four beats meter \n  ' o|' - half note bill, lasts two beats pulse \n  ' .|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string bowled stringed instrument representing exemplify musical notes in a special particular ASCII format. \n  Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n  not last. \n\n  Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string bowled stringed instrument representing exemplify musical notes in a special particular ASCII format. \n  Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n  not last. \n\n  Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string bowled stringed instrument representing exemplify musical notes in a special particular ASCII format. \n  Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n  not last. \n\n  Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string bowled stringed instrument representing exemplify musical notes in a special particular ASCII format. \n  Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n  not last. \n\n  Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string bowled stringed instrument representing exemplify musical notes in a special particular ASCII format. \n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return a new string with all the characters in lowercase.\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('aBc')\n  'abc'\n  >>> toLowerCase('A')\n  'a'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a new string with all the characters in uppercase.\n  >>> toUpperCase('abc')\n  'ABC'\n  >>> toUpperCase('aBc')\n  'ABC'\n  >>> toUpperCase('A')\n  'A'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a new string with all the characters in title case.\n  >>> toTitleCase('abc')\n  'Abc'\n  >>> toTitleCase('aBc')\n  'Abc'\n  >>> toTitleCase('A')\n  'A'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/\\w\\S*/g, t => t.charAt(0).toUpperCase() + t.substr(1).toLowerCase());\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords2 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords3 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords4 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords5 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords6 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords7 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords8 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords9 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords10 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers('nine two five')\n  'five two nine'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers2('nine two five')\n  'five two nine'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers3('nine two five')\n  'five two nine'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers4('nine two five')\n  'five two nine'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers5('nine two five')\n  'five two nine'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers6('nine two five')\n  'five two nine'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited demarcate string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers7('nine two five')\n  'five two nine'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    if (a < b) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateInt(3.5)\n  3\n  */\nconst truncateDec = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec(3.5)\n  3\n  */\nconst truncateDec2 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec2(3.5)\n  3\n  */\nconst truncateDec3 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec3(3.5)\n  3\n  */\nconst truncateDec4 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec4(3.5)\n  3\n  */\nconst truncateDec5 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec5(3.5)\n  3\n  */\nconst truncateDec6 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec6(3.5)\n  3\n  */\nconst truncateDec7 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec7(3.5)\n  3\n  */\nconst truncateDec8 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec8(3.5)\n  3\n  */\nconst truncateDec9 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateDec9(3.5)\n  3\n  */\nconst truncateDec10 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart;\n};\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestElements = [];\n  const closestElementsLength = 2;\n  const closestElementsIndex = 0;\n  const closestElementsDistance = Number.MAX_VALUE;\n  const closestElementsNumber = 0;\n  const closestElementsNumberLength = 0;\n  const closestElementsNumberIndex = 0;\n  const closestElementsNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberNumber = 0;\n  const closestElementsNumberNumberLength = 0;\n  const closestElementsNumberNumberIndex = 0;\n  const closestElementsNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistance = Number.MAX_VALUE;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberLength = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberIndex = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumber = 0;\n  const closestElementsNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistanceNumberDistance", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlaceInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlaceInPlaceInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlaceInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(number => number - min)\n   .map(number => number / max)\n   .map(number => number * max)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNone = (values) => {\n  return values.filter(v => v);\n};\n\n/**\n  * Filter given list of any python values only for integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneFloats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNoneIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNoneFloats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNoneStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNoneBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNoneLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneNoneDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return a new string with the given character at the given index\n  >>> strinsert('abc', 1, 'd')\n  'adc'\n  >>> strinsert('abc', 1, 'd', 0)\n  'adc'\n  >>> strinsert('abc', 1, 'd', 1)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 2)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 3)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 4)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 5)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 6)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 7)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 8)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 9)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 10)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 11)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 12)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 13)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 14)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 15)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 16)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 17)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 18)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 19)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 20)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 21)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 22)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 23)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 24)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 25)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 26)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 27)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 28)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 29)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 30)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 31)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 32)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 33)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 34)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 35)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 36)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 37)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 38)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 39)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 40)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 41)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 42)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 43)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 44)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 45)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 46)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 47)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 48)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 49)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 50)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 51)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 52)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 53)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 54)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 55)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 56)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 57)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 58)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 59)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 60)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 61)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 62)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 63)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 64)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 65)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 66)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 67)\n  'abcd'\n  >>> strinsert('abc', 1, 'd', 68)\n  'abcd'\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\nconsole.log(largestDivisor(15));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest small. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeSmall = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest small. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseSmall = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest small. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeSmallReverse = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest small. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseSmallReverse = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest small. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeSmallReverse = (n) => {\n  let factors = []\n  let factor = 1\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest small. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverseSmall = (n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return [unique, duplicates];\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that start originate with a given render prefix.\nconst filterByPrefix =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length\n  let i = 0\n  let j = 0\n  let currentOperation = 0\n  let currentOperationValue = 0\n  let currentOperationBalance = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue = 0\n  let currentOperationBalanceValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([2, 4, 6, 8])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of prime numbers less than or equal to n.\n  >>> countPrimes(1)\n  1\n  >>> countPrimes(2)\n  2\n  >>> countPrimes(3)\n  3\n  >>> countPrimes(4)\n  2\n  >>> countPrimes(5)\n  3\n  >>> countPrimes(6)\n  3\n  >>> countPrimes(7)\n  4\n  >>> countPrimes(8)\n  4\n  >>> countPrimes(9)\n  5\n  >>> countPrimes(10)\n  5\n  >>> countPrimes(11)\n  6\n  >>> countPrimes(12)\n  6\n  >>> countPrimes(13)\n  7\n  >>> countPrimes(14)\n  7\n  >>> countPrimes(15)\n  8\n  >>> countPrimes(16)\n  8\n  >>> countPrimes(17)\n  9\n  >>> countPrimes(18)\n  9\n  >>> countPrimes(19)\n  10\n  >>> countPrimes(20)\n  10\n  >>> countPrimes(21)\n  11\n  >>> countPrimes(22)\n  11\n  >>> countPrimes(23)\n  12\n  >>> countPrimes(24)\n  12\n  >>> countPrimes(25)\n  13\n  >>> countPrimes(26)\n  13\n  >>> countPrimes(27)\n  14\n  >>> countPrimes(28)\n  14\n  >>> countPrimes(29)\n  15\n  >>> countPrimes(30)\n  15\n  >>> countPrimes(31)\n  16\n  >>> countPrimes(32)\n  16\n  >>> countPrimes(33)\n  17\n  >>> countPrimes(34)\n  17\n  >>> countPrimes(35)\n  18\n  >>> countPrimes(36)\n  18\n  >>> countPrimes(37)\n  19\n  >>> countPrimes(38)\n  19\n  >>> countPrimes(39)\n  20\n  >>> countPrimes(40)\n  20\n  >>> countPrimes(41)\n  21\n  >>> countPrimes(42)\n  21\n  >>> countPrimes(43)\n  22\n  >>> countPrimes(44)\n  22\n  >>> countPrimes(45)\n  23\n  >>> countPrimes(46)\n  23\n  >>> countPrimes(47)\n  24\n  >>> countPrimes(48)\n  24\n  >>> countPrimes(49)\n  25\n  >>> countPrimes(50)\n  25\n  >>> countPrimes(51)\n  26\n  >>> countPrimes(52)\n  26\n  >>> countPrimes(53)\n  27\n  >>> countPrimes(54)\n  27\n  >>> countPrimes(55)\n  28\n  >>> countPrimes(56)\n  28\n  >>> countPrimes(57)\n  29\n  >>> countPrimes(58)\n  29\n  >>> countPrimes(59)\n  30\n  >>> countPrimes(60)\n  30\n  >>> countPrimes(61)\n  31\n  >>> countPrimes(62)\n  31\n  >>> countPrimes(63)\n  32\n  >>> countPrimes(64)\n  32\n  >>> countPrimes(65)\n  33\n  >>> countPrimes(66)\n  33\n  >>> countPrimes(67)\n  34\n  >>> countPrimes(68)\n  34\n  >>> countPrimes(69)\n  35\n  >>> countPrimes(70)\n  35\n  >>> countPrimes(71)\n  36\n  >>> countPrimes(72)\n  36\n  >>> countPrimes(73)\n  37\n  >>> countPrimes(74)\n  37\n  >>> countPrimes(75)\n  38\n  >>> countPrimes(76)\n  38\n  >>> countPrimes(77)\n  39\n  >>> countPrimes(78)\n  39\n  >>> countPrimes(79)\n  40\n  >>> countPrimes(80)\n  40\n  >>> countPrimes(81)\n  41\n  >>> countPrimes(82)\n  41\n  >>> countPrimes(83)\n  42\n  >>> countPrimes(84)\n  42\n  >>> countPrimes(85)\n  43\n  >>> countPrimes(86)\n  43\n  >>> countPrimes(87)\n  44\n  >>> countPrimes(88)\n  44\n  >>> countPrimes(89)\n  45\n  >>> countPrimes(90)\n  45\n  >>> countPrimes(91)\n  46\n  >>> countPrimes(92)\n  46\n  >>> countPrimes(93)\n  47\n  >>> countPrimes(94)\n  47\n  >>> countPrimes(95)\n  48\n  >>> countPrimes(96)\n  48\n  >>> countPrimes(97)\n  49\n  >>> countPrimes(98)\n  49\n  >>> countPrimes(99)\n  50\n  >>> countPrimes(100)\n  50\n  >>> countPrimes(101)\n  51\n  >>> countPrimes(102)\n  51\n  >>> countPrimes(103)\n  52\n  >>> countPrimes(104)\n  52\n  >>> countPrimes(105)\n  53\n  >>> countPrimes(106)\n  53\n  >>> countPrimes(107)\n  54\n  >>> countPrimes(108)\n  54\n  >>> countPrimes(109)\n  55\n  >>> countPrimes(110)\n  55\n  >>> countPrimes(111)\n  56\n  >>> countPr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const n = len - 1\n  const poly = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly2 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly3 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly4 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly5 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly6 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly7 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly8 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly9 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly10 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly11 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly12 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly13 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly14 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly15 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly16 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly17 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly18 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly19 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly20 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly21 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly22 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const poly23 = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sortedIndex = []\n  const index = 0\n  const length = l.length\n  const divisor = 3\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor === 0) {\n      sortedIndex.push(index)\n    }\n    index++\n  }\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor!== 0) {\n      sorted.push(l[i])\n    }\n  }\n  sorted.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndex.length; i++) {\n    sorted[sortedIndex[i]] = l[sortedIndex[i]]\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by five, while its values value at the indicies that are divisible by five are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst sortFifth = (l) => {\n  const sorted = []\n  const sortedIndex = []\n  const index = 0\n  const length = l.length\n  const divisor = 5\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor === 0) {\n      sortedIndex.push(index)\n    }\n    index++\n  }\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor!== 0) {\n      sorted.push(l[i])\n    }\n  }\n  sorted.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndex.length; i++) {\n    sorted[sortedIndex[i]] = l[sortedIndex[i]]\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by seven, while its values value at the indicies that are divisible by seven are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortSeven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst sortSeven = (l) => {\n  const sorted = []\n  const sortedIndex = []\n  const index = 0\n  const length = l.length\n  const divisor = 7\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor === 0) {\n      sortedIndex.push(index)\n    }\n    index++\n  }\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor!== 0) {\n      sorted.push(l[i])\n    }\n  }\n  sorted.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndex.length; i++) {\n    sorted[sortedIndex[i]] = l[sortedIndex[i]]\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by eleven, while its values value at the indicies that are divisible by eleven are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortEleven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst sortEleven = (l) => {\n  const sorted = []\n  const sortedIndex = []\n  const index = 0\n  const length = l.length\n  const divisor = 11\n  for (let i = 0; i < length; i++) {\n    if (l[i] % divisor === 0) {\n      sortedIndex.push(index)\n    }\n    index++\n  }\n  for (let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKey = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValueValue = (l, key) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i][key]) === -1) {\n      uniqueList.push(l[i][key]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'key')\n  [0, 2, 3, 5, 9, 123", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(1);\n  const l4 = l.slice(2);\n  const l5 = l.slice(3);\n  const l6 = l.slice(4);\n  const l7 = l.slice(5);\n  const l8 = l.slice(6);\n  const l9 = l.slice(7);\n  const l10 = l.slice(8);\n  const l11 = l.slice(9);\n  const l12 = l.slice(10);\n  const l13 = l.slice(11);\n  const l14 = l.slice(12);\n  const l15 = l.slice(13);\n  const l16 = l.slice(14);\n  const l17 = l.slice(15);\n  const l18 = l.slice(16);\n  const l19 = l.slice(17);\n  const l20 = l.slice(18);\n  const l21 = l.slice(19);\n  const l22 = l.slice(20);\n  const l23 = l.slice(21);\n  const l24 = l.slice(22);\n  const l25 = l.slice(23);\n  const l26 = l.slice(24);\n  const l27 = l.slice(25);\n  const l28 = l.slice(26);\n  const l29 = l.slice(27);\n  const l30 = l.slice(28);\n  const l31 = l.slice(29);\n  const l32 = l.slice(30);\n  const l33 = l.slice(31);\n  const l34 = l.slice(32);\n  const l35 = l.slice(33);\n  const l36 = l.slice(34);\n  const l37 = l.slice(35);\n  const l38 = l.slice(36);\n  const l39 = l.slice(37);\n  const l40 = l.slice(38);\n  const l41 = l.slice(39);\n  const l42 = l.slice(40);\n  const l43 = l.slice(41);\n  const l44 = l.slice(42);\n  const l45 = l.slice(43);\n  const l46 = l.slice(44);\n  const l47 = l.slice(45);\n  const l48 = l.slice(46);\n  const l49 = l.slice(47);\n  const l50 = l.slice(48);\n  const l51 = l.slice(49);\n  const l52 = l.slice(50);\n  const l53 = l.slice(51);\n  const l54 = l.slice(52);\n  const l55 = l.slice(53);\n  const l56 = l.slice(54);\n  const l57 = l.slice(55);\n  const l58 = l.slice(56);\n  const l59 = l.slice(57);\n  const l60 = l.slice(58);\n  const l61 = l.slice(59);\n  const l62 = l.slice(60);\n  const l63 = l.slice(61);\n  const l64 = l.slice(62);\n  const l65 = l.slice(63);\n  const l66 = l.slice(64);\n  const l67 = l.slice(65);\n  const l68 = l.slice(66);\n  const l69 = l.slice(67);\n  const l70 = l.slice(68);\n  const l71 = l.slice(69);\n  const l72 = l.slice(70);\n  const l73 = l.slice(71);\n  const l74 = l.slice(72);\n  const l75 = l.slice(73);\n  const l76 = l.slice(74);\n  const l77 = l.slice(75);\n  const l78 = l.slice(76);\n  const l79 = l.slice(77);\n  const l80 = l.slice(78);\n  const l81 = l.slice(79);\n  const l82 = l.slice(80);\n  const l83 = l.slice(81);\n  const l84 = l.slice(82);\n  const l85 = l.slice(83);\n  const l86 = l.slice(84);\n  const l87 = l.slice(85);\n  const l88 = l.slice(86);\n  const l89 = l.slice(87);\n  const l90 = l.slice(88);\n  const l91 = l.slice(89);\n  const l92 = l.slice(90);\n  const l93 = l.slice(91);\n  const l94 = l.slice(92);\n  const l95 = l.slice(93);\n  const l96 = l.slice(94);\n  const l97 = l.slice(95);\n  const l98 = l.slice(96);\n  const l99 = l.slice(97);\n  const l100 = l.slice(98);\n  const l101 = l.slice(99);\n  const l102 = l.slice(100);\n  const l103 = l.slice(101);\n  const l104 = l.slice(102);\n  const l105 = l.slice(103);\n  const l106 = l.slice(104);\n  const l107 = l.slice(105);\n  const l108 = l.slice(106);\n  const l109 = l.slice(107);\n  const l110 = l.slice(108);\n  const l111 = l.slice(109);\n  const l112 = l.slice(110);\n  const l113 = l.slice(111);\n  const l114 = l.slice(112);\n  const l115 = l.slice(113);\n  const l116 = l.slice(114);\n  const l117 = l.slice(115);\n  const l118 = l.slice(116);\n  const l119 = l.slice(117);\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 2, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, AA = 1, BB = 1, CC = 1, DD = 1, EE = 1, FF = 1, GG = 1, HH = 1, II = 1, JJ = 1, KK = 1, LL = 1, MM = 1, NN = 1, OO = 1, PP = 1, QQ = 1, RR = 1, SS = 1, TT = 1, UU = 1, VV = 1, WW = 1, XX = 1, YY = 1, ZZ = 1, aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aa = 2, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aaa = 2, bbb = 1, ccc = 1, ddd = 1, eee = 1, fff = 1, ggg = 1, hhh = 1, iii = 1, jjj = 1, kkk = 1, lll = 1, mmm = 1, nnn = 1, ooo = 1, ppp = 1, qqq = 1, rrr = 1, sss = 1, ttt = 1, uuu = 1, vvv = 1, www = 1, xxx = 1, yyy = 1, zzz = 1;\n  let aaaa = 2, bbbb = 1, cccc = 1, dddd = 1, eeee = 1, ffff = 1, gggg = 1, hhhh = 1, iiii = 1, jjjj = 1, kkkk = 1, llll = 1, mmmm = 1, nnnn = 1, oooo = 1, pppp = 1, qqqq = 1, rrrr = 1, ssss = 1, tttt = 1, uuuu = 1, vvvv = 1, www = 1, xxxx = 1, yyyy = 1, zzzz = 1;\n  let aa = 2, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aa = 2, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aa = 2, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aa = 2, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aa = 2, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return median(mad);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared deviations from the mean. \n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return Math.sqrt(sum(squaredDeviations));\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. \n  Variance is the sum of the squared deviations from the mean divided by the number of elements. \n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return sum(squaredDeviations) / (numbers.length - 1);\n};\n\n/*\n  For a given list of input numbers, calculate the skewness of this dataset. \n  Skewness is the ratio of the standard deviation to the mean. \n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis of this dataset. \n  Kurtosis is the ratio of the variance to the mean squared. \n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return variance(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation of this dataset. \n  Coefficient of variation is the ratio of the standard deviation to the mean. \n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation of this dataset. \n  Coefficient of variation is the ratio of the standard deviation to the mean. \n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfCorrelation = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation of this dataset. \n  Coefficient of variation is the ratio of the standard deviation to the mean. \n  >>> coefficientOfCorrelation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfDissociation = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation of this dataset. \n  Coefficient of variation is the ratio of the standard deviation to the mean. \n  >>> coefficientOfDissociation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfEntropy = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation of this dataset. \n  Coefficient of variation", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero3 = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero4 = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero5 = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero6 = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero7 = (l) => {\n  const list = l.filter((x) => x > 0)\n  const sum = list.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== sum).length === 2;\n};\n\n/*\n  pairsSumToZero returns true if there are two distinct elements element in the list that sum to zero,\n   and false otherwise.\n  >>> pairsSumToZero", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.toUpperCase()\n  return stringed.split('').reverse().join('')\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  const numeral = x.toString(base)\n  const stringed = numeral.to", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    return modp(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*Return n^2 modulo p (be aware of numerics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  10\n  >>> modp2(0, 101)\n  0\n  >>> modp2(3, 11)\n  6\n  >>> modp2(100, 101)\n  0\n  */\nconst modp2 = (n, p) => {\n  if (n < 0) {\n    return modp2(-n, p)\n  }\n  return (n * n + p) % p\n}\n\n/*Return n^3 modulo p (be aware of numerics).\n  >>> modp3(3, 5)\n  12\n  >>> modp3(1101, 101)\n  13\n  >>> modp3(0, 101)\n  0\n  >>> modp3(3, 11)\n  6\n  >>> modp3(100, 101)\n  0\n  */\nconst modp3 = (n, p) => {\n  if (n < 0) {\n    return modp3(-n, p)\n  }\n  return (n * n * n + p) % p\n}\n\n/*Return n^4 modulo p (be aware of numerics).\n  >>> modp4(3, 5)\n  15\n  >>> modp4(1101, 101)\n  16\n  >>> modp4(0, 101)\n  0\n  >>> modp4(3, 11)\n  6\n  >>> modp4(100, 101)\n  0\n  */\nconst modp4 = (n, p) => {\n  if (n < 0) {\n    return modp4(-n, p)\n  }\n  return (n * n * n * n + p) % p\n}\n\n/*Return n^5 modulo p (be aware of numerics).\n  >>> modp5(3, 5)\n  20\n  >>> modp5(1101, 101)\n  21\n  >>> modp5(0, 101)\n  0\n  >>> modp5(3, 11)\n  6\n  >>> modp5(100, 101)\n  0\n  */\nconst modp5 = (n, p) => {\n  if (n < 0) {\n    return modp5(-n, p)\n  }\n  return (n * n * n * n * n + p) % p\n}\n\n/*Return n^6 modulo p (be aware of numerics).\n  >>> modp6(3, 5)\n  30\n  >>> modp6(1101, 101)\n  31\n  >>> modp6(0, 101)\n  0\n  >>> modp6(3, 11)\n  6\n  >>> modp6(100, 101)\n  0\n  */\nconst modp6 = (n, p) => {\n  if (n < 0) {\n    return modp6(-n, p)\n  }\n  return (n * n * n * n * n * n + p) % p\n}\n\n/*Return n^7 modulo p (be aware of numerics).\n  >>> modp7(3, 5)\n  42\n  >>> modp7(1101, 101)\n  43\n  >>> modp7(0, 101)\n  0\n  >>> modp7(3, 11)\n  6\n  >>> modp7(100, 101)\n  0\n  */\nconst modp7 = (n, p) => {\n  if (n < 0) {\n    return modp7(-n, p)\n  }\n  return (n * n * n * n * n * n * n + p) % p\n}\n\n/*Return n^8 modulo p (be aware of numerics).\n  >>> modp8(3, 5)\n  50\n  >>> modp8(1101, 101)\n  51\n  >>> modp8(0, 101)\n  0\n  >>> modp8(3, 11)\n  6\n  >>> modp8(100, 101)\n  0\n  */\nconst modp8 = (n, p) => {\n  if (n < 0) {\n    return modp8(-n, p)\n  }\n  return (n * n * n * n * n * n * n * n + p) % p\n}\n\n/*Return n^9 modulo p (be aware of numerics).\n  >>> modp9(3, 5)\n  60\n  >>> modp9(1101, 101)\n  61\n  >>> modp9(0, 101)\n  0\n  >>> modp9(3, 11)\n  6\n  >>> modp9(100, 101)\n  0\n  */\nconst modp9 = (n, p) => {\n  if (n < 0) {\n    return modp9(-n, p)\n  }\n  return (n * n * n * n * n * n * n * n * n + p) % p\n}\n\n/*Return n^10 modulo p (be aware of numerics).\n  >>> modp10(3, 5)\n  70\n  >>> modp10(1101, 101)\n  71\n  >>> modp10(0, 101)\n  0\n  >>> modp10(3, 11)\n  6\n  >>> modp10(100, 101)\n  0\n  */\nconst modp10 = (n, p) => {\n  if (n < 0) {\n    return modp10(-n, p)\n  }\n  return (n * n * n * n * n * n * n * n * n * n + p) % p\n}\n\n/*Return n^11 modulo p (be aware of numerics).\n  >>> modp11(3, 5)\n  80\n  >>> modp11(1101, 101)\n  81\n  >>> modp11(0, 101)\n  0\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    output.push(numbers[i]);\n    output.push(delimeter);\n    i++;\n  }\n  output.push(numbers[i]);\n  return output;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n*/\n\n// encode\nconst encode = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decode\nconst decode = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n};\n\n// encodeShift\nconst encodeShift", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  let index = 0\n  let result = ''\n  while (index < textLength) {\n    if (vowelsIndex === index) {\n      index++\n    } else {\n      result += text[index]\n      index++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  let index = 0\n  let result = ''\n  while (index < textLength) {\n    if (vowelsIndex === index) {\n      index++\n    } else {\n      result += text[index]\n      index++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  let index = 0\n  let result = ''\n  while (index < textLength) {\n    if (vowelsIndex === index) {\n      index++\n    } else {\n      result += text[index]\n      index++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  let index = 0\n  let result = ''\n  while (index < textLength) {\n    if (vowelsIndex === index) {\n      index++\n    } else {\n      result += text[index]\n      index++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const vowelsIndex = vowels.indexOf(text[0])\n  const textLength = text.length\n  let index = 0\n  let result = ''\n  while (index < textLength) {\n    if (vowelsIndex === index) {\n      index++\n    } else {\n      result += text[index]\n      index++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  const len = l.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars7 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsOpening = brackets.slice(0, bracketsLength - 1)\n  const bracketsClosing = brackets.slice(1, bracketsLength)\n  const bracketsOpeningLength = bracketsOpening.length\n  const bracketsClosingLength = bracketsClosing.length\n  const openingBrackets = bracketsOpening.map(opening => opening.length)\n  const closingBrackets = bracketsClosing.map(closing => closing.length)\n  const openingBracketsLength = openingBrackets.reduce((acc, val) => acc + val, 0)\n  const closingBracketsLength = closingBrackets.reduce((acc, val) => acc + val, 0)\n  return openingBracketsLength === closingBracketsLength\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<\")\n  0\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return last === sorted[0] || last === sorted[sorted.length - 1] || sorted[0] === sorted[sorted.length - 1] - 1;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_sorted = sort(l1);\n  const l2_sorted = sort(l2);\n  const l1_index = {};\n  const l2_index = {};\n  const l1_len = l1_sorted.length;\n  const l2_len = l2_sorted.length;\n  let i = 0;\n  let j = 0;\n  let common_elements = [];\n  while (i < l1_len && j < l2_len) {\n    if (l1_sorted[i] === l2_sorted[j]) {\n      common_elements.push(l1_sorted[i]);\n      l1_index[l1_sorted[i]] = i;\n      l2_index[l2_sorted[j]] = j;\n      i++;\n      j++;\n    } else if (l1_sorted[i] < l2_sorted[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common_elements;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 2\n  if (n === 5) return 5\n  if (n === 6) return 3\n  if (n === 7) return 7\n  if (n === 8) return 2\n  if (n === 9) return 3\n  if (n === 10) return 5\n  if (n === 11) return 7\n  if (n === 12) return 2\n  if (n === 13) return 5\n  if (n === 14) return 7\n  if (n === 15) return 3\n  if (n === 16) return 5\n  if (n === 17) return 7\n  if (n === 18) return 3\n  if (n === 19) return 5\n  if (n === 20) return 7\n  if (n === 21) return 5\n  if (n === 22) return 7\n  if (n === 23) return 3\n  if (n === 24) return 5\n  if (n === 25) return 7\n  if (n === 26) return 3\n  if (n === 27) return 5\n  if (n === 28) return 7\n  if (n === 29) return 3\n  if (n === 30) return 5\n  if (n === 31) return 7\n  if (n === 32) return 5\n  if (n === 33) return 7\n  if (n === 34) return 3\n  if (n === 35) return 5\n  if (n === 36) return 7\n  if (n === 37) return 3\n  if (n === 38) return 5\n  if (n === 39) return 7\n  if (n === 40) return 3\n  if (n === 41) return 5\n  if (n === 42) return 7\n  if (n === 43) return 3\n  if (n === 44) return 5\n  if (n === 45) return 7\n  if (n === 46) return 3\n  if (n === 47) return 5\n  if (n === 48) return 7\n  if (n === 49) return 3\n  if (n === 50) return 5\n  if (n === 51) return 7\n  if (n === 52) return 3\n  if (n === 53) return 5\n  if (n === 54) return 7\n  if (n === 55) return 3\n  if (n === 56) return 5\n  if (n === 57) return 7\n  if (n === 58) return 3\n  if (n === 59) return 5\n  if (n === 60) return 7\n  if (n === 61) return 3\n  if (n === 62) return 5\n  if (n === 63) return 7\n  if (n === 64) return 3\n  if (n === 65) return 5\n  if (n === 66) return 7\n  if (n === 67) return 3\n  if (n === 68) return 5\n  if (n === 69) return 7\n  if (n === 70) return 3\n  if (n === 71) return 5\n  if (n === 72) return 7\n  if (n === 73) return 3\n  if (n === 74) return 5\n  if (n === 75) return 7\n  if (n === 76) return 3\n  if (n === 77) return 5\n  if (n === 78) return 7\n  if (n === 79) return 3\n  if (n === 80) return 5\n  if (n === 81) return 7\n  if (n === 82) return 3\n  if (n === 83) return 5\n  if (n === 84) return 7\n  if (n === 85) return 3\n  if (n === 86) return 5\n  if (n === 87) return 7\n  if (n === 88) return 3\n  if (n === 89) return 5\n  if (n === 90) return 7\n  if (n === 91) return 3\n  if (n === 92) return 5\n  if (n === 93) return 7\n  if (n === 94) return 3\n  if (n === 95) return 5\n  if (n === 96) return 7\n  if (n === 97) return 3\n  if (n === 98) return 5\n  if (n === 99) return 7\n  if (n === 100) return 3\n  if (n === 101) return 5\n  if (n === 102) return 7\n  if (n === 103) return 3\n  if (n === 104) return 5\n  if (n === 105) return 7\n  if (n === 106) return 3\n  if (n === 107) return 5\n  if (n === 108) return 7\n  if (n === 109) return 3\n  if (n === 110) return 5\n  if (n === 111) return 7\n  if (n === 112) return 3\n  if (n === 113) return 5\n  if (n === 114) return 7\n  if (n === 115) return 3\n  if (n === 116) return 5\n  if (n === 117) return 7\n  if (n === 118) return 3\n  if (n === 119) return 5\n  if (n === 120) return 7\n  if (n === 121) return 3\n  if (n === 122) return 5\n  if (n === 123) return 7\n  if (n === 124) return 3\n  if (n === 125) return 5\n  if (n === 126) return 7\n  if (n === 127) return 3\n  if (n === 128) return 5\n  if (n === 129) return 7\n  if (n === 130) return 3\n  if (n === 131) return 5\n  if (n === 132) return 7\n  if (n === 133) return 3\n  if (n === 134) return 5\n  if (n === 135) return 7\n  if (n === 136) return 3\n  if (n === 137) return 5\n  if (n === 138) return 7\n  if (n === 139) return 3\n  if (n === 140) return 5\n  if (n === 141) return 7\n  if (n === 142) return 3\n  if (n === 143) return 5\n  if (n === 144) return 7\n  if (n === 145) return 3\n  if (n === 146) return 5\n  if (n === 147) return 7\n  if (n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_array = paren_string_array.map((item) => item.split('('));\n  const paren_string_array_array_length = paren_string_array_array.length;\n  const paren_string_array_array_array = paren_string_array_array_length > 0? paren_string_array_array_length > 1? paren_string_array_array_array : paren_string_array_array[0] : [];\n  const paren_string_array_array_array_length = paren_string_array_array_array.length;\n  const paren_string_array_array_array_array = paren_string_array_array_array_length > 0? paren_string_array_array_array_array_length > 1? paren_string_array_array_array_array : paren_string_array_array_array[0] : [];\n  const paren_string_array_array_array_array_length = paren_string_array_array_array_array.length;\n  const paren_string_array_array_array_array_array = paren_string_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_length > 1? paren_string_array_array_array_array_array : paren_string_array_array_array_array_array[0] : [];\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array : paren_string_array_array_array_array_array_array_array[0];\n  const paren_string_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array_array : paren_string_array_array_array_array_array_array_array_array[0];\n  const paren_string_array_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array_array_array_array : paren_string_array_array_array_array_array_array_array_array_array_array[0];\n  const paren_string_array_array_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array_array : paren_string_array_array_array_array_array_array_array_array_array_array_array_array[0];\n  const paren_string_array_array_array_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array : paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array[0];\n  const paren_string_array_array_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array : paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array[0];\n  const paren_string_array_array_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array_length > 0? paren_string_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketStack = brackets.split(\"()\").map(bracket => bracket.split(\"(\").map(opening => opening.split(\")\").map(closing => opening.length === closing.length? opening + closing : opening + \"(\" + closing + \")\")).filter(bracket => bracket.length > 0));\n  const bracketStackLength = bracketStack.length;\n  const bracketStackIndex = 0;\n  const bracketStackLength = bracketStack.length;\n  while (bracketStackIndex < bracketStackLength) {\n    const bracketStackItem = bracketStack[bracketStackIndex];\n    const bracketStackItemLength = bracketStackItem.length;\n    const bracketStackItemIndex = 0;\n    while (bracketStackItemIndex < bracketStackItemLength) {\n      const bracketStackItemItem = bracketStackItem[bracketStackItemIndex];\n      const bracketStackItemItemLength = bracketStackItemItem.length;\n      const bracketStackItemItemIndex = 0;\n      while (bracketStackItemItemIndex < bracketStackItemItemLength) {\n        const bracketStackItemItemItem = bracketStackItemItem[bracketStackItemItemIndex];\n        const bracketStackItemItemItemLength = bracketStackItemItemItem.length;\n        const bracketStackItemItemItemIndex = 0;\n        while (bracketStackItemItemItemIndex < bracketStackItemItemItemLength) {\n          const bracketStackItemItemItemItem = bracketStackItemItemItem[bracketStackItemItemItemIndex];\n          const bracketStackItemItemItemItemLength = bracketStackItemItemItemItem.length;\n          const bracketStackItemItemItemItemIndex = 0;\n          while (bracketStackItemItemItemItemIndex < bracketStackItemItemItemItemLength) {\n            const bracketStackItemItemItemItemItem = bracketStackItemItemItemItem[bracketStackItemItemItemItemIndex];\n            if (bracketStackItemItemItemItemItem.length === 0) {\n              return false;\n            }\n            bracketStackItemItemItemIndex++;\n          }\n          bracketStackItemItemIndex++;\n        }\n        bracketStackItemIndex++;\n      }\n      bracketStackIndex++;\n    }\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    if (i < len - 1) {\n      result.push(xs[i + 1] * (i + 1))\n    }\n  }\n  return result\n}\n\n/*\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5])\n  [2, 6, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [2, 6, 12, 20, 30]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [2, 6, 12, 20, 30, 42]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 6, 12, 20, 30, 42, 56]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 6, 12, 20, 30, 42, 56, 72]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468, 576]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468, 576, 720]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468, 576, 720, 984]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468, 576, 720, 984, 1296]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468, 576, 720, 984, 1296, 1512]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 220, 288, 360, 468, 576, 720, 984", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  const consonantCount = consonants.reduce((acc, c) => {\n    if (vowels.includes(c)) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  const consonantCountInWord = s.split('').reduce((acc, c) => {\n    if (vowels.includes(c)) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return consonantCount + consonantCountInWord\n}\n\nconsole.log(vowelsCount(\"abcde\"))\nconsole.log(vowelsCount(\"ACEDY\"))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i + shift]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[i + shift]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[(len - 1) - i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const digits = x.toString().split('');\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let str = s.split(\" \")\n  let num = 0\n  for (let i = 0; i < str.length; i++) {\n    num += parseInt(str[i])\n  }\n  return num\n}\n\nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n* / \nfruitDist", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck2 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck3 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck4 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck5 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck6 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck7 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck8 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck9 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck10 = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex % 2 === 0) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst pluck11 = (arr) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring16 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  let i = 0\n  let j = len - 1\n  let min = sorted[0]\n  let max = sorted[len - 1]\n  while (i < j) {\n    if (min > max) {\n      sorted[i] = sorted[j]\n      sorted[j] = min\n      j--\n    } else if (min < max) {\n      sorted[j] = sorted[i]\n      sorted[i] = max\n      i++\n    } else {\n      sorted[i] = sorted[j]\n      sorted[j] = min\n      j--\n      i++\n    }\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea3 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea4 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea5 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea6 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea7 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea8 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea9 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea10 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea11 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea12 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea13 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea14 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea15 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea16 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea17 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea18 = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else {\n    return -1;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconsole.log(willItFly([1, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let result = 0;\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let tmp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      k++;\n      j--;\n    } else if (arr[i] < arr[j]) {\n      tmp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = tmp;\n      k++;\n      i++;\n    } else {\n      i++;\n      j--;\n    }\n    if (k < min) {\n      min = k;\n      result = k;\n    }\n  }\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1;\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1LengthMinus1 = lst1Length - 1;\n  const lst2LengthMinus1 = lst2Length - 1;\n  const lst1LengthMinus2 = lst1Length - 2;\n  const lst2LengthMinus2 = lst2Length - 2;\n  const lst1LengthMinus3 = lst1Length - 3;\n  const lst2LengthMinus3 = lst2Length - 3;\n  const lst1LengthMinus4 = lst1Length - 4;\n  const lst2LengthMinus4 = lst2Length - 4;\n  const lst1LengthMinus5 = lst1Length - 5;\n  const lst2LengthMinus5 = lst2Length - 5;\n  const lst1LengthMinus6 = lst1Length - 6;\n  const lst2LengthMinus6 = lst2Length - 6;\n  const lst1LengthMinus7 = lst1Length - 7;\n  const lst2LengthMinus7 = lst2Length - 7;\n  const lst1LengthMinus8 = lst1Length - 8;\n  const lst2LengthMinus8 = lst2Length - 8;\n  const lst1LengthMinus9 = lst1Length - 9;\n  const lst2LengthMinus9 = lst2Length - 9;\n  const lst1LengthMinus10 = lst1Length - 10;\n  const lst2LengthMinus10 = lst2Length - 10;\n  const lst1LengthMinus11 = lst1Length - 11;\n  const lst2LengthMinus11 = lst2Length - 11;\n  const lst1LengthMinus12 = lst1Length - 12;\n  const lst2LengthMinus12 = lst2Length - 12;\n  const lst1LengthMinus13 = lst1Length - 13;\n  const lst2LengthMinus13 = lst2Length - 13;\n  const lst1LengthMinus14 = lst1Length - 14;\n  const lst2LengthMinus14 = lst2Length - 14;\n  const lst1LengthMinus15 = lst1Length - 15;\n  const lst2LengthMinus15 = lst2Length - 15;\n  const lst1LengthMinus16 = lst1Length - 16;\n  const lst2LengthMinus16 = lst2Length - 16;\n  const lst1LengthMinus17 = lst1Length - 17;\n  const lst2LengthMinus17 = lst2Length - 17;\n  const lst1LengthMinus18 = lst1Length - 18;\n  const lst2LengthMinus18 = lst2Length - 18;\n  const lst1LengthMinus19 = lst1Length - 19;\n  const lst2LengthMinus19 = lst2Length - 19;\n  const lst1LengthMinus20 = lst1Length - 20;\n  const lst2LengthMinus20 = lst2Length - 20;\n  const lst1LengthMinus21 = lst1Length - 21;\n  const lst2LengthMinus21 = lst2Length - 21;\n  const lst1LengthMinus22 = lst1Length - 22;\n  const lst2LengthMinus22 = lst2Length - 22;\n  const lst1LengthMinus23 = lst1Length - 23;\n  const lst2LengthMinus23 = lst2Length - 23;\n  const lst1LengthMinus24 = lst1Length - 24;\n  const lst2LengthMinus24 = lst2Length - 24;\n  const lst1LengthMinus25 = lst1Length - 25;\n  const lst2LengthMinus25 = lst2Length - 25;\n  const lst1LengthMinus26 = lst1Length - 26;\n  const lst2LengthMinus26 = lst2Length - 26;\n  const lst1LengthMinus27 = lst1Length - 27;\n  const lst2LengthMinus27 = lst2Length - 27;\n  const lst1LengthMinus28 = lst1Length - 28;\n  const lst2LengthMinus28 = lst2Length - 28;\n  const lst1LengthMinus29 = lst1Length - 29;\n  const lst2LengthMinus29 = lst2Length - 29;\n  const lst1LengthMinus30 = lst1Length - 30;\n  const lst2LengthMinus30 = lst2Length - 30;\n  const lst1LengthMinus31 = lst1Length - 31;\n  const lst2LengthMinus31 = lst2Length - 31;\n  const lst1LengthMinus32 = lst1Length - 32;\n  const lst2LengthMinus32 = lst2Length - 32;\n  const lst1LengthMinus33 = lst1Length - 33;\n  const lst2LengthMinus33 = lst2Length - 33;\n  const lst1LengthMinus34 = lst1Length - 34;\n  const lst2LengthMinus34 = lst2Length - 34;\n  const lst1LengthMinus35 = lst1Length - 35;\n  const lst2LengthMinus35", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const isPrime = (n) => {\n    return prime.indexOf(n)!== -1;\n  };\n  const isMultiply = (n) => {\n    return prime.indexOf(n)!== -1 && prime.indexOf(n * a)!== -1;\n  };\n  return isPrime(a) && isMultiply(a) && isMultiplyPrime(a);\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = a;\n  while (n > 0) {\n    if (n % 3 === 0 && n % 5 === 0) {\n      return true;\n    }\n    n = n / 3;\n  }\n  return false;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    result += parseInt(num[i], 16);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = true;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber2 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber3 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber4 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber5 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber6 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber7 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber8 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber9 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber10 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber11 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber12 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber13 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber14 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst getPrimeFlowerNumber15 = (num) => {\n  let result = 0;\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i) && i!== num) {\n      result += 1;\n    }\n  }\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binary_length = 0;\n  let decimal_length = 0;\n  let decimal_remainder = 0;\n  let decimal_remainder_length = 0;\n  let decimal_remainder_index = 0;\n  let decimal_remainder_index_length = 0;\n  let decimal_remainder_index_index = 0;\n  let decimal_remainder_index_index_length = 0;\n  let decimal_remainder_index_index_index = 0;\n  let decimal_remainder_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let decimal_remainder_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return [sum]\n}\n\n/*\n  Given a list of numbers, return a list of the product of all the numbers in the list.\n  >>> productList([1, 2, 3, 4])\n  [12, 24, 36, 48]\n  */\nconst productList = (numbers) => {\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return [product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return [sum]\n}\n\n/*\n  Given a list of numbers, return a list of the product of all the numbers in the list.\n  >>> productList([1, 2, 3, 4])\n  [12, 24, 36, 48]\n  */\nconst productList = (numbers) => {\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return [product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return [sum]\n}\n\n/*\n  Given a list of numbers, return a list of the product of all the numbers in the list.\n  >>> productList([1, 2, 3, 4])\n  [12, 24, 36, 48]\n  */\nconst productList = (numbers) => {\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return [product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return [sum]\n}\n\n/*\n  Given a list of numbers, return a list of the product of all the numbers in the list.\n  >>> productList([1, 2, 3, 4])\n  [12, 24, 36, 48]\n  */\nconst productList = (numbers) => {\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return [product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return [sum]\n}\n\n/*\n  Given a list of numbers, return a list of the product of all the numbers in the list.\n  >>> productList([1, 2, 3, 4])\n  [12, 24, 36, 48]\n  */\nconst productList = (numbers) => {\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return [product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return [sum]\n}\n\n/*\n  Given a list of numbers, return a list of the product of all the numbers in the list.\n  >>> productList([1, 2, 3, 4])\n  [12, 24, 36, 48]\n  */\nconst productList = (numbers) => {\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return [product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of all the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  [10, 12, 15, 20]\n  */\nconst sumList = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let count = 0\n  let prev = 0\n  let curr = 0\n  let next = 0\n  let isHappy = true\n  for (let i = 0; i < len; i++) {\n    curr = s[i]\n    if (curr === 'a' || curr === 'b' || curr === 'c' || curr === 'd') {\n      count += 1\n      if (count === 3) {\n        if (prev === 'a' || prev === 'b' || prev === 'c') {\n          next = 'd'\n        } else {\n          next = 'c'\n        }\n        if (next === 'd') {\n          isHappy = false\n          break\n        }\n        count = 0\n        prev = curr\n      }\n    } else {\n      count = 0\n      prev = curr\n    }\n  }\n  return isHappy\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayAverage = gradesArraySum / gradesArrayLength;\n  const gradesArrayAverageDifference = gradesArrayAverage - gradesArray[0];\n  const gradesArrayAverageDifferencePercent = gradesArrayAverageDifference / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercent = gradesArrayAverageDifferencePercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercent = gradesArrayAverageDifferencePercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent / gradesArray[0];\n  const gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent = gradesArrayAverageDifferencePercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  const isPrime = (number) => {\n    const divisor = 2;\n    while (divisor < number) {\n      if (number % divisor === 0) {\n        return false;\n      }\n      divisor += 1;\n    }\n    return true;\n  };\n  for (let i = 2; i < length; i += 1) {\n    if (isPrime(i) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const wordsLength = words.length\n  let newWords = []\n  let newWordsLength = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let word = ''\n  let wordLength = 0\n  let wordIndex = 0\n  let wordIndexLength = 0\n  let wordIndexLengthLength = 0\n  let wordIndexLengthLengthLength = 0\n  let wordIndexLengthLengthLengthLength = 0\n  let wordIndexLengthLengthLengthLengthLength = 0\n  let wordIndexLengthLengthLengthLengthLengthLength = 0\n  let wordIndexLengthLengthLengthLengthLengthLengthLength = 0\n  while (i < wordsLength) {\n    word = words[i]\n    wordLength = word.length\n    wordIndex = 0\n    while (wordIndex < wordLength) {\n      wordIndexLength = word.charCodeAt(wordIndex)\n      wordIndexLengthLength = wordIndexLength\n      wordIndexLengthLength = wordIndexLengthLength\n      wordIndexLengthLengthLength = wordIndexLengthLengthLength\n      wordIndexLengthLengthLengthLength = wordIndexLengthLengthLengthLength\n      wordIndexLengthLengthLengthLengthLength = wordIndexLengthLengthLengthLengthLength\n      while (wordIndexLengthLengthLengthLengthLength < wordIndexLengthLengthLengthLengthLengthLength) {\n        wordIndexLengthLengthLengthLengthLength = wordIndexLengthLengthLengthLengthLengthLength\n        wordIndexLengthLengthLengthLengthLength = wordIndexLengthLengthLengthLengthLengthLength\n        wordIndexLengthLengthLengthLengthLengthLength = wordIndexLengthLengthLengthLengthLengthLengthLength\n      }\n      newWords[newWordsLength] = String.fromCharCode(wordIndexLengthLengthLengthLengthLengthLength + wordIndexLengthLengthLengthLengthLengthLengthLength)\n      newWordsLength += 1\n      wordIndex += 1\n    }\n    i += 1\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sort = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    return 0\n  }\n  const sortByRow = (a, b) => {\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByColumn = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    return 0\n  }\n  const sortByRowAndColumn = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDesc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAscAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAscAscAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAscAscAscAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  }\n  const sortByRowAndColumnDescAscAscAscAscAscAscAscAscAsc = (a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let k = 0;\n  let sum = 0;\n  while (i < j) {\n    while (i < sortedArrayLength && sortedArray[i] < sortedArray[i + 1]) {\n      i++;\n    }\n    while (j >= 0 && sortedArray[j] > sortedArray[j - 1]) {\n      j--;\n    }\n    if (i < j) {\n      sum = sortedArray[i] + sortedArray[j];\n      if (sum % 2 === 1) {\n        sortedArray[k++] = sortedArray[i];\n        sortedArray[i++] = sortedArray[j];\n      } else {\n        sortedArray[k++] = sortedArray[j];\n        sortedArray[j--] = sortedArray[i];\n      }\n    }\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let encrypted = '';\n  let i = 0;\n  for (let char of s) {\n    encrypted += alphabet[(i + 2) % 26];\n    i++;\n  }\n  return encrypted;\n};\n\nconst decrypt = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let decrypted = '';\n  let i = 0;\n  for (let char of s) {\n    decrypted += alphabet[(i + 26) % 26];\n    i++;\n  }\n  return decrypted;\n};\n\nconst encrypt_decrypt = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_2 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_3 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_4 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_5 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_6 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_7 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_8 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_9 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_10 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_11 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_12 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_13 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_14 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_15 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_16 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_17 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_18 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_19 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_20 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_21 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_22 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_23 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  return encrypted +'' + decrypted;\n};\n\nconst encrypt_decrypt_24 = (s) => {\n  let encrypted = encrypt(s);\n  let decrypted = decrypt(encrypted);\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxRoll = 0;\n  let maxRollIndex = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let rolling = [];\n  while (i < numbers.length) {\n    rolling.push(numbers[i]);\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxRoll = rolling[maxRollIndex];\n      maxRollIndex = j;\n    }\n    i++;\n    j++;\n    k++;\n    if (k === rolling.length) {\n      rolling = [];\n      k = 0;\n      j = 0;\n    }\n  }\n  return rolling;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconst nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let word = \"\";\n  let word_length = 0;\n  let word_length_max = 0;\n  let word_length_min = 0;\n  let word_length_sum = 0;\n  let word_length_sum_max = 0;\n  let word_length_sum_min = 0;\n  let word_length_sum_sum = 0;\n  let word_length_sum_sum_max = 0;\n  let word_length_sum_sum_min = 0;\n  let word_length_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let word_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) {\n    return false;\n  }\n  return x + y === z || y + z === x || z + x === y;\n};\n\n/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) {\n    return false;\n  }\n  return x + y === z || y + z === x || z + x === y;\n};\n\n/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) {\n    return false;\n  }\n  return x + y === z || y + z === x || z + x === y;\n};\n\n/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) {\n    return false;\n  }\n  return x + y === z || y + z === x || z + x === y;\n};\n\n/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) {\n    return false;\n  }\n  return x + y === z || y + z === x || z + x === y;\n};\n\n/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) {\n    return false;\n  }\n  return x + y === z || y + z === x || z + x === y;\n};\n\n/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase()\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonantsLength = consonants.length\n  const vowelsLength = vowels.length\n  const consonantsIndex = consonants.indexOf(message[0])\n  const vowelsIndex = vowels.indexOf(message[0])\n  const consonantsIndex2 = consonants.indexOf(message[1])\n  const vowelsIndex2 = vowels.indexOf(message[1])\n  const consonantsIndex3 = consonants.indexOf(message[2])\n  const vowelsIndex3 = vowels.indexOf(message[2])\n  const consonantsIndex4 = consonants.indexOf(message[3])\n  const vowelsIndex4 = vowels.indexOf(message[3])\n  const consonantsIndex5 = consonants.indexOf(message[4])\n  const vowelsIndex5 = vowels.indexOf(message[4])\n  const consonantsIndex6 = consonants.indexOf(message[5])\n  const vowelsIndex6 = vowels.indexOf(message[5])\n  const consonantsIndex7 = consonants.indexOf(message[6])\n  const vowelsIndex7 = vowels.indexOf(message[6])\n  const consonantsIndex8 = consonants.indexOf(message[7])\n  const vowelsIndex8 = vowels.indexOf(message[7])\n  const consonantsIndex9 = consonants.indexOf(message[8])\n  const vowelsIndex9 = vowels.indexOf(message[8])\n  const consonantsIndex10 = consonants.indexOf(message[9])\n  const vowelsIndex10 = vowels.indexOf(message[9])\n  const consonantsIndex11 = consonants.indexOf(message[10])\n  const vowelsIndex11 = vowels.indexOf(message[10])\n  const consonantsIndex12 = consonants.indexOf(message[11])\n  const vowelsIndex12 = vowels.indexOf(message[11])\n  const consonantsIndex13 = consonants.indexOf(message[12])\n  const vowelsIndex13 = vowels.indexOf(message[12])\n  const consonantsIndex14 = consonants.indexOf(message[13])\n  const vowelsIndex14 = vowels.indexOf(message[13])\n  const consonantsIndex15 = consonants.indexOf(message[14])\n  const vowelsIndex15 = vowels.indexOf(message[14])\n  const consonantsIndex16 = consonants.indexOf(message[15])\n  const vowelsIndex16 = vowels.indexOf(message[15])\n  const consonantsIndex17 = consonants.indexOf(message[16])\n  const vowelsIndex17 = vowels.indexOf(message[16])\n  const consonantsIndex18 = consonants.indexOf(message[17])\n  const vowelsIndex18 = vowels.indexOf(message[17])\n  const consonantsIndex19 = consonants.indexOf(message[18])\n  const vowelsIndex19 = vowels.indexOf(message[18])\n  const consonantsIndex20 = consonants.indexOf(message[19])\n  const vowelsIndex20 = vowels.indexOf(message[19])\n  const consonantsIndex21 = consonants.indexOf(message[20])\n  const vowelsIndex21 = vowels.indexOf(message[20])\n  const consonantsIndex22 = consonants.indexOf(message[21])\n  const vowelsIndex22 = vowels.indexOf(message[21])\n  const consonantsIndex23 = consonants.indexOf(message[22])\n  const vowelsIndex23 = vowels.indexOf(message[22])\n  const consonantsIndex24 = consonants.indexOf(message[23])\n  const vowelsIndex24 = vowels.indexOf(message[23])\n  const consonantsIndex25 = consonants.indexOf(message[24])\n  const vowelsIndex25 = vowels.indexOf(message[24])\n  const consonantsIndex26 = consonants.indexOf(message[25])\n  const vowelsIndex26 = vowels.indexOf(message[25])\n  const consonantsIndex27 = consonants.indexOf(message[26])\n  const vowelsIndex27 = vowels.indexOf(message[26])\n  const consonantsIndex28 = consonants.indexOf(message[27])\n  const vowelsIndex28 = vowels.indexOf(message[27])\n  const consonantsIndex29 = consonants.indexOf(message[28])\n  const vowelsIndex29 = vowels.indexOf(message[28])\n  const consonantsIndex30 = consonants.indexOf(message[29])\n  const vowelsIndex30 = vowels.indexOf(message[29])\n  const consonantsIndex31 = consonants.indexOf(message[30])\n  const vowelsIndex31 = vowels.indexOf(message[30])\n  const consonantsIndex32 = consonants.indexOf(message[31])\n  const vowelsIndex32 = vowels.indexOf(message[31])\n  const consonantsIndex33 = consonants.indexOf(message[32])\n  const vowelsIndex33 = vowels.indexOf(message[32])\n  const consonantsIndex34 = consonants.indexOf(message[33])\n  const vowelsIndex34 = vowels.indexOf(message[33])\n  const consonantsIndex35 = consonants.indexOf(message[34])\n  const vowelsIndex35 = vowels.indexOf(message[34])\n  const consonantsIndex36 = consonants.indexOf(message[35])\n  const vowelsIndex36 = vowels.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const primes = [];\n  while (max > 1) {\n    if (prime(max)) {\n      primes.push(max);\n    }\n    max--;\n  }\n  const maxPrime = Math.max(...primes);\n  const maxPrimeDigits = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits;\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum = (n) => {\n    const digits = [];\n    while (n > 0) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits.reduce((a, b) => a + b, 0);\n  };\n  const maxPrimeDigitsSum =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase6 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase7 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase8 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase9 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDictCase10 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\n/*\n  Implement a function that takes an non - negative minus integer and returns return an array of the first n\n  integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo3 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo4 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo5 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo6 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo7 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo8 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo9 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo10 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo11 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n    primes.splice(index, 1)\n  }\n  return result\n}\n\nconst countUpTo12 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i];\n    let digitB = b[i];\n    result += (digit * digitB) % 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n  the product of their unit digits finger. \n  Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels2 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels3 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels4 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels5 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels6 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConson", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const abs = Math.abs(num);\n  const intPart = Math.floor(abs);\n  const fracPart = abs - intPart;\n  const closest = intPart;\n  if (fracPart > 0.5) {\n    closest = intPart + 1;\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
