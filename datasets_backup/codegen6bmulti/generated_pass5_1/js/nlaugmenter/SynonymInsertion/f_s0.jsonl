{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const distances = distancesFrom(numbers)\n  const distancesLength = distances.length\n  for (let i = 0; i < distancesLength; i++) {\n    for (let j = i + 1; j < distancesLength; j++) {\n      if (distances[i] + distances[j] < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0, 2.0]\n  */\nconst distancesFrom = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return []\n  }\n  const distances = []\n  for (let i = 0; i < len; i++) {\n    distances.push(numbers[i] - numbers[0])\n  }\n  return distances\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0, 2.0]\n  */\nconst distancesTo = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return []\n  }\n  const distances = []\n  for (let i = 1; i < len; i++) {\n    distances.push(numbers[i] - numbers[0])\n  }\n  return distances\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0, 2.0]\n  */\nconst distancesTo = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return []\n  }\n  const distances = []\n  for (let i = 1; i < len; i++) {\n    distances.push(numbers[i] - numbers[0])\n  }\n  return distances\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0, 2.0]\n  */\nconst distancesTo = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return []\n  }\n  const distances = []\n  for (let i = 1; i < len; i++) {\n    distances.push(numbers[i] - numbers[0])\n  }\n  return distances\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0, 2.0]\n  */\nconst distancesTo = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return []\n  }\n  const distances = []\n  for (let i = 1; i < len; i++) {\n    distances.push(numbers[i] - numbers[0])\n  }\n  return distances\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0, 2.0]\n  */\nconst distancesTo = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return []\n  }\n  const distances = []\n  for (let i = 1; i < len; i++) {\n    distances.push(numbers[i] - numbers[0])\n  }\n  return distances\n}\n\n/*\n  Given a list of numbers, return the list of distances from the first number to the rest.\n  >>> distancesFrom([1.0, 2.0, 3.0])\n  [0.0, 1.0, 1.0]\n  >>> distancesFrom([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [0.0, 1.0, 1.0, 2.0, 2.0,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore dismiss any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore dismiss any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_index = 0;\n  const paren_stack_length = paren_stack.length;\n  const paren_stack_index_max = paren_stack_length - 1;\n  const paren_stack_index_min = 0;\n  const paren_stack_index_next = 1;\n  const paren_stack_index_prev = -1;\n  const paren_stack_index_open = 0;\n  const paren_stack_index_close = 1;\n  const paren_stack_index_open_prev = -1;\n  const paren_stack_index_open_next = 0;\n  const paren_stack_index_close_prev = -1;\n  const paren_stack_index_close_next = 0;\n  const paren_stack_index_open_close = 1;\n  const paren_stack_index_open_close_next = 0;\n  const paren_stack_index_open_close_prev = -1;\n  const paren_stack_index_open_close_next_prev = -1;\n  const paren_stack_index_open_close_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0;\n  const paren_stack_index_open_close_next_prev_prev_prev_prev_prev_prev_prev = -1;\n  const paren_stack_index_open_close_next_next_next_next_next_next = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const ret = string.split('').reverse().join('');\n  const retLen = ret.length;\n  const goal = string.split('').reverse().join('');\n  const goalLen = goal.length;\n  const start = goal.slice(0, goalLen - retLen);\n  const end = goal.slice(goalLen - retLen, goalLen);\n  const startLen = start.length;\n  const endLen = end.length;\n  const startReverse = start.split('').reverse().join('');\n  const endReverse = end.split('').reverse().join('');\n  const startReverseLen = startReverse.length;\n  const endReverseLen = endReverse.length;\n  const startReverseReverse = startReverse.split('').reverse().join('');\n  const endReverseReverse = endReverse.split('').reverse().join('');\n  const startReverseReverseLen = startReverseReverse.length;\n  const endReverseReverseLen = endReverseReverse.length;\n  if (startReverseReverse === goalReverse) {\n    return startReverse + endReverse;\n  }\n  if (startReverseReverseLen === goalReverseLen) {\n    return startReverse + endReverseReverse;\n  }\n  if (endReverseReverse === goalReverse) {\n    return startReverse + endReverseReverse;\n  }\n  if (endReverseReverseLen === goalReverseLen) {\n    return startReverseReverse + endReverse;\n  }\n  return '';\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest retentive postfix of supplied provide string that is a palindrome.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const ret = string.split('').reverse().join('');\n  const retLen = ret.length;\n  const goal = string.split('').reverse().join('');\n  const goalLen = goal.length;\n  const start = goal.slice(0, goalLen - retLen);\n  const end = goal.slice(goalLen - retLen, goalLen);\n  const startLen = start.length;\n  const endLen = end.length;\n  const startReverse = start.split('').reverse().join('');\n  const endReverse = end.split('').reverse().join('');\n  const startReverseLen = startReverse.length;\n  const endReverseLen = endReverse.length;\n  const startReverseReverse = startReverse.split('').reverse().join('');\n  const endReverseReverse = endReverse.split('').reverse().join('');\n  const startReverseReverseLen = startReverseReverse.length;\n  const endReverseReverseLen = endReverseReverse.length;\n  const goalReverse = goal.split('').reverse().join('');\n  const goalReverseLen = goalReverse.length;\n  const startReverseReverseReverse = startReverseReverse.split('').reverse().join('');\n  const endReverseReverseReverse = endReverseReverse.split('').reverse().join('');\n  const startReverseReverseReverseLen = startReverseReverseReverse.length;\n  const endReverseReverseReverseLen = endReverseReverseReverse.length;\n  if (startReverseReverseReverse === goalReverse) {\n    return startReverse + endReverseReverse;\n  }\n  if (startReverseReverseReverseLen === goalReverseLen) {\n    return startReverseReverse + endReverseReverseReverse;\n  }\n  if (endReverseReverseReverse === goalReverse) {\n    return startReverseReverse + endReverseReverseReverse;\n  }\n  if (endReverseReverseReverseLen === goalReverseLen) {\n    return startReverseReverseReverse + endReverseReverse;\n  }\n  return '';\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest retentive postfix of supplied provide string that is a palindrome.\n   Algorithm idea is simple dim-witted: \n   - Find the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile8 = (n) => {\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  Given an array of words, return the number of words that contain a vowel.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == 1\n  wordsArray(\"One, two, three, four, five, six\") == 6\n  wordsArray(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsArray = (s) => {\n  const words = s.split(/\\s+/);\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (vowels(words[i])) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of vowels in the string.\n  \n  For example:\n  vowels(\"Hi, my name is John\") == 1\n  vowels(\"One, two, three, four, five, six\") == 6\n  vowels(\"One, two, three, four, five, six\") == 6\n  */\nconst vowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of consonants in the string.\n  \n  For example:\n  consonants(\"Hi, my name is John\") == 2\n  consonants(\"One, two, three, four, five, six\") == 5\n  consonants(\"One, two, three, four, five, six\") == 5\n  */\nconst consonants = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of consonants in the string.\n  \n  For example:\n  consonants(\"Hi, my name is John\") == 2\n  consonants(\"One, two, three, four, five, six\") == 5\n  consonants(\"One, two, three, four, five, six\") == 5\n  */\nconst consonantsString = (s) => {\n  const consonants = s.split(/\\s+/);\n  let count = 0;\n  for (let i = 0; i < consonants.length; i++) {\n    if (consonants[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of consonants in the string.\n  \n  For example:\n  consonants(\"Hi, my name is John\") == 2\n  consonants(\"One, two, three, four, five, six\") == 5\n  consonants(\"One, two, three, four, five, six\") == 5\n  */\nconst consonantsArray = (s) => {\n  const consonants = s.split(/\\s+/);\n  let count = 0;\n  for (let i = 0; i < consonants.length; i++) {\n    if (consonants[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of consonants in the string.\n  \n  For example:\n  consonants(\"Hi, my name is John\") == 2\n  consonants(\"One, two, three, four, five, six\") == 5\n  consonants(\"One, two, three, four, five, six\") == 5\n  */\nconst consonantsStringArray = (s) => {\n  const consonants = s.split(/\\s+/);\n  let count = 0;\n  for (let i = 0; i < consonants.length; i++) {\n    if (consonants[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of consonants in the string.\n  \n  For example:\n  consonants(\"Hi, my name is John\") == 2\n  consonants(\"One, two, three, four, five, six\") == 5\n  consonants(\"One, two, three, four, five, six\") == 5\n  */\nconst consonantsArrayArray = (s) => {\n  const consonants = s.split(/\\s+/);\n  let count = 0;\n  for (let i = 0; i < consonants.length; i++) {\n    if (consonants[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of consonants in the string.\n  \n  For example:\n  consonants(\"Hi, my name is John\") == 2\n  consonants(\"One, two, three, four, five, six\") == 5\n  consonants(\"One, two, three, four, five, six\") == 5\n  */\nconst consonantsStringArrayArray = (s) => {\n  const consonants = s.split(/\\s+/);\n  let count = 0;\n  for (let i = 0; i < consonants.length; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even integer number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even integer number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  let x3 = x;\n  let y3 = y;\n  let x4 = x;\n  let y4 = y;\n  while (x1 <= y1) {\n    x2 = x1 + 1;\n    y2 = y1;\n    while (x2 <= y2) {\n      x3 = x2 + 1;\n      y3 = y2;\n      while (x3 <= y3) {\n        x4 = x3 + 1;\n        y4 = y3;\n        if (x4 <= y4) {\n          return x4;\n        }\n        x3 = x4;\n        y3 = y4;\n      }\n      x2 = x3;\n      y2 = y3;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return -1;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  return (avg.toString(2).length === 1)? '0b' + avg.toString(2) : -1;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let sorted = x.sort((a, b) => a - b);\n  let unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrLength = reversedArr.length\n  let result = []\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes choose n as a parameter, \n   and returns return a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers number from 1 to i otherwise. \n   i starts originate from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes choose n as a parameter, \n   and returns return a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers number from 1 to i otherwise. \n   i starts originate from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(factorial(i));\n  }\n  return result;\n};\n\nconst test = (n) => {\n  const result = f(n);\n  console.log(result);\n};\n\ntest(5);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0. \n   If a number phone number is negative, then its first inaugural signed sign digit will be negative: \n   e.g. for example -123 has signed bless digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0. \n   If a number phone number is negative, then its first inaugural signed sign digit will be negative: \n   e.g. for example -123 has signed bless digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arrLength = arr.length\n  const result = 0\n  for (let i = 0; i < arrLength; i++) {\n    const currentNum = arr[i]\n    const currentNumDigits = currentNum.toString().length\n    const currentNumDigitsSigned = currentNumDigits - currentNum.toString().replace(/^-?\\d+/, '').length\n    const currentNumDigitsSignedSum = currentNumDigitsSigned + currentNumDigits\n    if (currentNumDigitsSignedSum > 0) {\n      result += 1\n    }\n  }\n  return result\n}\n\nconsole.log(countNums([-1, 11, -11]))\nconsole.log(countNums([1, 1, 2]))\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get have an array sorted in non - decreasing order ordering by performing \n   the following adopt operation on the given array: \n       You are allowed to perform do right shift operation any number phone number of times prison term. \n  \n   One right shift operation means think of shifting careen all elements of the array by one \n   position placement in the right correct direction. The last element component of the array will be moved to \n   the starting start position stead in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation mathematical process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get have an array sorted in non - decreasing order ordering by performing \n   the following adopt operation on the given array: \n       You are allowed to perform do right shift operation any number phone number of times prison term. \n  \n   One right shift operation means think of shifting careen all elements of the array by one \n   position placement in the right correct direction. The last element component of the array will be moved to \n   the starting start position stead in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation mathematical process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall10 = (arr) => {\n  if (arr.length === 0) return true;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting consist only of 1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines determine whether it is possible to perform do an exchange of elements \n   between them to make induce lst1 a list of only even numbers. \n   There is no limit on the number of exchanged commute elements between lst1 and lst2.\n   If it is possible to exchange elements element between the lst1 and lst2 to make have \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines determine whether it is possible to perform do an exchange of elements \n   between them to make induce lst1 a list of only even numbers. \n   There is no limit on the number of exchanged commute elements between lst1 and lst2.\n   If it is possible to exchange elements element between the lst1 and lst2 to make have \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_len = lst1.length;\n  let lst2_len = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while (i < lst1_len && j < lst2_len) {\n    if (lst1[i] === lst2[j]) {\n      flag = true;\n      k = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = k;\n      i++;\n      j++;\n    } else if (lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (flag) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\nexchange([1, 2, 3, 4], [1, 2, 3, 5]);\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]);\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]);\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]);\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]);\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i]\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter]++\n    }\n  }\n  return histogram\n}\n\nmodule.exports = histogram\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings string section s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string drawstring is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings string section s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string drawstring is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const sLength = s.length;\n  const cLength = c.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < sLength) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      if (j === cLength) {\n        result += s[i];\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return [result, sLength === result.length];\n};\n\nconst isPalindrome = (s) => {\n  const sLength = s.length;\n  let i = 0;\n  let j = sLength - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst main = () => {\n  const s = 'abcdef';\n  const c = 'ae';\n  const [result, isReal] = reverseDelete(s, c);\n  console.log(`${result} ${isReal}`);\n};\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of odd elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of odd elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i].charAt(j) % 2 === 1) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count} of the ${i}th string of the ${lst.length} input.`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (acc === undefined) {\n      return num;\n    }\n    return acc + num;\n  }, 0);\n  const max = nums.reduce((acc, num) => {\n    if (acc === undefined) {\n      return num;\n    }\n    return Math.max(acc, num);\n  }, 0);\n  const minSumSubArray = nums.reduce((acc, num) => {\n    if (acc === undefined) {\n      return num;\n    }\n    return acc + num;\n  }, 0);\n  return minSum - minSumSubArray;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents present a single well, \n   and each 1 in a row quarrel represents a single unmarried unit of water water system. \n   Each well has a corresponding bucket that can be used to extract water water system from it, \n   and all buckets bucket have the same capacity.\n   Your task undertaking is to use practice the buckets to empty the wells. \n   Output output signal the number phone number of times clock time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents present a single well, \n   and each 1 in a row quarrel represents a single unmarried unit of water water system. \n   Each well has a corresponding bucket that can be used to extract water water system from it, \n   and all buckets bucket have the same capacity.\n   Your task undertaking is to use practice the buckets to empty the wells. \n   Output output signal the number phone number of times clock time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = 0;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[i][j] = capacity;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j] > 0) {\n                count += buckets[i][j];\n            }\n        }\n    }\n    return count;\n};\n\nconst test = [\n    [\n        [0,0,1,0],\n        [0,1,0,0],\n        [1,1,1,1]\n    ],\n    [\n        [0,0,1,1],\n        [0,0,0,0],\n        [1,1,1,1],\n        [0,1,1,1]\n    ],\n    [\n        [0,0,1,1],\n        [0,0,0,0],\n        [1,1,1,1],\n        [0,1,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n        [0,0,0],\n        [0,0,0],\n        [1,1,1],\n        [0,1,1]\n    ],\n    [\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number numeral of ones in their binary representation theatrical performance in ascending order ordering. \n   For similar number issue of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number numeral of ones in their binary representation theatrical performance in ascending order ordering. \n   For similar number issue of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = []\n  const sortedArrayLength = arr.length\n  const sortedArrayIndex = 0\n  const sortedArrayIndexLength = sortedArrayLength - 1\n  const sortedArrayIndexLengthMinusOne = sortedArrayIndexLength - 1\n  const sortedArrayIndexLengthMinusTwo = sortedArrayIndexLength - 2\n  const sortedArrayIndexLengthMinusThree = sortedArrayIndexLength - 3\n  const sortedArrayIndexLengthMinusFour = sortedArrayIndexLength - 4\n  const sortedArrayIndexLengthMinusFive = sortedArrayIndexLength - 5\n  const sortedArrayIndexLengthMinusSix = sortedArrayIndexLength - 6\n  const sortedArrayIndexLengthMinusSeven = sortedArrayIndexLength - 7\n  const sortedArrayIndexLengthMinusEight = sortedArrayIndexLength - 8\n  const sortedArrayIndexLengthMinusNine = sortedArrayIndexLength - 9\n  const sortedArrayIndexLengthMinusTen = sortedArrayIndexLength - 10\n  const sortedArrayIndexLengthMinusEleven = sortedArrayIndexLength - 11\n  const sortedArrayIndexLengthMinusTwelve = sortedArrayIndexLength - 12\n  const sortedArrayIndexLengthMinusThirteen = sortedArrayIndexLength - 13\n  const sortedArrayIndexLengthMinusFourteen = sortedArrayIndexLength - 14\n  const sortedArrayIndexLengthMinusFifteen = sortedArrayIndexLength - 15\n  const sortedArrayIndexLengthMinusSixteen = sortedArrayIndexLength - 16\n  const sortedArrayIndexLengthMinusSeventeen = sortedArrayIndexLength - 17\n  const sortedArrayIndexLengthMinusEighteen = sortedArrayIndexLength - 18\n  const sortedArrayIndexLengthMinusNineteen = sortedArrayIndexLength - 19\n  const sortedArrayIndexLengthMinusTwenty = sortedArrayIndexLength - 20\n  const sortedArrayIndexLengthMinusTwentyOne = sortedArrayIndexLength - 21\n  const sortedArrayIndexLengthMinusTwentyTwo = sortedArrayIndexLength - 22\n  const sortedArrayIndexLengthMinusTwentyThree = sortedArrayIndexLength - 23\n  const sortedArrayIndexLengthMinusTwentyFour = sortedArrayIndexLength - 24\n  const sortedArrayIndexLengthMinusTwentyFive = sortedArrayIndexLength - 25\n  const sortedArrayIndexLengthMinusTwentySix = sortedArrayIndexLength - 26\n  const sortedArrayIndexLengthMinusTwentySeven = sortedArrayIndexLength - 27\n  const sortedArrayIndexLengthMinusTwentyEight = sortedArrayIndexLength - 28\n  const sortedArrayIndexLengthMinusTwentyNine = sortedArrayIndexLength - 29\n  const sortedArrayIndexLengthMinusThirty = sortedArrayIndexLength - 30\n  const sortedArrayIndexLengthMinusThirtyOne = sortedArrayIndexLength - 31\n  const sortedArrayIndexLengthMinusThirtyTwo = sortedArrayIndexLength - 32\n  const sortedArrayIndexLengthMinusThirtyThree = sortedArrayIndexLength - 33\n  const sortedArrayIndexLengthMinusThirtyFour = sortedArrayIndexLength - 34\n  const sortedArrayIndexLengthMinusThirtyFive = sortedArrayIndexLength - 35\n  const sortedArrayIndexLengthMinusThirtySix = sortedArrayIndexLength - 36\n  const sortedArrayIndexLengthMinusThirtySeven = sortedArrayIndexLength - 37\n  const sortedArrayIndexLengthMinusThirtyEight = sortedArrayIndexLength - 38\n  const sortedArrayIndexLengthMinusThirtyNine = sortedArrayIndexLength - 39\n  const sortedArrayIndexLengthMinusForty = sortedArrayIndexLength - 40\n  const sortedArrayIndexLengthMinusFortyOne = sortedArrayIndexLength - 41\n  const sortedArrayIndexLengthMinusFortyTwo = sortedArrayIndexLength - 42\n  const sortedArrayIndexLengthMinusFortyThree = sortedArrayIndexLength - 43\n  const sortedArrayIndexLengthMinusFortyFour = sortedArrayIndexLength - 44\n  const sortedArrayIndexLengthMinusFortyFive = sortedArrayIndexLength - 45\n  const sortedArrayIndexLengthMinusFortySix = sortedArrayIndexLength - 46\n  const sortedArrayIndexLengthMinusFortySeven = sortedArrayIndexLength - 47\n  const sortedArrayIndexLengthMinusFortyEight = sortedArrayIndexLength - 48\n  const sortedArrayIndexLengthMinusFortyNine = sortedArrayIndexLength - 49\n  const sortedArrayIndexLengthMinusFifty = sortedArrayIndexLength - 50\n  const sortedArrayIndexLengthMinusFiftyOne = sortedArrayIndexLength - 51\n  const sortedArrayIndexLengthMinusFiftyTwo = sortedArrayIndexLength - 52\n  const sortedArrayIndexLengthMinusFiftyThree = sortedArrayIndexLength - 53\n  const sortedArrayIndexLengthMinusFiftyFour = sortedArrayIndexLength - 54\n  const sortedArrayIndexLengthMinusFiftyFive = sortedArrayIndexLength - 55\n  const sortedArrayIndexLengthMinusFiftySix = sortedArrayIndexLength - 56\n  const sortedArrayIndexLengthMinusFiftySeven = sortedArrayIndexLength - 57\n  const sortedArrayIndexLengthMinusFiftyEight = sortedArrayIndexLength - 58\n  const sortedArrayIndexLengthMinusFiftyNine = sortedArrayIndexLength - 59\n  const sortedArrayIndexLengthMinusSixty = sortedArrayIndexLength - 60\n  const sortedArrayIndexLengthMinusSixtyOne = sortedArrayIndexLength - 61\n  const sortedArrayIndexLengthMinusSixtyTwo = sortedArrayIndexLength - 62\n  const sortedArrayIndexLengthMinusSixtyThree = sortedArrayIndexLength - 63\n  const sortedArrayIndexLengthMinusSixtyFour = sortedArrayIndexLength - 64\n  const sortedArrayIndexLengthMinusSixtyFive = sortedArrayIndexLength - 65\n  const sortedArrayIndexLengthMinusSixtySix = sortedArrayIndexLength - 66\n  const sortedArrayIndexLengthMinusSixtySeven = sortedArrayIndexLength - 67\n  const sortedArrayIndexLengthMinusSixtyEight = sortedArrayIndexLength - 68\n  const sortedArrayIndexLengthMinusSixtyNine = sortedArrayIndexLength - 69\n  const sortedArrayIndexLengthMinusSeventy = sortedArrayIndexLength - 70\n  const sortedArrayIndexLengthMinusSeventyOne = sortedArrayIndexLength - 71\n  const sortedArrayIndexLengthMinusSeventyTwo = sortedArrayIndexLength - 72\n  const sortedArrayIndexLengthMin", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantCount = consonants.reduce((acc, c) => {\n    return acc + (s.indexOf(c)!== -1? 1 : 0);\n  }, 0);\n  if (consonantCount === n) {\n    words.push(s);\n  }\n  const lastWord = s.split(' ').pop();\n  const lastWordIndex = s.indexOf(lastWord);\n  if (lastWordIndex!== -1) {\n    const lastWordLength = lastWord.length;\n    const lastWordConsonantCount = consonants.reduce((acc, c) => {\n      return acc + (s.indexOf(c, lastWordIndex + lastWordLength)!== -1? 1 : 0);\n    }, 0);\n    if (lastWordConsonantCount === n) {\n      words.push(s);\n    }\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find line up the closest vowel that stands digest between \n   two consonants from the right proper side of the word (case sheath sensitive). \n  \n   Vowels vowel in the beginning and ending conclusion doesn't count reckon. Return render empty string bowed stringed instrument if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given contribute string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find line up the closest vowel that stands digest between \n   two consonants from the right proper side of the word (case sheath sensitive). \n  \n   Vowels vowel in the beginning and ending conclusion doesn't count reckon. Return render empty string bowed stringed instrument if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given contribute string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonantCount = consonants.reduce((acc, c, i) => {\n    if (word.indexOf(c)!== -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  const vowelCount = vowels.reduce((acc, v, i) => {\n    if (word.indexOf(v)!== -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  if (consonantCount === 0) {\n    return \"\"\n  }\n  if (vowelCount === 0) {\n    return \"\"\n  }\n  const closestVowel = vowels.reduce((acc, v, i) => {\n    if (Math.abs(vowelCount - consonantCount) < Math.abs(vowelCount - acc)) {\n      acc = v\n    }\n    return acc\n  }, vowels[0])\n  return word.replace(word.substring(word.indexOf(closestVowel) + 1), closestVowel)\n}\n\nconsole.log(getClosestVowel(\"yogurt\"))\nconsole.log(getClosestVowel(\"FULL\"))\nconsole.log(getClosestVowel(\"quick\"))\nconsole.log(getClosestVowel(\"ab\"))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings string section consist of open candid \n   parentheses' (' or close airless parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string chain will be good estimable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings string section consist of open candid \n   parentheses' (' or close airless parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string chain will be good estimable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case event of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case event of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  >>> longest([1, 2, 3, 4, 5])\n  5\n  >>> longest([1, 2, 3, 4, 5, 6])\n  6\n  >>> longest([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst longest = (strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr > prev) {\n      return curr;\n    }\n    return prev;\n  }, 0);\n};\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  13\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  14\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  15\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  17\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  19\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  22\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  23\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  >>> longest([1, 2, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length distance k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length distance k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxLen = 1\n  const maxIndex = 0\n\n  for (let i = 1; i < len; i++) {\n    const cur = arr[i]\n    const curLen = 1\n    const curIndex = i\n\n    while (curLen < k) {\n      if (curLen + maxLen < k) {\n        curLen += maxLen\n        curIndex = maxIndex\n      } else {\n        curLen = k\n        curIndex = maxIndex\n      }\n\n      if (cur > max) {\n        max = cur\n        maxLen = curLen\n        maxIndex = curIndex\n      }\n    }\n  }\n\n  return [max, maxLen, maxIndex]\n}\n\nconst test = (arr, k) => {\n  const [max, maxLen, maxIndex] = maximum(arr, k)\n  console.log(`max: ${max}`)\n  console.log(`maxLen: ${maxLen}`)\n  console.log(`maxIndex: ${maxIndex}`)\n}\n\ntest([-3, -4, 5], 3)\ntest([4, -4, 4], 2)\ntest([-3, 2, 1, 2, -1, -2, 1], 1)\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in even positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in even positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  let sum = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string bowed stringed instrument and \n   returns true truthful if the date is valid otherwise false delusive. \n   The date is valid if all of the following rules dominion are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher eminent than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher eminent than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string bowed stringed instrument and \n   returns true truthful if the date is valid otherwise false delusive. \n   The date is valid if all of the following rules dominion are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher eminent than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher eminent than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[3], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (month == 1 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 3 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 5 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 7 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 8 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 10 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 12 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validateDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[3], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (month == 1 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 3 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 5 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 7 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 8 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 10 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 12 && year % 4 == 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validateDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[3], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n  alphabet, ord('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted3 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted4 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted5 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted6 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted7 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted8 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted9 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted10 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted11 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted12 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted13 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return isSorted;\n};\n\nconst isSorted14 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = sorted.every((x, i)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  if (start > end) {\n    return \"NO\";\n  }\n  return `${start}${end}`;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1;\n};\n\nconst main = () => {\n  const [interval1, interval2] = [\n    [1, 2],\n    [2, 3],\n  ];\n  const [intersection, primeNumber] = [\n    intersection(interval1, interval2),\n    isPrimeNumber(intersection),\n  ];\n  console.log(`${intersection} is a ${primeNumber} prime number`);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > 0) {\n        result += 1;\n      } else if (arr[i] < 0) {\n        result -= 1;\n      }\n    }\n    return result;\n  };\n  const product = (arr) => {\n    let result = 1;\n    for (let i = 0; i < arr.length; i++) {\n      result *= arr[i];\n    }\n    return result;\n  };\n  const zodiac = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > 0) {\n        result += 1;\n      } else if (arr[i] < 0) {\n        result -= 1;\n      }\n    }\n    return result;\n  };\n  return (arr) => {\n    if (arr.length === 0) {\n      return null;\n    }\n    return sign(arr) * product(arr) * zodiac(arr);\n  };\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  dp[3] = grid[1][0]\n  dp[4] = grid[1][1]\n  dp[5] = grid[1][2]\n  dp[6] = grid[2][0]\n  dp[7] = grid[2][1]\n  dp[8] = grid[2][2]\n  for (let i = 3; i < n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2]\n  }\n  let min = dp[0]\n  let min_index = 0\n  for (let i = 1; i < n; i++) {\n    if (dp[i] < min) {\n      min = dp[i]\n      min_index = i\n    }\n  }\n  let path = []\n  let index = min_index\n  while (index > 0) {\n    path.push(grid[index][0])\n    index--\n  }\n  return path\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconsole.log(minPath(grid, 3))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor(a, b);\n  }\n  return a;\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n  * Return a greatest common factor of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / leastCommonMultiple(a, b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes choose a string as input which contains incorporate only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false delusive \n   isNested('[][]') ➞ false fake \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes choose a string as input which contains incorporate only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false delusive \n   isNested('[][]') ➞ false fake \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const isSquareBracket = (string) = > {\n    const isBracket = (string) = > {\n      const isBracket = (string) = > {\n        const isBracket = (string) = > {\n          const isBracket = (string) = > {\n            const isBracket = (string) = > {\n              const isBracket = (string) = > {\n                const isBracket = (string) = > {\n                  const isBracket = (string) = > {\n                    const isBracket = (string) = > {\n                      const isBracket = (string) = > {\n                        const isBracket = (string) = > {\n                          const isBracket = (string) = > {\n                            const isBracket = (string) = > {\n                              const isBracket = (string) = > {\n                                const isBracket = (string) = > {\n                                  const isBracket = (string) = > {\n                                    const isBracket = (string) = > {\n                                      const isBracket = (string) = > {\n                                        const isBracket = (string) = > {\n                                          const isBracket = (string) = > {\n                                            const isBracket = (string) = > {\n                                              const isBracket = (string) = > {\n                                                const isBracket = (string) = > {\n                                                  const isBracket = (string) = > {\n                                                    const isBracket = (string) = > {\n                                                      const isBracket = (string) = > {\n                                                        const isBracket = (string) = > {\n                                                          const isBracket = (string) = > {\n                                                           const isBracket = (string) = > {\n                                                            const isBracket = (string) = > {\n                                                            }\n                                                          }\n                                                          }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares32 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSqu", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter = lastChar.match(/[0-9]/);\n  return isALetter &&!isNotALetter;\n};\n\n/* Create a function that returns true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter = lastChar.match(/[0-9]/);\n  return isALetter &&!isNotALetter;\n};\n\n/* Create a function that returns true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter = lastChar.match(/[0-9]/);\n  return isALetter &&!isNotALetter;\n};\n\n/* Create a function that returns true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter = lastChar.match(/[0-9]/);\n  return isALetter &&!isNotALetter;\n};\n\n/* Create a function that returns true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter = lastChar.match(/[0-9]/);\n  return isALetter &&!isNotALetter;\n};\n\n/* Create a function that returns true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter = lastChar.match(/[0-9]/);\n  return isALetter &&!isNotALetter;\n};\n\n/* Create a function that returns true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIs", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i];\n        index = i;\n      }\n    }\n  }\n  return index;\n};\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  \n  Examples:\n  largestNumber([1,2,3,4,5]) = 5\n  largestNumber([1,2,3,4]) = 4\n  largestNumber([1,2,3]) = 3\n  largestNumber([1,2]) = 2\n  largestNumber([1]) = 1\n  largestNumber([]) = 0\n  */\nconst largestNumber = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  \n  Examples:\n  smallestNumber([1,2,3,4,5]) = 1\n  smallestNumber([1,2,3,4]) = 1\n  smallestNumber([1,2,3]) = 1\n  smallestNumber([1,2]) = 1\n  smallestNumber([1]) = 1\n  smallestNumber([]) = 0\n  */\nconst smallestNumber = (arr) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  \n  Examples:\n  largestNumber([1,2,3,4,5]) = 5\n  largestNumber([1,2,3,4]) = 4\n  largestNumber([1,2,3]) = 3\n  largestNumber([1,2]) = 2\n  largestNumber([1]) = 1\n  largestNumber([]) = 0\n  */\nconst largestNumber = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  \n  Examples:\n  smallestNumber([1,2,3,4,5]) = 1\n  smallestNumber([1,2,3,4]) = 1\n  smallestNumber([1,2,3]) = 1\n  smallestNumber([1,2]) = 1\n  smallestNumber([1]) = 1\n  smallestNumber([]) = 0\n  */\nconst smallestNumber = (arr) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  \n  Examples:\n  largestNumber([1,2,3,4,5]) = 5\n  largestNumber([1,2,3,4]) = 4\n  largestNumber([1,2,3]) = 3\n  largestNumber([1,2]) = 2\n  largestNumber([1]) = 1\n  largestNumber([]) = 0\n  */\nconst largestNumber = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  \n  Examples:\n  smallestNumber([1,2,3,4,5]) = 1\n  smallestNumber([1,2,3,4]) = 1\n  smallestNumber([1,2,3]) = 1\n  smallestNumber([1,2]) = 1\n  smallestNumber([1]) = 1\n  smallestNumber([]) = 0\n  */\nconst smallestNumber = (arr) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  \n  Examples:\n  largestNumber([1,2,3,4,5]) = 5\n  largestNumber([1,2,3,4]) = 4\n  largestNumber([1,2,3]) = 3\n  largestNumber([1,2]) = 2\n  largestNumber([1]) = 1\n  largestNumber([]) = 0\n  */\nconst largestNumber = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  \n  Examples:\n  smallestNumber([1,2,3,4,5]) = 1\n  smallestNumber([1,2,3,4]) = 1\n  smallestNumber([1,2,3]) = 1\n  smallestNumber([1,2]) = 1\n  smallestNumber([1]) = 1\n  smallestNumber([]) = 0\n  */\nconst smallestNumber", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0, min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max = Math.max(max, lst[i]);\n    } else if (lst[i] > 0) {\n      min = Math.min(min, lst[i]);\n    }\n  }\n  if (max === 0 && min === 0) {\n    return (null, null);\n  } else {\n    return (max, min);\n  }\n};\n\n/*\n  Given a list of integers, return the largest and smallest of the list.\n  If there is no largest or smallest, return null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0, min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max === 0 && min === 0) {\n    return (null, null);\n  } else {\n    return (max, min);\n  }\n};\n\n/*\n  Given a list of integers, return the largest and smallest of the list.\n  If there is no largest or smallest, return null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0, min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max === 0 && min === 0) {\n    return (null, null);\n  } else {\n    return (max, min);\n  }\n};\n\n/*\n  Given a list of integers, return the largest and smallest of the list.\n  If there is no largest or smallest, return null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0, min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max === 0 && min === 0) {\n    return (null, null);\n  } else {\n    return (max, min);\n  }\n};\n\n/*\n  Given a list of integers, return the largest and smallest of the list.\n  If there is no largest or smallest, return null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0, min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max === 0 && min === 0) {\n    return (null, null);\n  } else {\n    return (max, min);\n  }\n};\n\n/*\n  Given a list of integers, return the largest and smallest of the list.\n  If there is no largest or smallest, return null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0, min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max === 0 && min === 0) {\n    return (null, null);\n  } else {\n    return (max, min);\n  }\n};\n\n/*\n  Given a list of integers, return the largest and smallest of the list.\n  If there is no largest or smallest, return null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) {\n     return a;\n   } else if (a < b) {\n     return b;\n   } else {\n     return null;\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n}\n\n/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the smaller bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 1 \n   compareOne(1, \" 2,3 \") ➞ 1 \n   compareOne(\"5,1\", \" 6 \") ➞ 1 \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) {\n     return b;\n   } else if (a < b) {\n     return a;\n   } else {\n     return null;\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else {\n    return null;\n  }\n}\n\n/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 5,1 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) {\n     return a;\n   } else if (a < b) {\n     return b;\n   } else {\n     return null;\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n}\n\n/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the smaller bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 1 \n   compareOne(1, \" 2,3 \") ➞ 1 \n   compareOne(\"5,1\", \" 6 \") ➞ 1 \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) {\n     return b;\n   } else if (a < b) {\n     return a;\n   } else {\n     return null;\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return b;\n  } else if (a < b) {\n    return a;\n  } else {\n    return null;\n  }\n}\n\n/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) {\n     return a;\n   } else if (a < b) {\n     return b;\n   } else {\n     return null;\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n}\n\n/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the smaller bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 1 \n   compareOne(1, \" 2,3 \") ➞ 1 \n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 negative cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 negative cocksure odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumNegativeOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumPositiveOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 negative cocksure odd numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegativeOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 negative cocksure even numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegativeEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositiveEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure odd numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositiveOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 negative cocksure even numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegativeEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 negative cocksure odd numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualTo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1\n  for (let i = 2; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial20(n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const prefix = string.slice(0, i + 1)\n    if (prefix.length > 0) {\n      prefixes.push(prefix)\n      current.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n      current.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const current = []\n  let i = 0\n  while (i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces3 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces4 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces5 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces6 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces7 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces8 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces9 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces10 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces11 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces12 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces13 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces14 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces15 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces16 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces17 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s{2,}/g, '-');\n  }\n  return text;\n};\n\nconst fixSpaces18 = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing a file's name, and returns return \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following trace conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string bowed stringed instrument representing a file's name, and returns return \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following trace conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex2 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex3 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex4 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex5 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex6 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex7 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex8 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex9 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}$/;\n  const regex10 = /^[a-zA-Z]\\d{1,3}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1,2}\\.\\d{1,3}[a-zA-Z]{1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing present a sentence,\n   the sentence contains some words word separated by a space quad, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths distance are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing present a sentence,\n   the sentence contains some words word separated by a space quad, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths distance are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength = 0\n  let newWordsIndex = 0\n  let newWordsLength", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   let x = x.split(\"/\")\n   let n = n.split(\"/\")\n   let x = x[0] + x[1]\n   let n = n[0] + n[1]\n   return x === n\n }\n */\n\nfunction simplify(x, n) {\n    let x = x.split(\"/\")\n    let n = n.split(\"/\")\n    let x = x[0] + x[1]\n    let n = n[0] + n[1]\n    return x === n\n}\n\nconsole.log(simplify(\"1/5\", \" 5/1 \"))\nconsole.log(simplify(\"1/6\", \" 2/1 \"))\nconsole.log(simplify(\"7/10\", \" 10/2 \"))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddLeftovers = nums.filter((num) => num % 10 === 1 && num % 100!== 11)\n  const oddRight = nums.filter((num) => num % 10 === 1 && num % 100!== 11)\n  const evenLeftovers = nums.filter((num) => num % 10 === 0 && num % 100!== 11)\n  const evenRight = nums.filter((num) => num % 10 === 0 && num % 100!== 11)\n  const oddLeft = nums.filter((num) => num % 10 === 1 && num % 100 === 11)\n  const oddRight = nums.filter((num) => num % 10 === 1 && num % 100 === 11)\n  const evenLeft = nums.filter((num) => num % 10 === 0 && num % 100 === 11)\n  const evenRight = nums.filter((num) => num % 10 === 0 && num % 100 === 11)\n  const odd = oddLeft.concat(oddRight)\n  const even = evenLeft.concat(evenRight)\n  const leftovers = odd.concat(even)\n  const leftoversLength = leftovers.length\n  const leftoversOdd = leftovers.filter((num) => num % 10 === 1 && num % 100!== 11)\n  const leftoversEven = leftovers.filter((num) => num % 10 === 0 && num % 100!== 11)\n  const leftoversOddLength = leftoversOdd.length\n  const leftoversEvenLength = leftoversEven.length\n  const oddLeftLength = oddLeft.length\n  const oddRightLength = oddRight.length\n  const evenLeftLength = evenLeft.length\n  const evenRightLength = evenRight.length\n  const leftoversLengthOdd = leftoversLength - oddLeftLength - oddRightLength\n  const leftoversLengthEven = leftoversLength - evenLeftLength - evenRightLength\n  const leftoversOddLengthOdd = leftoversOddLength - oddLeftLength - oddRightLength\n  const leftoversOddLengthEven = leftoversOddLength - evenLeftLength - evenRightLength\n  const leftoversEvenLengthOdd = leftoversEvenLength - oddLeftLength - oddRightLength\n  const leftoversEvenLengthEven = leftoversEvenLength - evenLeftLength - evenRightLength\n  const leftoversLengthOddOdd = leftoversLengthOdd - oddLeftLength - oddRightLength\n  const leftoversLengthEvenOdd = leftoversLengthEvenOdd - evenLeftLength - oddRightLength\n  const leftoversLengthOddEven = leftoversLengthOdd - oddLeftLength - evenRightLength\n  const leftoversLengthEvenEven = leftoversLengthEvenOdd - evenLeftLength - evenRightLength\n  const leftoversOddOdd = leftoversOdd.filter((num) => num % 10 === 1 && num % 100!== 11)\n  const leftoversEvenOdd = leftoversEven.filter((num) => num % 10 === 0 && num % 100!== 11)\n  const leftoversOddEven = leftoversOdd.filter((num) => num % 10 === 1 && num % 100 === 11)\n  const leftoversEvenEven = leftoversEven.filter((num) => num % 10 === 0 && num % 100 === 11)\n  const leftoversOddOddLengthOdd = leftoversOddOdd.length\n  const leftoversOddOddLengthEven = leftoversOddOdd.length\n  const leftoversOddEvenLengthOdd = leftoversOddEven.length\n  const leftoversOddEvenLengthEven = leftoversOddEven.length\n  const leftoversOddOddLengthOddOdd = leftoversOddOddLengthOdd - oddLeftLength - oddRightLength\n  const leftoversOddOddLengthOddEven = leftoversOddOddLengthOdd - evenLeftLength - oddRightLength\n  const leftoversOddOddLengthOddOddEven = leftoversOddOddLengthOddOdd - oddLeftLength - evenRightLength\n  const leftoversOddOddLengthOddEvenOdd = leftoversOddOddLengthOddOddEven - oddLeftLength - evenRightLength\n  const leftoversOddOddLengthEvenOdd = leftoversOddOddLengthOdd - evenLeftLength - oddRightLength\n  const leftoversOddOddLengthEvenOdd = leftoversOddOddLengthOdd - evenLeftLength - evenRightLength\n  const leftoversOddEvenLengthOdd = leftoversOddEvenLengthOdd - oddLeftLength - evenRightLength\n  const leftoversOddEvenLengthOdd = leftoversOddEvenLengthOdd - evenLeftLength - oddRightLength\n  const leftoversOddEvenLengthOddOdd = leftoversOddEvenLengthOddOdd - oddLeftLength - evenRightLength\n  const leftoversOddEvenLengthOddEven = leftoversOddEvenLengthOddOdd - evenLeftLength - evenRightLength\n  const leftoversOddOddOddOdd = leftoversOddOdd.filter((num) => num % 10 === 1 && num % 100!== 11)\n  const leftoversOddEvenOddOdd = leftoversOddEven.filter((num) => num % 10 === 0 && num % 100!== 11)\n  const leftoversOddOddEvenOdd = leftoversOddOdd.filter((num) => num % 10 === 1 && num % 100 === 11)\n  const leftoversOddOddEvenOdd = leftoversOddOdd.filter((num) => num % 10 === 0 && num % 100 === 11)\n  const leftoversOddOddOddEvenOdd = leftoversOddOdd.filter((num) => num % 10 === 1 && num % 100 === 11)\n  const leftoversOddOddEvenEvenOdd = leftoversOddOdd.filter((num) => num % 10 === 0 && num % 100 === 11)\n  const leftoversOddOddOddEvenEvenOdd = leftoversOddOdd.filter((num) => num % 10 === 1 && num % 100 === 11)\n  const leftoversOddOddEvenOdd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let num = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          num++\n        }\n      }\n    }\n  }\n  return num\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing check all planets whose orbits are \n   located between the orbit eye socket of planet1 and the orbit eye socket of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing check all planets whose orbits are \n   located between the orbit eye socket of planet1 and the orbit eye socket of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1 = planets.indexOf(planet1)\n  const planet2 = planets.indexOf(planet2)\n  if (planet1 === -1 || planet2 === -1) {\n    return () => {}\n  }\n  const planet1_orbit = planets.slice(0, planet1 + 1)\n  const planet2_orbit = planets.slice(planet2 + 1)\n  const planet1_orbit_index = planet1_orbit.indexOf(planet1)\n  const planet2_orbit_index = planet2_orbit.indexOf(planet2)\n  const planet1_orbit_index_end = planet1_orbit_index + planet1_orbit.length\n  const planet2_orbit_index_end = planet2_orbit_index + planet2_orbit.length\n  const planet1_orbit_end = planet1_orbit_index_end + 1\n  const planet2_orbit_end = planet2_orbit_index_end + 1\n  const planet1_orbit_sorted = planet1_orbit.slice(0, planet1_orbit_end)\n  const planet2_orbit_sorted = planet2_orbit.slice(0, planet2_orbit_end)\n  const planet1_orbit_sorted_index = planet1_orbit_sorted.indexOf(planet1)\n  const planet2_orbit_sorted_index = planet2_orbit_sorted.indexOf(planet2)\n  const planet1_orbit_sorted_end = planet1_orbit_sorted_index + planet1_orbit_sorted.length\n  const planet2_orbit_sorted_end = planet2_orbit_sorted_index + planet2_orbit_sorted.length\n  const planet1_orbit_sorted_sorted = planet1_orbit_sorted.slice(0, planet1_orbit_sorted_end)\n  const planet2_orbit_sorted_sorted = planet2_orbit_sorted.slice(0, planet2_orbit_sorted_end)\n  const planet1_orbit_sorted_sorted_index = planet1_orbit_sorted_sorted.indexOf(planet1)\n  const planet2_orbit_sorted_sorted_index = planet2_orbit_sorted_sorted.indexOf(planet2)\n  const planet1_orbit_sorted_sorted_end = planet1_orbit_sorted_sorted_index + planet1_orbit_sorted_sorted.length\n  const planet2_orbit_sorted_sorted_end = planet2_orbit_sorted_sorted_index + planet2_orbit_sorted_sorted.length\n  const planet1_orbit_sorted_sorted_sorted = planet1_orbit_sorted_sorted.slice(0, planet1_orbit_sorted_sorted_end)\n  const planet2_orbit_sorted_sorted_sorted = planet2_orbit_sorted_sorted.slice(0, planet2_orbit_sorted_sorted_end)\n  const planet1_orbit_sorted_sorted_sorted_index = planet1_orbit_sorted_sorted_sorted.indexOf(planet1)\n  const planet2_orbit_sorted_sorted_sorted_index = planet2_orbit_sorted_sorted_sorted.indexOf(planet2)\n  const planet1_orbit_sorted_sorted_sorted_end = planet1_orbit_sorted_sorted_sorted_index + planet1_orbit_sorted_sorted_sorted.length\n  const planet2_orbit_sorted_sorted_sorted_end = planet2_orbit_sorted_sorted_sorted_index + planet2_orbit_sorted_sorted_sorted.length\n  const planet1_orbit_sorted_sorted_sorted_sorted = planet1_orbit_sorted_sorted_sorted.slice(0, planet1_orbit_sorted_sorted_sorted_end)\n  const planet2_orbit_sorted_sorted_sorted_sorted = planet2_orbit_sorted_sorted_sorted_sorted.slice(0, planet2_orbit_sorted_sorted_sorted_end)\n  const planet1_orbit_sorted_sorted_sorted_sorted_index = planet1_orbit_sorted_sorted_sorted_sorted.indexOf(planet1)\n  const planet2_orbit_sorted_sorted_sorted_sorted_index = planet2_orbit_sorted_sorted_sorted_sorted.indexOf(planet2)\n  const planet1_orbit_sorted_sorted_sorted_sorted_end = planet1_orbit_sorted_sorted_sorted_sorted_index + planet1_orbit_sorted_sorted_sorted_sorted.length\n  const planet2_orbit_sorted_sorted_sorted_sorted_end = planet2_orbit_sorted_sorted_sorted_sorted_index + planet2_orbit_sorted_sorted_sorted_sorted.length\n  const planet1_orbit_sorted_sorted_sorted_sorted_sorted = planet1_orbit_sorted_sorted_sorted_sorted.slice(0, planet1_orbit_sorted_sorted_sorted_s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst sumLength = (s) => {\n  const len = s.length\n  const sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s[i].length\n  }\n  return sum\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_12 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    const sum = sumLength(s)\n    if (sum % 2 === 1) {\n      sorted.push(s)\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 2)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2)\n  '0 1'\n  >>> stringSequence(5, 3, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1, 0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l, p) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1, 0, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l, p, q) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1, 2)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1, 0, 1, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l, p, q, r) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1, 2, 3)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1, 0, 1, 2, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l, p, q, r, s) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1, 2, 3, 4)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1, 0, 1, 2, 3, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l, p, q, r, s, t) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1, 2, 3, 4, 5)\n  '0 1'\n  >>> stringSequence(5, 3, 2, 1, 0, 1, 2, 3, 4, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, k, m, l, p, q, r, s, t, u) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers numeral \n   in the list that are odd. Ignore numbers phone number that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers numeral \n   in the list that are odd. Ignore numbers phone number that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   for (i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i]\n     }\n   }\n   return sum\n }\n */\n\nfunction doubleTheDifference(lst) {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling touch when the result of some long - awaited expect \n   event is finally last known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task job is to determine if a person correctly guessed the results of a number numeral of matches couple. \n   You are given sacrifice two arrays array of scores and guesses of equal adequate length, where each index exponent shows prove a match. \n   Return an array of the same length duration denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling touch when the result of some long - awaited expect \n   event is finally last known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task job is to determine if a person correctly guessed the results of a number numeral of matches couple. \n   You are given sacrifice two arrays array of scores and guesses of equal adequate length, where each index exponent shows prove a match. \n   Return an array of the same length duration denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare2 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare3 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare4 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare5 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare6 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare7 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare8 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare9 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare10 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare11 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare12 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare13 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare14 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare15 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare16 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare17 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare18 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare19 = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const diff = scores[guess] - score;\n  return [diff, diff, diff, diff, diff, diff];\n};\n\nconst compare20 = (game, guess", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nconst strengthOfExtension = extension => {\n  const strength = 0;\n  const cap = extension.toUpperCase().split('').reduce((acc, char, index) => {\n    if (char.match(/[A-Z]/)) {\n      acc += char.toUpperCase().charCodeAt(index) - 65;\n    }\n    return acc;\n  }, 0);\n  const small_letters = extension.toLowerCase().split('').reduce((acc, char, index) => {\n    if (char.match(/[a-z]/)) {\n      acc += char.toUpperCase().charCodeAt(index) - 97;\n    }\n    return acc;\n  }, 0);\n  strength = cap - small_letters;\n  return strength;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const extension = ext.toLowerCase();\n    const strength_of_extension = strengthOfExtension(extension);\n    if (strength_of_extension) {\n      strength[extension] = strength_of_extension;\n    }\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.toLowerCase()\n   let b = b.toLowerCase()\n   let pattern = b.split('')\n   let patternLength = pattern.length\n   let patternIndex = 0\n   let patternIndexLength = patternIndex.length\n   let patternIndexLength = patternIndex.length\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let patternIndex = 0\n   let pattern", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lower case small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lower case small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i *", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a_b = Math.abs(a - b);\n  const a_c = Math.abs(a - c);\n  const b_c = Math.abs(b - c);\n  return a_b < a_c && b_c < a_c;\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAng", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings string section. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique singular characters. If multiple strings string have maximum number of unique \n   characters quality, return the one which comes derive first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings string section. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique singular characters. If multiple strings string have maximum number of unique \n   characters quality, return the one which comes derive first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0\n   for (let i = 0; i < words.length; i++) {\n     let count = 1\n     for (let j = 0; j < words[i].length; j++) {\n       if (words[i].charAt(j) === words[i].charAt(j + 1)) {\n         count++\n       }\n     }\n     if (count > max) {\n       max = count\n     }\n   }\n   return words[0].charAt(0) + words[0].slice(1).sort().join('')\n }\n*/\n\nconst findMax = (words) => {\n  let max = 0\n  for (let i = 0; i < words.length; i++) {\n    let count = 1\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) === words[i].charAt(j + 1)) {\n        count++\n      }\n    }\n    if (count > max) {\n      max = count\n    }\n  }\n  return words[0].charAt(0) + words[0].slice(1).sort().join('')\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]))\nconsole.log(findMax([\"name\", \" enam \", \" game plot \"]))\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct discrete characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given establish lists to build construct the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given establish lists to build construct the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[j + 1])\n      j += 2\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[j + 1])\n      j += 2\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[j + 1])\n      j += 2\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[j + 1])\n      j += 2\n    } else if (operatorValue === '**') {\n      result.push(operandValue ** operand[j + 1])\n      j += 2\n    } else {\n      result.push(operandValue)\n      j += 1\n    }\n    i += 1\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[j + 1])\n      j += 2\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[j + 1])\n      j += 2\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[j + 1])\n      j += 2\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[j + 1])\n      j += 2\n    } else if (operatorValue === '**') {\n      result.push(operandValue ** operand[j + 1])\n      j += 2\n    } else {\n      result.push(operandValue)\n      j += 1\n    }\n    i += 1\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[j + 1])\n      j += 2\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[j + 1])\n      j += 2\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[j + 1])\n      j += 2\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[j + 1])\n      j += 2\n    } else if (operatorValue === '**') {\n      result.push(operandValue ** operand[j + 1])\n      j += 2\n    } else {\n      result.push(operandValue)\n      j += 1\n    }\n    i += 1\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[j + 1])\n      j += 2\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[j + 1])\n      j += 2\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[j + 1])\n      j += 2\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[j + 1])\n      j += 2\n    } else if (operatorValue === '**') {\n      result.push(operandValue ** operand[j + 1])\n      j += 2\n    } else {\n      result.push(operandValue)\n      j += 1\n    }\n    i += 1\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha1('Hello world') == '2b9f9a9b1a3c9f5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b8e5f7a7b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const digit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing musical melodious notes in a special particular ASCII format. \n   Your task undertaking is to parse this string and return list of integers integer corresponding correspond to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole hale note, lasts four beats \n  ' o|' - half one-half note bill, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument representing musical melodious notes in a special particular ASCII format. \n   Your task undertaking is to parse this string and return list of integers integer corresponding correspond to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole hale note, lasts four beats \n 'o|' - half one-half note bill, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i].split('|');\n    const beat = parseBeat(note);\n    beats.push(beat);\n  }\n  return beats;\n};\n\nconst parseBeat = (note) => {\n  const beat = {\n    whole: 0,\n    half: 0,\n    quarter: 0\n  };\n  if (note.length === 1) {\n    beat.whole = parseNote(note[0]);\n  } else if (note.length === 2) {\n    beat.half = parseNote(note[0]);\n    beat.quarter = parseNote(note[1]);\n  } else if (note.length === 3) {\n    beat.whole = parseNote(note[0]);\n    beat.half = parseNote(note[1]);\n    beat.quarter = parseNote(note[2]);\n  }\n  return beat;\n};\n\nconst parseNote = (note) => {\n  const note_length = note.length;\n  const note_type = note.charAt(0);\n  const note_value = parseInt(note.slice(1, note_length));\n  return {\n    whole: note_length,\n    half: note_length - 1,\n    quarter: note_length - 2\n  };\n};\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  const index = string.indexOf(substring);\n  while (index!== -1) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('a', 'a')\n  'a'\n  >>> longestSubstring('aa', 'a')\n  'aa'\n  >>> longestSubstring('aaa', 'a')\n  'aaa'\n  >>> longestSubstring('aaaa', 'a')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaaa')\n  'aaaa'\n  >>> longestSubstring('aaaaa', 'aaaa')\n  'aaaaa'\n  >>> longestSubstring('aaaaaa', 'aaaa')\n  'aaaaaa'\n  >>> longestSubstring('aaaaaaa', 'aaaa')\n  'aaaaaaa'\n  >>> longestSubstring('aaaaaaaa', 'aaaa')\n  'aaaaaaaa'\n  >>> longestSubstring('aaaaaaaaa', 'aaaa')\n  'aaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from largest to smallest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) return 1\n    if (a > b) return -1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) return -1\n    if (a < b) return 1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) return 1\n    if (a > b) return -1\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n   Return the string chain with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) return 1\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = number;\n  let decimalPart = 0;\n  let decimalPartLength = 0;\n  let decimalPartIndex = 0;\n  let decimalPartIndexMax = 0;\n  let decimalPartIndexMin = 0;\n  let decimalPartIndexMinMax = 0;\n  let decimalPartIndexMaxMin = 0;\n  let decimalPartIndexMaxMinMax = 0;\n  let decimalPartIndexMaxMinMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMin", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order orderliness (smaller number issue, larger number phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order orderliness (smaller number issue, larger number phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestElements = [];\n  const closestElementsLength = 2;\n  const closestElementsIndex = 0;\n  const closestElementsDistance = Number.MAX_VALUE;\n  const closestElementsDistanceIndex = 0;\n  const closestElementsNumber = 0;\n  const closestElementsNumberIndex = 0;\n  const closestElementsNumberLength = 0;\n  const closestElementsNumberIndexLength = 0;\n  const closestElementsNumberLengthIndex = 0;\n  const closestElementsNumberIndexLengthIndex = 0;\n  const closestElementsNumberLengthIndexLength = 0;\n  const closestElementsNumberIndexLengthIndexLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closestElementsNumberIndexLengthIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const closest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((n) => (n - min) * scale)\n}\n\n/* Given a list of numbers, return the list of their logarithms\n  >>> logarithms([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst logarithms = (numbers) => {\n  return numbers.map((n) => Math.log(n))\n}\n\n/* Given a list of numbers, return the list of their exponents\n  >>> exponents([1, 2, 3, 4, 5])\n  [0.0, 2.3025850929940455, 2.6025850929940455, 2.925850929940455, 3.0]\n  */\nconst exponents = (numbers) => {\n  return numbers.map((n) => Math.exp(n))\n}\n\n/* Given a list of numbers, return the list of their square roots\n  >>> squareRoots([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst squareRoots = (numbers) => {\n  return numbers.map((n) => Math.sqrt(n))\n}\n\n/* Given a list of numbers, return the list of their square root of squares\n  >>> squareRootSquares([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst squareRootSquares = (numbers) => {\n  return numbers.map((n) => Math.sqrt(n * n))\n}\n\n/* Given a list of numbers, return the list of their square root of cubes\n  >>> squareRootCubes([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst squareRootCubes = (numbers) => {\n  return numbers.map((n) => Math.sqrt(n * n * n))\n}\n\n/* Given a list of numbers, return the list of their cube roots\n  >>> cubeRoots([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.41421, 1.73205, 2.0]\n  */\nconst cubeRoots = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 3.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootCubes([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst cubeRootCubes = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 6.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootSquares([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst cubeRootSquares = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 4.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootCubes([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst cubeRootCubes = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 5.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootSquares([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst cubeRootSquares = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 6.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootCubes([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst cubeRootCubes = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 7.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootSquares([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.2599210498948732, 1.5849625007211563, 2.0]\n  */\nconst cubeRootSquares = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1.0 / 8.0))\n}\n\n/* Given a list of numbers, return the list of their cube root of cubes\n  >>> cubeRootCubes([1, 2, 3, 4, 5])\n  [0.0, 1.0, 1.25992104989487", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAny = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAnyOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrAllOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen2 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen3 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen4 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen5 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen6 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen7 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen8 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen9 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen10 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen11 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen12 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen13 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen14 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen15 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen16 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen17 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen18 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '\\n') {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  7\n  >>> largestDivisor(18)\n  3\n  >>> largestDivisor(19)\n  11\n  >>> largestDivisor(20)\n  5\n  >>> largestDivisor(21)\n  7\n  >>> largestDivisor(22)\n  11\n  >>> largestDivisor(23)\n  13\n  >>> largestDivisor(24)\n  2\n  >>> largestDivisor(25)\n  5\n  >>> largestDivisor(26)\n  7\n  >>> largestDivisor(27)\n  11\n  >>> largestDivisor(28)\n  13\n  >>> largestDivisor(29)\n  17\n  >>> largestDivisor(30)\n  3\n  >>> largestDivisor(31)\n  11\n  >>> largestDivisor(32)\n  17\n  >>> largestDivisor(33)\n  19\n  >>> largestDivisor(34)\n  23\n  >>> largestDivisor(35)\n  29\n  >>> largestDivisor(36)\n  3\n  >>> largestDivisor(37)\n  11\n  >>> largestDivisor(38)\n  17\n  >>> largestDivisor(39)\n  19\n  >>> largestDivisor(40)\n  23\n  >>> largestDivisor(41)\n  29\n  >>> largestDivisor(42)\n  3\n  >>> largestDivisor(43)\n  11\n  >>> largestDivisor(44)\n  17\n  >>> largestDivisor(45)\n  19\n  >>> largestDivisor(46)\n  23\n  >>> largestDivisor(47)\n  29\n  >>> largestDivisor(48)\n  3\n  >>> largestDivisor(49)\n  11\n  >>> largestDivisor(50)\n  17\n  >>> largestDivisor(51)\n  19\n  >>> largestDivisor(52)\n  23\n  >>> largestDivisor(53)\n  29\n  >>> largestDivisor(54)\n  3\n  >>> largestDivisor(55)\n  11\n  >>> largestDivisor(56)\n  17\n  >>> largestDivisor(57)\n  19\n  >>> largestDivisor(58)\n  23\n  >>> largestDivisor(59)\n  29\n  >>> largestDivisor(60)\n  3\n  >>> largestDivisor(61)\n  11\n  >>> largestDivisor(62)\n  17\n  >>> largestDivisor(63)\n  19\n  >>> largestDivisor(64)\n  23\n  >>> largestDivisor(65)\n  29\n  >>> largestDivisor(66)\n  3\n  >>> largestDivisor(67)\n  11\n  >>> largestDivisor(68)\n  17\n  >>> largestDivisor(69)\n  19\n  >>> largestDivisor(70)\n  23\n  >>> largestDivisor(71)\n  29\n  >>> largestDivisor(72)\n  3\n  >>> largestDivisor(73)\n  11\n  >>> largestDivisor(74)\n  17\n  >>> largestDivisor(75)\n  19\n  >>> largestDivisor(76)\n  23\n  >>> largestDivisor(77)\n  29\n  >>> largestDivisor(78)\n  3\n  >>> largestDivisor(79)\n  11\n  >>> largestDivisor(80)\n  17\n  >>> largestDivisor(81)\n  19\n  >>> largestDivisor(82)\n  23\n  >>> largestDivisor(83)\n  29\n  >>> largestDivisor(84)\n  3\n  >>> largestDivisor(85)\n  11\n  >>> largestDivisor(86)\n  17\n  >>> largestDivisor(87)\n  19\n  >>> largestDivisor(88)\n  23\n  >>> largestDivisor(89)\n  29\n  >>> largestDivisor(90)\n  3\n  >>> largestDivisor(91)\n  11\n  >>> largestDivisor(92)\n  17\n  >>> largestDivisor(93)\n  19\n  >>> largestDivisor(94)\n  23\n  >>> largestDivisor(95)\n  29\n  >>> largestDivisor(96)\n  3\n  >>> largestDivisor(97)\n  11\n  >>> largestDivisor(98)\n  17\n  >>> largestDivisor(99)\n  19\n  >>> largestDivisor(100)\n  23\n  >>> largestDivisor(101)\n  29\n  >>> largestDivisor(102)\n  3\n  >>> largestDivisor(103)\n  11\n  >>> largestDivisor(104)\n  17\n  >>> largestDivisor(105)\n  19\n  >>> largestDivisor(106)\n  23\n  >>> largestDivisor(107)\n  29\n  >>> largestDivisor(108)\n  3\n  >>> largestDivisor(109)\n  11\n  >>> largestDivisor(110)\n  17\n  >>> largestDivisor(111)\n  19\n  >>> largestDivisor(112)\n  23\n  >>> largestDivisor(113)\n  29\n  >>> largestDivisor(114)\n  3\n  >>> largestDivisor(115)\n  11\n  >>> largestDivisor(116)\n  17\n  >>> largestDivisor(117)\n  19\n  >>> largestDivisor(118)\n  23\n  >>> largestDivisor(119)\n  29\n  >>> largestDivisor(120)\n  3\n  >>> largestDivisor(121)\n  11\n  >>> largestDivisor(122)\n  17\n  >>> largestDivisor(123)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const num = n\n  const prime = (n) => {\n    const divisors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        divisors.push(i)\n        while (n % i === 0) {\n          n /= i\n        }\n      }\n    }\n    if (n > 1) {\n      divisors.push(n)\n    }\n    return divisors\n  }\n  const primes = prime(num)\n  const factors = primes.reduce((acc, n) => {\n    const num = n\n    const factors = prime(num)\n    const newFactors = factors.reduce((acc, n) => {\n      const num = n\n      const factors = prime(num)\n      const newFactors = factors.reduce((acc, n) => {\n        const num = n\n        const factors = prime(num)\n        const newFactors = factors.reduce((acc, n) => {\n          const num = n\n          const factors = prime(num)\n          const newFactors = factors.reduce((acc, n) => {\n            const num = n\n            const factors = prime(num)\n            const newFactors = factors.reduce((acc, n) => {\n              const num = n\n              const factors = prime(num)\n              const newFactors = factors.reduce((acc, n) => {\n                const num = n\n                const factors = prime(num)\n                const newFactors = factors.reduce((acc, n) => {\n                  const num = n\n                  const factors = prime(num)\n                  const newFactors = factors.reduce((acc, n) => {\n                    const num = n\n                    const factors = prime(num)\n                    const newFactors = factors.reduce((acc, n) => {\n                      const num = n\n                      const factors = prime(num)\n                      const newFactors = factors.reduce((acc, n) => {\n                        const num = n\n                        const factors = prime(num)\n                        const newFactors = factors.reduce((acc, n) => {\n                          const num = n\n                          const factors = prime(num)\n                          const newFactors = factors.reduce((acc, n) => {\n                            const num = n\n                            const factors = prime(num)\n                            const newFactors = factors.reduce((acc, n) => {\n                              const num = n\n                              const factors = prime(num)\n                              const newFactors = factors.reduce((acc, n) => {\n                                const num = n\n                                const factors = prime(num)\n                                const newFactors = factors.reduce((acc, n) => {\n                                  const num = n\n                                  const factors = prime(num)\n                                  const newFactors = factors.reduce((acc, n) => {\n                                    const num = n\n                                    const factors = prime(num)\n                                    const newFactors = factors.reduce((acc, n) => {\n                                      const num = n\n                                      const factors = prime(num)\n                                      const newFactors = factors.reduce((acc, n) => {\n                                        const num = n\n                                        const factors = prime(num)\n                                        const newFactors = factors.reduce((acc, n) => {\n                                          const num = n\n                                          const factors = prime(num)\n                                          const newFactors = factors.reduce((acc, n) => {\n                                            const num = n\n                                            const factors = prime(num)\n                                            const newFactors = factors.reduce((acc, n) => {\n                                              const num = n\n                                              const factors = prime(num)\n                                              const newFactors = factors.reduce((acc, n) => {\n                                                const num = n\n                                                const factors = prime(num)\n                                                const newFactors = factors.reduce((acc, n) => {\n                                                  const num = n\n                                                  const factors = prime(num)\n                                                  const newFactors = factors.reduce((acc, n) => {\n                                                    const num = n\n                                                    const factors = prime(num)\n                                                    const newFactors = factors.reduce((acc, n) => {\n                                                      const num = n\n                                                      const factors = prime(num)\n                                                      const newFactors = factors.reduce((acc, n) => {\n                                                        const num = n\n                                                        const factors = prime(num)\n                                                        const newFactors = factors.reduce((acc, n) => {\n                                                          const num = n\n                                                          const factors = prime(num)\n                                                          const newFactors = factors.reduce((acc, n) => {\n                                                           const num = n\n                                                           const factors = prime(num)\n                                                           const newFactors = factors.reduce((acc, n) => {\n                                                            const num = n\n                                                            const factors = prime(num)\n                                                            const newFactors = factors.reduce((acc, n) => {\n                                                              const num = n\n                                                              const factors = prime(num)\n                                                              const newFactors =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the lowercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by a lowercase character.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the lowercase characters replaced by an uppercase character.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toCapitalizedSentenceCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toCapitalizedTitleCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toCamelCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toCamelCaseWithUnderscores = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toSnakeCaseWithUnderscores = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toPascalCaseWithUnderscores = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toCamelCaseWithSpaces = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toSnakeCaseWithSpaces = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the uppercase characters replaced by an uppercase character.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toPascalCaseWithSpaces = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '1234567", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOut = (strings, toRemove) => {\n  return strings.filter(s =>!toRemove.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  ['array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts start with \n   zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts start with \n   zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length\n  let currentBalance = 0\n  let currentOperation = 0\n  let currentOperationBalance = 0\n  let currentOperationBalanceIsNegative = false\n  let currentOperationBalanceIsNegative = false\n  let currentOperationBalanceIsZero = false\n  let currentOperationBalanceIsZero = false\n  let currentOperationBalanceIsPositive = false\n  let currentOperationBalanceIsPositive = false\n  let currentOperationBalanceIsNegativeOrZero = false\n  let currentOperationBalanceIsNegativeOrZero = false\n  let currentOperationBalanceIsPositiveOrZero = false\n  let currentOperationBalanceIsPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNegativeOrPositiveOrZero = false\n  let currentOperationBalanceIsNeg", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of primes in a given range.\n  >>> countPrimes(1, 10)\n  0\n  >>> countPrimes(1, 100)\n  1\n  >>> countPrimes(2, 100)\n  2\n  >>> countPrimes(3, 100)\n  3\n  >>> countPrimes(4, 100)\n  4\n  >>> countPrimes(5, 100)\n  5\n  >>> countPrimes(6, 100)\n  6\n  >>> countPrimes(7, 100)\n  7\n  >>> countPrimes(8, 100)\n  8\n  >>> countPrimes(9, 100)\n  9\n  >>> countPrimes(10, 100)\n  10\n  >>> countPrimes(11, 100)\n  11\n  >>> countPrimes(12, 100)\n  12\n  >>> countPrimes(13, 100)\n  13\n  >>> countPrimes(14, 100)\n  14\n  >>> countPrimes(15, 100)\n  15\n  >>> countPrimes(16, 100)\n  16\n  >>> countPrimes(17, 100)\n  17\n  >>> countPrimes(18, 100)\n  18\n  >>> countPrimes(19, 100)\n  19\n  >>> countPrimes(20, 100)\n  20\n  >>> countPrimes(21, 100)\n  21\n  >>> countPrimes(22, 100)\n  22\n  >>> countPrimes(23, 100)\n  23\n  >>> countPrimes(24, 100)\n  24\n  >>> countPrimes(25, 100)\n  25\n  >>> countPrimes(26, 100)\n  26\n  >>> countPrimes(27, 100)\n  27\n  >>> countPrimes(28, 100)\n  28\n  >>> countPrimes(29, 100)\n  29\n  >>> countPrimes(30, 100)\n  30\n  >>> countPrimes(31, 100)\n  31\n  >>> countPrimes(32, 100)\n  32\n  >>> countPrimes(33, 100)\n  33\n  >>> countPrimes(34, 100)\n  34\n  >>> countPrimes(35, 100)\n  35\n  >>> countPrimes(36, 100)\n  36\n  >>> countPrimes(37, 100)\n  37\n  >>> countPrimes(38, 100)\n  38\n  >>> countPrimes(39, 100)\n  39\n  >>> countPrimes(40, 100)\n  40\n  >>> countPrimes(41, 100)\n  41\n  >>> countPrimes(42, 100)\n  42\n  >>> countPrimes(43, 100)\n  43\n  >>> countPrimes(44, 100)\n  44\n  >>> countPrimes(45, 100)\n  45\n  >>> countPrimes(46, 100)\n  46\n  >>> countPrimes(47, 100)\n  47\n  >>> countPrimes(48, 100)\n  48\n  >>> countPrimes(49, 100)\n  49\n  >>> countPrimes(50, 100)\n  50\n  >>> countPrimes(51, 100)\n  51\n  >>> countPrimes(52, 100)\n  52\n  >>> countPrimes(53, 100)\n  53\n  >>> countPrimes(54, 100)\n  54\n  >>> countPrimes(55, 100)\n  55\n  >>> countPrimes(56, 100)\n  56\n  >>> countPrimes(57, 100)\n  57\n  >>> countPrimes(58, 100)\n  58\n  >>> countPrimes(59, 100)\n  59\n  >>> countPrimes(60, 100)\n  60\n  >>> countPrimes(61, 100)\n  61\n  >>> countPrimes(62, 100)\n  62\n  >>> countPrimes(63, 100)\n  63\n  >>> countPrimes(64, 100)\n  64\n  >>> countPrimes(65, 100)\n  65\n  >>> countPrimes(66, 100)\n  66\n  >>> countPrimes(67, 100)\n  67\n  >>> countPrimes(68, 100)\n  68\n  >>> countPrimes(69, 100)\n  69\n  >>> countPrimes(70, 100)\n  70\n  >>> countPrimes(71, 100)\n  71\n  >>> countPrimes(72, 100)\n  72\n  >>> countPrimes(73, 100)\n  73\n  >>> countPrimes(74, 100)\n  74\n  >>> countPrimes(75, 100)\n  75\n  >>> countPrimes(76, 100)\n  76\n  >>> countPrimes(77, 100)\n  77\n  >>> countPrimes(78, 100)\n  78\n  >>> countPrimes(79, 100)\n  79\n  >>> countPrimes(80, 100)\n  80\n  >>> countPrimes(81, 100)\n  81\n  >>> countPrimes(82, 100)\n  82\n  >>> countPrimes(83, 100)\n  83\n  >>> countPrimes(84, 100)\n  84\n  >>> countPrimes(85, 100)\n  85\n  >>> countPrimes(86, 100)\n  86\n  >>> countPrimes(87, 100)\n  87\n  >>> countPrimes(88, 100)\n  88\n  >>> countPrimes(89, 100)\n  89\n  >>> countPrimes(90, 100)\n  90\n  >>> countPrimes(91, 100)\n  91\n  >>> countPrimes(92, 100)\n  92\n  >>> countPrimes(93, 100)\n  93\n  >>> countPrimes(94, 100)\n  94\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n      prev += xs[i] * Math.pow(x, i);\n    }\n    return prev;\n  };\n  const x = -1;\n  let prev = poly(x);\n  while (prev === 0) {\n    x -= 0.5;\n    prev = poly(x);\n  }\n  return x;\n};\n\nconst poly = (xs, x) => {\n  let prev = 0;\n  for (let i = 0; i < xs.length; i++) {\n    prev += xs[i] * Math.pow(x, i);\n  }\n  return prev;\n};\n\nconst round = (x, n) => Math.round(x * Math.pow(10, n));\n\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n      prev += xs[i] * Math.pow(x, i);\n    }\n    return prev;\n  };\n  const x = -1;\n  let prev = poly(x);\n  while (prev === 0) {\n    x -= 0.5;\n    prev = poly(x);\n  }\n  return x;\n};\n\nconst poly = (xs, x) => {\n  let prev = 0;\n  for (let i = 0; i < xs.length; i++) {\n    prev += xs[i] * Math.pow(x, i);\n  }\n  return prev;\n};\n\nconst round = (x, n) => Math.round(x * Math.pow(10, n));\n\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n      prev += xs[i] * Math.pow(x, i);\n    }\n    return prev;\n  };\n  const x = -1;\n  let prev = poly(x);\n  while (prev === 0) {\n    x -= 0.5;\n    prev = poly(x);\n  }\n  return x;\n};\n\nconst poly = (xs, x) => {\n  let prev = 0;\n  for (let i = 0; i < xs.length; i++) {\n    prev += xs[i] * Math.pow(x, i);\n  }\n  return prev;\n};\n\nconst round = (x, n) => Math.round(x * Math.pow(10, n));\n\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n      prev += xs[i] * Math.pow(x, i);\n    }\n    return prev;\n  };\n  const x = -1;\n  let prev = poly(x);\n  while (prev === 0) {\n    x -= 0.5;\n    prev = poly(x);\n  }\n  return x;\n};\n\nconst poly = (xs, x) => {\n  let prev = 0;\n  for (let i = 0; i < xs.length; i++) {\n    prev += xs[i] * Math.pow(x, i);\n  }\n  return prev;\n};\n\nconst round = (x, n) => Math.round(x * Math.pow(10, n));\n\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n      prev += xs[i] * Math.pow(x, i);\n    }\n    return prev;\n  };\n  const x = -1;\n  let prev = poly(x);\n  while (prev === 0) {\n    x -= 0.5;\n    prev = poly(x);\n  }\n  return x;\n};\n\nconst poly = (xs, x) => {\n  let prev = 0;\n  for (let i = 0; i < xs.length; i++) {\n    prev += xs[i] * Math.pow(x, i);\n  }\n  return prev;\n};\n\nconst round = (x, n) => Math.round(x * Math.pow(10, n));\n\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n      prev += xs[i] * Math.pow(x, i);\n    }\n    return prev;\n  };\n  const x = -1;\n  let prev =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by 7, while its values at the indicies that are divisible by 7 are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeven = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by 11, while its values at the indicies that are divisible by 11 are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleven = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 11 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by 13, while its values at the indicies that are divisible by 13 are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirteen = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 13 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by 17, while its values at the indicies that are divisible by 17 are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortSeventeen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventeen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventeen = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 17 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by 19, while its values at the indicies that are divisible by 19 are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortNineteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNineteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNineteen = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 19 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by 23, while its values at the indicies that are divisible by 23 are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwentyThree([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyThree([5, 6,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode = (s) => {\n  return encodeCyclic(s);\n}\n\nconst decode = (s) => {\n  return decodeCyclic(s);\n}\n\nconst encode_cyclic = (s) => {\n  return encodeCyclic(s);\n}\n\nconst decode_cyclic = (s) => {\n  return decodeCyclic(s);\n}\n\nconst encode_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(s));\n}\n\nconst decode_cyclic_encode = (s) => {\n  return encodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_decode_cyclic_encode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst encode_cyclic_cyclic_decode_cyclic_encode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(decodeCyclic(s));\n}\n\nconst encode_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) => {\n  return decodeCyclic(encodeCyclic(decodeCyclic(s)));\n}\n\nconst decode_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_decode = (s) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - median));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return meanAbsoluteDeviation(mad);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mean = mean(n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero3 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero4 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero5 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero6 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero7 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero8 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero9 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero10 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero11 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero12 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero13 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero14 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero15 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero16 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely long farseeing line. \n   n cars car are driving left leave to right;   simultaneously, a different unlike set hardening of n cars cable car \n   are driving force right good to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n   when a car that's moving be active left leave to right proper hits strike a car that's moving travel right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight true infinitely long farseeing line. \n   n cars car are driving left leave to right;   simultaneously, a different unlike set hardening of n cars cable car \n   are driving force right good to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n   when a car that's moving be active left leave to right proper hits strike a car that's moving travel right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 - car2);\n      if (dist < n) {\n        collision += 1;\n      }\n    }\n    car += 1;\n  }\n  return collision;\n}\n*/\n\n/*\n  This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  var car = 0;\n  var collision = 0;\n  while (car < n) {\n    var car1 = Math.floor(Math.random() * n);\n    var car2 = Math.floor(Math.random() * n);\n    if (car1!= car2) {\n      var dist = Math.abs(car1 -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number numeral x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea = (a, b, h) => {\n  return (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea2 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea3 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea4 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea5 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea6 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea7 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea8 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h);\n};\n\n/*Given length of a side and high eminent return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  10\n  */\nconst trapezoidArea9 = (a, b, h) => {\n  return (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h) + (b * h) + (a * h", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const median = sorted[half];\n  return median;\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 2)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 3)\n  3\n  >>> gcd(3, -4)\n  3\n  >>> gcd(-3, 4)\n  3\n  >>> gcd(-3, -4)\n  3\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 4)\n  1\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < 0) {\n    a = -a;\n    b = -b;\n  }\n  while (b!== 0) {\n    const tmp = a;\n    a = b;\n    b = tmp % b;\n  }\n  return a;\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(2, 4)\n  8\n  >>> lcm(2, 3)\n  6\n  >>> lcm(0, 0)\n  0\n  >>> lcm(3, 0)\n  0\n  >>> lcm(3, -4)\n  0\n  >>> lcm(-3, 4)\n  0\n  >>> lcm(-3, -4)\n  0\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 4)\n  12\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 2)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, 0)\n  3\n  >>> gcd(3, -4)\n  3\n  >>> gcd(-3, 4)\n  3\n  >>> gcd(-3, -4)\n  3\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 4)\n  1\n  */\nconst gcd2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < 0) {\n    a = -a;\n    b = -b;\n  }\n  while (b!== 0) {\n    const tmp = a;\n    a = b;\n    b = tmp % b;\n  }\n  return a;\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(2, 4)\n  8\n  >>> lcm(2, 3)\n  6\n  >>> lcm(0, 0)\n  0\n  >>> lcm(3, 0)\n  0\n  >>> lcm(3, -4)\n  0\n  >>> lcm(-3, 4)\n  0\n  >>> lcm(-3, -4)\n  0\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 4)\n  12\n  */\nconst lcm2 = (a, b) => {\n  return a * b / gcd2(a, b);\n};\n\n/*Return the sum of a and b.\n  >>> sum(3, 4)\n  7\n  >>> sum(2, 4)\n  6\n  >>> sum(2, 3)\n  5\n  >>> sum(0, 0)\n  0\n  >>> sum(3, 0)\n  0\n  >>> sum(3, -4)\n  0\n  >>> sum(-3, 4)\n  0\n  >>> sum(-3, -4)\n  0\n  >>> sum(3, 4)\n  7\n  >>> sum(3, 4)\n  7\n  >>> sum(3, 4)\n  7\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/*Return the difference of a and b.\n  >>> difference(3, 4)\n  -1\n  >>> difference(2, 4)\n  -2\n  >>> difference(2, 3)\n  1\n  >>> difference(0, 0)\n  0\n  >>> difference(3, 0)\n  0\n  >>> difference(3, -4)\n  0\n  >>> difference(-3, 4)\n  0\n  >>> difference(-3, -4)\n  0\n  >>> difference(3, 4)\n  -1\n  >>> difference(3, 4)\n  -1\n  >>> difference(3, 4)\n  -1\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/*Return the product of a and b.\n  >>> product(3, 4)\n  12\n  >>> product(2, 4)\n  8\n  >>> product(2, 3)\n  6\n  >>> product(0, 0)\n  0\n  >>> product(3, 0)\n  0\n  >>> product(3, -4)\n  0\n  >>> product(-3, 4)\n  0\n  >>> product(-3, -4)\n  0\n  >>> product(3, 4)\n  12\n  >>> product(3, 4)\n  12\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3, 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 2)\n  [1, 2, 3, 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 3)\n  [1, 2, 3, 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 4)\n  [1, 2, 3, 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 5)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 6)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 7)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 8)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 9)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 10)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 11)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 12)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 13)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 14)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 15)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 16)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 17)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 18)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 19)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  >>> intersperse([1, 2, 3], 'x', 20)\n  [1, 2, 3, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']\n  */\nconst intersperse = (numbers, delimeter, length) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n    j++;\n    if (j === length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes string chain as input and returns string chain with every character quality shifted by 5 in the alphabet. \n   * / \n const encode = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes string chain as input and returns string chain with every character quality shifted by 5 in the alphabet. \n   * / \n const decode = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n */\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encode;\n// var decode = decode;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift;\n\n// var encode = encodeShift;\n// var decode = decodeShift", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelsLength = vowels.length;\n    const vowelsIndexes = [];\n    for (let i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i])!== -1) {\n            vowelsIndexes.push(i);\n        }\n    }\n    if (vowelsIndexes.length === 0) {\n        return text;\n    }\n    const vowelsIndexesLength = vowelsIndexes.length;\n    const newText = text.slice(0, vowelsIndexes[0]);\n    for (let i = 0; i < vowelsIndexesLength - 1; i++) {\n        newText += text.slice(vowelsIndexes[i] + 1, vowelsIndexes[i + 1]);\n    }\n    newText += text.slice(vowelsIndexes[vowelsIndexesLength - 1] + 1);\n    return newText;\n};\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelsLength = vowels.length;\n    const vowelsIndexes = [];\n    for (let i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i])!== -1) {\n            vowelsIndexes.push(i);\n        }\n    }\n    if (vowelsIndexes.length === 0) {\n        return text;\n    }\n    const vowelsIndexesLength = vowelsIndexes.length;\n    const newText = text.slice(0, vowelsIndexes[0]);\n    for (let i = 0; i < vowelsIndexesLength - 1; i++) {\n        newText += text.slice(vowelsIndexes[i] + 1, vowelsIndexes[i + 1]);\n    }\n    return newText;\n};\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelsLength = vowels.length;\n    const vowelsIndexes = [];\n    for (let i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i])!== -1) {\n            vowelsIndexes.push(i);\n        }\n    }\n    if (vowelsIndexes.length === 0) {\n        return text;\n    }\n    const vowelsIndexesLength = vowelsIndexes.length;\n    const newText = text.slice(0, vowelsIndexes[0]);\n    for (let i = 0; i < vowelsIndexesLength - 1; i++) {\n        newText += text.slice(vowelsIndexes[i] + 1, vowelsIndexes[i + 1]);\n    }\n    return newText;\n};\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelsLength = vowels.length;\n    const vowelsIndexes = [];\n    for (let i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i])!== -1) {\n            vowelsIndexes.push(i);\n        }\n    }\n    if (vowelsIndexes.length === 0) {\n        return text;\n    }\n    const vowelsIndexesLength = vowelsIndexes.length;\n    const newText = text.slice(0, vowelsIndexes[0]);\n    for (let i = 0; i < vowelsIndexesLength - 1; i++) {\n        newText += text.slice(vowelsIndexes[i] + 1, vowelsIndexes[i + 1]);\n    }\n    return newText;\n};\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds2 = (l, t1, t2) => {\n  return aboveThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds3 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds4 = (l, t1, t2) => {\n  return aboveThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds5 = (l, t1, t2) => {\n  return aboveThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds6 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds7 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds8 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds9 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 15)\n  true\n  */\nconst betweenThresholds10 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Calculate the power of two\n  *\n  * power(2, 2)\n  * 4\n  *\n  * power(2, 3)\n  * 8\n  *\n  * power(2, 4)\n  * 16\n  *\n  * power(2, 5)\n  * 32\n  *\n  * power(2, 6)\n  * 64\n  *\n  * power(2, 7)\n  * 128\n  *\n  * power(2, 8)\n  * 256\n  *\n  * power(2, 9)\n  * 512\n  *\n  * power(2, 10)\n  * 1024\n  *\n  * power(2, 11)\n  * 2048\n  *\n  * power(2, 12)\n  * 4096\n  *\n  * power(2, 13)\n  * 8192\n  *\n  * power(2, 14)\n  * 16384\n  *\n  * power(2, 15)\n  * 32768\n  *\n  * power(2, 16)\n  * 65536\n  *\n  * power(2, 17)\n  * 131072\n  *\n  * power(2, 18)\n  * 262144\n  *\n  * power(2, 19)\n  * 524288\n  *\n  * power(2, 20)\n  * 1048576\n  *\n  * power(2, 21)\n  * 2097152\n  *\n  * power(2, 22)\n  * 4194304\n  *\n  * power(2, 23)\n  * 8388608\n  *\n  * power(2, 24)\n  * 16777216\n  *\n  * power(2, 25)\n  * 33554432\n  *\n  * power(2, 26)\n  * 67108864\n  *\n  * power(2, 27)\n  * 134217728\n  *\n  * power(2, 28)\n  * 268435456\n  *\n  * power(2, 29)\n  * 536870912\n  *\n  * power(2, 30)\n  * 1073741824\n  *\n  * power(2, 31)\n  * 2147483648\n  *\n  * power(2, 32)\n  * 4294967296\n  *\n  * power(2, 33)\n  * 8589934592\n  *\n  * power(2, 34)\n  * 17179869184\n  *\n  * power(2, 35)\n  * 34359738368\n  *\n  * power(2, 36)\n  * 68719476736\n  *\n  * power(2, 37)\n  * 137438953472\n  *\n  * power(2, 38)\n  * 274877906944\n  *\n  * power(2, 39)\n  * 549755813888\n  *\n  * power(2, 40)\n  * 1099511627776\n  *\n  * power(2, 41)\n  * 2199023255552\n  *\n  * power(2, 42)\n  * 4398046511104\n  *\n  * power(2, 43)\n  * 8796093022208\n  *\n  * power(2, 44)\n  * 17592186044416\n  *\n  * power(2, 45)\n  * 35184372088832\n  *\n  * power(2, 46)\n  * 70368744177664\n  *\n  * power(2, 47)\n  * 140737488355328\n  *\n  * power(2, 48)\n  * 281474976710656\n  *\n  * power(2, 49)\n  * 562949953421312\n  *\n  * power(2, 50)\n  * 1125899906842624\n  *\n  * power(2, 51)\n  * 2251799813685248\n  *\n  * power(2, 52)\n  * 4503599627370496\n  *\n  * power(2, 53)\n  * 9007199254740992\n  *\n  * power(2, 54)\n  * 18014398509481984\n  *\n  * power(2, 55)\n  * 36028797018963968\n  *\n  * power(2, 56)\n  * 72057594037927936\n  *\n  * power(2, 57)\n  * 144115188075855872\n  *\n  * power(2, 58)\n  * 288230376151711744\n  *\n  * power(2, 59)\n  * 576460752303423488\n  *\n  * power(2, 60)\n  * 1152921504606846976\n  *\n  * power(2, 61)\n  * 2305843009213693952\n  *\n  * power(2, 62)\n  * 4611686018427387904\n  *\n  * power(2, 63)\n  * 9223372036854775808\n  *\n  * power(2, 64)\n  * 18446744073709551616\n  *\n  * power(2, 65)\n  * 36893488147419103232\n  *\n  * power(2, 66)\n  * 73786976294838206464", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    sameChars,\n    sameChars2\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsOpening = brackets.slice(0, bracketsLength - 1)\n  const bracketsClosing = brackets.slice(1, bracketsLength)\n\n  const bracketsOpeningLength = bracketsOpening.length\n  const bracketsClosingLength = bracketsClosing.length\n\n  const bracketsOpeningIndex = bracketsOpening.indexOf(\"<\")\n  const bracketsClosingIndex = bracketsClosing.indexOf(\">\")\n\n  if (bracketsOpeningIndex === -1 || bracketsClosingIndex === -1) {\n    return false\n  }\n\n  if (bracketsOpeningIndex!== bracketsClosingIndex) {\n    return false\n  }\n\n  return bracketsOpeningLength === bracketsClosingLength\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] > sorted[1];\n};\n\n/*Return true if list is sorted.\n  >>> sorted([1, 2, 4, 20])\n  true\n  >>> sorted([1, 20, 4, 10])\n  false\n  >>> sorted([4, 1, 0, -10])\n  true\n  */\nconst sorted = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sorted([1, 2, 4, 20])\n  true\n  >>> sorted([1, 20, 4, 10])\n  false\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst ascending = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in descending order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  true\n  */\nconst descending = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst increasing = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in decreasing order.\n  >>> sorted([1, 2, 4, 20])\n  true\n  >>> sorted([1, 20, 4, 10])\n  false\n  >>> sorted([4, 1, 0, -10])\n  true\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst increasing = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst increasing = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst increasing = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst increasing = (l) => {\n  return l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in increasing order.\n  >>> sorted([1, 2, 4, 20])\n  false\n  >>> sorted([1, 20, 4, 10])\n  true\n  >>> sorted([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return l.every", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements chemical element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements chemical element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.values());\n  const intersection_set = new Set(l2_set.values());\n  const union = new Set(l1_set.values());\n  union.addAll(l2_set.values());\n  const common_set = new Set(intersection.values());\n  return new Set(union.values()).values().filter(x => common_set.has(x));\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(20", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split('');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_array = paren_string_array.map((x) => x.split(''));\n  const paren_string_array_array_length = paren_string_array_array.length;\n  const paren_string_array_array_array = paren_string_array_array_length > 1? paren_string_array_array_length - 1 : paren_string_array_array_length;\n  const paren_string_array_array_array_length = paren_string_array_array_array.length;\n  const paren_string_array_array_array_array = paren_string_array_array_array_length > 1? paren_string_array_array_array_length - 1 : paren_string_array_array_length;\n  const paren_string_array_array_array_array_length = paren_string_array_array_array_array.length;\n  const paren_string_array_array_array_array_array = paren_string_array_array_array_array_length > 1? paren_string_array_array_array_array_length - 1 : paren_string_array_array_length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsOpening = brackets.slice(1, bracketsLength - 1)\n  const bracketsClosing = brackets.slice(bracketsLength - 1)\n\n  const bracketsOpeningLength = bracketsOpening.length\n  const bracketsClosingLength = bracketsClosing.length\n\n  const bracketsOpeningLengthClosing = bracketsOpeningLength - 1\n  const bracketsClosingLengthOpening = bracketsClosingLength - 1\n\n  const bracketsOpeningOpening = bracketsOpening.slice(0, bracketsOpeningLengthOpening)\n  const bracketsOpeningClosing = bracketsOpening.slice(bracketsOpeningLengthOpening, bracketsOpeningLength)\n  const bracketsClosingOpening = bracketsClosing.slice(0, bracketsClosingLengthOpening)\n  const bracketsClosingClosing = bracketsClosing.slice(bracketsClosingLengthOpening, bracketsClosingLength)\n\n  return bracketsOpeningOpening.every(opening => bracketsClosingOpening.includes(closing)) &&\n    bracketsOpeningClosing.every(opening => bracketsClosingClosing.includes(closing))\n}\n\nexport default correctBracketing\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return rejoinder derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return rejoinder derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative2 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative3 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative4 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative5 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative6 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative7 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative8 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative9 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative10 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative11 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative12 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i);\n  }\n  return dxs;\n};\n\nconst derivative13 = (xs) => {\n  const len = xs.length;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i] * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) * (len - i) *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*Write a function which takes a string and returns a string with all vowels removed. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. \n   Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> removeVowels(\"abcde\")\n  'abcde'\n  >>> removeVowels(\"ACEDY\")\n  'ACED'\n  */\nconst removeVowels = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*Write a function which takes a string and returns a string with all consonants removed. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. \n   Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> removeConsonants(\"abcde\")\n  'abcde'\n  >>> removeConsonants(\"ACEDY\")\n  'ACEDY'\n  */\nconst removeConsonants = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*Write a function which takes a string and returns a string with all consonants and vowels removed. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. \n   Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> removeAll(\"abcde\")\n  'abcde'\n  >>> removeAll(\"ACEDY\")\n  'ACEDY'\n  */\nconst removeAll = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*Write a function which takes a string and returns a string with all consonants and vowels removed. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. \n   Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> removeAll(\"abcde\")\n  'abcde'\n  >>> removeAll(\"ACEDY\")\n  'ACEDY'\n  */\nconst removeAll2 = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*Write a function which takes a string and returns a string with all consonants and vowels removed. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. \n   Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> removeAll(\"abcde\")\n  'abcde'\n  >>> removeAll(\"ACEDY\")\n  'ACEDY'\n  */\nconst removeAll3 = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*Write a function which takes a string and returns a string with all consonants and vowels removed. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. \n   Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> removeAll(\"abcde\")\n  'abcde'\n  >>> removeAll(\"ACEDY\")\n  'ACEDY'\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right good by shift\n   and return the result as a string bowed stringed instrument. \n   If shift > number of digits finger, return digits reversed overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right good by shift\n   and return the result as a string bowed stringed instrument. \n   If shift > number of digits finger, return digits reversed overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverse = (x) => {\n  let result = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += x[i];\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift2(12, 1)\n  \"21\"\n  >>> circularShift2(12, 2)\n  \"12\"\n  */\nconst reverse2 = (x) => {\n  let result = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += x[i];\n  }\n  return result;\n};\n\n/*\n  >>> circularShift2(12, 1)\n  \"21\"\n  >>> circularShift2(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift3(12, 1)\n  \"21\"\n  >>> circularShift3(12, 2)\n  \"12\"\n  */\nconst reverse3 = (x) => {\n  let result = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += x[i];\n  }\n  return result;\n};\n\n/*\n  >>> circularShift3(12, 1)\n  \"21\"\n  >>> circularShift3(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift4(12, 1)\n  \"21\"\n  >>> circularShift4(12, 2)\n  \"12\"\n  */\nconst reverse4 = (x) => {\n  let result = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += x[i];\n  }\n  return result;\n};\n\n/*\n  >>> circularShift4(12, 1)\n  \"21\"\n  >>> circularShift4(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift5(12, 1)\n  \"21\"\n  >>> circularShift5(12, 2)\n  \"12\"\n  */\nconst reverse5 = (x) => {\n  let result = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += x[i];\n  }\n  return result;\n};\n\n/*\n  >>> circularShift5(12, 1)\n  \"21\"\n  >>> circularShift5(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift6(12, 1)\n  \"21\"\n  >>> circularShift6(12, 2)\n  \"12\"\n  */\nconst reverse6 = (x) => {\n  let result = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += x[i];\n  }\n  return result;\n};\n\n/*\n  >>> circularShift6(12, 1)\n  \"21\"\n  >>> circularShift6(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> circularShift7(12, 1)\n  \"21\"\n  >>> circularShift7(12, 2)\n  \"12\"\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents a number numeral of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string chain that represents defend the total number of \n   the oranges and apples apple and an integer that represent map the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string bowed stringed instrument that represents a number numeral of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string chain that represents defend the total number of \n   the oranges and apples apple and an integer that represent map the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let str = s.split(\" \")\n   let num = str.reduce((a, b) => a + Number(b), 0)\n   let map = n - num\n   return map\n }\n */\n\nconst fruitDistribution = (s, n) => {\n  let str = s.split(\" \")\n  let num = str.reduce((a, b) => a + Number(b), 0)\n  let map = n - num\n  return map\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges orange \", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes node \n   your task is to pluck one of the nodes lymph node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes lymph node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned retort in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes node \n   your task is to pluck one of the nodes lymph node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes lymph node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned retort in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let ret = []\n  let min = arr[0]\n  let minIndex = 0\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      if (arr[i] % 2 === 0) {\n        ret.push([arr[i], i])\n      } else {\n        ret.push([arr[i], minIndex])\n      }\n    }\n  }\n  return ret\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest big integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest big integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search2 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search3 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search4 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search5 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search6 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search7 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search8 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search9 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search10 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search11 = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, x) => acc + x, 0);\n  const maxFreqLst = lst.filter((x) => x > 0 && x <= max);\n  const maxFreqLstLst = maxFreqLst.reduce((acc, x) => acc + x, 0);\n  return maxFreqLstLst > max? -1 : max;\n};\n\nconst search12 = (lst)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nexport default filterBySubstring;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start depart with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start depart with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len === 0) return [];\n  const min = lst[0];\n  const max = lst[len - 1];\n  const sorted = lst.slice();\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  sorted.unshift(min);\n  sorted.push(max);\n  return sorted;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round off to 2 decimal points if the three sides english form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round off to 2 decimal points if the three sides english form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let max = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let count = 0;\n  while (i < j) {\n    while (arr[i] > arr[j]) {\n      j--;\n    }\n    while (arr[i] < arr[j]) {\n      i++;\n    }\n    if (arr[i] === arr[j]) {\n      count++;\n      i++;\n      j--;\n    }\n    if (count < min) {\n      min = count;\n    }\n    count = 0;\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts bear two lists of strings string section and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts bear two lists of strings string section and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return lst1;\n  const total = lst1.length + lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n    } else if (lst1[i] > lst2[j]) {\n      result.push(lst2[j]);\n      j++;\n    } else {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple dim-witted \n   power of n and false in other cases sheath. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple dim-witted \n   power of n and false in other cases sheath. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower2 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower3 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower4 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower5 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower6 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower7 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower8 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower9 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower10 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower11 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower12 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower13 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower14 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower15 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower16 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower17 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower18 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower19 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower20 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower21 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower22 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower23 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower24 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower25 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower26 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower27 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower28 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower29 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\nconst isSimplePower30 = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes choose an integer a and returns true on-key \n   if this ingeger is a cube of some integer number issue. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes choose an integer a and returns true on-key \n   if this ingeger is a cube of some integer number issue. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 1;\n  while (i < a) {\n    if (a % i === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nexport default iscube;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number numeral as a string and counts consider the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number phone number \n   greater than 1 that is not a product of two smaller minor natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So then you have to determine settle a number of the following follow digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note eminence: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number numeral as a string and counts consider the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number phone number \n   greater than 1 that is not a product of two smaller minor natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So then you have to determine settle a number of the following follow digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note eminence: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numDigits = num.length;\n  let numDigitsFinger = numDigits;\n  let numDigitsFingerPrime = numDigits;\n  let numDigitsFingerPrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = numDigits;\n  let numDigitsFingerPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form mannequin and your task is to convert commute it to \n   binary format. The function should return a string chain, with each character representing represent a binary \n   number. Each character fictional character in the string drawstring will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form mannequin and your task is to convert commute it to \n   binary format. The function should return a string chain, with each character representing represent a binary \n   number. Each character fictional character in the string drawstring will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary_digit = 0;\n  let binary_digit_count = 0;\n  let decimal_digit = 0;\n  let decimal_digit_count = 0;\n  let decimal_digit_count_max = 0;\n  let decimal_digit_count_min = 0;\n  let decimal_digit_count_sum = 0;\n  let decimal_digit_count_sum_max = 0;\n  let decimal_digit_count_sum_min = 0;\n  let decimal_digit_count_sum_sum = 0;\n  let decimal_digit_count_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let decimal_digit_count_sum_sum_sum_sum_sum_sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct2 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct3 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct4 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct5 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct6 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct7 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct8 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct9 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct10 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (20, 96), (30, 72), (40, 48)]\n  */\nconst sumProduct11 = (numbers) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check if the string bowed stringed instrument is happy or not. \n   A string chain is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task job is to check if the string bowed stringed instrument is happy or not. \n   A string chain is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const map = new Map()\n  for (let i = 0; i < len; i++) {\n    const cur = s[i]\n    if (!map.has(cur)) {\n      map.set(cur, 1)\n    } else {\n      map.set(cur, map.get(cur) + 1)\n    }\n  }\n  const sum = map.values().reduce((a, b) => a + b, 0)\n  return sum >= 3 && map.values().every((v, k) => v === 1)\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give yield the grades\n   to students. The teacher has been making seduce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used use for grading. \n   She has given pass you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give yield the grades\n   to students. The teacher has been making seduce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used use for grading. \n   She has given pass you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSevent", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns return true if the string\n   length distance is a prime number issue or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns return true if the string\n   length distance is a prime number issue or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  const length = string.length;\n  const i = 0;\n  const j = length - 1;\n  while (i < j) {\n    if (prime.test(string.charAt(i)) && prime.test(string.charAt(j))) {\n      const k = i + 1;\n      const l = j - 1;\n      while (k < l) {\n        if (!prime.test(string.charAt(k)) ||!prime.test(string.charAt(l))) {\n          return false;\n        }\n        k++;\n        l--;\n      }\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numeral of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers numeral of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   for (let i = 1; i <= n; i++) {\n     let num = i;\n     while (num > 0) {\n       if (num % 10 === 1) {\n         count++;\n       }\n       num = num / 10;\n     }\n   }\n   return count;\n }\n */\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(startsOneEnds(10));\nconsole.log(startsOneEnds(100));\nconsole.log(startsOneEnds(1000));\nconsole.log(startsOneEnds(10000));\nconsole.log(startsOneEnds(100000));\nconsole.log(startsOneEnds(1000000));\nconsole.log(startsOneEnds(10000000));\nconsole.log(startsOneEnds(100000000));\nconsole.log(startsOneEnds(1000000000));\nconsole.log(startsOneEnds(10000000000));\nconsole.log(startsOneEnds(100000000000));\nconsole.log(startsOneEnds(1000000000000));\nconsole.log(startsOneEnds(10000000000000));\nconsole.log(startsOneEnds(100000000000000));\nconsole.log(startsOneEnds(1000000000000000));\nconsole.log(startsOneEnds(1000000000000000000));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 10 * digit);\n  const sum = digits.reduce((prev, current) => prev + current, 0);\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add2 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add3 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add4 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add5 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add6 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add7 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add8 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add9 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add10 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add11 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add12 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add13 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add14 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add15 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add16 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add17 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add18 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add19 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add20 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconst add21 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes choose a string and returns return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes choose a string and returns return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const newChar = char.charCodeAt(0) - 32;\n      newWord += String.fromCharCode(newChar);\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar alike to matrix, however, unlike matrices, \n   each row quarrel may contain a different unlike number of columns column. \n   Given give lst, and integer x, find detect integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows quarrel in ascending ascend order. \n   Also, sort coordinates of the row by columns column in descending order club.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar alike to matrix, however, unlike matrices, \n   each row quarrel may contain a different unlike number of columns column. \n   Given give lst, and integer x, find detect integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows quarrel in ascending ascend order. \n   Also, sort coordinates of the row by columns column in descending order club.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthSquared = lstLength * lstLength\n  const lstLengthSquaredReverse = lstLengthSquared - lstLength\n  const lstLengthSquaredReverseReverse = lstLengthSquaredReverse - lstLength\n  const lstLengthSquaredReverseReverseReverse = lstLengthSquaredReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverseReverseReverseReverseReverse - lstLength\n  const lstLengthSquaredReverseReverseReverseReverse = lstLengthSquaredReverse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  const sortedArrayIndex = 0;\n  const sortedArrayIndexLength = sortedArrayIndex;\n  const sortedArrayIndexEnd = sortedArrayIndexLength - 1;\n  const sortedArrayIndexEndLength = sortedArrayIndexEnd;\n  const sortedArrayIndexEndLengthLength = sortedArrayIndexEndLength;\n  const sortedArrayIndexEndLengthLengthLength = sortedArrayIndexEndLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength length of the given array.\n * @param {Array} array\n * @return {Array}\n */\nexport default function sortArray(array) {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  const sortedArrayIndex = 0;\n  const sortedArrayIndexLength = sortedArrayIndex;\n  const sortedArrayIndexEnd = sortedArrayIndexLength - 1;\n  const sortedArrayIndexEndLength = sortedArrayIndexEnd;\n  const sortedArrayIndexEndLengthLength = sortedArrayIndexEndLength;\n  const sortedArrayIndexEndLengthLengthLength = sortedArrayIndexEndLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength = sortedArrayIndexEndLengthLengthLengthLength;\n  const sortedArrayIndexEndLengthLengthLengthLengthLength", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = s.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(alphabet[(r[i] + n) % 26]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\n/*\n  Create a function encrypt that takes a string bowed stringed instrument as an argument and \n  returns return a string encrypted code with the alphabet being rotated turn out. \n  The alphabet should be rotated rotate in a manner such that the letters \n  shift up by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'et'\n  encrypt('gf') returns 'ix'\n  encrypt('et') returns 'jx'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = s.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(alphabet[(r[i] - n) % 26]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\n/*\n  Create a function encrypt that takes a string bowed stringed instrument as an argument and \n  returns return a string encrypted code with the alphabet being rotated turn out. \n  The alphabet should be rotated rotate in a manner such that the letters \n  shift up by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'jx'\n  encrypt('asdfghjkl') returns 'ix'\n  encrypt('gf') returns 'jx'\n  encrypt('et') returns 'jx'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = s.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(alphabet[(r[i] - n) % 26]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\n/*\n  Create a function encrypt that takes a string bowed stringed instrument as an argument and \n  returns return a string encrypted code with the alphabet being rotated turn out. \n  The alphabet should be rotated rotate in a manner such that the letters \n  shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = s.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(alphabet[(r[i] + n) % 26]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\n/*\n  Create a function encrypt that takes a string bowed stringed instrument as an argument and \n  returns return a string encrypted code with the alphabet being rotated turn out. \n  The alphabet should be rotated rotate in a manner such that the letters \n  shift up by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'et'\n  encrypt('gf') returns 'ix'\n  encrypt('et') returns 'jx'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = s.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(alphabet[(r[i] + n) % 26]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\n/*\n  Create a function encrypt that takes a string bowed stringed instrument as an argument and \n  returns return a string encrypted code with the alphabet being rotated turn out. \n  The alphabet should be rotated rotate in a manner such that the letters \n  shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'jx'\n  encrypt('asdfghjkl') returns 'ix'\n  encrypt('gf') returns 'jx'\n  encrypt('et') returns 'jx'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = s.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(alphabet[(r[i] - n)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling maximum maximal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate beget a list of rolling maximum maximal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  const maxLengthIndex = 0;\n  const maxLengthLength = 1;\n  const maxLengthLengthIndex = 0;\n  const maxLengthLengthLength = 1;\n  const maxLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    let smallest = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const regex2 = /\\s/\n  const regex3 = /\\./\n  const regex4 = /\\?/\n  const regex5 = /\\!/\n  const regex6 = /\\?\\?/\n  const regex7 = /\\!\\!/\n  const regex8 = /\\?\\?\\?/\n  const regex9 = /\\!\\?\\?\\?/\n  const regex10 = /\\?\\?\\?\\?/\n  const regex11 = /\\?\\?\\?\\?\\?/\n  const regex12 = /\\?\\?\\?\\?\\?\\?/\n  const regex13 = /\\?\\?\\?\\?\\?\\?\\?/\n  const regex14 = /\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex15 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex16 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex17 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex18 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex19 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex20 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex21 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex22 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex23 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regex24 = /\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?\\?/\n  const regexpassed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes choose 3 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes choose 3 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst anyInt33", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter.toLowerCase()) {\n      encoded += letter;\n    } else {\n      let vowel = letter.toUpperCase();\n      let vowelIndex = message.indexOf(vowel);\n      let vowelIndex2 = vowelIndex + 2;\n      let vowel2 = message[vowelIndex2];\n      encoded += vowel2;\n    }\n  }\n  return encoded;\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const max = (a, b) => {\n    return a > b? a : b;\n  };\n  const sum = (a, b) => {\n    return a + b;\n  };\n  const maxPrime = (lst) => {\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (prime(lst[i])) {\n        maxPrime = max(maxPrime, lst[i]);\n      }\n    }\n    return maxPrime;\n  };\n  return maxPrime(lst);\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLower = keys.every(key => key.toLowerCase() === key);\n  let isAllUpper = keys.every(key => key.toUpperCase() === key);\n  return isAllLower || isAllUpper;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLower = keys.every(key => key.toLowerCase() === key);\n  let isAllUpper = keys.every(key => key.toUpperCase() === key);\n  return isAllLower || isAllUpper;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLower = keys.every(key => key.toLowerCase() === key);\n  let isAllUpper = keys.every(key => key.toUpperCase() === key);\n  return isAllLower || isAllUpper;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLower = keys.every(key => key.toLowerCase() === key);\n  let isAllUpper = keys.every(key => key.toUpperCase() === key);\n  return isAllLower || isAllUpper;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLower = keys.every(key => key.toLowerCase() === key);\n  let isAllUpper = keys.every(key => key.toUpperCase() === key);\n  return isAllLower || isAllUpper;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const arr = []\n  for (let i = 0; i < n; i++) {\n    let isPrime = true\n    for (let j = 0; j < primes.length; j++) {\n      if (i % primes[j] === 0) {\n        isPrime = false\n        break\n      }\n    }\n    if (isPrime) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aDigits = a.toString().split('').reverse().join('');\n  const bDigits = b.toString().split('').reverse().join('');\n  const aDigitsLength = aDigits.length;\n  const bDigitsLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aDigitsLength; i++) {\n    for (let j = 0; j < bDigitsLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\n// Test\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLowerOdd = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonantsOdd = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd2 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonantsOdd3 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const nums = [num - 1, num, num + 1];\n  let closest = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (Math.abs(nums[i] - num) < Math.abs(closest - num)) {\n      closest = nums[i];\n    }\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
