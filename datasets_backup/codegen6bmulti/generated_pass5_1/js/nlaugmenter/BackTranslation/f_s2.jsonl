{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort();\n  const length = sortedNumbers.length;\n  let i = 0;\n  let j = 1;\n  while (i < length && j < length) {\n    if (Math.abs(sortedNumbers[i] - sortedNumbers[j]) > threshold) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = []\n  const output = []\n  const current_group = []\n  const current_group_open = false\n  const current_group_closed = false\n  const current_group_open_bracket = ''\n  const current_group_closed_bracket = ''\n  const current_group_open_bracket_index = 0\n  const current_group_closed_bracket_index = 0\n  const current_group_open_bracket_length = 0\n  const current_group_closed_bracket_length = 0\n  const current_group_open_bracket_length_index = 0\n  const current_group_closed_bracket_length_index = 0\n  const current_group_open_bracket_length_index_index = 0\n  const current_group_closed_bracket_length_index_index = 0\n  const current_group_open_bracket_length_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_closed_bracket_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const current_group_open_bracket_length_index_index_index_index_index_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = findLongestPalindrome(string);\n  const prefix = string.slice(0, suffix.length);\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with a supplied string.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  return string + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  return string + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  return string + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  return string + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  return string + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  return string + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLong", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(pile[pile.length - 1] + 1)\n    } else {\n      pile.push(pile[pile.length - 1] + 2)\n    }\n  }\n  return pile\n}\n\nmodule.exports = makeAPile\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  while (i < j) {\n    if (i % 2 === 0) {\n      i += 2;\n    } else {\n      j -= 2;\n    }\n  }\n  return i;\n};\n\nexport default chooseNum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.ceil(avg)\n  const binary = rounded.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      result.push(x);\n    }\n    x = x / 10;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(33));\nconsole.log(uniqueDigits(1422));\nconsole.log(uniqueDigits(10));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength2 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength3 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength4 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength5 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength6 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength7 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength8 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength9 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength10 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength11 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength12 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength13 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength14 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength15 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength16 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength17 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength18 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength19 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength20 = (arr) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((a, b) => a + b, 0);\n  return arr.filter(x => x > 0).length;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      let j = i + 1;\n      while (j < arr.length - 1 && arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        j++;\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nexport default stringXor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) return \"NO\";\n  const lst1_even = lst1.filter(x => x % 2 === 0);\n  const lst2_even = lst2.filter(x => x % 2 === 0);\n  return lst1_even.length === lst2_even.length && lst1_even.every(x => lst2_even.includes(x));\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); // true\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); // false\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse().join(''), result.length === s.length];\n};\n\nconst isPalindrome = (s) => {\n  const [result, isPalindrome] = reverseDelete(s, s);\n  return isPalindrome;\n};\n\nconsole.log(isPalindrome('abcdef'));\nconsole.log(isPalindrome('abcdedcba'));\nconsole.log(isPalindrome('abcdefg'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (lst) => {\n    const oddCount = (lst) => {\n      const oddCount = (lst) => {\n        const oddCount = (lst) => {\n          const oddCount = (lst) => {\n            const oddCount = (lst) => {\n              const oddCount = (lst) => {\n                const oddCount = (lst) => {\n                  const oddCount = (lst) => {\n                    const oddCount = (lst) => {\n                      const oddCount = (lst) => {\n                        const oddCount = (lst) => {\n                          const oddCount = (lst) => {\n                            const oddCount = (lst) => {\n                              const oddCount = (lst) => {\n                                const oddCount = (lst) => {\n                                  const oddCount = (lst) => {\n                                    const oddCount = (lst) => {\n                                      const oddCount = (lst) => {\n                                        const oddCount = (lst) => {\n                                          const oddCount = (lst) => {\n                                            const oddCount = (lst) => {\n                                              const oddCount = (lst) => {\n                                                const oddCount = (lst) => {\n                                                  const oddCount = (lst) => {\n                                                    const oddCount = (lst) => {\n                                                      const oddCount = (lst) => {\n                                                        const oddCount = (lst) => {\n                                                          const oddCount = (lst) => {\n                                                           const oddCount = (lst) => {\n                                                            const oddCount = (lst) => {\n                                                              const oddCount = (lst) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return oddCount(lst)\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = (nums) => {\n    const sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n      sum += nums[i];\n    }\n    return sum;\n  };\n  const minSum = (nums) => {\n    let minSum = sum(nums);\n    for (let i = 0; i < nums.length; i++) {\n      minSum = Math.min(minSum, sum(nums.slice(0, i + 1)));\n    }\n    return minSum;\n  };\n  return minSum(nums);\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = rows * cols\n  const max = rows * cols - 1\n  const bucketsPerRow = cols\n  const bucketsPerCol = rows\n\n  const bucketsPerWell = capacity\n  const wellsPerBucket = bucketsPerWell / bucketsPerRow\n  const wellsPerBucketPerCol = bucketsPerWell / bucketsPerCol\n\n  const well = (row, col) => {\n    return row * cols + col\n  }\n\n  const wellToBucket = (row, col) => {\n    return well(row, col) * bucketsPerWell + row * bucketsPerWell + col\n  }\n\n  const bucketToWell = (row, col) => {\n    return well(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerCol = (row, col) => {\n    return wellToBucket(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerCol = (row, col) => {\n    return wellToBucket(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerRow = (row, col) => {\n    return wellToBucket(row, col) % bucketsPerWellPerCol\n  }\n\n  const bucketToWellPerRow = (row, col) => {\n    return wellToBucket(row, col) / bucketsPerWellPerCol\n  }\n\n  const wellToBucketPerWell = (row, col) => {\n    return wellToBucket(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWell = (row, col) => {\n    return wellToBucket(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerWellPerCol = (row, col) => {\n    return wellToBucketPerCol(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWellPerCol = (row, col) => {\n    return wellToBucketPerCol(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerWellPerRow = (row, col) => {\n    return wellToBucketPerRow(row, col) % bucketsPerWellPerCol\n  }\n\n  const bucketToWellPerWellPerRow = (row, col) => {\n    return wellToBucketPerRow(row, col) / bucketsPerWellPerCol\n  }\n\n  const wellToBucketPerWellPerWell = (row, col) => {\n    return wellToBucketPerWell(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWellPerWell = (row, col) => {\n    return wellToBucketPerWell(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerWellPerWellPerCol = (row, col) => {\n    return wellToBucketPerWellPerCol(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWellPerWellPerCol = (row, col) => {\n    return wellToBucketPerWellPerCol(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerWellPerWellPerRow = (row, col) => {\n    return wellToBucketPerWellPerRow(row, col) % bucketsPerWellPerCol\n  }\n\n  const bucketToWellPerWellPerWellPerRow = (row, col) => {\n    return wellToBucketPerWellPerRow(row, col) / bucketsPerWellPerCol\n  }\n\n  const wellToBucketPerWellPerWellPerWell = (row, col) => {\n    return wellToBucketPerWellPerWell(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWellPerWellPerWell = (row, col) => {\n    return wellToBucketPerWellPerWell(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerWellPerWellPerWellPerCol = (row, col) => {\n    return wellToBucketPerWellPerWellPerCol(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWellPerWellPerWellPerCol = (row, col) => {\n    return wellToBucketPerWellPerWellPerCol(row, col) / bucketsPerWell\n  }\n\n  const wellToBucketPerWellPerWellPerWellPerRow = (row, col) => {\n    return wellToBucketPerWellPerWellPerRow(row, col) % bucketsPerWellPerCol\n  }\n\n  const bucketToWellPerWellPerWellPerWellPerRow = (row, col) => {\n    return wellToBucketPerWellPerWellPerRow(row, col) / bucketsPerWellPerCol\n  }\n\n  const wellToBucketPerWellPerWellPerWellPerWell = (row, col) => {\n    return wellToBucketPerWellPerWellPerWell(row, col) % bucketsPerWell\n  }\n\n  const bucketToWellPerWellPerWellPerWellPerWell = (row, col) => {\n    return wellToBucketPerWellPerWellPerWell(row, col) / bucketsPerWell\n  }\n\n  const wellToB", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let sortedCount = 0\n  let sortedArray = []\n  let sortedArrayLength = 0\n  let sortedArrayLength2 = 0\n  let sortedArrayLength3 = 0\n  let sortedArrayLength4 = 0\n  let sortedArrayLength5 = 0\n  let sortedArrayLength6 = 0\n  let sortedArrayLength7 = 0\n  let sortedArrayLength8 = 0\n  let sortedArrayLength9 = 0\n  let sortedArrayLength10 = 0\n  let sortedArrayLength11 = 0\n  let sortedArrayLength12 = 0\n  let sortedArrayLength13 = 0\n  let sortedArrayLength14 = 0\n  let sortedArrayLength15 = 0\n  let sortedArrayLength16 = 0\n  let sortedArrayLength17 = 0\n  let sortedArrayLength18 = 0\n  let sortedArrayLength19 = 0\n  let sortedArrayLength20 = 0\n  let sortedArrayLength21 = 0\n  let sortedArrayLength22 = 0\n  let sortedArrayLength23 = 0\n  let sortedArrayLength24 = 0\n  let sortedArrayLength25 = 0\n  let sortedArrayLength26 = 0\n  let sortedArrayLength27 = 0\n  let sortedArrayLength28 = 0\n  let sortedArrayLength29 = 0\n  let sortedArrayLength30 = 0\n  let sortedArrayLength31 = 0\n  let sortedArrayLength32 = 0\n  let sortedArrayLength33 = 0\n  let sortedArrayLength34 = 0\n  let sortedArrayLength35 = 0\n  let sortedArrayLength36 = 0\n  let sortedArrayLength37 = 0\n  let sortedArrayLength38 = 0\n  let sortedArrayLength39 = 0\n  let sortedArrayLength40 = 0\n  let sortedArrayLength41 = 0\n  let sortedArrayLength42 = 0\n  let sortedArrayLength43 = 0\n  let sortedArrayLength44 = 0\n  let sortedArrayLength45 = 0\n  let sortedArrayLength46 = 0\n  let sortedArrayLength47 = 0\n  let sortedArrayLength48 = 0\n  let sortedArrayLength49 = 0\n  let sortedArrayLength50 = 0\n  let sortedArrayLength51 = 0\n  let sortedArrayLength52 = 0\n  let sortedArrayLength53 = 0\n  let sortedArrayLength54 = 0\n  let sortedArrayLength55 = 0\n  let sortedArrayLength56 = 0\n  let sortedArrayLength57 = 0\n  let sortedArrayLength58 = 0\n  let sortedArrayLength59 = 0\n  let sortedArrayLength60 = 0\n  let sortedArrayLength61 = 0\n  let sortedArrayLength62 = 0\n  let sortedArrayLength63 = 0\n  let sortedArrayLength64 = 0\n  let sortedArrayLength65 = 0\n  let sortedArrayLength66 = 0\n  let sortedArrayLength67 = 0\n  let sortedArrayLength68 = 0\n  let sortedArrayLength69 = 0\n  let sortedArrayLength70 = 0\n  let sortedArrayLength71 = 0\n  let sortedArrayLength72 = 0\n  let sortedArrayLength73 = 0\n  let sortedArrayLength74 = 0\n  let sortedArrayLength75 = 0\n  let sortedArrayLength76 = 0\n  let sortedArrayLength77 = 0\n  let sortedArrayLength78 = 0\n  let sortedArrayLength79 = 0\n  let sortedArrayLength80 = 0\n  let sortedArrayLength81 = 0\n  let sortedArrayLength82 = 0\n  let sortedArrayLength83 = 0\n  let sortedArrayLength84 = 0\n  let sortedArrayLength85 = 0\n  let sortedArrayLength86 = 0\n  let sortedArrayLength87 = 0\n  let sortedArrayLength88 = 0\n  let sortedArrayLength89 = 0\n  let sortedArrayLength90 = 0\n  let sortedArrayLength91 = 0\n  let sortedArrayLength92 = 0\n  let sortedArrayLength93 = 0\n  let sortedArrayLength94 = 0\n  let sortedArrayLength95 = 0\n  let sortedArrayLength96 = 0\n  let sortedArrayLength97 = 0\n  let sortedArrayLength98 = 0\n  let sortedArrayLength99 = 0\n  let sortedArrayLength100 = 0\n  let sortedArrayLength101 = 0\n  let sortedArrayLength102 = 0\n  let sortedArrayLength103 = 0\n  let sortedArrayLength104 = 0\n  let sortedArrayLength105 = 0\n  let sortedArrayLength106 = 0\n  let sortedArrayLength107 = 0\n  let sortedArrayLength108 = 0\n  let sortedArrayLength109 = 0\n  let sortedArrayLength110 = 0\n  let sortedArrayLength111 = 0\n  let sortedArrayLength112 = 0\n  let sortedArrayLength113 = 0\n  let sortedArrayLength114 = 0\n  let sortedArrayLength115 = 0\n  let sortedArrayLength116 = 0\n  let sortedArrayLength117 = 0\n  let sortedArrayLength118 = 0\n  let sortedArrayLength119 = 0\n  let sortedArrayLength120 = 0\n  let sortedArrayLength121 = 0\n  let sortedArrayLength122 = 0\n  let sortedArrayLength123 = 0\n  let sortedArrayLength124 = 0\n  let sortedArrayLength125 = 0\n  let sortedArrayLength126 = 0\n  let sortedArrayLength127 = 0\n  let sortedArrayLength128 = 0\n  let sortedArrayLength129 = 0\n  let sortedArrayLength130 = 0\n  let sortedArrayLength131 = 0\n  let sortedArrayLength132 = 0\n  let sortedArrayLength133 = 0\n  let sortedArrayLength134 = 0\n  let sortedArrayLength135 = 0\n  let sortedArrayLength136 = 0\n  let sortedArrayLength137 = 0\n  let sortedArrayLength138 = 0\n  let sortedArrayLength139 = 0\n  let sortedArrayLength140 = 0\n  let sortedArrayLength141 = 0\n  let sortedArrayLength142 = 0\n  let sortedArrayLength143 = 0\n  let sortedArrayLength144 = 0\n  let sortedArrayLength145 = 0\n  let sortedArrayLength146 = 0\n  let sortedArrayLength147 = 0\n  let sortedArrayLength148 = 0\n  let sortedArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const length = s.length;\n  let i = 0;\n  while (i < length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement \na function that returns a list of all words from string s that contain p as a \nsubstring.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Hello world\", \"world\") ==> [\"Hello\"]\n  selectWords(\"Hello world\", \"Hello\") ==> [\"Hello\", \"world\"]\n  selectWords(\"Hello world\", \"worldz\") ==> []\n  selectWords(\"Hello world\", \"z\") ==> []\n  selectWords(\"Hello world\", \"\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"ello\") ==> [\"Hello\", \"world\"]\n  selectWords(\"Hello world\", \"Hello world\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  selectWords(\"Hello world\", \"Hello worldz\") ==> [\"Hello world\"]\n  ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestVowelIndex = -1;\n  const closestVowelDistance = Infinity;\n  const currentVowel = '';\n  const currentVowelIndex = -1;\n  const currentVowelDistance = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowelDistanceFromStart = Infinity;\n  const currentVowelDistanceFromEnd = Infinity;\n  const currentVowel", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0];\n  let i = 1;\n  while (i < k) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  return max;\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0);\n  return arr.slice(k).reduce((a, b) => a + b, 0) - max;\n};\n\nconst test = (arr, k) => {\n  const sum = addElements(arr, k);\n  console.log(`The sum of the elements with a maximum of two digits from the first ${k} elements of ${arr} is ${sum}`);\n};\n\ntest([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconsole.log(getOddCollatz(5));\nconsole.log(getOddCollatz(10));\nconsole.log(getOddCollatz(15));\nconsole.log(getOddCollatz(20));\nconsole.log(getOddCollatz(30));\nconsole.log(getOddCollatz(40));\nconsole.log(getOddCollatz(50));\nconsole.log(getOddCollatz(60));\nconsole.log(getOddCollatz(70));\nconsole.log(getOddCollatz(80));\nconsole.log(getOddCollatz(90));\nconsole.log(getOddCollatz(100));\nconsole.log(getOddCollatz(110));\nconsole.log(getOddCollatz(120));\nconsole.log(getOddCollatz(130));\nconsole.log(getOddCollatz(140));\nconsole.log(getOddCollatz(150));\nconsole.log(getOddCollatz(160));\nconsole.log(getOddCollatz(170));\nconsole.log(getOddCollatz(180));\nconsole.log(getOddCollatz(190));\nconsole.log(getOddCollatz(200));\nconsole.log(getOddCollatz(210));\nconsole.log(getOddCollatz(220));\nconsole.log(getOddCollatz(230));\nconsole.log(getOddCollatz(240));\nconsole.log(getOddCollatz(250));\nconsole.log(getOddCollatz(260));\nconsole.log(getOddCollatz(270));\nconsole.log(getOddCollatz(280));\nconsole.log(getOddCollatz(290));\nconsole.log(getOddCollatz(300));\nconsole.log(getOddCollatz(310));\nconsole.log(getOddCollatz(320));\nconsole.log(getOddCollatz(330));\nconsole.log(getOddCollatz(340));\nconsole.log(getOddCollatz(350));\nconsole.log(getOddCollatz(360));\nconsole.log(getOddCollatz(370));\nconsole.log(getOddCollatz(380));\nconsole.log(getOddCollatz(390));\nconsole.log(getOddCollatz(400));\nconsole.log(getOddCollatz(410));\nconsole.log(getOddCollatz(420));\nconsole.log(getOddCollatz(430));\nconsole.log(getOddCollatz(440));\nconsole.log(getOddCollatz(450));\nconsole.log(getOddCollatz(460));\nconsole.log(getOddCollatz(470));\nconsole.log(getOddCollatz(480));\nconsole.log(getOddCollatz(490));\nconsole.log(getOddCollatz(500));\nconsole.log(getOddCollatz(510));\nconsole.log(getOddCollatz(520));\nconsole.log(getOddCollatz(530));\nconsole.log(getOddCollatz(540));\nconsole.log(getOddCollatz(550));\nconsole.log(getOddCollatz(560));\nconsole.log(getOddCollatz(570));\nconsole.log(getOddCollatz(580));\nconsole.log(getOddCollatz(590));\nconsole.log(getOddCollatz(600));\nconsole.log(getOddCollatz(610));\nconsole.log(getOddCollatz(620));\nconsole.log(getOddCollatz(630));\nconsole.log(getOddCollatz(640));\nconsole.log(getOddCollatz(650));\nconsole.log(getOddCollatz(660));\nconsole.log(getOddCollatz(670));\nconsole.log(getOddCollatz(680));\nconsole.log(getOddCollatz(690));\nconsole.log(getOddCollatz(700));\nconsole.log(getOddCollatz(710));\nconsole.log(getOddCollatz(720));\nconsole.log(getOddCollatz(730));\nconsole.log(getOddCollatz(740));\nconsole.log(getOddCollatz(750));\nconsole.log(getOddCollatz(760));\nconsole.log(getOddCollatz(770));\nconsole.log(getOddCollatz(780));\nconsole.log(getOddCollatz(790));\nconsole.log(getOddCollatz(800));\nconsole.log(getOddCollatz(810));\nconsole.log(getOddCollatz(820));\nconsole.log(getOddCollatz(830));\nconsole.log(getOddCollatz(840));\nconsole.log(getOddCollatz(850));\nconsole.log(getOddCollatz(860));\nconsole.log(getOddCollatz(870));\nconsole.log(getOddCollatz(880));\nconsole.log(getOddCollatz(890));\nconsole.log(getOddCollatz(900));\nconsole.log(getOddCollatz(910));\nconsole.log(getOddCollatz(920));\nconsole.log(getO", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word) => word.length > 0);\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the first two letters of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"abcdef\") == [\"ab\", \"bc\", \"cd\", \"de\", \"ef\"]\n  */\nconst splitLetters = (txt) => {\n  const words = splitWords(txt);\n  return words.map((word) => {\n    return word.slice(0, 2);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the first letter of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"H\", \"ello \", \"world!\"]\n  splitLetters(\"Hello,world!\") ➞ [\"H\", \"ello \", \"world!\"]\n  splitLetters(\"abcdef\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst splitFirstLetters = (txt) => {\n  const words = splitWords(txt);\n  return words.map((word) => {\n    return word.slice(0, 1);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the last letter of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  splitLetters(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitLastLetters = (txt) => {\n  const words = splitWords(txt);\n  return words.map((word) => {\n    return word.slice(-1);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the first two letters of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"abcdef\") == [\"ab\", \"bc\", \"cd\", \"de\", \"ef\"]\n  */\nconst splitFirstTwoLetters = (txt) => {\n  const words = splitLetters(txt);\n  return words.map((word) => {\n    return word.slice(0, 2);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the last two letters of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  splitLetters(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitLastTwoLetters = (txt) => {\n  const words = splitLetters(txt);\n  return words.map((word) => {\n    return word.slice(-2);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the first three letters of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitFirstThreeLetters = (txt) => {\n  const words = splitLetters(txt);\n  return words.map((word) => {\n    return word.slice(0, 3);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the last three letters of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  splitLetters(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitLastThreeLetters = (txt) => {\n  const words = splitLetters(txt);\n  return words.map((word) => {\n    return word.slice(-3);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the first four letters of each word in the list.\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"Hello,world!\") ➞ [\"Hel\", \"lo \", \"wo \", \"rd \", \"! \"]\n  splitLetters(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitFirstFourLetters = (txt) => {\n  const words = splitLetters(txt);\n  return words.map((word) => {\n    return word.slice(0, 4);\n  });\n};\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  splitting the last four letters of each word in the list", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort();\n  return lst.every(x => x === sorted[sorted.indexOf(x) + 1]);\n};\n\nexport default isSorted;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  if (interval1[0] > interval2[0]) {\n    return 'NO';\n  }\n  if (interval1[1] < interval2[1]) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst main = () => {\n  const testcases = [\n    [\n      [1, 2],\n      [2, 3],\n    ],\n    [\n      [-1, 1],\n      [0, 4],\n    ],\n    [\n      [-3, -1],\n      [-5, 5],\n    ],\n  ];\n  for (let i = 0; i < testcases.length; i++) {\n    const [interval1, interval2] = testcases[i];\n    const result = intersection(interval1, interval2);\n    if (result === 'YES') {\n      console.log(`${interval1[0]} ${interval1[1]} ${interval2[0]} ${interval2[1]}`);\n      console.log(`${isPrime(interval1[0])} ${isPrime(interval1[1])}`);\n      console.log(`${isPrime(interval2[0])} ${isPrime(interval2[1])}`);\n      console.log(`${result}`);\n    }\n  }\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += 1;\n    } else if (arr[i] === -1) {\n      sum -= 1;\n    } else if (arr[i] === 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  const visited = new Array(n).fill(false)\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue\n      }\n      dp[i] = Math.min(dp[i], dp[i - 1] + 1)\n      if (dp[i] === k) {\n        return grid[i].slice()\n      }\n      if (dp[i] > k) {\n        break\n      }\n      if (i > 0 && j > 0) {\n        if (grid[i - 1][j - 1] === 0) {\n          continue\n        }\n        dp[i] = Math.min(dp[i], dp[i - 1] + 1)\n        if (dp[i] === k) {\n          return grid[i].slice()\n        }\n      }\n      if (i > 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + 1)\n        if (dp[i] === k) {\n          return grid[i].slice()\n        }\n      }\n      if (j > 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + 1)\n        if (dp[i] === k) {\n          return grid[i].slice()\n        }\n      }\n    }\n  }\n  return []\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  let i = 1;\n  while (a % i!== 0) {\n    i++;\n  }\n  return i;\n};\n\nconst gcd = greatestCommonDivisor;\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1,\n    result = [],\n    i = 1;\n  while (i <= n) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = a + b;\n    i++;\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  const brackets = /\\[|\\]/g\n  let match = brackets.exec(string)\n  while (match) {\n    const bracket = match[0]\n    stack.push(bracket)\n    match = brackets.exec(string)\n  }\n  return stack.length > 0 && stack.every((bracket) => bracket === stack[stack.length - 1])\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return Math.ceil(sum);\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last two characters in a given string are both alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2)\n  const isALetter = lastTwoChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last three characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3)\n  const isALetter = lastThreeChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last four characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4)\n  const isALetter = lastFourChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last five characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5)\n  const isALetter = lastFiveChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last six characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6)\n  const isALetter = lastSixChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last seven characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastSevenCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSevenCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSevenCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSevenCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSevenCharsAreALetter = (txt) => {\n  const lastSevenChars = txt.slice(-7)\n  const isALetter = lastSevenChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that returns true if the last eight", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let k = (i + j) / 2\n    if (arr[k] < arr[i]) {\n      i = k + 1\n    } else if (arr[k] > arr[i]) {\n      j = k\n    } else {\n      return k\n    }\n  }\n  return -1\n}\n\n/*\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return (null, 0);\n  }\n  return (max, min);\n};\n\n/*\n  Create a function that returns the largest positive integer in a list.\n  Examples:\n  largestPositiveIntegers([2, 4, 1, 3, 5, 7]) == 7\n  largestPositiveIntegers([]) == null\n  largestPositiveIntegers([0]) == 0\n  */\nconst largestPositiveIntegers = (lst) => {\n  const max = Math.max(...lst);\n  if (max > 0) {\n    return max;\n  }\n  return null;\n};\n\n/*\n  Create a function that returns the largest negative integer in a list.\n  Examples:\n  largestNegativeIntegers([2, 4, 1, 3, 5, 7]) == -1\n  largestNegativeIntegers([]) == null\n  largestNegativeIntegers([0]) == null\n  */\nconst largestNegativeIntegers = (lst) => {\n  const min = Math.min(...lst);\n  if (min < 0) {\n    return min;\n  }\n  return null;\n};\n\n/*\n  Create a function that returns the smallest positive integer in a list.\n  Examples:\n  smallestPositiveIntegers([2, 4, 1, 3, 5, 7]) == 1\n  smallestPositiveIntegers([]) == null\n  smallestPositiveIntegers([0]) == 0\n  */\nconst smallestPositiveIntegers = (lst) => {\n  const min = Math.min(...lst);\n  if (min > 0) {\n    return min;\n  }\n  return null;\n};\n\n/*\n  Create a function that returns the smallest negative integer in a list.\n  Examples:\n  smallestNegativeIntegers([2, 4, 1, 3, 5, 7]) == -2\n  smallestNegativeIntegers([]) == null\n  smallestNegativeIntegers([0]) == null\n  */\nconst smallestNegativeIntegers = (lst) => {\n  const max = Math.max(...lst);\n  if (max < 0) {\n    return max;\n  }\n  return null;\n};\n\n/*\n  Create a function that returns the sum of all the numbers in a list.\n  Examples:\n  sum([2, 4, 1, 3, 5, 7]) == 15\n  sum([]) == null\n  sum([0]) == 0\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Create a function that returns the product of all the numbers in a list.\n  Examples:\n  product([2, 4, 1, 3, 5, 7]) == 0\n  product([]) == null\n  product([0]) == 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  Create a function that returns the average of all the numbers in a list.\n  Examples:\n  average([2, 4, 1, 3, 5, 7]) == 4\n  average([]) == null\n  average([0]) == null\n  */\nconst average = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n};\n\n/*\n  Create a function that returns the median of all the numbers in a list.\n  Examples:\n  median([2, 4, 1, 3, 5, 7]) == 4\n  median([]) == null\n  median([0]) == null\n  */\nconst median = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / (lst.length + 1);\n};\n\n/*\n  Create a function that returns the mode of all the numbers in a list.\n  Examples:\n  mode([2, 4, 1, 3, 5, 7]) == 1\n  mode([]) == null\n  mode([0]) == null\n  */\nconst mode = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function that returns the mode of all the numbers in a list.\n  Examples:\n  mode([2, 4, 1, 3, 5, 7]) == 1\n  mode([]) == null\n  mode([0]) == null\n  */\nconst mode2 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function that returns the mode of all the numbers in a list.\n  Examples:\n  mode([2, 4, 1, 3, 5, 7]) == 1\n  mode([]) == null\n  mode([0]) == null\n  */\nconst mode3 = (lst) => {\n  let max = 0;\n  let maxIndex = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables of the same type, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables of the same type, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables of the same type, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables of the same type, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables of the same type, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") �", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  return isEqualToSumEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  return isEqualToSumEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  return isEqualToSumEvenOrOdd(n) || isEqualToSumEven(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  return isEqualToSumEvenOrOdd(n) || isEqualToSumEven(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumOdd(n);\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial20(n - 1)\n}\n\n/*\n  The function will receive an integer as input and", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.split('')\n  for (let i = 0; i < prefix.length; i++) {\n    for (let j = i; j < prefix.length; j++) {\n      prefixes.push(prefix.slice(0, j + 1).join(''))\n    }\n  }\n  return prefixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    for (let j = i; j < suffix.length; j++) {\n      suffixes.push(suffix.slice(j, suffix.length).join(''))\n    }\n  }\n  return suffixes\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes2 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes3 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes4 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes5 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes6 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes7 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes8 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes9 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes10 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces = (text) => {\n  return text.replace(/_+/g,'');\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(text));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(text)));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))));\n};\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_2 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_3 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_4 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_5 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_6 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_7 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_8 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_9 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_10 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_11 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_12 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_13 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_14 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_15 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_16 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_17 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_18 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_19 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_20 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_21 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_22 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_23 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_24 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_25 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_26 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_27 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_28 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_29 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_30 = /^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]$/;\n  const regex_error_31", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = isPrime(word.length)\n    if (isPrime) {\n      primes.push(word)\n    }\n  }\n  return primes.join(' ')\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  if (x_num === n_num && x_den === n_den) return true;\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n\n    if (aSum === bSum) {\n      return a.localeCompare(b);\n    } else {\n      return aSum - bSum;\n    }\n  });\n\n  return sorted;\n};\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\nconsole.log(orderByPoints([]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = nums.filter((num) => {\n    return num % 2 === 1 && num % 10 === 1;\n  });\n  const even = nums.filter((num) => {\n    return num % 2 === 0 && num % 10 === 1;\n  });\n  return odd.length + even.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const b = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const c = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const d = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const e = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const f = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const g = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const h = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const i = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const j = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const k = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const m = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const n = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const o = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const p = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const q = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const r = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const s = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const t = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const u = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const v = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const w = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const x = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const y = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const z = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a1 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a2 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a3 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a4 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a5 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a6 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a7 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a8 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a9 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a10 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a11 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a12 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a13 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a14 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a15 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a16 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a17 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a18 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a19 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a20 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a21 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a22 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a23 = Array(n).fill(1).map((_, i) => i * i - i + 1);\n  const a24 = Array(n).fill(1).map((_, i) => i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  if (planet1Index < 0 || planet2Index < 0) {\n    return []\n  }\n  const planet1Orbit = getOrbit(planet1)\n  const planet2Orbit = getOrbit(planet2)\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1)\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2)\n  const planet1OrbitStart = planet1Orbit[planet1OrbitIndex]\n  const planet2OrbitStart = planet2Orbit[planet2OrbitIndex]\n  const planet1OrbitEnd = planet1Orbit[planet1OrbitIndex + planet1OrbitLength - 1]\n  const planet2OrbitEnd = planet2Orbit[planet2OrbitIndex + planet2OrbitLength - 1]\n  const planet1OrbitLengthDiff = planet1OrbitLength - planet2OrbitLength\n  const planet1OrbitEndDiff = planet1OrbitEnd - planet2OrbitStart\n  const planet2OrbitStartDiff = planet2OrbitStart - planet1OrbitStart\n  const planet1OrbitStartDiffAbs = Math.abs(planet1OrbitStartDiff)\n  const planet2OrbitStartDiffAbs = Math.abs(planet2OrbitStartDiff)\n  const planet1OrbitEndDiffAbs = Math.abs(planet1OrbitEndDiff)\n  const planet2OrbitEndDiffAbs = Math.abs(planet2OrbitEndDiff)\n  const planet1OrbitStartDiffAbsMax = Math.max(planet1OrbitStartDiffAbs, planet2OrbitStartDiffAbs)\n  const planet1OrbitEndDiffAbsMax = Math.max(planet1OrbitEndDiffAbs, planet2OrbitEndDiffAbs)\n  const planet1OrbitStartDiffAbsMin = Math.min(planet1OrbitStartDiffAbs, planet2OrbitStartDiffAbs)\n  const planet1OrbitEndDiffAbsMin = Math.min(planet1OrbitEndDiffAbs, planet2OrbitEndDiffAbs)\n  const planet1OrbitStartDiffAbsMinMax = Math.max(planet1OrbitStartDiffAbsMin, planet2OrbitStartDiffAbsMin)\n  const planet1OrbitEndDiffAbsMinMax = Math.max(planet1OrbitEndDiffAbsMin, planet2OrbitEndDiffAbsMin)\n  const planet1OrbitStartDiffAbsMinMin = Math.min(planet1OrbitStartDiffAbsMin, planet2OrbitStartDiffAbsMin)\n  const planet1OrbitEndDiffAbsMinMin = Math.min(planet1OrbitEndDiffAbsMin, planet2OrbitEndDiffAbsMin)\n  const planet1OrbitStartDiffAbsMaxMin = Math.max(planet1OrbitStartDiffAbsMax, planet2OrbitStartDiffAbsMin)\n  const planet1OrbitEndDiffAbsMaxMin = Math.max(planet1OrbitEndDiffAbsMax, planet2OrbitEndDiffAbsMin)\n  const planet1OrbitStartDiffAbsMaxMinMax = Math.max(planet1OrbitStartDiffAbsMaxMin, planet2OrbitStartDiffAbsMinMax)\n  const planet1OrbitEndDiffAbsMaxMinMax = Math.max(planet1OrbitEndDiffAbsMaxMin, planet2OrbitEndDiffAbsMinMax)\n  const planet1OrbitStartDiffAbsMaxMinMin = Math.max(planet1OrbitStartDiffAbsMaxMin, planet2OrbitStartDiffAbsMinMin)\n  const planet1OrbitEndDiffAbsMaxMinMin = Math.max(planet1OrbitEndDiffAbsMaxMin, planet2OrbitEndDiffAbsMinMin)\n  const planet1OrbitStartDiffAbsMaxMinMinMax = Math.max(planet1OrbitStartDiffAbsMaxMinMin, planet2OrbitStartDiffAbsMinMinMax)\n  const planet1OrbitEndDiffAbsMaxMinMinMax = Math.max(planet1OrbitEndDiffAbsMaxMinMin, planet2OrbitEndDiffAbsMinMinMax)\n  const planet1OrbitStartDiffAbsMaxMinMinMin = Math.max(planet1OrbitStartDiffAbsMaxMinMin, planet2OrbitStartDiffAbsMinMinMin)\n  const planet1OrbitEndDiffAbsMaxMinMinMin = Math.max(planet1OrbitEndDiffAbsMaxMinMin, planet2OrbitEndDiffAbsMinMinMin)\n  const planet1OrbitStartDiffAbsMaxMinMinMinMax = Math.max(planet1OrbitStartDiffAbsMaxMinMinMin, planet2OrbitStartDiffAbsMinMinMinMax)\n  const planet1OrbitEndDiffAbsMaxMinMinMinMax = Math.max(planet1OrbitEndDiffAbsMaxMinMinMin, planet2OrbitEndDiffAbsMinMinMinMax)\n  const planet1OrbitStartDiffAbsMaxMinMinMinMin = Math.max(planet1OrbitStartDiffAbsMaxMinMinMin, planet2OrbitStartDiffAbsMinMinMinMin)\n  const planet1OrbitEndDiffAbsMaxMinMinMinMin = Math.max(planet1OrbitEndDiffAbsMaxMinMinMin, planet2OrbitEndDiffAbsMinMinMinMin)\n  const planet1OrbitStartDiffAbsMaxMinMinMinMinMax = Math.max(planet1OrbitStartDiffAbsMaxMinMinMinMin, planet2OrbitStartDiffAbsMinMinMinMin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map(word => word.length === sum? word : null);\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_2 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_3 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_4 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_5 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_6 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_7 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_8 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_9 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_10 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_11 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_12 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_13 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_14 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_15 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_16 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_17 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_18 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_19 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n\nconst list_sort_20 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a.length - b.length);\n  return sorted.map(word => word.length === sorted.length? word : null);\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing a sequence of numbers from 0 to n inclusive.\n  >>> numberSequence(0)\n  '0'\n  >>> numberSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst numberSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/* Returns a string containing a sequence of letters from a to z inclusive.\n  >>> letterSequence(0)\n  'a'\n  >>> letterSequence(5)\n  'a b c d e f g'\n  */\nconst letterSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += String.fromCharCode(i + 97);\n  }\n  return result;\n};\n\n/* Returns a string containing a sequence of letters from a to z inclusive,\n  with a prefix and a suffix.\n  >>> letterSequenceWithPrefixAndSuffix(0, 'a')\n  'a'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'a')\n  'a b c d e f g'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'z')\n  'a b c d e f g'\n  */\nconst letterSequenceWithPrefixAndSuffix = (n, prefix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += prefix + String.fromCharCode(i + 97);\n  }\n  return result;\n};\n\n/* Returns a string containing a sequence of letters from a to z inclusive,\n  with a prefix and a suffix.\n  >>> letterSequenceWithPrefixAndSuffix(0, 'a', 'z')\n  'a'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'a', 'z')\n  'a b c d e f g'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'z', 'a')\n  'a b c d e f g'\n  */\nconst letterSequenceWithPrefixAndSuffix = (n, prefix, suffix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += prefix + String.fromCharCode(i + 97);\n  }\n  return result + suffix;\n};\n\n/* Returns a string containing a sequence of numbers from a to z inclusive,\n  with a prefix and a suffix.\n  >>> numberSequenceWithPrefixAndSuffix(0, 'a')\n  'a'\n  >>> numberSequenceWithPrefixAndSuffix(5, 'a')\n  'a 1 2 3 4 5'\n  >>> numberSequenceWithPrefixAndSuffix(5, 'z')\n  'a 1 2 3 4 5'\n  */\nconst numberSequenceWithPrefixAndSuffix = (n, prefix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += prefix + i;\n  }\n  return result;\n};\n\n/* Returns a string containing a sequence of numbers from a to z inclusive,\n  with a prefix and a suffix.\n  >>> numberSequenceWithPrefixAndSuffix(0, 'a', 'z')\n  'a'\n  >>> numberSequenceWithPrefixAndSuffix(5, 'a', 'z')\n  'a 1 2 3 4 5'\n  >>> numberSequenceWithPrefixAndSuffix(5, 'z', 'a')\n  'a 1 2 3 4 5'\n  */\nconst numberSequenceWithPrefixAndSuffix = (n, prefix, suffix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += prefix + i;\n  }\n  return result + suffix;\n};\n\n/* Returns a string containing a sequence of letters from a to z inclusive,\n  with a prefix and a suffix.\n  >>> letterSequenceWithPrefixAndSuffix(0, 'a', 'z')\n  'a'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'a', 'z')\n  'a b c d e f g'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'z', 'a')\n  'a b c d e f g'\n  */\nconst letterSequenceWithPrefixAndSuffix = (n, prefix, suffix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += prefix + String.fromCharCode(i + 97);\n  }\n  return result + suffix;\n};\n\n/* Returns a string containing a sequence of letters from a to z inclusive,\n  with a prefix and a suffix.\n  >>> letterSequenceWithPrefixAndSuffix(0, 'a', 'z', 'A')\n  'a'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'a', 'z', 'A')\n  'a b c d e f g'\n  >>> letterSequenceWithPrefixAndSuffix(5, 'z', 'a', 'A')\n  'a b c d e f g'\n  */\nconst letterSequenceWithPrefixAndSuffix = (n, prefix, suffix, letter) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += prefix + String.fromCharCode(i + 97);\n  }\n  return result + suffix + String.fromCharCode(letter);\n};\n\n/* Returns a string containing a sequence of numbers from a to z inclusive,\n  with a prefix and a suffix.\n  >>> numberSequenceWithPrefixAndSuffix(0, 'a', 'z')\n  'a'\n  >>> numberSequenceWithPrefixAndSuffix(5, 'a', 'z')\n  'a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) {\n    return true;\n  }\n  if (n < 2 || n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = xOrY;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return lst.filter(x => x > 0 && x % 2 === 1).reduce((acc, x) => acc + x * x, sum);\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nmodule.exports = compare;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.toUpperCase().length;\n    const sm = extension.toLowerCase().length;\n    return (cap - sm) / cap;\n  }, -1);\n  return `${class_name}.${extensions[strength]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split(\"\");\n  const b_str = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < a_len && j < b_len) {\n    if (a_str[i] === b_str[j]) {\n      i++;\n      j++;\n    } else if (j < b_len && a_str[i] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && a_str[i] === b_str[j - 1]) {\n      i++;\n      j--;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j - 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j - 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j - 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j - 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j - 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] === b_str[j - 1] && a_str[i + 1] === b_str[j + 1]) {\n      i++;\n      j++;\n    } else if (i < a_len && j < b_len && a_str[i] ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    while (num > 0) {\n        count += num % 2;\n        num = Math.floor(num / 2);\n    }\n    return (count % 2 === 0)? (1, count) : (2, count);\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits2 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits3 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 100;\n        num = Math.floor(num / 100);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits4 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 1000;\n        num = Math.floor(num / 1000);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits5 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10000;\n        num = Math.floor(num / 10000);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits6 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 100000;\n        num = Math.floor(num / 100000);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123456) ==> 6\n      sumDigits(1234567) ==> 6\n      sumDigits(12345678) ==> 6\n      sumDigits(123456789) ==> 6\n      sumDigits(1234567890) ==> 6\n  */\nconst sumDigits7 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 1000000;\n        num = Math.floor(num / 1000000);\n    }\n    return sum;\n};\n\n/*GReturns the sum of the digits of a number.\n\n   Example:\n      sumDigits(12) ==> 6\n      sumDigits(123) ==> 6\n      sumDigits(1234) ==> 6\n      sumDigits(12345) ==> 6\n      sumDigits(123", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += 'x';\n      number = number / 10;\n    } else {\n      result += 'i';\n      number = number - 1;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += 'x';\n      number = number / 10;\n    } else if (number % 10 == 1) {\n      result += 'i';\n      number = number - 1;\n    } else if (number % 10 == 2) {\n      result += 'ii';\n      number = number - 2;\n    } else if (number % 10 == 3) {\n      result += 'iii';\n      number = number - 3;\n    } else if (number % 10 == 4) {\n      result += 'iv';\n      number = number - 4;\n    } else if (number % 10 == 5) {\n      result += 'v';\n      number = number - 5;\n    } else if (number % 10 == 6) {\n      result += 'vi';\n      number = number - 6;\n    } else if (number % 10 == 7) {\n      result += 'vii';\n      number = number - 7;\n    } else if (number % 10 == 8) {\n      result += 'viii';\n      number = number - 8;\n    } else if (number % 10 == 9) {\n      result += 'ix';\n      number = number - 9;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += 'x';\n      number = number / 10;\n    } else if (number % 10 == 1) {\n      result += 'i';\n      number = number - 1;\n    } else if (number % 10 == 2) {\n      result += 'ii';\n      number = number - 2;\n    } else if (number % 10 == 3) {\n      result += 'iii';\n      number = number - 3;\n    } else if (number % 10 == 4) {\n      result += 'iv';\n      number = number - 4;\n    } else if (number % 10 == 5) {\n      result += 'v';\n      number = number - 5;\n    } else if (number % 10 == 6) {\n      result += 'vi';\n      number = number - 6;\n    } else if (number % 10 == 7) {\n      result += 'vii';\n      number = number - 7;\n    } else if (number % 10 == 8) {\n      result += 'viii';\n      number = number - 8;\n    } else if (number % 10 == 9) {\n      result += 'ix';\n      number = number - 9;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += 'x';\n      number = number / 10;\n    } else if (number % 10 == 1) {\n      result += 'i';\n      number = number - 1;\n    } else if (number % 10 == 2) {\n      result += 'ii';\n      number = number - 2;\n    } else if (number % 10 == 3) {\n      result += 'iii';\n      number = number - 3;\n    } else if (number % 10 == 4) {\n      result += 'iv';\n      number = number - 4;\n    } else if (number % 10 == 5) {\n      result += 'v';\n      number = number - 5;\n    } else if (number % 10 == 6) {\n      result += 'vi';\n      number = number - 6;\n    } else if (number % 10 == 7) {\n      result += 'vii';\n      number = number - 7;\n    } else if (number % 10 == 8) {\n      result += 'viii';\n      number = number - 8;\n    } else if (number % 10 == 9) {\n      result += 'ix';\n      number = number - 9;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  let maxCount = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < words.length; i++) {\n    const count = words[i].length;\n    if (count > maxCount) {\n      max = words[i];\n      maxCount = count;\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining < need) {\n    return [number, remaining];\n  }\n  return [number, need - remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0],\n  [13, 22, 0]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 0],\n  [5, 14, 0],\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) > 96? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Let's find out how many different words a string consists of (regardless of the case).\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    const resultOp = operatorOp(operandOp)\n    result.push(resultOp)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra11 = (operator, oper", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let reversed = false;\n  let reversedStr = \"\";\n  for (let i = len - 1; i >= 0; i--) {\n    if (s[i].toUpperCase() === s[i]) {\n      reversed =!reversed;\n    }\n    if (reversed) {\n      reversedStr += s[i].toUpperCase();\n    } else {\n      reversedStr += s[i].toLowerCase();\n    }\n  }\n  return reversedStr;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_256 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512_256 = crypto.createHash('sha512_256');\n  sha512_256.update(text);\n  return sha512_256.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512_256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_256_128 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512_256_128 = crypto.createHash('sha512_256_128');\n  sha512_256_128.update(text);\n  return sha512_256_128.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512_256_128('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_256_128_64 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512_256_128_64 = crypto.createHash('sha512_256_128_64');\n  sha512_256_128_64.update(text);\n  return sha512_256_128_64.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512_256_128_64('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_256_128_64_32 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512_256_128_64_32 = crypto.createHash('sha512_256_128_64_32');\n  sha512_256_128_64_32.update(text);\n  return sha512_256_128_64_32.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512_256_128_64_32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_256_128_64_32_16 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512_256_128_64_32_16 = crypto.createHash('sha512_256_128", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const result = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o|') {\n      beats.push(1);\n    } else if (notes[i] === 'o ') {\n      beats.push(4);\n    } else if (notes[i] === 'o |') {\n      beats.push(2);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = 0; j < substringLength; j++) {\n      if (string[i] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's say that a string is a palindrome if it reads the same backwards as forwards.\n  Write a function that takes a string and returns true if the string is a palindrome.\n  >>> isPalindrome('A man, a plan, a canal-Panama')\n  true\n  >>> isPalindrome('race a car')\n  false\n  */\nconst isPalindrome = (string) => {\n  const stringLength = string.length;\n  for (let i = 0; i < stringLength / 2; i++) {\n    if (string[i]!== string[stringLength - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Let's say that a string is a permutation of the alphabet if all the characters in the string are\n  unique. Write a function that takes a string and returns true if the string is a permutation\n  of the alphabet.\n  >>> isPermutation('abc')\n  true\n  >>> isPermutation('abcd')\n  false\n  >>> isPermutation('abcd')\n  true\n  */\nconst isPermutation = (string) => {\n  const stringLength = string.length;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const stringChars = string.split('');\n  for (let i = 0; i < stringLength; i++) {\n    if (stringChars.indexOf(stringChars[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Let's say that a string is a rotation of the alphabet if the first and last characters are the same.\n  Write a function that takes a string and returns true if the string is a rotation of the alphabet.\n  >>> isRotation('abc')\n  true\n  >>> isRotation('abcd')\n  false\n  >>> isRotation('abcd')\n  true\n  */\nconst isRotation = (string) => {\n  const stringLength = string.length;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const firstChar = string[0];\n  const lastChar = string[stringLength - 1];\n  if (firstChar!== lastChar) {\n    return false;\n  }\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i]!== alphabet[i + alphabetLength - stringLength]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Let's say that a string is a rotation of the alphabet if the first and last characters are the same.\n  Write a function that takes a string and returns true if the string is a rotation of the alphabet.\n  >>> isRotation('abc')\n  true\n  >>> isRotation('abcd')\n  false\n  >>> isRotation('abcd')\n  true\n  */\nconst isRotation = (string) => {\n  const stringLength = string.length;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const firstChar = string[0];\n  const lastChar = string[stringLength - 1];\n  if (firstChar!== lastChar) {\n    return false;\n  }\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i]!== alphabet[i + alphabetLength - stringLength]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Let's say that a string is a rotation of the alphabet if the first and last characters are the same.\n  Write a function that takes a string and returns true if the string is a rotation of the alphabet.\n  >>> isRotation('abc')\n  true\n  >>> isRotation('abcd')\n  false\n  >>> isRotation('abcd')\n  true\n  */\nconst isRotation = (string) => {\n  const stringLength = string.length;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const firstChar = string[0];\n  const lastChar = string[stringLength - 1];\n  if (firstChar!== lastChar) {\n    return false;\n  }\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i]!== alphabet[i + alphabetLength - stringLength]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Let's say that a string is a rotation of the alphabet if the first and last characters are the same.\n  Write a function that takes a string and returns true if the string is a rotation of the alphabet.\n  >>> isRotation('abc')\n  true\n  >>> isRotation('abcd')\n  false\n  >>> isRotation('abcd')\n  true\n  */\nconst isRotation = (string) => {\n  const stringLength = string.length;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const firstChar = string[0];\n  const lastChar = string[stringLength - 1];\n  if (firstChar!== lastChar) {\n    return false;\n  }\n  for (let i = 0; i < stringLength; i++) {\n    if (string[i]!== alphabet[i + alphabetLength - stringLength]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number)\n  const sortedNumbers = []\n  const sortedNumbersArray = []\n  const sortedNumbersArrayLength = []\n  const sortedNumbersLength = []\n  const sortedNumbersLengthArray = []\n  const sortedNumbersLengthArrayLength = []\n  const sortedNumbersLengthArrayLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLengthLengthLengthLength = []\n  const sortedNumbersLengthArrayLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = parseInt(number);\n  const decimalPart = number - numberAsInt;\n  const integerPart = Math.floor(numberAsInt);\n  const decimalPartAsInt = parseInt(decimalPart);\n  const decimalPartAsFloat = decimalPart - decimalPartAsInt;\n  const decimalPartAsFloatAsInt = parseInt(decimalPartAsFloat);\n  const decimalPartAsFloatAsFloat = decimalPartAsFloat - decimalPartAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloat = decimalPartAsFloatAsFloat - decimalPartAsFloatAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloat = decimalPartAsFloatAsFloatAsFloat - decimalPartAsFloatAsFloatAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloat = decimalPartAsFloatAsFloatAsFloatAsFloat - decimalPartAsFloatAsFloatAsFloatAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat = decimalPartAsFloatAsFloatAsFloatAsFloatAsFloat - decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat = decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat - decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat = decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat - decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt;\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsInt = parseInt(decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloat);\n  const decimalPartAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAsFloatAs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const closest = [min, max];\n  const closestIndex = [0, 1];\n  const closestDiff = [Math.abs(min - max), Math.abs(min - max)];\n  for (let i = 0; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - min);\n    if (diff < closestDiff[closestIndex[1]]) {\n      closestDiff[closestIndex[1]] = diff;\n      closest[closestIndex[1]] = numbers[i];\n      closestIndex[1] = (closestIndex[1] + 1) % 2;\n    }\n    if (diff < closestDiff[closestIndex[0]]) {\n      closestDiff[closestIndex[0]] = diff;\n      closest[closestIndex[0]] = numbers[i];\n      closestIndex[0] = (closestIndex[0] + 1) % 2;\n    }\n  }\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isInteger(value);\n  });\n};\n\nexport default filterIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen20 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen21 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen22 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen23 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen24 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen25 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen26 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen27 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen28 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen29 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen30 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen31 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen32 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen33 = (string) => {\n  return string.length;\n};\n\n/* Returns the number of characters in the given string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number divisor of n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number divisor of n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factorsLength = 0\n  const factorsIndex = 0\n  const factorsIndexMax = 0\n  const factorsIndexMin = 0\n  const factorsIndexMinMax = 0\n  const factorsIndexMinMaxMax = 0\n  const factorsIndexMinMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  const factorsIndexMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string) => {\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings are\n  concatenated together.\n  >>> concatenate([])\n  []\n  >>> concatenate(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  ['a', 'b', 'c', 'd']\n  */\nconst concatenate = (strings, separator) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(str);\n  }, []);\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings are\n  concatenated together, but with the separator between each string.\n  >>> concatenateWithSeparator([], ',')\n  []\n  >>> concatenateWithSeparator(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparator(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparator(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  */\nconst concatenateWithSeparator = (strings, separator) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(str + separator);\n  }, []);\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings are\n  concatenated together, but with the separator between each string.\n  >>> concatenateWithSeparatorWithPrefix([], ',')\n  []\n  >>> concatenateWithSeparatorWithPrefix(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefix(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefix(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  */\nconst concatenateWithSeparatorWithPrefix = (strings, separator, prefix) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(prefix + str + separator);\n  }, []);\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings are\n  concatenated together, but with the separator between each string.\n  >>> concatenateWithSeparatorWithPrefixAndFilter([], ',')\n  []\n  >>> concatenateWithSeparatorWithPrefixAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefixAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefixAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  */\nconst concatenateWithSeparatorWithPrefixAndFilter = (strings, separator, prefix, filter) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(filterByPrefix(filter(str), prefix) + separator);\n  }, []);\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings are\n  concatenated together, but with the separator between each string.\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilter([], ',')\n  []\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  */\nconst concatenateWithSeparatorWithPrefixAndFilterAndFilter = (strings, separator, prefix, filter, filter2) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(filterByPrefix(filter(filter2(str), prefix), prefix) + separator);\n  }, []);\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings are\n  concatenated together, but with the separator between each string.\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilterAndFilter([], ',')\n  []\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilterAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilterAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  >>> concatenateWithSeparatorWithPrefixAndFilterAndFilterAndFilter(['a', 'b', 'c'], ',')\n  ['a, b, c']\n  */\nconst concatenateWithSeparatorWithPrefixAndFilterAndFilterAndFilter = (strings, separator, prefix, filter, filter2, filter3) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(filterByPrefix(filter3(filter2(filter(str), prefix), prefix), prefix) + separator);\n  }, []);\n};\n\nmodule.exports = {\n  concatenate,\n  concatenateWithSeparator,\n  concatenateWithSeparatorWithPrefix,\n  concaten", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*RThe list contains only negative numbers.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getPositiveNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative2 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative3 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative4 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative5 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative6 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative7 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative8 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative9 = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*RThe list contains only positive and negative numbers.\n  >>> getPositiveNegative([-1, 2, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, 0])\n  [-4, -5, -6, -5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getPositiveNegative10 = (l) => {\n  return getPositive(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 30) return true\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> countPrimes(110)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let t4 = 0;\n  let t5 = 0;\n  let t6 = 0;\n  let t7 = 0;\n  let t8 = 0;\n  let t9 = 0;\n  let t10 = 0;\n  let t11 = 0;\n  let t12 = 0;\n  let t13 = 0;\n  let t14 = 0;\n  let t15 = 0;\n  let t16 = 0;\n  let t17 = 0;\n  let t18 = 0;\n  let t19 = 0;\n  let t20 = 0;\n  let t21 = 0;\n  let t22 = 0;\n  let t23 = 0;\n  let t24 = 0;\n  let t25 = 0;\n  let t26 = 0;\n  let t27 = 0;\n  let t28 = 0;\n  let t29 = 0;\n  let t30 = 0;\n  let t31 = 0;\n  let t32 = 0;\n  let t33 = 0;\n  let t34 = 0;\n  let t35 = 0;\n  let t36 = 0;\n  let t37 = 0;\n  let t38 = 0;\n  let t39 = 0;\n  let t40 = 0;\n  let t41 = 0;\n  let t42 = 0;\n  let t43 = 0;\n  let t44 = 0;\n  let t45 = 0;\n  let t46 = 0;\n  let t47 = 0;\n  let t48 = 0;\n  let t49 = 0;\n  let t50 = 0;\n  let t51 = 0;\n  let t52 = 0;\n  let t53 = 0;\n  let t54 = 0;\n  let t55 = 0;\n  let t56 = 0;\n  let t57 = 0;\n  let t58 = 0;\n  let t59 = 0;\n  let t60 = 0;\n  let t61 = 0;\n  let t62 = 0;\n  let t63 = 0;\n  let t64 = 0;\n  let t65 = 0;\n  let t66 = 0;\n  let t67 = 0;\n  let t68 = 0;\n  let t69 = 0;\n  let t70 = 0;\n  let t71 = 0;\n  let t72 = 0;\n  let t73 = 0;\n  let t74 = 0;\n  let t75 = 0;\n  let t76 = 0;\n  let t77 = 0;\n  let t78 = 0;\n  let t79 = 0;\n  let t80 = 0;\n  let t81 = 0;\n  let t82 = 0;\n  let t83 = 0;\n  let t84 = 0;\n  let t85 = 0;\n  let t86 = 0;\n  let t87 = 0;\n  let t88 = 0;\n  let t89 = 0;\n  let t90 = 0;\n  let t91 = 0;\n  let t92 = 0;\n  let t93 = 0;\n  let t94 = 0;\n  let t95 = 0;\n  let t96 = 0;\n  let t97 = 0;\n  let t98 = 0;\n  let t99 = 0;\n  let t100 = 0;\n  let t101 = 0;\n  let t102 = 0;\n  let t103 = 0;\n  let t104 = 0;\n  let t105 = 0;\n  let t106 = 0;\n  let t107 = 0;\n  let t108 = 0;\n  let t109 = 0;\n  let t110 = 0;\n  let t111 = 0;\n  let t112 = 0;\n  let t113 = 0;\n  let t114 = 0;\n  let t115 = 0;\n  let t116 = 0;\n  let t117 = 0;\n  let t118 = 0;\n  let t119 = 0;\n  let t120 = 0;\n  let t121 = 0;\n  let t122 = 0;\n  let t123 = 0;\n  let t124 = 0;\n  let t125 = 0;\n  let t126 = 0;\n  let t127 = 0;\n  let t128 = 0;\n  let t129 = 0;\n  let t130 = 0;\n  let t131 = 0;\n  let t132 = 0;\n  let t133 = 0;\n  let t134 = 0;\n  let t135 = 0;\n  let t136 = 0;\n  let t137 = 0;\n  let t138 = 0;\n  let t139 = 0;\n  let t140 = 0;\n  let t141 = 0;\n  let t142 = 0;\n  let t143 = 0;\n  let t144 = 0;\n  let t145 = 0;\n  let t146 = 0;\n  let t147 = 0;\n  let t148 = 0;\n  let t149 = 0;\n  let t150 = 0;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 3) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 3) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 5) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 5) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by ten, while its values for indices divisible by ten correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTenth = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 10) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 10) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwenty = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 20) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 20) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by thirty, while its values for indices divisible by thirty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirty = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 30) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 30) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by sixty, while its values for indices divisible by sixty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSixty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixty([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixty = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 60) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 60) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by seventy, while its values for indices divisible by seventy correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSeventy([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventy([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventy = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 70) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 70) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by eighty, while its values for indices divisible by eighty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortEighty([1, 2, 3])\n  [1, 2, 3]\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Rreturns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Rreturns the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Rreturns the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  const sorted = sortedArray(l);\n  const half = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = maxElement(sorted);\n  const min = minElement(sorted);\n  const count = l.length;\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      mode = max;\n      modeCount = count;\n    } else if (sorted[i] === min) {\n      mode = min;\n      modeCount = count;\n    } else if (sorted[i] === mode) {\n      modeCount++;\n    }\n  }\n  return mode;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = maxElement(sorted);\n  const min = minElement(sorted);\n  const count = l.length;\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      mode = max;\n      modeCount = count;\n    } else if (sorted[i] === min) {\n      mode = min;\n      modeCount = count;\n    } else if (sorted[i] === mode) {\n      modeCount++;\n    }\n  }\n  return mode;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = maxElement(sorted);\n  const min = minElement(sorted);\n  const count = l.length;\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      mode = max;\n      modeCount = count;\n    } else if (sorted[i] === min) {\n      mode = min;\n      modeCount = count;\n    } else if (sorted[i] === mode) {\n      modeCount++;\n    }\n  }\n  return mode;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = maxElement(sorted);\n  const min = minElement(sorted);\n  const count = l.length;\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      mode = max;\n      modeCount = count;\n    } else if (sorted[i] === min) {\n      mode = min;\n      modeCount = count", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = Math.min(divisors)\n  const divisor_power = Math.pow(divisor, n)\n  const divisor_power_mod = (n % divisor)\n  const divisor_power_mod_mod = (divisor_power_mod % divisor)\n  const divisor_power_mod_mod_mod = (divisor_power_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod = (divisor_power_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = (divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % divisor)\n  const divisor_power_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const sorted = [];\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\nmodule.exports = {\n  sortEven,\n  sortOdd,\n  sort\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return primeFib(n - 1) + primeFib(n - 2);\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the median of this dataset. The median is the middle number of the list.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const count = {};\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    count[sortedNumbers[i]] = count[sortedNumbers[i]]? count[sortedNumbers[i]] + 1 : 1;\n  }\n  const maxCount = Object.keys(count).sort((a, b) => count[a] - count[b])[0];\n  return count[maxCount];\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. The standard deviation is the square root of the sum of the squared deviations from the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. The variance is the sum of the squared deviations from the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return sum(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the skewness of this dataset. The skewness is the ratio of the standard deviation to the mean.\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const standardDeviation = standardDeviation(numbers);\n  return standardDeviation / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis of this dataset. The kurtosis is the ratio of the variance to the mean squared.\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const variance = variance(numbers);\n  return variance / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the range of this dataset. The range is the difference between the maximum and the minimum.\n  >>> range([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst range = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return max - min;\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const count = {};\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    count[sortedNumbers[i]] = count[sortedNumbers[i]]? count[sortedNumbers[i]] + 1 : 1;\n  }\n  const maxCount = Object.keys(count).sort((a, b) => count[a] - count[b])[0];\n  return count[maxCount];\n};\n\n/*\n  For a given list of input numbers, calculate the median of this dataset. The median is the middle number of the list.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const count = {};\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    count[sortedNumbers[i]] = count[sortedNumbers[i]]? count[sortedNumbers[i]] + 1 : 1;\n  }\n  const maxCount = Object.keys", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero3 = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero4 = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero5 = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero6 = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero7 = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      left: i,\n      right: n - i - 1\n    });\n  }\n  cars.sort((a, b) => a.left - b.left);\n  cars.sort((a, b) => b.right - a.right);\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].left < cars[j].right && cars[j].right < cars[i].right) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconsole.log(carRaceCollision(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1)\n  }\n  return newList\n}\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 8, 6, 4, 4, 12, 1, 124]\n  */\nconst multList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 2)\n  }\n  return newList\n}\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 1.5, 1, 1.25]\n  */\nconst divList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 2)\n  }\n  return newList\n}\n\n/*Return list with elements multiplied by 2 and divided by 2.\n  >>> multDivList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 1.5, 1, 1.25]\n  */\nconst multDivList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 2 / 2)\n  }\n  return newList\n}\n\n/*Return list with elements added together.\n  >>> addList([1, 2, 3])\n  [2, 4, 6]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 8, 6, 4, 4, 12, 1, 124]\n  */\nconst addList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + l[i])\n  }\n  return newList\n}\n\n/*Return list with elements subtracted from each other.\n  >>> subList([1, 2, 3])\n  [0, 1, 2]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 2, 2, 1, 1, 1, 0, 1, 122]\n  */\nconst subList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - l[i])\n  }\n  return newList\n}\n\n/*Return list with elements divided by each other.\n  >>> divList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 1.5, 1, 1.25]\n  */\nconst divList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / l[i])\n  }\n  return newList\n}\n\n/*Return list with elements divided by each other and multiplied by 2.\n  >>> multDivList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 1.5, 1, 1.25]\n  */\nconst multDivList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 2 / l[i])\n  }\n  return newList\n}\n\n/*Return list with elements added together and divided by each other.\n  >>> addMultDivList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> addMultDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 1.5, 1, 1.25]\n  */\nconst addMultDivList = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + l[i] / l[i])\n  }\n  return newList\n}\n\n/*Return list with elements subtracted from each other and divided by each other.\n  >>> subMultDivList([", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n    }\n  }\n  return set.size!== 2;\n};\n\n/*\n  pairsSumToZero2 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n    }\n  }\n  return set.size!== 2;\n};\n\n/*\n  pairsSumToZero3 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n    }\n  }\n  return set.size!== 2;\n};\n\n/*\n  pairsSumToZero4 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n    }\n  }\n  return set.size!== 2;\n};\n\n/*\n  pairsSumToZero5 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero5([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero5([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero5([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero5([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n    }\n  }\n  return set.size!== 2;\n};\n\n/*\n  pairsSumToZero6 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero6([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero6([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero6([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero6([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n    }\n  }\n  return set.size!== 2;\n};\n\n/*\n  pairsSumToZero7 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairs", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase(-x, base)\n  if (x < base) return x.toString(base)\n  const result = []\n  while (x > 0) {\n    result.unshift(x % base)\n    x = Math.floor(x / base)\n  }\n  return result.reverse().join('')\n}\n\n/*Cconvert a string to a number.\n  >>> convert(12)\n  12\n  >>> convert('12')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('12a')\n  12\n  >>> convert('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea33 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea34 = (a, h) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  1\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  3\n  >>> fib4(4)\n  5\n  >>> fib4(5)\n  8\n  >>> fib4(6)\n  13\n  >>> fib4(7)\n  21\n  */\n\n/*\n  >>> fib4(8)\n  21\n  >>> fib4(9)\n  34\n  >>> fib4(10)\n  55\n  >>> fib4(11)\n  89\n  >>> fib4(12)\n  144\n  >>> fib4(13)\n  233\n  >>> fib4(14)\n  377\n  >>> fib4(15)\n  610\n  >>> fib4(16)\n  987\n  >>> fib4(17)\n  1597\n  >>> fib4(18)\n  2584\n  >>> fib4(19)\n  4181\n  >>> fib4(20)\n  6765\n  >>> fib4(21)\n  10946\n  >>> fib4(22)\n  17711\n  >>> fib4(23)\n  28657\n  >>> fib4(24)\n  46368\n  >>> fib4(25)\n  75555\n  >>> fib4(26)\n  121393\n  >>> fib4(27)\n  196418\n  >>> fib4(28)\n  317811\n  >>> fib4(29)\n  514229\n  >>> fib4(30)\n  832040\n  >>> fib4(31)\n  1346269\n  >>> fib4(32)\n  2178309\n  >>> fib4(33)\n  3524578\n  >>> fib4(34)\n  5702887\n  >>> fib4(35)\n  9227465\n  >>> fib4(36)\n  14930352\n  >>> fib4(37)\n  24157817\n  >>> fib4(38)\n  39088169\n  >>> fib4(39)\n  63245986\n  >>> fib4(40)\n  124633785\n  >>> fib4(41)\n  196418269\n  >>> fib4(42)\n  317811579\n  >>> fib4(43)\n  525878906\n  >>> fib4(44)\n  879609302\n  >>> fib4(45)\n  1374389534\n  >>> fib4(46)\n  2147483647\n  >>> fib4(47)\n  28147497674\n  >>> fib4(48)\n  4611686018427387903\n  >>> fib4(49)\n  6908521828213405265\n  >>> fib4(50)\n  9223372036854775807\n  >>> fib4(51)\n  12582912591730331649\n  >>> fib4(52)\n  17448304605722253423\n  >>> fib4(53)\n  25170048217042378017\n  >>> fib4(54)\n  33554430987124925169\n  >>> fib4(55)\n  43046722934842732228\n  >>> fib4(56)\n  58776960900152289285\n  >>> fib4(57)\n  67108859364550781907\n  >>> fib4(58)\n  90949470177292848490\n  >>> fib4(59)\n  11805916207174113034\n  >>> fib4(60)\n  14447246026830602834\n  >>> fib4(61)\n  17976931348623158079\n  >>> fib4(62)\n  206158418065546839270\n  >>> fib4(63)\n  2423759315707530423\n  >>> fib4(64)\n  28823037615171174475\n  >>> fib4(65)\n  35422482301025443981\n  >>> fib4(66)\n  40265318708627607849\n  >>> fib4(67)\n  46424509448885359220\n  >>> fib4(68)\n  52716465049458828605\n  >>> fib4(69)\n  59323085092947294410\n  >>> fib4(70)\n  66491398262405844103\n  >>> fib4(71)\n  72057594037927931999\n  >>> fib4(72)\n  78643191385359519084\n  >>> fib4(73)\n  85474293825363530602\n  >>> fib4(74)\n  92233720368547758081\n  >>> fib4(75)\n  10098855576825238817\n  >>> fib4(76)\n  109051908514904140873\n  >>> fib4(77)\n  11805916207174113034\n  >>> fib4(78)\n  12582912591730331649\n  >>> fib4(79)\n  137438953472187812207\n  >>> fib4(80)\n  14447246026830602834\n  >>> fib4(81)\n  159768345027590801095\n  >>> fib4(82)\n  17448304605722253423\n  >>> fib4(83)\n  181820369925561225229\n  >>> fib4(84)\n  195864636479141217272\n  >>> fib4(85)\n  207361468449832693856\n  >>> fib4(86)\n  2225576545", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const middle = sorted[half];\n  if (sorted.length % 2 === 1) {\n    return middle;\n  }\n  return (sorted[half - 1] + sorted[half]) / 2;\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let textLength = text.length;\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1\n  return (n % p)? modp(n % p, p) : n\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits2 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits3 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 100\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits4 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 1000\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits5 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 10000\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits6 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 100000\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits7 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 1000000\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  */\nconst digits8 = (n) => {\n  let count = 1\n  while (n > 0) {\n    n = n / 10000000\n    count++\n  }\n  return count\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return left.concat(delimeter, right)\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in reverse order.\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([])\n  []\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  */\nconst reverse = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return right.concat(left)\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order.\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([])\n  []\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sort = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return left.concat(right).sort()\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order, with the largest number first.\n  >>> largest([1, 2, 3])\n  [3, 2, 1]\n  >>> largest([])\n  []\n  >>> largest([1, 2, 3])\n  [3, 2, 1]\n  */\nconst largest = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return right.concat(left).sort().reverse()\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order, with the smallest number first.\n  >>> smallest([1, 2, 3])\n  [1, 2, 3]\n  >>> smallest([])\n  []\n  >>> smallest([1, 2, 3])\n  [1, 2, 3]\n  */\nconst smallest = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return left.concat(right).sort().reverse()\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order, with the smallest number first,\n  and the largest number last.\n  >>> largest_and_smallest([1, 2, 3])\n  [1, 2, 3]\n  >>> largest_and_smallest([])\n  []\n  >>> largest_and_smallest([1, 2, 3])\n  [1, 2, 3]\n  */\nconst largest_and_smallest = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return left.concat(right).sort().reverse()\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order, with the largest number first,\n  and the smallest number last.\n  >>> largest_and_smallest([1, 2, 3])\n  [3, 2, 1]\n  >>> largest_and_smallest([])\n  []\n  >>> largest_and_smallest([1, 2, 3])\n  [3, 2, 1]\n  */\nconst largest_and_smallest_sorted = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return left.concat(right).sort().reverse()\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order, with the smallest number first,\n  and the largest number last.\n  >>> largest_and_smallest([1, 2, 3])\n  [1, 2, 3]\n  >>> largest_and_smallest([])\n  []\n  >>> largest_and_smallest([1, 2, 3])\n  [1, 2, 3]\n  */\nconst largest_and_smallest_sorted_reverse = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return right.concat(left).sort().reverse()\n}\n\n/*\n  Given a list of numbers, return a list of the numbers,\n  in sorted order, with the smallest number first,\n  and the largest number last,\n  and the largest number first.\n  >>> largest_and_smallest_sorted_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> largest_and_smallest_sorted_reverse([])\n  []\n  >>> largest_and_smallest_sorted_reverse([1, 2, 3])\n  [3, 2, 1]\n  */\nconst largest_and_smallest_sorted_reverse_reverse = (numbers) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const half = len / 2\n  const left = numbers.slice(0, half)\n  const right = numbers.slice(half)\n  return right.concat(left).sort().", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsRegex = new RegExp(`[${vowels.join('|')}]`, 'g');\n  return text.replace(vowelsRegex, '');\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['!', '?', '.', ',', ':', ';', '-', '_', '\\'', '\"', '\\'s', '\\'S', '\\'m', '\\'re', '\\'ve', '\\'s', '\\'re', '\\'ll', '\\'d', '\\'ll', '\\'re', '\\'s', '\\'re', '\\'m', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '\\'s', '\\'re', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n >= t);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds = (l, t, u) => {\n  return belowThreshold(l, t) && aboveThreshold(l, u);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds2 = (l, t, u) => {\n  return belowThreshold(l, t) || aboveThreshold(l, u);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds3 = (l, t, u) => {\n  return belowThreshold(l, t) && aboveThreshold(l, u) || belowThreshold(l, u) && aboveThreshold(l, t);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds4 = (l, t, u) => {\n  return belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u) && aboveThreshold(l, t);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds5 = (l, t, u) => {\n  return belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u) || aboveThreshold(l, t);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds6 = (l, t, u) => {\n  return belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u) || aboveThreshold(l, t) || belowThreshold(l, t) || aboveThreshold(l, u);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds7 = (l, t, u) => {\n  return belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u) || aboveThreshold(l, t) || belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds8 = (l, t, u) => {\n  return belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u) || aboveThreshold(l, t) || belowThreshold(l, t) || aboveThreshold(l, u) || belowThreshold(l, u) || aboveThreshold(l, t) || belowThreshold(l, t);\n};\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    sameChars,\n    sameChars2,\n    sameChars3,\n    sameChars4,\n    sameChars5\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib10(n - 1) + fib10(n - 2)\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return false\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const c = brackets[i]\n    if (c === \"<\") {\n      stack.push(\"<\")\n    } else if (c === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, returns a string with all the characters in lowercase.\n  */\nconst toLowerCase = (str) => {\n  return str.toLowerCase()\n}\n\n/*\n  Given a string, returns a string with all the characters in uppercase.\n  */\nconst toUpperCase = (str) => {\n  return str.toUpperCase()\n}\n\n/*\n  Given a string, returns a string with all the characters in title case.\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, toUpperCase)\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuation = (str) => {\n  return str.replace(/[^\\w\\s]/g, \"\")\n}\n\n/*\n  Given a string, returns a string with all the whitespace removed.\n  */\nconst removeWhitespace = (str) => {\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespace = (str) => {\n  return removePunctuation(removeWhitespace(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCase = (str) => {\n  return removePunctuationAndWhitespace(toLowerCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndTitleCase = (str) => {\n  return removePunctuationAndWhitespace(toTitleCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCase(toTitleCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCase(toLowerCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCase(toTitleCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toLowerCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toTitleCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toLowerCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toTitleCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toLowerCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toTitleCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCase = (str) => {\n  return removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCase(toLowerCase(str))\n}\n\n/*\n  Given a string, returns a string with all the punctuation removed.\n  */\nconst removePunctuationAndWhitespaceAndLowerCaseAndTitleCaseAndLowerCaseAndTitleCaseAndLower", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len = l1.length;\n  const len2 = l2.length;\n  const common = [];\n  for (let i = 0; i < len; i++) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let primeFactor = 2;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let primeFactor = 2;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let primeFactor = 2;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let primeFactor = 3;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let primeFactor = 5;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let primeFactor = 7;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let primeFactor = 11;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let primeFactor = 13;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let primeFactor = 17;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let primeFactor = 19;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let primeFactor = 31;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let primeFactor = 37;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let primeFactor = 67;\n  while (primeFactor * primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return primeFactor;\n    }\n    primeFactor += 1;\n  }\n  return n;\n};\n\n/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_length = paren_stack.length;\n  const paren_string_length = paren_string.length;\n  let current_paren_level = 0;\n  let current_paren_index = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_char = paren_string[current_paren_string_index];\n  let current_paren_string_char_next = paren_string[current_paren_string_index + 1];\n  let current_paren_string_char_next_next = paren_string[current_paren_string_index + 2];\n  while (current_paren_string_index < paren_string_length) {\n    if (current_paren_string_char === '(') {\n      paren_stack.push(current_paren_string_index);\n      current_paren_level++;\n    } else if (current_paren_string_char === ')') {\n      current_paren_level--;\n      if (current_paren_level === 0) {\n        paren_stack.pop();\n        current_paren_index = paren_stack.length - 1;\n        current_paren_string_index = paren_stack[current_paren_index];\n        current_paren_string_char = paren_string[current_paren_string_index];\n        current_paren_string_char_next = paren_string[current_paren_string_index + 1];\n        current_paren_string_char_next_next = paren_string[current_paren_string_index + 2];\n      }\n    }\n    current_paren_string_index++;\n    current_paren_string_char = current_paren_string_char_next;\n    current_paren_string_char_next = current_paren_string_char_next_next;\n  }\n  return paren_stack;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== '(') {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  \n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] = d[i] * (j + 1)\n    }\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x ^ 2 + a_3 * x ^ 3 + a_4 * x ^ 4 + a_5 * x ^ 5 + a_6 * x ^ 6 + a_7 * x ^ 7 + a_8 * x ^ 8 + a_9 * x ^ 9 + a_10 * x ^ 10 + a_11 * x ^ 11 + a_12 * x ^ 12 + a_13 * x ^ 13 + a_14 * x ^ 14 + a_15 * x ^ 15 + a_16 * x ^ 16 + a_17 * x ^ 17 + a_18 * x ^ 18 + a_19 * x ^ 19 + a_20 * x ^ 20 + a_21 * x ^ 21 + a_22 * x ^ 22 + a_23 * x ^ 23 + a_24 * x ^ 24 + a_25 * x ^ 25 + a_26 * x ^ 26 + a_27 * x ^ 27 + a_28 * x ^ 28 + a_29 * x ^ 29 + a_30 * x ^ 30 + a_31 * x ^ 31 + a_32 * x ^ 32 + a_33 * x ^ 33 + a_34 * x ^ 34 + a_35 * x ^ 35 + a_36 * x ^ 36 + a_37 * x ^ 37 + a_38 * x ^ 38 + a_39 * x ^ 39 + a_40 * x ^ 40 + a_41 * x ^ 41 + a_42 * x ^ 42 + a_43 * x ^ 43 + a_44 * x ^ 44 + a_45 * x ^ 45 + a_46 * x ^ 46 + a_47 * x ^ 47 + a_48 * x ^ 48 + a_49 * x ^ 49 + a_50 * x ^ 50 + a_51 * x ^ 51 + a_52 * x ^ 52 + a_53 * x ^ 53 + a_54 * x ^ 54 + a_55 * x ^ 55 + a_56 * x ^ 56 + a_57 * x ^ 57 + a_58 * x ^ 58 + a_59 * x ^ 59 + a_60 * x ^ 60 + a_61 * x ^ 61 + a_62 * x ^ 62 + a_63 * x ^ 63 + a_64 * x ^ 64 + a_65 * x ^ 65 + a_66 * x ^ 66 + a_67 * x ^ 67 + a_68 * x ^ 68 + a_69 * x ^ 69 + a_70 * x ^ 70 + a_71 * x ^ 71 + a_72 * x ^ 72 + a_73 * x ^ 73 + a_74 * x ^ 74 + a_75 * x ^ 75 + a_76 * x ^ 76 + a_77 * x ^ 77 + a_78 * x ^ 78 + a_79 * x ^ 79 + a_80 * x ^ 80 + a_81 * x ^ 81 + a_82 * x ^ 82 + a_83 * x ^ 83 + a_84 * x ^ 84 + a_85 * x ^ 85 + a_86 * x ^ 86 + a_87 * x ^ 87 + a_88 * x ^ 88 + a_89 * x ^ 89 + a_90 * x ^ 90 + a_91 * x ^ 91 + a_92 * x ^ 92 + a_93 * x ^ 93 + a_94 * x ^ 94 + a_95 * x ^ 95 + a_96 * x ^ 96 + a_97 * x ^ 97 + a_98 * x ^ 98 + a_99 * x ^ 99 + a_100 * x ^ 100 + a_101 * x ^ 101 + a_102 * x ^ 102 + a_103 * x ^ 103 + a_104 * x ^ 104 + a_105 * x ^ 105 + a_106 * x ^ 106 + a_107 * x ^ 107 + a_108 * x ^ 108 + a_109 * x ^ 109 + a_110 * x ^ 110 + a_111 * x ^ 111 + a_112 * x ^ 112 + a_113 * x ^ 113 + a_114 * x ^ 114 + a_115 * x ^ 115 + a_116 * x ^ 116 + a_117 * x ^ 117 + a_118 * x ^ 118 + a_119 * x ^ 119 + a_120 * x ^ 120 + a_121 * x ^ 121 + a_122 * x ^ 122 + a_123 * x ^ 123 + a_124 * x ^ 124 + a_125 * x ^ 125 + a_126 * x ^ 126 + a_127 * x ^ 127 + a_128 * x ^ 128 + a_129 * x ^ 129 + a_130 * x ^ 130 + a_131 * x ^ 131 + a_132 * x ^ 132 + a_133 * x ^ 133 + a_134 * x ^ 134 + a_135 * x ^ 135 + a_136 * x ^ 136 + a_137 * x ^ 137 + a_138 * x ^ 138 + a_139 * x ^ 139 + a_140 * x ^ 140 + a_141 * x ^ 141 + a_142 * x ^ 142 + a_143 * x ^ 143 + a_144 * x ^ 144 + a_145 * x ^ 145 + a_146 * x ^ 146 + a_147 * x ^ 147 + a_148 * x ^ 148 + a_149 * x ^ 149 + a_150 * x ^ 150 + a_151 * x ^ 151 + a_152 * x ^ 152 + a_153 * x ^ 153 + a_154 * x ^ 154 + a_155 * x ^ 155 + a_156 * x ^ 156 + a_157 * x ^ 157 + a_158 * x ^ 158 + a_159 * x ^ 159 + a_160 * x ^ 160 + a_161 * x ^ 161 + a_162 * x ^ 162 + a_163 * x ^ 163 + a_164 * x ^ 164 + a_165 * x ^ 165 + a_166", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  if (s[len - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\"\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"123456789\")\n  10\n  >>> consonantsCount(\"!@#$%^&*()\")\n  10\n  >>> consonantsCount(\"\")\n  0\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y']\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\"\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"123456789\")\n  10\n  >>> consonantsCount(\"!@#$%^&*()\")\n  10\n  >>> consonantsCount(\"\")\n  0\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y']\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\"\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"123456789\")\n  10\n  >>> consonantsCount(\"!@#$%^&*()\")\n  10\n  >>> consonantsCount(\"\")\n  0\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y']\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\"\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"123456789\")\n  10\n  >>> consonantsCount(\"!@#$%^&*()\")\n  10\n  >>> consonantsCount(\"\")\n  0\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y']\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n  return newDigits.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const digits = x.toString().split('');\n  const newDigits = [];\n  for (let i = 0; i < digits.length; i++) {\n    newDigits.push(digits[(i + shift) % digits.length]);\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst digitCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times that a character appears in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const apple = s.match(/apple/g)\n  const orange = s.match(/orange/g)\n  const mango = s.match(/mango/g)\n  const total = apple.length + orange.length + mango.length\n  return n - total\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution2 = (s, n) => {\n  const apple = s.match(/apple/g)\n  const orange = s.match(/orange/g)\n  const mango = s.match(/mango/g)\n  const total = apple.length + orange.length + mango.length\n  return n - total\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution3 = (s, n) => {\n  const apple = s.match(/apple/g)\n  const orange = s.match(/orange/g)\n  const mango = s.match(/mango/g)\n  const total = apple.length + orange.length + mango.length\n  return n - total\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution4 = (s, n) => {\n  const apple = s.match(/apple/g)\n  const orange = s.match(/orange/g)\n  const mango = s.match(/mango/g)\n  const total = apple.length + orange.length + mango.length\n  return n - total\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution5 = (s, n) => {\n  const apple = s.match(/apple/g)\n  const orange = s.match(/orange/g)\n  const mango = s.match(/mango/g)\n  const total = apple.length + orange.length + mango.length\n  return n - total\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution6 = (s, n) => {\n  const apple", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min, min_index] = findMin(arr);\n  if (min) {\n    return [min, min_index];\n  }\n  return [];\n};\n\nfunction findMin(arr) {\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  return [min, min_index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n  const maxIndex = lst.findIndex((x) => x >= max);\n  return maxIndex === -1? -1 : lst[maxIndex];\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  const sortedLst = [];\n  const sortedLstLength = lst.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minIndex2 = 0;\n  let maxIndex2 = 0;\n  let minIndex3 = 0;\n  let maxIndex3 = 0;\n  let minIndex4 = 0;\n  let maxIndex4 = 0;\n  let minIndex5 = 0;\n  let maxIndex5 = 0;\n  let minIndex6 = 0;\n  let maxIndex6 = 0;\n  let minIndex7 = 0;\n  let maxIndex7 = 0;\n  let minIndex8 = 0;\n  let maxIndex8 = 0;\n  let minIndex9 = 0;\n  let maxIndex9 = 0;\n  let minIndex10 = 0;\n  let maxIndex10 = 0;\n  let minIndex11 = 0;\n  let maxIndex11 = 0;\n  let minIndex12 = 0;\n  let maxIndex12 = 0;\n  let minIndex13 = 0;\n  let maxIndex13 = 0;\n  let minIndex14 = 0;\n  let maxIndex14 = 0;\n  let minIndex15 = 0;\n  let maxIndex15 = 0;\n  let minIndex16 = 0;\n  let maxIndex16 = 0;\n  let minIndex17 = 0;\n  let maxIndex17 = 0;\n  let minIndex18 = 0;\n  let maxIndex18 = 0;\n  let minIndex19 = 0;\n  let maxIndex19 = 0;\n  let minIndex20 = 0;\n  let maxIndex20 = 0;\n  let minIndex21 = 0;\n  let maxIndex21 = 0;\n  let minIndex22 = 0;\n  let maxIndex22 = 0;\n  let minIndex23 = 0;\n  let maxIndex23 = 0;\n  let minIndex24 = 0;\n  let maxIndex24 = 0;\n  let minIndex25 = 0;\n  let maxIndex25 = 0;\n  let minIndex26 = 0;\n  let maxIndex26 = 0;\n  let minIndex27 = 0;\n  let maxIndex27 = 0;\n  let minIndex28 = 0;\n  let maxIndex28 = 0;\n  let minIndex29 = 0;\n  let maxIndex29 = 0;\n  let minIndex30 = 0;\n  let maxIndex30 = 0;\n  let minIndex31 = 0;\n  let maxIndex31 = 0;\n  let minIndex32 = 0;\n  let maxIndex32 = 0;\n  let minIndex33 = 0;\n  let maxIndex33 = 0;\n  let minIndex34 = 0;\n  let maxIndex34 = 0;\n  let minIndex35 = 0;\n  let maxIndex35 = 0;\n  let minIndex36 = 0;\n  let maxIndex36 = 0;\n  let minIndex37 = 0;\n  let maxIndex37 = 0;\n  let minIndex38 = 0;\n  let maxIndex38 = 0;\n  let minIndex39 = 0;\n  let maxIndex39 = 0;\n  let minIndex40 = 0;\n  let maxIndex40 = 0;\n  let minIndex41 = 0;\n  let maxIndex41 = 0;\n  let minIndex42 = 0;\n  let maxIndex42 = 0;\n  let minIndex43 = 0;\n  let maxIndex43 = 0;\n  let minIndex44 = 0;\n  let maxIndex44 = 0;\n  let minIndex45 = 0;\n  let maxIndex45 = 0;\n  let minIndex46 = 0;\n  let maxIndex46 = 0;\n  let minIndex47 = 0;\n  let maxIndex47 = 0;\n  let minIndex48 = 0;\n  let maxIndex48 = 0;\n  let minIndex49 = 0;\n  let maxIndex49 = 0;\n  let minIndex50 = 0;\n  let maxIndex50 = 0;\n  let minIndex51 = 0;\n  let maxIndex51 = 0;\n  let minIndex52 = 0;\n  let maxIndex52 = 0;\n  let minIndex53 = 0;\n  let maxIndex53 = 0;\n  let minIndex54 = 0;\n  let maxIndex54 = 0;\n  let minIndex55 = 0;\n  let maxIndex55 = 0;\n  let minIndex56 = 0;\n  let maxIndex56 = 0;\n  let minIndex57 = 0;\n  let maxIndex57 = 0;\n  let minIndex58 = 0;\n  let maxIndex58 = 0;\n  let minIndex59 = 0;\n  let maxIndex59 = 0;\n  let minIndex60 = 0;\n  let maxIndex60 = 0;\n  let minIndex61 = 0;\n  let maxIndex61 = 0;\n  let minIndex62 = 0;\n  let maxIndex62 = 0;\n  let minIndex63 = 0;\n  let maxIndex63 = 0;\n  let minIndex64 = 0;\n  let maxIndex64 = 0;\n  let minIndex65 = 0;\n  let maxIndex65 = 0;\n  let minIndex66 = 0;\n  let maxIndex66 = 0;\n  let minIndex67 = 0;\n  let maxIndex67 = 0;\n  let minIndex68 = 0;\n  let maxIndex68 = 0;\n  let minIndex69 = 0;\n  let maxIndex69 = 0;\n  let minIndex70 = 0;\n  let maxIndex70 = 0;\n  let minIndex71 = 0;\n  let maxIndex71 = 0;\n  let minIndex72 = 0;\n  let maxIndex72 = 0;\n  let minIndex73 = 0;\n  let maxIndex73 = 0;\n  let minIndex74 = 0;\n  let maxIndex74 = 0;\n  let minIndex75 = 0;\n  let maxIndex75 = 0;\n  let minIndex76 = 0;\n  let maxIndex76 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const isPalindrome = q.every(q2 => q2 === q.reverse().join(''));\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && isPalindrome;\n};\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if the object q is a palindrome, and false otherwise.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ false\n  # 1+2+3+2+1 is not a palindrome.\n\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # 1+2+3+2+1 is a palindrome.\n  */\nconst isPalindrome = q => q.every(q2 => q2 === q.reverse().join(''));\n\n/*\n  Write a function that returns true if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  let diff = max - min;\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] + diff);\n  }\n  return newArr;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  if (len1 === 1) return lst1\n  if (len2 === 1) return lst2\n  const result = []\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p < a)\n  const divisors = primeNumbers.filter((p) => a % p === 0)\n  return prime.length === divisors.length\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const xInt = x % n;\n  const xIntInt = xInt % n;\n  return xIntInt === 0;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube2 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube3 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube4 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube5 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube6 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a perfect cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> true\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube7 = (a) => {\n  return (a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0 && a % 1 === 0)\n}\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.split('');\n  const key = [];\n  for (let i = 0; i < hex.length; i++) {\n    const hexDigit = hex[i];\n    if (hexDigit === 'A' || hexDigit === 'B' || hexDigit === 'C' || hexDigit === 'D' || hexDigit === 'E' || hexDigit === 'F') {\n      key.push(hexDigit);\n    }\n  }\n  return key.length;\n};\n\nconst isPrime = (num) => {\n  const key = hexKey(num);\n  const prime = (key === 2 || key === 3 || key === 5 || key === 7 || key === 11 || key === 13 || key === 17);\n  return prime;\n};\n\nconst primeNumbers = (num) => {\n  const key = hexKey(num);\n  const primeNumbers = [];\n  for (let i = 2; i < key; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst main = (num) => {\n  const primeNumbers = primeNumbers(num);\n  const primeNumbersLength = primeNumbers.length;\n  const primeNumbersSum = primeNumbers.reduce((prev, curr) => prev + curr, 0);\n  const primeNumbersSumLength = primeNumbersSum.toString().length;\n  const primeNumbersSumLengthHex = primeNumbersSum.toString(16).length;\n  const primeNumbersSumLengthDecimal = primeNumbersSum.toString().replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum.toString(16).replace(/^0+/, '').length;\n  const primeNumbersSumLengthDecimalHex = primeNumbersSum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  let decimal = decimal\n  while (decimal > 0) {\n    binary += (decimal & 1)? '1' : '0'\n    decimal = decimal >> 1\n  }\n  return 'db' + binary + 'db'\n}\n\n/*\n  Converts a binary string to decimal format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db') # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary2 = (decimal) => {\n  const binary = ''\n  let decimal = decimal\n  while (decimal > 0) {\n    binary += (decimal & 1)? '1' : '0'\n    decimal = decimal >> 1\n  }\n  return binary\n}\n\n/*\n  Converts a binary string to decimal format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db') # returns 32\n  */\nconst binaryToDecimal2 = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary3 = (decimal) => {\n  const binary = ''\n  let decimal = decimal\n  while (decimal > 0) {\n    binary += (decimal & 1)? '1' : '0'\n    decimal = decimal >> 1\n  }\n  return binary\n}\n\n/*\n  Converts a binary string to decimal format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db') # returns 32\n  */\nconst binaryToDecimal3 = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary4 = (decimal) => {\n  const binary = ''\n  let decimal = decimal\n  while (decimal > 0) {\n    binary += (decimal & 1)? '1' : '0'\n    decimal = decimal >> 1\n  }\n  return binary\n}\n\n/*\n  Converts a binary string to decimal format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db') # returns 32\n  */\nconst binaryToDecimal4 = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary5 = (decimal) => {\n  const binary = ''\n  let decimal = decimal\n  while (decimal > 0) {\n    binary += (decimal & 1)? '1' : '0'\n    decimal = decimal >> 1\n  }\n  return binary\n}\n\n/*\n  Converts a binary string to decimal format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db') # returns 32\n  */\nconst binaryToDecimal5 = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary6 = (decimal) => {\n  const binary = ''\n  let decimal = decimal\n  while (decimal > 0) {\n    binary += (decimal & 1)? '1' : '0'\n    decimal = decimal >> 1\n  }\n  return binary\n}\n\n/*\n  Converts a binary string to decimal format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db') # returns 32\n  */\nconst binaryToDecimal6 = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and the product of all the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  >>> sumProduct([1, 2, 3, 4, 5])\n  [(10, 24), (15, 120), (20, 240), (25, 600)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600), (70, 2800)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600), (70, 2800), (75, 3000)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600), (70, 2800), (75, 3000), (80, 3200)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600), (70, 2800), (75, 3000), (80, 3200), (85, 3300)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600), (70, 2800), (75, 3000), (80, 3200), (85, 3300), (90, 3600)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [(10, 24), (15, 120), (20, 240), (25, 600), (30, 900), (35, 1200), (40, 1600), (45, 1800), (50, 2000), (55, 2200), (60, 2400), (65, 2600), (70, 2800), (75, 3000), (80, 3200), (85, 3300), (90, 3600), (95, 3900)]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [(10, 24), (15, 120), (20, 240), (25", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let sum = 0;\n    for (let j = i; j < s.length; j++) {\n      sum += s[j] - s[i];\n    }\n    if (sum % 3 === 0) {\n      count++;\n    }\n  }\n  return count >= 3;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  const gradesLength = sorted.length;\n  const gradesLengthHalf = gradesLength / 2;\n  const gradesLengthQuarter = gradesLength / 4;\n  const gradesLengthThird = gradesLength / 3;\n  const gradesLengthLast = gradesLength - gradesLengthQuarter;\n\n  const gradesHalf = sorted.slice(0, gradesLengthHalf);\n  const gradesQuarter = sorted.slice(gradesLengthHalf, gradesLengthQuarter);\n  const gradesThird = sorted.slice(gradesLengthQuarter, gradesLengthThird);\n  const gradesLast = sorted.slice(gradesLengthThird, gradesLengthLast);\n\n  const gradesHalfLength = gradesHalf.length;\n  const gradesQuarterLength = gradesQuarter.length;\n  const gradesThirdLength = gradesThird.length;\n  const gradesLastLength = gradesLast.length;\n\n  const gradesHalfLengthHalf = gradesHalfLength / 2;\n  const gradesQuarterLengthHalf = gradesQuarterLength / 2;\n  const gradesThirdLengthHalf = gradesThirdLength / 2;\n  const gradesLastLengthHalf = gradesLastLength / 2;\n\n  const gradesHalfHalf = gradesHalf.slice(0, gradesHalfLengthHalf);\n  const gradesQuarterHalf = gradesQuarter.slice(0, gradesQuarterLengthHalf);\n  const gradesThirdHalf = gradesThird.slice(0, gradesThirdLengthHalf);\n  const gradesLastHalf = gradesLast.slice(0, gradesLastLengthHalf);\n\n  const gradesHalfHalfLength = gradesHalfHalf.length;\n  const gradesQuarterHalfLength = gradesQuarterHalf.length;\n  const gradesThirdHalfLength = gradesThirdHalf.length;\n  const gradesLastHalfLength = gradesLastHalf.length;\n\n  const gradesHalfHalfHalf = gradesHalfHalf.slice(0, gradesHalfHalfLength);\n  const gradesQuarterHalfHalf = gradesQuarterHalf.slice(0, gradesQuarterHalfLength);\n  const gradesThirdHalfHalf = gradesThirdHalf.slice(0, gradesThirdHalfLength);\n  const gradesLastHalfHalf = gradesLastHalf.slice(0, gradesLastHalfLength);\n\n  const gradesHalfHalfHalfLength = gradesHalfHalfHalf.length;\n  const gradesQuarterHalfHalfLength = gradesQuarterHalfHalf.length;\n  const gradesThirdHalfHalfLength = gradesThirdHalfHalf.length;\n  const gradesLastHalfHalfLength = gradesLastHalfHalf.length;\n\n  const gradesHalfHalfHalfHalf = gradesHalfHalfHalf.slice(0, gradesHalfHalfHalfLength);\n  const gradesQuarterHalfHalfHalf = gradesQuarterHalfHalfHalf.slice(0, gradesQuarterHalfHalfLength);\n  const gradesThirdHalfHalfHalf = gradesThirdHalfHalfHalf.slice(0, gradesThirdHalfHalfLength);\n  const gradesLastHalfHalfHalf = gradesLastHalfHalfHalf.slice(0, gradesLastHalfHalfLength);\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQuarterHalfHalfHalfLength = gradesQuarterHalfHalfHalf.length;\n  const gradesThirdHalfHalfHalfLength = gradesThirdHalfHalfHalf.length;\n  const gradesLastHalfHalfHalfLength = gradesLastHalfHalfHalf.length;\n\n  const gradesHalfHalfHalfHalfLength = gradesHalfHalfHalfHalf.length;\n  const gradesQu", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number.length > 1;\n  };\n  const isNotPrime = (number) => {\n    return!isPrime(number);\n  };\n  const isPrimeLength = (string, length) => {\n    return isPrime(string.length) && string.length === length;\n  };\n  return string.length > 1 && isPrimeLength(string, string.length);\n};\n\n/*\n  isPrime is a function that takes a number and returns true if the number is a prime or otherwise wrong\n  Examples\n  isPrime(2) == true\n  isPrime(3) == true\n  isPrime(4) == true\n  isPrime(5) == false\n  isPrime(6) == false\n  isPrime(7) == false\n  isPrime(8) == true\n  isPrime(9) == false\n  isPrime(10) == false\n  isPrime(11) == false\n  isPrime(12) == true\n  isPrime(13) == false\n  isPrime(14) == false\n  isPrime(15) == false\n  isPrime(16) == true\n  isPrime(17) == false\n  isPrime(18) == false\n  isPrime(19) == false\n  isPrime(20) == true\n  isPrime(21) == false\n  isPrime(22) == false\n  isPrime(23) == false\n  isPrime(24) == true\n  isPrime(25) == false\n  isPrime(26) == false\n  isPrime(27) == false\n  isPrime(28) == true\n  isPrime(29) == false\n  isPrime(30) == false\n  isPrime(31) == false\n  isPrime(32) == true\n  isPrime(33) == false\n  isPrime(34) == false\n  isPrime(35) == false\n  isPrime(36) == true\n  isPrime(37) == false\n  isPrime(38) == false\n  isPrime(39) == false\n  isPrime(40) == true\n  isPrime(41) == false\n  isPrime(42) == false\n  isPrime(43) == false\n  isPrime(44) == true\n  isPrime(45) == false\n  isPrime(46) == false\n  isPrime(47) == false\n  isPrime(48) == true\n  isPrime(49) == false\n  isPrime(50) == false\n  isPrime(51) == false\n  isPrime(52) == true\n  isPrime(53) == false\n  isPrime(54) == false\n  isPrime(55) == false\n  isPrime(56) == true\n  isPrime(57) == false\n  isPrime(58) == false\n  isPrime(59) == false\n  isPrime(60) == true\n  isPrime(61) == false\n  isPrime(62) == false\n  isPrime(63) == false\n  isPrime(64) == true\n  isPrime(65) == false\n  isPrime(66) == false\n  isPrime(67) == false\n  isPrime(68) == true\n  isPrime(69) == false\n  isPrime(70) == false\n  isPrime(71) == false\n  isPrime(72) == true\n  isPrime(73) == false\n  isPrime(74) == false\n  isPrime(75) == false\n  isPrime(76) == true\n  isPrime(77) == false\n  isPrime(78) == false\n  isPrime(79) == false\n  isPrime(80) == true\n  isPrime(81) == false\n  isPrime(82) == false\n  isPrime(83) == false\n  isPrime(84) == true\n  isPrime(85) == false\n  isPrime(86) == false\n  isPrime(87) == false\n  isPrime(88) == true\n  isPrime(89) == false\n  isPrime(90) == false\n  isPrime(91) == false\n  isPrime(92) == true\n  isPrime(93) == false\n  isPrime(94) == false\n  isPrime(95) == false\n  isPrime(96) == true\n  isPrime(97) == false\n  isPrime(98) == false\n  isPrime(99) == false\n  isPrime(100) == true\n  isPrime(101) == false\n  isPrime(102) == false\n  isPrime(103) == false\n  isPrime(104) == true\n  isPrime(105) == false\n  isPrime(106) == false\n  isPrime(107) == false\n  isPrime(108) == true\n  isPrime(109) == false\n  isPrime(110) == false\n  isPrime(111) == false\n  isPrime(112) == true\n  isPrime(113) == false\n  isPrime(114) == false\n  isPrime(115) == false\n  isPrime(116) == true\n  isPrime(117) == false\n  isPrime(118) == false\n  isPrime(119) == false\n  isPrime(120) == true\n  isPrime(121) == false\n  isPrime(122) == false\n  isPrime(123) == false\n  isPrime(124) == true\n  isPrime(125) == false\n  isPrime(126) == false\n  isPrime(127) == false\n  isPrime(128) == true\n  isPrime(129) == false\n  isPrime(130) == false\n  isPrime(131) == false\n  isPrime(132) == true\n  isPrime(133) == false\n  isPrime(134) == false\n  isPrime(135) == false\n  isPrime(136) == true\n  isPrime(137) == false\n  isPrime(138) == false\n  isPrime(139) == false\n  isPrime(140) == true\n  isPrime(141) == false\n  isPrime(142) == false\n  isPrime(143) == false\n  isPrime(144) == true\n  isPrime(145) == false\n  isPrime(146) == false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds2 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds3 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds4 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds5 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds6 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds7 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds8 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds9 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds10 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds11 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds12 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds13 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }\n    return starts + ends;\n  }\n  // @expect 2\n  const startsTwoEnds14 = (n) = > {\n    let starts = 0;\n    let ends = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        starts++;\n      }\n      if (i % 10 === 9) {\n        ends++;\n      }\n    }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => {\n    return Math.pow(2, digit);\n  });\n  const sum = digits.reduce((prev, curr) => prev + curr, 0);\n  return `${sum}`;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.charCodeAt(0)\n      const newWord += String.fromCharCode(newChar)\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  row.sort((a, b) => a - b)\n  col.sort((a, b) => b - a)\n  return [row, col]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice().sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 0) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  const maxLengthIndex = 0;\n  const maxLengthLength = 1;\n  const maxLengthLengthIndex = 0;\n  const maxLengthLengthLength = 1;\n  const maxLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n      maxLengthIndex = 0;\n      maxLengthLength = 1;\n      maxLengthLengthIndex = 0;\n      maxLengthLengthLength = 1;\n      maxLengthLengthLengthIndex = 0;\n      maxLengthLengthLengthLength = 1;\n      maxLengthLengthLengthLengthIndex = 0;\n    } else if (numbers[i] === max) {\n      maxLength++;\n      if (i > maxLengthIndex) {\n        maxLengthIndex = i;\n        maxLengthLength = 1;\n        maxLengthLengthIndex = 0;\n        maxLengthLengthLength = 1;\n        maxLengthLengthLengthIndex = 0;\n        maxLengthLengthLengthLength = 1;\n        maxLengthLengthLengthLengthIndex = 0;\n      }\n    }\n  }\n  return [max, maxIndex, maxLength, maxLengthIndex, maxLengthLength, maxLengthLengthIndex, maxLengthLengthLength, maxLengthLengthLengthIndex, maxLengthLengthLengthLength, maxLengthLengthLengthLengthIndex];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n*/\n\nfunction nextSmallest(lst) {\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n\nmodule.exports = nextSmallest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBoredSentence = S.split(\" \").filter(word => word.startsWith(\"I\")).length === 1\n  const isBoredOr = S.split(\" \").filter(word => word.startsWith(\"or\")).length === 1\n  return isBoredSentence && isBoredOr\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\n/*\n  Create a function that returns true if the number is odd.\n  Examples\n  odd(5) ➞ true\n  odd(2) ➞ false\n  odd(3) ➞ true\n  odd(4) ➞ false\n  */\nconst odd = x => x % 2 === 1;\n\n/*\n  Create a function that returns true if the number is even.\n  Examples\n  even(5) ➞ false\n  even(2) ➞ true\n  even(3) ➞ false\n  even(4) ➞ true\n  */\nconst even = x => x % 2 === 0;\n\n/*\n  Create a function that returns true if the number is prime.\n  Examples\n  prime(5) ➞ true\n  prime(2) ➞ false\n  prime(3) ➞ true\n  prime(4) ➞ false\n  prime(7) ➞ true\n  prime(8) ➞ false\n  prime(9) ➞ true\n  prime(10) ➞ false\n  prime(11) ➞ true\n  prime(12) ➞ false\n  prime(13) ➞ true\n  prime(14) ➞ false\n  prime(15) ➞ true\n  prime(16) ➞ false\n  prime(17) ➞ true\n  prime(18) ➞ false\n  prime(19) ➞ true\n  prime(20) ➞ false\n  prime(21) ➞ true\n  prime(22) ➞ false\n  prime(23) ➞ true\n  prime(24) ➞ false\n  prime(25) ➞ true\n  prime(26) ➞ false\n  prime(27) ➞ true\n  prime(28) ➞ false\n  prime(29) ➞ true\n  prime(30) ➞ false\n  prime(31) ➞ true\n  prime(32) ➞ false\n  prime(33) ➞ true\n  prime(34) ➞ false\n  prime(35) ➞ true\n  prime(36) ➞ false\n  prime(37) ➞ true\n  prime(38) ➞ false\n  prime(39) ➞ true\n  prime(40) ➞ false\n  prime(41) ➞ true\n  prime(42) ➞ false\n  prime(43) ➞ true\n  prime(44) ➞ false\n  prime(45) ➞ true\n  prime(46) ➞ false\n  prime(47) ➞ true\n  prime(48) ➞ false\n  prime(49) ➞ true\n  prime(50) ➞ false\n  prime(51) ➞ true\n  prime(52) ➞ false\n  prime(53) ➞ true\n  prime(54) ➞ false\n  prime(55) ➞ true\n  prime(56) ➞ false\n  prime(57) ➞ true\n  prime(58) ➞ false\n  prime(59) ➞ true\n  prime(60) ➞ false\n  prime(61) ➞ true\n  prime(62) ➞ false\n  prime(63) ➞ true\n  prime(64) ➞ false\n  prime(65) ➞ true\n  prime(66) ➞ false\n  prime(67) ➞ true\n  prime(68) ➞ false\n  prime(69) ➞ true\n  prime(70) ➞ false\n  prime(71) ➞ true\n  prime(72) ➞ false\n  prime(73) ➞ true\n  prime(74) ➞ false\n  prime(75) ➞ true\n  prime(76) ➞ false\n  prime(77) ➞ true\n  prime(78) ➞ false\n  prime(79) ➞ true\n  prime(80) ➞ false\n  prime(81) ➞ true\n  prime(82) ➞ false\n  prime(83) ➞ true\n  prime(84) ➞ false\n  prime(85) ➞ true\n  prime(86) ➞ false\n  prime(87) ➞ true\n  prime(88) ➞ false\n  prime(89) ➞ true\n  prime(90) ➞ false\n  prime(91) ➞ true\n  prime(92) ➞ false\n  prime(93) ➞ true\n  prime(94) ➞ false\n  prime(95) ➞ true\n  prime(96) ➞ false\n  prime(97) ➞ true\n  prime(98) ➞ false\n  prime(99) ➞ true\n  prime(100) ➞ false\n  prime(101) ➞ true\n  prime(102) ➞ false\n  prime(103) ➞ true\n  prime(104) ➞ false\n  prime(105) ➞ true\n  prime(106) ➞ false\n  prime(107) ➞ true\n  prime(108) ➞ false\n  prime(109) ➞ true\n  prime(110) ➞ false\n  prime(111) ➞ true\n  prime(112) ➞ false\n  prime(113) ➞ true\n  prime(114) ➞ false\n  prime(115) ➞ true\n  prime(116) ➞ false\n  prime(117) ➞ true\n  prime(118) ➞ false\n  prime(119) ➞ true\n  prime(120) ➞ false\n  prime(121) ➞ true\n  prime(122) ➞ false\n  prime(123) ➞ true\n  prime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toUpperCase();\n  const messageLength = message.length;\n  let encodedMessage = '';\n  let index = 0;\n  while (index < messageLength) {\n    if (message[index] === 'A') {\n      encodedMessage += 'T';\n    } else if (message[index] === 'E') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'I') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'O') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'U') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'N') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'C') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'G') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'M') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'R') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'P') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'T') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'W') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'Y') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'H') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'K') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'D') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'B') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'V') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'F') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'X') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'Z') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'S') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'R') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'Q') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'A') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'D') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'G') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'H') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'I') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'L') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'M') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'O') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'P') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'U') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'W') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'Y') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'K') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'X') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'B') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'N') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'R') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'F') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'C') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'V') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'Z') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'Q') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'J') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'P') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'O') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'N') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'M') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'L') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'I') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'H') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'G') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'F') {\n      encodedMessage += 'S';\n    } else if (message[index] === 'D') {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const sum = 0;\n  for (let i = 0; i < max; i++) {\n    sum += lst[i] % 10;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllLower = keys.every(key => key.toLowerCase() === key)\n  const isAllUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllLower || isAllUpper\n}\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllLower = keys.every(key => key.toLowerCase() === key)\n  const isAllUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllLower || isAllUpper\n}\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllLower = keys.every(key => key.toLowerCase() === key)\n  const isAllUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllLower || isAllUpper\n}\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllLower = keys.every(key => key.toLowerCase() === key)\n  const isAllUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllLower || isAllUpper\n}\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllLower = keys.every(key => key.toLowerCase() === key)\n  const isAllUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllLower || isAllUpper\n}\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers and returns the sum of their product.\n  Examples:\n  sum(1, 2) should return 3.\n  sum(1, 3) should return 6.\n  sum(1, 4) should return 10.\n  sum(2, 3) should return 6.\n  sum(2, 4) should return 8.\n  sum(3, 4) should return 9.\n  sum(3, 5) should return 12.\n  sum(4, 5) should return 15.\n  sum(4, 6) should return 18.\n  sum(5, 6) should return 21.\n  sum(5, 7) should return 24.\n  sum(6, 7) should return 27.\n  sum(6, 8) should return 30.\n  sum(7, 8) should return 33.\n  sum(7, 9) should return 36.\n  sum(8, 9) should return 39.\n  sum(8, 10) should return 42.\n  sum(9, 10) should return 45.\n  sum(9, 11) should return 48.\n  sum(10, 11) should return 51.\n  sum(10, 12) should return 54.\n  sum(11, 12) should return 57.\n  sum(11, 13) should return 60.\n  sum(12, 13) should return 63.\n  sum(12, 14) should return 66.\n  sum(13, 14) should return 69.\n  sum(13, 15) should return 72.\n  sum(14, 15) should return 75.\n  sum(14, 16) should return 78.\n  sum(15, 16) should return 81.\n  sum(15, 17) should return 84.\n  sum(16, 17) should return 87.\n  sum(16, 18) should return 90.\n  sum(17, 18) should return 93.\n  sum(17, 19) should return 96.\n  sum(18, 19) should return 99.\n  sum(18, 20) should return 102.\n  sum(19, 20) should return 105.\n  sum(19, 21) should return 108.\n  sum(20, 21) should return 111.\n  sum(20, 22) should return 114.\n  sum(21, 22) should return 117.\n  sum(21, 23) should return 120.\n  sum(22, 23) should return 123.\n  sum(22, 24) should return 126.\n  sum(23, 24) should return 129.\n  sum(23, 25) should return 132.\n  sum(24, 25) should return 135.\n  sum(24, 26) should return 138.\n  sum(25, 26) should return 141.\n  sum(25, 27) should return 144.\n  sum(26, 27) should return 147.\n  sum(26, 28) should return 150.\n  sum(27, 28) should return 153.\n  sum(27, 29) should return 156.\n  sum(28, 29) should return 159.\n  sum(28, 30) should return 162.\n  sum(29, 30) should return 165.\n  sum(29, 31) should return 168.\n  sum(30, 31) should return 171.\n  sum(30, 32) should return 174.\n  sum(31, 32) should return 177.\n  sum(31, 33) should return 180.\n  sum(32, 33) should return 183.\n  sum(32, 34) should return 186.\n  sum(33, 34) should return 189.\n  sum(33, 35) should return 192.\n  sum(34, 35) should return 195.\n  sum(34, 36) should return 198.\n  sum(35, 36) should return 201.\n  sum(35, 37) should return 204.\n  sum(36, 37) should return 207.\n  sum(36, 38) should return 210.\n  sum(37, 38) should return 213.\n  sum(37, 39) should return 216.\n  sum(38, 39) should return 219.\n  sum(38, 40) should return 222.\n  sum(39, 40) should return 225.\n  sum(39, 41) should return 228.\n  sum(40, 41) should return 231.\n  sum(40, 42) should return 234.\n  sum(41, 42) should return 237.\n  sum(41, 43) should return 240.\n  sum(42, 43) should return 243.\n  sum(42, 44) should return 246.\n  sum(43, 44) should return 249.\n  sum(43, 45) should return 252.\n  sum(44, 45) should return 255.\n  sum(44, 46) should return 258.\n  sum(45, 46) should return 261.\n  sum(45, 47) should return 264.\n  sum(46, 47) should return 265.\n  sum(46, 48) should return 268.\n  sum(47, 48) should return 271.\n  sum(47, 49) should return 274.\n  sum(48, 49) should return 276.\n  sum(48, 50) should return 279.\n  sum(49, 50) should return 282.\n  sum(49, 51) should return 285.\n  sum(50, 51) should return 288.\n  sum(50, 52) should return 291.\n  sum(51, 52) should return 294.\n  sum(51, 53) should return 297.\n  sum(52, 53) should return 300.\n  sum(52, 54) should return 303.\n  sum(53, 54) should return 306.\n  sum(53, 55) should return 309.\n  sum(54, 55) should return 312.\n  sum(54, 56) should return 315.\n  sum(55, 56) should return 318.\n  sum(55, 57) should return 321.\n  sum(56, 57) should return 324.\n  sum(56, 58) should return 327.\n  sum(57, 58", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of digits in even indexes is counted.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of non-alphanumeric characters in even indexes is counted.\n  \n  For example:\n  countNonAlphabetic('aBCdEf') returns 1\n  countNonAlphabetic('abcdefg') returns 0\n  countNonAlphabetic('dBBE') returns 0\n  */\nconst countNonAlphabetic = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of alphanumeric characters in even indexes is counted.\n  \n  For example:\n  countAlphabetic('aBCdEf') returns 1\n  countAlphabetic('abcdefg') returns 0\n  countAlphabetic('dBBE') returns 0\n  */\nconst countAlphabetic = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of whitespace characters in even indexes is counted.\n  \n  For example:\n  countWhitespace('aBCdEf') returns 1\n  countWhitespace('abcdefg') returns 0\n  countWhitespace('dBBE') returns 0\n  */\nconst countWhitespace = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of punctuation characters in even indexes is counted.\n  \n  For example:\n  countPunctuation('aBCdEf') returns 1\n  countPunctuation('abcdefg') returns 0\n  countPunctuation('dBBE') returns 0\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of symbols in even indexes is counted.\n  \n  For example:\n  countSymbols('aBCdEf') returns 1\n  countSymbols('abcdefg') returns 0\n  countSymbols('dBBE') returns 0\n  */\nconst countSymbols = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of symbols in even indexes is counted.\n  \n  For example:\n  countSymbols('aBCdEf') returns 1\n  countSymbols('abcdefg') returns 0\n  countSymbols('dBBE') returns 0\n  */\nconst countSymbols2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of symbols in even indexes is counted.\n  \n  For example:\n  countSymbols('aBCdEf') returns 1\n  countSymbols('abcdefg') returns 0\n  countSymbols('dBBE') returns 0\n  */\nconst countSymbols3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of symbols in even indexes is counted.\n  \n  For example:\n  countSymbols('aBCdEf') returns 1\n  countSymbols('abcdefg') returns 0\n  countSymbols('dBBE') returns 0\n  */\nconst countSymbols4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toString().length === 0) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(number) - Math.abs(Math.floor(number));\n  return number + (closest > 0? 1 : -1);\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
